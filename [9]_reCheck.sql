
if object_id('[dbo].[sp_accumulatedOT]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_accumulatedOT] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_accumulatedOT] @LoginID INT, @Month INT, @Year INT, @MaxOT FLOAT = 40.0, @isView BIT = 0, @isExcess BIT = 0
AS
BEGIN
	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	IF ISNULL(@MaxOT, 0) = 0
	BEGIN
		SET @MaxOT = 40.0
	END

	SELECT e.EmployeeID, FullName, d.DepartmentID, DepartmentName, p.PositionID, PositionName, HireDate, LastWorkingDate
	INTO #tmpEMP
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, '-1', @LoginID) e
	LEFT JOIN tblDepartment d ON e.DepartmentID = d.DepartmentID
	LEFT JOIN tblPosition p ON e.PositionID = p.PositionID

	DELETE #tmpEMP
	WHERE HireDate > @ToDate OR LastWorkingDate < @FromDate

	SELECT a.*
	INTO #tblAttendanceSummary
	FROM tblAttendanceSummary a
	INNER JOIN #tmpEMP t ON a.EmployeeID = t.EmployeeID
	WHERE Year = @Year AND Month = @Month

	SELECT ot.EmployeeID, ot.OTDate, ot.ApprovedHours, ot.OTKind, ots.ColumnDisplayName OTType, te.PeriodID
	INTO #OTList
	FROM tblOTList ot
	INNER JOIN #tblAttendanceSummary te ON ot.EmployeeID = te.EmployeeID AND ot.OTDate BETWEEN te.FromDate AND te.ToDate
	INNER JOIN tblOvertimeSetting ots ON ots.OTKind = ot.OTKind
	WHERE ot.OTDate BETWEEN @FromDate AND @ToDate AND ot.Approved = 1 AND ApprovedHours <> 0

	SELECT EmployeeID, SUM(ApprovedHours) AS ApprovedHours, OTKind, OTType, PeriodID
	INTO #tblOTSummary
	FROM #OTList
	GROUP BY EmployeeID, OTKind, OTType, PeriodID

	DELETE
	FROM #tmpEMP
	WHERE EmployeeID NOT IN (
			SELECT DISTINCT EmployeeID
			FROM #tblOTSummary
			)

	SELECT *
	INTO #tblOvertimeSetting
	FROM tblOvertimeSetting

	-- WHERE OTKind IN (
	-- 		SELECT DISTINCT OTKind
	-- 		FROM #tblOTSummary
	-- 		WHERE ISNULL(OTKind, '') <> ''
	-- 		)
	IF NOT EXISTS (
			SELECT *
			FROM #tblOTSummary
			)
	BEGIN
		RETURN
	END

	CREATE TABLE #SummaryData (STT INT, EmployeeID VARCHAR(20), FullName NVARCHAR(MAX), DepartmentName NVARCHAR(MAX), HireDate DATE, PeriodID INT)

	INSERT INTO #SummaryData (STT, EmployeeID, FullName, HireDate, DepartmentName, PeriodID)
	SELECT ROW_NUMBER() OVER (
			ORDER BY t.EmployeeID
			), t.EmployeeID, FullName, t.HireDate, ISNULL(DepartmentName, ''), PeriodID
	FROM #tmpEMP t
	INNER JOIN #tblAttendanceSummary a ON t.EmployeeID = a.EmployeeID

	DECLARE @Query NVARCHAR(MAX) = 'ALTER TABLE #SummaryData ADD '

	SELECT @Query += ISNULL(ColumnDisplayName, '') + '_Total DECIMAL(10, 2),' + ISNULL(ColumnDisplayName, '') + ' DECIMAL(10, 2),' + ISNULL(ColumnDisplayName, '') + '_ExcessOT DECIMAL(10, 2),'
	FROM #tblOvertimeSetting
	ORDER BY ColumnDisplayName ASC

	SELECT @Query += ' TotalOT DECIMAL(10, 2), TotalExcessOT DECIMAL(10, 2), TotalExcessOT_Raw DECIMAL(10, 2)'

	EXEC sp_executesql @Query

	SET @Query = ''

	SELECT @Query += N'UPDATE s SET [' + ISNULL(ColumnDisplayName, '') + '] = ISNULL(w.ApprovedHours, 0),
                                    [' + ISNULL(ColumnDisplayName, '') + '_Total] = ISNULL(w.ApprovedHours, 0)
                        FROM #SummaryData s
                        LEFT JOIN #tblOTSummary w ON s.EmployeeID = w.EmployeeID
                        WHERE w.OTType = ''' + ISNULL(ColumnDisplayName, '') + N''';'
	FROM #tblOvertimeSetting

	EXEC sp_executesql @Query

	UPDATE s
	SET TotalOT = ISNULL(a.SumOTHours, 0)
	FROM #SummaryData s
	INNER JOIN (
		SELECT EmployeeID, PeriodID, SUM(ApprovedHours) SumOTHours
		FROM #tblOTSummary
		GROUP BY EmployeeID, PeriodID
		) a ON a.EmployeeID = s.EmployeeID AND a.PeriodID = s.PeriodID

	-- Tạo bảng tạm lưu loại OT theo thứ tự
	DECLARE @OTTypes TABLE (ColumnDisplayName NVARCHAR(MAX), SortOrder INT IDENTITY(1, 1))

	INSERT INTO @OTTypes (ColumnDisplayName)
	SELECT ColumnDisplayName
	FROM #tblOvertimeSetting
	ORDER BY ColumnDisplayName DESC

	DECLARE @EmployeeID VARCHAR(20), @Type NVARCHAR(MAX), @CurrentHours DECIMAL(10, 2), @Remaining DECIMAL(10, 2)

	DECLARE emp_cursor CURSOR
	FOR
	SELECT DISTINCT EmployeeID
	FROM #SummaryData

	OPEN emp_cursor

	FETCH NEXT
	FROM emp_cursor
	INTO @EmployeeID

	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @Remaining = @MaxOT

		-- Lấy các dòng của nhân viên, sắp xếp theo PeriodID ASC
		DECLARE period_cursor CURSOR
		FOR
		SELECT PeriodID
		FROM #SummaryData
		WHERE EmployeeID = @EmployeeID
		ORDER BY PeriodID ASC

		DECLARE @PeriodID INT

		OPEN period_cursor

		FETCH NEXT
		FROM period_cursor
		INTO @PeriodID

		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE type_cursor CURSOR
			FOR
			SELECT ColumnDisplayName
			FROM @OTTypes
			ORDER BY SortOrder ASC

			OPEN type_cursor

			FETCH NEXT
			FROM type_cursor
			INTO @Type

			WHILE @@FETCH_STATUS = 0
			BEGIN
				-- Lấy số giờ OT hiện tại cho dòng này
				DECLARE @sql NVARCHAR(MAX), @val DECIMAL(10, 2)

				SET @sql = N'SELECT @val = ISNULL(' + QUOTENAME(@Type) + N', 0) FROM #SummaryData WHERE EmployeeID = @EmpID AND PeriodID = @PerID'

				EXEC sp_executesql @sql, N'@val DECIMAL(10,2) OUTPUT, @EmpID VARCHAR(20), @PerID INT', @val OUTPUT, @EmployeeID, @PeriodID

				SET @CurrentHours = @val

				IF @Remaining > 0
				BEGIN
					IF @CurrentHours <= @Remaining
					BEGIN
						SET @Remaining = @Remaining - @CurrentHours
					END
					ELSE
					BEGIN
						-- Gán tối đa @Remaining cho cột OT, phần còn lại sang ExcessOT
						SET @Query = N'UPDATE #SummaryData SET ' + QUOTENAME(@Type) + N' = @Rem, ' + QUOTENAME(@Type + '_ExcessOT') + N' = ISNULL(' + QUOTENAME(@Type + '_ExcessOT') + N', 0) + (@Curr - @Rem) WHERE EmployeeID = @Emp AND PeriodID = @PerID'

						EXEC sp_executesql @Query, N'@Rem DECIMAL(10,2), @Curr DECIMAL(10,2), @Emp VARCHAR(20), @PerID INT', @Rem = @Remaining, @Curr = @CurrentHours, @Emp = @EmployeeID, @PerID = @PeriodID

						SET @Remaining = 0
					END
				END
				ELSE
				BEGIN
					-- Chuyển toàn bộ sang ExcessOT và set OT = 0
					SET @Query = N'UPDATE #SummaryData SET ' + QUOTENAME(@Type) + N' = 0, ' + QUOTENAME(@Type + '_ExcessOT') + N' = ISNULL(' + QUOTENAME(@Type + '_ExcessOT') + N', 0) + @Curr WHERE EmployeeID = @Emp AND PeriodID = @PerID'

					EXEC sp_executesql @Query, N'@Curr DECIMAL(10,2), @Emp VARCHAR(20), @PerID INT', @Curr = @CurrentHours, @Emp = @EmployeeID, @PerID = @PeriodID
				END

				FETCH NEXT
				FROM type_cursor
				INTO @Type
			END

			CLOSE type_cursor

			DEALLOCATE type_cursor

			FETCH NEXT
			FROM period_cursor
			INTO @PeriodID
		END

		CLOSE period_cursor

		DEALLOCATE period_cursor

		FETCH NEXT
		FROM emp_cursor
		INTO @EmployeeID
	END

	CLOSE emp_cursor

	DEALLOCATE emp_cursor

	SET @Query = 'UPDATE #SummaryData SET TotalExcessOT = '

	SELECT @Query += N'ISNULL(' + ISNULL(ColumnDisplayName, '') + N'_ExcessOT * ' + CAST(OvValue / 100 AS VARCHAR(5)) + ', 0) + '
	FROM #tblOvertimeSetting

	SET @Query = LEFT(@Query, LEN(@Query) - 1) + ' '

	EXEC sp_executesql @Query

	-- SET @Query = 'ALTER TABLE tblAttendanceSummary ADD '
	-- SELECT @Query += ISNULL(ColumnDisplayName, '') + ' FLOAT,' + ISNULL(ColumnDisplayName, '') + '_ExcessOT FLOAT,'
	-- FROM tblOvertimeSetting
	-- ORDER BY ColumnDisplayName ASC
	-- SELECT @Query += ' TotalOT FLOAT, TaxableOT FLOAT, NontaxableOT FLOAT, TotalExcessOT FLOAT'
	-- EXEC sp_executesql @Query
	SET @Query = ''

	SELECT @Query += '
    UPDATE s SET  ' + ColumnDisplayName + ' = NULL
    FROM tblAttendanceSummary s
    WHERE s.Year = ' + CAST(@Year AS VARCHAR(4)) + ' AND s.Month = ' + CAST(@Month AS VARCHAR(2)) + ' AND ISNULL(s.DateStatus, 0) <> 3;
    UPDATE s SET  ' + ColumnDisplayName + ' = d.' + ColumnDisplayName + '
    FROM tblAttendanceSummary s
    LEFT JOIN #SummaryData d ON s.EmployeeID = d.EmployeeID
    WHERE s.Year = ' + CAST(@Year AS VARCHAR(4)) + ' AND s.Month = ' + CAST(@Month AS VARCHAR(2)) + ' AND ISNULL(s.DateStatus, 0) <> 3;
    UPDATE s SET  ' + ColumnDisplayName + '_ExcessOT = d.' + ColumnDisplayName + '_ExcessOT
    FROM tblAttendanceSummary s
    LEFT JOIN #SummaryData d ON s.EmployeeID = d.EmployeeID
    WHERE s.Year = ' + CAST(@Year AS VARCHAR(4)) + ' AND s.Month = ' + CAST(@Month AS VARCHAR(2)) + ' AND ISNULL(s.DateStatus, 0) <> 3;'
	FROM #tblOvertimeSetting

	EXEC sp_executesql @Query

	SET @Query = 'UPDATE tblAttendanceSummary SET TotalExcessOT = '

	SELECT @Query += N'ISNULL(d.' + ISNULL(ColumnDisplayName, '') + N'_ExcessOT * ' + CAST(OvValue / 100 AS VARCHAR(5)) + ', 0) + '
	FROM #tblOvertimeSetting

	SET @Query = LEFT(@Query, LEN(@Query) - 1) + ' FROM tblAttendanceSummary s
    INNER JOIN #SummaryData d ON s.EmployeeID = d.EmployeeID
    WHERE s.Year = ' + CAST(@Year AS VARCHAR(4)) + ' AND s.Month = ' + CAST(@Month AS VARCHAR(2)) + ';'

	EXEC sp_executesql @Query

	SET @Query = 'UPDATE #SummaryData SET TotalExcessOT_Raw = '

	SELECT @Query += N'ISNULL(d.' + ISNULL(ColumnDisplayName, '') + N'_ExcessOT, 0) + '
	FROM #tblOvertimeSetting

	SET @Query = LEFT(@Query, LEN(@Query) - 1) + ' FROM #SummaryData d
    INNER JOIN tblAttendanceSummary s ON s.EmployeeID = d.EmployeeID
    WHERE s.Year = ' + CAST(@Year AS VARCHAR(4)) + ' AND s.Month = ' + CAST(@Month AS VARCHAR(2)) + ';'

	EXEC sp_executesql @Query

	SET @Query = 'UPDATE tblAttendanceSummary SET TaxableOT = '

	SELECT @Query += N'ISNULL(d.' + ISNULL(ColumnDisplayName, '') + N', 0) + '
	FROM #tblOvertimeSetting

	SET @Query = LEFT(@Query, LEN(@Query) - 1) + ' FROM tblAttendanceSummary s
    INNER JOIN #SummaryData d ON s.EmployeeID = d.EmployeeID
    WHERE s.Year = ' + CAST(@Year AS VARCHAR(4)) + ' AND s.Month = ' + CAST(@Month AS VARCHAR(2)) + ';'

	EXEC sp_executesql @Query

	SET @Query = 'UPDATE tblAttendanceSummary SET NonTaxableOT = '

	SELECT @Query += N'ISNULL(d.' + ISNULL(ColumnDisplayName, '') + N' * ' + CAST((
				CASE
					WHEN 100 - OvValue < 0
						THEN 0
					ELSE (100 - OvValue)
					END
				) / 100 AS VARCHAR(5)) + N', 0) + '
	FROM #tblOvertimeSetting

	SET @Query = LEFT(@Query, LEN(@Query) - 1) + ' FROM tblAttendanceSummary s
    INNER JOIN #SummaryData d ON s.EmployeeID = d.EmployeeID
    WHERE s.Year = ' + CAST(@Year AS VARCHAR(4)) + ' AND s.Month = ' + CAST(@Month AS VARCHAR(2)) + ';'

	EXEC sp_executesql @Query

	IF ISNULL(@isView, '') = 0
		SELECT a.EmployeeID, d.FullName, d.DepartmentName, d.HireDate, d.TotalOT, d.TotalExcessOT, d.TotalExcessOT_Raw, a.[Month], a.[Year], a.PeriodID, d.OT1_Total, a.OT1, a.OT1_ExcessOT, d.OT2a_Total, a.OT2a, a.OT2a_ExcessOT, d.OT2b_Total, a.OT2b, a.OT2b_ExcessOT, d.OT3_Total, a.OT3, a.OT3_ExcessOT, d.OT4_Total, a.OT4, a.OT4_ExcessOT, d.OT5_Total, a.OT5, a.OT5_ExcessOT, d.OT6_Total, a.OT6, a.OT6_ExcessOT, d.OT7_Total, a.OT7, a.OT7_ExcessOT, a.DateStatus
		FROM tblAttendanceSummary a
		INNER JOIN #SummaryData d ON a.EmployeeID = d.EmployeeID
		WHERE a.Year = @Year AND a.Month = @Month AND (ISNULL(@isExcess, 0) = 0 OR (ISNULL(@isExcess, 0) = 1 AND d.TotalExcessOT > 0))
END
GO


IF OBJECT_ID('tempdb..#Paradise') IS NOT NULL DROP TABLE #Paradise

  create table #Paradise (
   [name] NVarChar(MAX) NULL 
 , [IsEncrypted] Bit NULL 
 , [type_desc] NVarChar(MAX) NULL 
 , [ss_ViewDependencyOBject] NVarChar(MAX) NULL 
)


 INSERT INTO #Paradise([name],[IsEncrypted],[type_desc],[ss_ViewDependencyOBject])
Select  N'sp_accumulatedOT' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'spChangeStatus' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'sp_validateTotalOT' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'sp_updateOTRemain_evtProc' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'TA_Status_List' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'tblAttendanceSummary' as [name],NULL as [IsEncrypted],N'USER_TABLE' as [type_desc],NULL as [ss_ViewDependencyOBject]
select * from #Paradise
GO

--#region tblDataSetting
IF OBJECT_ID('tempdb..#tblDataSetting') IS NOT NULL DROP TABLE #tblDataSetting
  create table #tblDataSetting (
   [TableName] NVarChar(MAX) NULL 
 , [ViewName] NVarChar(MAX) NULL 
 , [AllowAdd] Bit NULL 
 , [ReadOnlyColumns] NVarChar(MAX) NULL 
 , [ComboboxColumns] NVarChar(MAX) NULL 
 , [ColumnOrderBy] NVarChar(MAX) NULL 
 , [ColumnHide] NVarChar(MAX) NULL 
 , [ReadOnly] Bit NULL 
 , [TableEditorName] NVarChar(MAX) NULL 
 , [IsProcedure] Bit NULL 
 , [PaintColumns] NVarChar(MAX) NULL 
 , [FormatFontColumns] NVarChar(MAX) NULL 
 , [PaintRows] NVarChar(MAX) NULL 
 , [IsProcessForm] Bit NULL 
 , [IsShowLayout] Bit NULL 
 , [IsBatch] Bit NULL 
 , [LoadDataAfterShow] Bit NULL 
 , [GroupColumns] NVarChar(MAX) NULL 
 , [FixedColumns] NVarChar(MAX) NULL 
 , [ExportName] NVarChar(MAX) NULL 
 , [CheckLockAttStore] NVarChar(MAX) NULL 
 , [RptTemplate] NVarChar(MAX) NULL 
 , [spAction] NVarChar(MAX) NULL 
 , [DefaultValue] NVarChar(MAX) NULL 
 , [FilterColumn] NVarChar(MAX) NULL 
 , [IsEditForm] Bit NULL 
 , [ColumnEditSpecial] NVarChar(MAX) NULL 
 , [ColumnsFormatExtend] NVarChar(MAX) NULL 
 , [AllowDelete] Bit NULL 
 , [PaintCells] NVarChar(MAX) NULL 
 , [LayoutDataConfig] VarBinary(MAX) NULL 
 , [ColumnDataType] NVarChar(MAX) NULL 
 , [ProcBeforeSave] NVarChar(MAX) NULL 
 , [ProcAfterSave] NVarChar(MAX) NULL 
 , [IsLayoutParam] Bit NULL 
 , [ColumnSearch] NVarChar(MAX) NULL 
 , [AlwaysReloadColumn] Bit NULL 
 , [NotReloadAfterSave] Bit NULL 
 , [ColumnChangeEventProc] NVarChar(MAX) NULL 
 , [RowFontStyle] NVarChar(MAX) NULL 
 , [isWrapHeader] Bit NULL 
 , [ContextMenuIDs] NVarChar(MAX) NULL 
 , [ColumnNotLock] NVarChar(MAX) NULL 
 , [Import] NVarChar(MAX) NULL 
 , [ProcBeforeDelete] NVarChar(MAX) NULL 
 , [ProcAfterDelete] NVarChar(MAX) NULL 
 , [ConditionFormatting] VarBinary(MAX) NULL 
 , [ViewGridInShowLayout] Bit NULL 
 , [ShortcutsControl] NVarChar(MAX) NULL 
 , [LblMessage] NVarChar(MAX) NULL 
 , [MinWidthColumn] NVarChar(MAX) NULL 
 , [IsLayoutCommandButton] Bit NULL 
 , [LayoutDataConfigCrazy] VarBinary(MAX) NULL 
 , [NavigatorProcedure] NVarChar(MAX) NULL 
 , [ValidateRowConditions] NVarChar(MAX) NULL 
 , [ExecuteProcBeforeLoadData] NVarChar(MAX) NULL 
 , [LayoutDataConfigWeb] VarBinary(MAX) NULL 
 , [LayoutDataConfigMobile] VarBinary(MAX) NULL 
 , [GridBandConfig] NVarChar(MAX) NULL 
 , [ControlStateProcedure] NVarChar(MAX) NULL 
 , [ValidationProcedures] NVarChar(MAX) NULL 
 , [ReadonlyCellCondition] NVarChar(MAX) NULL 
 , [ComboboxColumn_BackupForTransfer] NVarChar(MAX) NULL 
 , [IsOpenSubForm] Bit NULL 
 , [Validation] NVarChar(MAX) NULL 
 , [ControlHiddenInShowLayout] NVarChar(MAX) NULL 
 , [IgnoreColumnOrder] Bit NULL 
 , [IgnoreLock] Bit NULL 
 , [ReadonlyCellCondition_Backup] NVarChar(MAX) NULL 
 , [SubDataSettingNames] NVarChar(MAX) NULL 
 , [IsViewReportForm] Bit NULL 
 , [ExportSeparateButton] Bit NULL 
 , [HashLayoutConfig] NVarChar(MAX) NULL 
 , [LayoutDataConfigFillter] VarBinary(MAX) NULL 
 , [LayoutParamConfig] VarBinary(MAX) NULL 
 , [OpenFormLink] NVarChar(MAX) NULL 
 , [SaveTableByBulk] NVarChar(MAX) NULL 
 , [IsNotPaintSaturday] Bit NULL 
 , [IsNotPaintSunday] Bit NULL 
 , [IsViewWeekName] Bit NULL 
 , [IgnoreCheckEECode] Bit NULL 
 , [ParadiseCommand] Int NULL 
 , [Labels] NVarChar(MAX) NULL 
 , [ColumnHideExport] NVarChar(MAX) NULL 
 , [ColumnWidthCalcData] Bit NULL 
 , [HideHeaderFilterButton] Bit NULL 
 , [HideColumnGrid] Bit NULL 
 , [TypeGrid] Int NULL 
 , [ProcBeforeAdd] NVarChar(MAX) NULL 
 , [ProcAfterAdd] NVarChar(MAX) NULL 
 , [ExecuteProcAfterLoadData] NVarChar(MAX) NULL 
 , [LayoutDataConfigColumnView] VarBinary(MAX) NULL 
 , [LayoutDataConfigCardView] VarBinary(MAX) NULL 
 , [HideFooter] Int NULL 
 , [IsFilterBox] Bit NULL 
 , [GetDefaultParamFromDB] Bit NULL 
 , [TaskTimeLine] Int NULL 
 , [HtmlCell] Int NULL 
 , [MinPageSizeGrid] Int NULL 
 , [ClickHereToAddNew] Int NULL 
 , [IgnoreQuestion] Bit NULL 
 , [FormLayoutJS] Int NULL 
 , [CheckBoxText] Int NULL 
 , [ColumnHideMobile] NVarChar(MAX) NULL 
 , [LayoutMobileLocalConfig] VarBinary(MAX) NULL 
 , [ViewMode] Int NULL 
 , [Mode] Int NULL 
 , [Template] NVarChar(MAX) NULL 
 , [NotResizeImage] Int NULL 
 , [DeleteOneRowReloadData] Int NULL 
 , [AutoHeightGrid] Bit NULL 
 , [ProcFileName] NVarChar(MAX) NULL 
 , [HeightImagePercentHeightFont] Float NULL 
 , [ColumnMinWidthPercent] NVarChar(MAX) NULL 
 , [GridViewAutoAddRow] Int NULL 
 , [GridViewNewItemRowPosition] Int NULL 
 , [LastColumnRemainingWidth] Int NULL 
 , [IsAutoSave] Bit NULL 
 , [VirtualColumn] NVarChar(MAX) NULL 
 , [GridTypeview] Int NULL 
 , [selectionMode] Int NULL 
 , [deleteMode] Int NULL 
 , [ClearDataBeforeLoadData] Int NULL 
 , [LockSort] Bit NULL 
 , [HightLightControlProc] NVarChar(MAX) NULL 
 , [ScriptInit0] NVarChar(MAX) NULL 
 , [ScriptInit1] NVarChar(MAX) NULL 
 , [ScriptInit2] NVarChar(MAX) NULL 
 , [ScriptInit3] NVarChar(MAX) NULL 
 , [ScriptInit4] NVarChar(MAX) NULL 
 , [ScriptInit5] NVarChar(MAX) NULL 
 , [ScriptInit6] NVarChar(MAX) NULL 
 , [ScriptInit7] NVarChar(MAX) NULL 
 , [ScriptInit8] NVarChar(MAX) NULL 
 , [ScriptInit9] NVarChar(MAX) NULL 
 , [FontSizeZoom0] Float NULL 
 , [FontSizeZoom1] Float NULL 
 , [FontSizeZoom2] Float NULL 
 , [FontSizeZoom3] Float NULL 
 , [FontSizeZoom4] Float NULL 
 , [FontSizeZoom5] Float NULL 
 , [FontSizeZoom6] Float NULL 
 , [FontSizeZoom7] Float NULL 
 , [FontSizeZoom8] Float NULL 
 , [FontSizeZoom9] Float NULL 
 , [NotBuildForm] Bit NULL 
 , [NotUseCancelButton] Bit NULL 
 , [GridUICompact] Float NULL 
 , [DisableFilterColumns] NVarChar(MAX) NULL 
 , [DisableFilterAll] Int NULL 
)

 INSERT INTO #tblDataSetting([TableName],[ViewName],[AllowAdd],[ReadOnlyColumns],[ComboboxColumns],[ColumnOrderBy],[ColumnHide],[ReadOnly],[TableEditorName],[IsProcedure],[PaintColumns],[FormatFontColumns],[PaintRows],[IsProcessForm],[IsShowLayout],[IsBatch],[LoadDataAfterShow],[GroupColumns],[FixedColumns],[ExportName],[CheckLockAttStore],[RptTemplate],[spAction],[DefaultValue],[FilterColumn],[IsEditForm],[ColumnEditSpecial],[ColumnsFormatExtend],[AllowDelete],[PaintCells],[LayoutDataConfig],[ColumnDataType],[ProcBeforeSave],[ProcAfterSave],[IsLayoutParam],[ColumnSearch],[AlwaysReloadColumn],[NotReloadAfterSave],[ColumnChangeEventProc],[RowFontStyle],[isWrapHeader],[ContextMenuIDs],[ColumnNotLock],[Import],[ProcBeforeDelete],[ProcAfterDelete],[ConditionFormatting],[ViewGridInShowLayout],[ShortcutsControl],[LblMessage],[MinWidthColumn],[IsLayoutCommandButton],[LayoutDataConfigCrazy],[NavigatorProcedure],[ValidateRowConditions],[ExecuteProcBeforeLoadData],[LayoutDataConfigWeb],[LayoutDataConfigMobile],[GridBandConfig],[ControlStateProcedure],[ValidationProcedures],[ReadonlyCellCondition],[ComboboxColumn_BackupForTransfer],[IsOpenSubForm],[Validation],[ControlHiddenInShowLayout],[IgnoreColumnOrder],[IgnoreLock],[ReadonlyCellCondition_Backup],[SubDataSettingNames],[IsViewReportForm],[ExportSeparateButton],[HashLayoutConfig],[LayoutDataConfigFillter],[LayoutParamConfig],[OpenFormLink],[SaveTableByBulk],[IsNotPaintSaturday],[IsNotPaintSunday],[IsViewWeekName],[IgnoreCheckEECode],[ParadiseCommand],[Labels],[ColumnHideExport],[ColumnWidthCalcData],[HideHeaderFilterButton],[HideColumnGrid],[TypeGrid],[ProcBeforeAdd],[ProcAfterAdd],[ExecuteProcAfterLoadData],[LayoutDataConfigColumnView],[LayoutDataConfigCardView],[HideFooter],[IsFilterBox],[GetDefaultParamFromDB],[TaskTimeLine],[HtmlCell],[MinPageSizeGrid],[ClickHereToAddNew],[IgnoreQuestion],[FormLayoutJS],[CheckBoxText],[ColumnHideMobile],[LayoutMobileLocalConfig],[ViewMode],[Mode],[Template],[NotResizeImage],[DeleteOneRowReloadData],[AutoHeightGrid],[ProcFileName],[HeightImagePercentHeightFont],[ColumnMinWidthPercent],[GridViewAutoAddRow],[GridViewNewItemRowPosition],[LastColumnRemainingWidth],[IsAutoSave],[VirtualColumn],[GridTypeview],[selectionMode],[deleteMode],[ClearDataBeforeLoadData],[LockSort],[HightLightControlProc],[ScriptInit0],[ScriptInit1],[ScriptInit2],[ScriptInit3],[ScriptInit4],[ScriptInit5],[ScriptInit6],[ScriptInit7],[ScriptInit8],[ScriptInit9],[FontSizeZoom0],[FontSizeZoom1],[FontSizeZoom2],[FontSizeZoom3],[FontSizeZoom4],[FontSizeZoom5],[FontSizeZoom6],[FontSizeZoom7],[FontSizeZoom8],[FontSizeZoom9],[NotBuildForm],[NotUseCancelButton],[GridUICompact],[DisableFilterColumns],[DisableFilterAll])
Select  N'sp_accumulatedot' as [TableName],N'sp_accumulatedot' as [ViewName],N'True' as [AllowAdd],N',TotalExcessOT,TotalOT,OT1,OT2a,OT2b,OT3,OT4,OT5,OT6,OT7' as [ReadOnlyColumns],N'' as [ComboboxColumns],N'EmployeeID&10,FullName&11,DepartmentName&12,HireDate&13,TotalOT&14,TotalExcessOT_Raw&15,TotalExcessOT&16,OT1_Total&17,OT1&18,OT1_ExcessOT&19,OT2a_Total&20,OT2a&21,OT2a_ExcessOT&22,OT2b_Total&23,OT2b&24,OT2b_ExcessOT&25,OT3_Total&26,OT3&27,OT3_ExcessOT&28,OT4_Total&29,OT4&30,OT4_ExcessOT&31,OT5_Total&32,OT5&33,OT5_ExcessOT&34,OT6_Total&35,OT6&36,OT6_ExcessOT&37,OT7_Total&38,OT7&39,OT7_ExcessOT&40,DateStatus&41,' as [ColumnOrderBy],N'PeriodID,isReadOnlyRow,dtftxxENGColumns,Month,Year' as [ColumnHide],N'False' as [ReadOnly],N'tblAttendanceSummary' as [TableEditorName],N'True' as [IsProcedure],N'' as [PaintColumns],N'' as [FormatFontColumns],N'' as [PaintRows],N'False' as [IsProcessForm],N'False' as [IsShowLayout],N'False' as [IsBatch],N'True' as [LoadDataAfterShow],N'' as [GroupColumns],N'EmployeeID,FullName,DepartmentName,HireDate,TotalOT,TotalExcessOT_Raw,TotalExcessOT' as [FixedColumns],N'' as [ExportName],N'' as [CheckLockAttStore],N'' as [RptTemplate],N'' as [spAction],N'' as [DefaultValue],N'' as [FilterColumn],N'False' as [IsEditForm],N'' as [ColumnEditSpecial],N'' as [ColumnsFormatExtend],N'True' as [AllowDelete],N'' as [PaintCells],as [LayoutDataConfig],N'' as [ColumnDataType],N'' as [ProcBeforeSave],N'' as [ProcAfterSave],N'False' as [IsLayoutParam],N'' as [ColumnSearch],N'False' as [AlwaysReloadColumn],N'False' as [NotReloadAfterSave],N'OT1,OT1_ExcessOT,OT2a,OT2a_ExcessOT,OT2b,OT2b_ExcessOT,OT3,OT3_ExcessOT,OT4,OT4_ExcessOT,OT5,OT5_ExcessOT,OT6,OT6_ExcessOT,OT7,OT7_ExcessOT&spChangeStatus|OT1,OT1_ExcessOT,OT2a,OT2a_ExcessOT,OT2b,OT2b_ExcessOT,OT3,OT3_ExcessOT,OT4,OT4_ExcessOT,OT5,OT5_ExcessOT,OT6,OT6_ExcessOT,OT7,OT7_ExcessOT&sp_updateOTRemain_evtProc' as [ColumnChangeEventProc],N'' as [RowFontStyle],N'False' as [isWrapHeader],N'' as [ContextMenuIDs],N'' as [ColumnNotLock],N'' as [Import],N'' as [ProcBeforeDelete],N'' as [ProcAfterDelete],0x1F8B08000000000004008D93D14AC3301486EF05DF2164B7C32D9B82176D51A7434114B63905F1E2D01D5C58DA84249DD657F3C247DA2B98AC0E6BDB496F427272BE3FE7FC49369F5FC193D53045CD41F00FD4648DDA709986941DF52901A5048FC16E23738E6F343A3C2024505A2AD43627292418D2CE2DE432B3F382A5A4F75FD63406816388ADD4343A63DD47BEB0CB90B9D935F2D7A50D59D0DB918D3A63A913B0934CA0A1849B15E621B53A434AD6203297C08A2AEBE48DC5847926CD84D84165851FAE4E9E3B23F2999C48E780CFAC94D884DCB9914645B1FD16F9BEA159AE1CD329A0914C17DC5BEF77AEDE9546E3ED6D29D5AACD3AFA7B0E8D9E2FC1E2D482CDCC0B09C9B0E1E446A71034A471DB0AEA12F7CA776D5AF3758507831710AF4652F847B6E7C2B6E09E7045AF2436381976C96078EC0676DAEC48C3055543D5275E5E06BDBF7F32FA067725BDA8A7030000 as [ConditionFormatting],N'False' as [ViewGridInShowLayout],N'' as [ShortcutsControl],N'' as [LblMessage],N'TotalExcessOTFIX&115,TotalExcessOT_RawFIX&82,EmployeeIDFIX&72,TotalOTFIX&63,HireDateFIX&90,DepartmentNameFIX&55,FullNameFIX&194' as [MinWidthColumn],N'True' as [IsLayoutCommandButton],NULL as [LayoutDataConfigCrazy],N'' as [NavigatorProcedure],N'' as [ValidateRowConditions],N'' as [ExecuteProcBeforeLoadData],NULL as [LayoutDataConfigWeb],NULL as [LayoutDataConfigMobile],N'' as [GridBandConfig],N'' as [ControlStateProcedure],N'' as [ValidationProcedures],N'' as [ReadonlyCellCondition],N'' as [ComboboxColumn_BackupForTransfer],N'False' as [IsOpenSubForm],N'OT1_ExcessOT,OT2a_ExcessOT,OT2b_ExcessOT,OT3_ExcessOT,OT4_ExcessOT,OT5_ExcessOT,OT6_ExcessOT,OT7_ExcessOT&sp_validateTotalOT' as [Validation],N'btnFWAdd,btnFWDelete,ckb@isView,txt@MaxOT' as [ControlHiddenInShowLayout],N'False' as [IgnoreColumnOrder],N'False' as [IgnoreLock],N'' as [ReadonlyCellCondition_Backup],N'' as [SubDataSettingNames],N'False' as [IsViewReportForm],N'False' as [ExportSeparateButton],N'' as [HashLayoutConfig],NULL as [LayoutDataConfigFillter],NULL as [LayoutParamConfig],N'' as [OpenFormLink],N'' as [SaveTableByBulk],N'False' as [IsNotPaintSaturday],N'False' as [IsNotPaintSunday],N'False' as [IsViewWeekName],N'False' as [IgnoreCheckEECode],N'0' as [ParadiseCommand],N'' as [Labels],N'' as [ColumnHideExport],N'False' as [ColumnWidthCalcData],N'False' as [HideHeaderFilterButton],N'False' as [HideColumnGrid],N'0' as [TypeGrid],N'' as [ProcBeforeAdd],N'' as [ProcAfterAdd],N'' as [ExecuteProcAfterLoadData],NULL as [LayoutDataConfigColumnView],NULL as [LayoutDataConfigCardView],N'0' as [HideFooter],N'False' as [IsFilterBox],N'False' as [GetDefaultParamFromDB],N'0' as [TaskTimeLine],N'0' as [HtmlCell],N'0' as [MinPageSizeGrid],N'0' as [ClickHereToAddNew],N'False' as [IgnoreQuestion],N'0' as [FormLayoutJS],N'0' as [CheckBoxText],N'' as [ColumnHideMobile],NULL as [LayoutMobileLocalConfig],N'0' as [ViewMode],N'0' as [Mode],N'' as [Template],N'0' as [NotResizeImage],N'0' as [DeleteOneRowReloadData],N'False' as [AutoHeightGrid],N'' as [ProcFileName],N'0' as [HeightImagePercentHeightFont],N'' as [ColumnMinWidthPercent],N'0' as [GridViewAutoAddRow],N'0' as [GridViewNewItemRowPosition],N'0' as [LastColumnRemainingWidth],N'False' as [IsAutoSave],N'' as [VirtualColumn],N'0' as [GridTypeview],N'0' as [selectionMode],N'0' as [deleteMode],N'0' as [ClearDataBeforeLoadData],N'False' as [LockSort],N'' as [HightLightControlProc],N'' as [ScriptInit0],N'' as [ScriptInit1],N'' as [ScriptInit2],N'' as [ScriptInit3],N'' as [ScriptInit4],N'' as [ScriptInit5],N'' as [ScriptInit6],N'' as [ScriptInit7],N'' as [ScriptInit8],N'' as [ScriptInit9],N'0' as [FontSizeZoom0],N'0' as [FontSizeZoom1],N'0' as [FontSizeZoom2],N'0' as [FontSizeZoom3],N'0' as [FontSizeZoom4],N'0' as [FontSizeZoom5],N'0' as [FontSizeZoom6],N'0' as [FontSizeZoom7],N'0' as [FontSizeZoom8],N'0' as [FontSizeZoom9],N'False' as [NotBuildForm],N'False' as [NotUseCancelButton],N'0' as [GridUICompact],N'' as [DisableFilterColumns],N'0' as [DisableFilterAll]

EXEC sp_SaveData  @TableNameTmp = '#tblDataSetting' , @TableName = 'tblDataSetting' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblDataSetting') IS NOT NULL DROP TABLE #tblDataSetting
--#endregion _
GO

--#region tblCommonColumnComboboxSigned
IF OBJECT_ID('tempdb..#tblCommonColumnComboboxSigned') IS NOT NULL DROP TABLE #tblCommonColumnComboboxSigned
  create table #tblCommonColumnComboboxSigned (
   [ColumnName] NVarChar(MAX) NULL 
 , [TableName] NVarChar(MAX) NULL 
 , [Remark] NVarChar(MAX) NULL 
 , [UseRadioGroup] NVarChar(MAX) NULL 
 , [UseOtherColumnDefine] NVarChar(MAX) NULL 
 , [IsMultiCheckSpecial] Bit NULL 
 , [CheckEditList] Int NULL 
)

 INSERT INTO #tblCommonColumnComboboxSigned([ColumnName],[TableName],[Remark],[UseRadioGroup],[UseOtherColumnDefine],[IsMultiCheckSpecial],[CheckEditList])
Select  N'DateStatus' as [ColumnName],N'sp_accumulatedOT' as [TableName],N'' as [Remark],N'0' as [UseRadioGroup],N'' as [UseOtherColumnDefine],N'False' as [IsMultiCheckSpecial],N'0' as [CheckEditList]

EXEC sp_SaveData  @TableNameTmp = '#tblCommonColumnComboboxSigned' , @TableName = 'tblCommonColumnComboboxSigned' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblCommonColumnComboboxSigned') IS NOT NULL DROP TABLE #tblCommonColumnComboboxSigned
--#endregion _
GO

--#region tblBandGridConfig
IF OBJECT_ID('tempdb..#tblBandGridConfig') IS NOT NULL DROP TABLE #tblBandGridConfig
  create table #tblBandGridConfig (
   [TableName] NVarChar(MAX) NULL 
 , [BandName] NVarChar(MAX) NULL 
 , [ColumnList] NVarChar(MAX) NULL 
 , [ForeColor_Hex] NVarChar(MAX) NULL 
 , [BackColor_Hex] NVarChar(MAX) NULL 
)

 INSERT INTO #tblBandGridConfig([TableName],[BandName],[ColumnList],[ForeColor_Hex],[BackColor_Hex])
Select  N'sp_accumulatedot' as [TableName],N'bandInner' as [BandName],N'DateStatus' as [ColumnList],NULL as [ForeColor_Hex],NULL as [BackColor_Hex] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'OT1 (150%)' as [BandName],N'OT1_Total,OT1,OT1_ExcessOT' as [ColumnList],NULL as [ForeColor_Hex],NULL as [BackColor_Hex] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'OT2a (200%)' as [BandName],N'OT2a_Total,OT2a,OT2a_ExcessOT' as [ColumnList],NULL as [ForeColor_Hex],NULL as [BackColor_Hex] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'OT2b (210%)' as [BandName],N'OT2b_Total,OT2b,OT2b_ExcessOT' as [ColumnList],NULL as [ForeColor_Hex],NULL as [BackColor_Hex] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'OT3 (200%)' as [BandName],N'OT3_Total,OT3,OT3_ExcessOT' as [ColumnList],NULL as [ForeColor_Hex],NULL as [BackColor_Hex] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'OT4 (270%)' as [BandName],N'OT4_Total,OT4,OT4_ExcessOT' as [ColumnList],NULL as [ForeColor_Hex],NULL as [BackColor_Hex] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'OT5 (100%)' as [BandName],N'OT5_Total,OT5,OT5_ExcessOT' as [ColumnList],NULL as [ForeColor_Hex],NULL as [BackColor_Hex] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'OT6 (300%)' as [BandName],N'OT6_Total,OT6,OT6_ExcessOT' as [ColumnList],NULL as [ForeColor_Hex],NULL as [BackColor_Hex] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'OT7 (390%)' as [BandName],N'OT7_Total,OT7,OT7_ExcessOT' as [ColumnList],NULL as [ForeColor_Hex],NULL as [BackColor_Hex]

EXEC sp_SaveData  @TableNameTmp = '#tblBandGridConfig' , @TableName = 'tblBandGridConfig' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblBandGridConfig') IS NOT NULL DROP TABLE #tblBandGridConfig
--#endregion _
GO

--#region tblCommonColumnCombobox
IF OBJECT_ID('tempdb..#tblCommonColumnCombobox') IS NOT NULL DROP TABLE #tblCommonColumnCombobox
  create table #tblCommonColumnCombobox (
   [ColumnName] NVarChar(MAX) NULL 
 , [Query] NVarChar(MAX) NULL 
 , [TableEditorName] NVarChar(MAX) NULL 
 , [IsMultiCheck] Bit NULL 
 , [IsDetailCombobox] Bit NULL 
 , [ReloadDataSourceOnReloadForm] Bit NULL 
 , [useAutoGenerateQuery] Bit NULL 
 , [DataOption] Int NULL 
 , [DataOptionPermanent] Bit NULL 
)

 INSERT INTO #tblCommonColumnCombobox([ColumnName],[Query],[TableEditorName],[IsMultiCheck],[IsDetailCombobox],[ReloadDataSourceOnReloadForm],[useAutoGenerateQuery],[DataOption],[DataOptionPermanent])
Select  N'DateStatus' as [ColumnName],N'TA_Status_List' as [Query],N'' as [TableEditorName],N'False' as [IsMultiCheck],N'False' as [IsDetailCombobox],N'False' as [ReloadDataSourceOnReloadForm],N'False' as [useAutoGenerateQuery],N'1' as [DataOption],N'False' as [DataOptionPermanent]

EXEC sp_SaveData  @TableNameTmp = '#tblCommonColumnCombobox' , @TableName = 'tblCommonColumnCombobox' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblCommonColumnCombobox') IS NOT NULL DROP TABLE #tblCommonColumnCombobox
--#endregion _
GO

--#region tblDataSettingLayout
IF OBJECT_ID('tempdb..#tblDataSettingLayout') IS NOT NULL DROP TABLE #tblDataSettingLayout
  create table #tblDataSettingLayout (
   [TableName] NVarChar(MAX) NULL 
 , [Name] NVarChar(MAX) NULL 
 , [ControlName] NVarChar(MAX) NULL 
 , [NamePa] NVarChar(MAX) NULL 
 , [TabbedGroupParentName] NVarChar(MAX) NULL 
 , [Type] NVarChar(MAX) NULL 
 , [Lx] Int NULL 
 , [Ly] Int NULL 
 , [Sx] Int NULL 
 , [Sy] Int NULL 
 , [ShowCaption] Int NULL 
 , [Padding] Int NULL 
 , [TextLocation] NVarChar(MAX) NULL 
 , [GroupBordersVisible] Int NULL 
 , [TypeLayout] NVarChar(MAX) NULL 
 , [Spacing] Int NULL 
 , [BackColor] NVarChar(MAX) NULL 
 , [ControlType] NVarChar(MAX) NULL 
 , [ColumnSpan] Int NULL 
 , [RowSpan] Int NULL 
 , [CaptionHorizontalAlign] NVarChar(MAX) NULL 
 , [CaptionVerticalAlign] NVarChar(MAX) NULL 
 , [WidthPercentage] Int NULL 
 , [FixMinSize] Bit NULL 
 , [AlignContent] NVarChar(MAX) NULL 
 , [BorderBottomColor] NVarChar(MAX) NULL 
 , [BorderBottomSize] NVarChar(MAX) NULL 
 , [BorderColor] NVarChar(MAX) NULL 
 , [BorderLeftColor] NVarChar(MAX) NULL 
 , [BorderLeftSize] NVarChar(MAX) NULL 
 , [BorderRightColor] NVarChar(MAX) NULL 
 , [BorderRightSize] NVarChar(MAX) NULL 
 , [BorderSize] NVarChar(MAX) NULL 
 , [BorderTopColor] NVarChar(MAX) NULL 
 , [BorderTopSize] NVarChar(MAX) NULL 
 , [BorderVisible] Bit NULL 
 , [ControlBackColor] NVarChar(MAX) NULL 
 , [ControlBorderBottomColor] NVarChar(MAX) NULL 
 , [ControlBorderBottomSize] NVarChar(MAX) NULL 
 , [ControlBorderColor] NVarChar(MAX) NULL 
 , [ControlBorderLeftColor] NVarChar(MAX) NULL 
 , [ControlBorderLeftSize] NVarChar(MAX) NULL 
 , [ControlBorderRightColor] NVarChar(MAX) NULL 
 , [ControlBorderRightSize] NVarChar(MAX) NULL 
 , [ControlBorderSize] NVarChar(MAX) NULL 
 , [ControlBorderTopColor] NVarChar(MAX) NULL 
 , [ControlBorderTopSize] NVarChar(MAX) NULL 
 , [ControlForeColor] NVarChar(MAX) NULL 
 , [ControlHorizontalAlign] NVarChar(MAX) NULL 
 , [ControlPadding] Int NULL 
 , [ControlVerticalAlign] NVarChar(MAX) NULL 
 , [FontSize] NVarChar(MAX) NULL 
 , [IconName] NVarChar(MAX) NULL 
 , [ItemBackColor] NVarChar(MAX) NULL 
 , [ItemBorderBottomColor] NVarChar(MAX) NULL 
 , [ItemBorderBottomSize] NVarChar(MAX) NULL 
 , [ItemBorderColor] NVarChar(MAX) NULL 
 , [ItemBorderLeftColor] NVarChar(MAX) NULL 
 , [ItemBorderLeftSize] NVarChar(MAX) NULL 
 , [ItemBorderRightColor] NVarChar(MAX) NULL 
 , [ItemBorderRightSize] NVarChar(MAX) NULL 
 , [ItemBorderSize] NVarChar(MAX) NULL 
 , [ItemBorderTopColor] NVarChar(MAX) NULL 
 , [ItemBorderTopSize] NVarChar(MAX) NULL 
 , [ItemForeColor] NVarChar(MAX) NULL 
 , [ItemPadding] Int NULL 
 , [MinGridPageSize] Int NULL 
 , [NotClientVisible] Bit NULL 
 , [NullTextMessageID] NVarChar(MAX) NULL 
 , [FullPageEmpty] Bit NULL 
 , [PaddingTop] Int NULL 
 , [PaddingLeft] Int NULL 
 , [PaddingBottom] Int NULL 
 , [PaddingRight] Int NULL 
 , [ControlCellPadding] Int NULL 
 , [MaxWidth] Float NULL 
 , [MinWidth] Float NULL 
 , [TabPageOrder] Int NULL 
 , [SelectedTabPageIndex] Int NULL 
 , [FixWidthClient] Int NULL 
 , [ErrorMessage] NVarChar(MAX) NULL 
 , [borderRadius] NVarChar(MAX) NULL 
 , [boxShadow] NVarChar(MAX) NULL 
 , [IsValidation] Bit NULL 
 , [HorizontalAlign] NVarChar(MAX) NULL 
 , [maxHeight] Int NULL 
 , [TextAlignMode] Int NULL 
 , [minHeight] Int NULL 
 , [HeightPercentageClient] Float NULL 
 , [ControlBorderRadius] NVarChar(MAX) NULL 
 , [ControlBoxShadow] NVarChar(MAX) NULL 
 , [ControlPaddingBottom] Float NULL 
 , [ControlPaddingLeft] Float NULL 
 , [ControlPaddingRight] Float NULL 
 , [ControlPaddingTop] Float NULL 
 , [ForeColor] NVarChar(MAX) NULL 
 , [CaptionWrap] Int NULL 
 , [LocationID] Int NULL 
 , [ContainerType] Int NULL 
 , [ControlNoBorder] Bit NULL 
 , [BackgroundImage] VarBinary(MAX) NULL 
 , [labelMode] Int NULL 
 , [selectionMode] Int NULL 
 , [deleteMode] Int NULL 
)

 INSERT INTO #tblDataSettingLayout([TableName],[Name],[ControlName],[NamePa],[TabbedGroupParentName],[Type],[Lx],[Ly],[Sx],[Sy],[ShowCaption],[Padding],[TextLocation],[GroupBordersVisible],[TypeLayout],[Spacing],[BackColor],[ControlType],[ColumnSpan],[RowSpan],[CaptionHorizontalAlign],[CaptionVerticalAlign],[WidthPercentage],[FixMinSize],[AlignContent],[BorderBottomColor],[BorderBottomSize],[BorderColor],[BorderLeftColor],[BorderLeftSize],[BorderRightColor],[BorderRightSize],[BorderSize],[BorderTopColor],[BorderTopSize],[BorderVisible],[ControlBackColor],[ControlBorderBottomColor],[ControlBorderBottomSize],[ControlBorderColor],[ControlBorderLeftColor],[ControlBorderLeftSize],[ControlBorderRightColor],[ControlBorderRightSize],[ControlBorderSize],[ControlBorderTopColor],[ControlBorderTopSize],[ControlForeColor],[ControlHorizontalAlign],[ControlPadding],[ControlVerticalAlign],[FontSize],[IconName],[ItemBackColor],[ItemBorderBottomColor],[ItemBorderBottomSize],[ItemBorderColor],[ItemBorderLeftColor],[ItemBorderLeftSize],[ItemBorderRightColor],[ItemBorderRightSize],[ItemBorderSize],[ItemBorderTopColor],[ItemBorderTopSize],[ItemForeColor],[ItemPadding],[MinGridPageSize],[NotClientVisible],[NullTextMessageID],[FullPageEmpty],[PaddingTop],[PaddingLeft],[PaddingBottom],[PaddingRight],[ControlCellPadding],[MaxWidth],[MinWidth],[TabPageOrder],[SelectedTabPageIndex],[FixWidthClient],[ErrorMessage],[borderRadius],[boxShadow],[IsValidation],[HorizontalAlign],[maxHeight],[TextAlignMode],[minHeight],[HeightPercentageClient],[ControlBorderRadius],[ControlBoxShadow],[ControlPaddingBottom],[ControlPaddingLeft],[ControlPaddingRight],[ControlPaddingTop],[ForeColor],[CaptionWrap],[LocationID],[ContainerType],[ControlNoBorder],[BackgroundImage],[labelMode],[selectionMode],[deleteMode])
Select  N'sp_accumulatedot' as [TableName],N'btnexport' as [Name],N'btnexport' as [ControlName],N'plg_fwcommand' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'1200' as [Lx],N'0' as [Ly],N'178' as [Sx],N'67' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'14' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'-13395661' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'-1' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'Export' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'btnfwreset' as [Name],N'btnfwreset' as [ControlName],N'plg_fwcommand' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'871' as [Lx],N'26' as [Ly],N'147' as [Sx],N'41' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'10' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],NULL as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],NULL as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],NULL as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],N'0' as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'btnfwsave' as [Name],N'btnfwsave' as [ControlName],N'plg_fwcommand' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'1018' as [Lx],N'26' as [Ly],N'182' as [Sx],N'41' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'50' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],NULL as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],NULL as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],NULL as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],N'0' as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'item1' as [Name],N'' as [ControlName],N'plg_fwcommand' as [NamePa],N'' as [TabbedGroupParentName],N'g' as [Type],N'0' as [Lx],N'0' as [Ly],N'314' as [Sx],N'67' as [Sy],N'0' as [ShowCaption],N'5' as [Padding],N'Top' as [TextLocation],N'1' as [GroupBordersVisible],N'6' as [TypeLayout],N'1' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'22' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],NULL as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],NULL as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],NULL as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'5' as [PaddingTop],N'5' as [PaddingLeft],N'5' as [PaddingBottom],N'5' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],N'-1' as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],NULL as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'item2' as [Name],N'' as [ControlName],N'plg_fwcommand' as [NamePa],N'' as [TabbedGroupParentName],N'' as [Type],N'314' as [Lx],N'26' as [Ly],N'278' as [Sx],N'41' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'20' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],NULL as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],NULL as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],NULL as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],N'0' as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'lbl@isexcess' as [Name],N'ckb@isexcess' as [ControlName],N'plg_fwcommand' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'592' as [Lx],N'26' as [Ly],N'279' as [Sx],N'41' as [Sy],N'0' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'ParadiseCheckEdit' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'20' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],NULL as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],NULL as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],NULL as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],N'0' as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'lbl@month' as [Name],N'cbx@month' as [ControlName],N'item1' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'135' as [Lx],N'0' as [Ly],N'165' as [Sx],N'26' as [Sy],N'1' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'58' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'1' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'lbl@year' as [Name],N'cbx@year' as [ControlName],N'item1' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'0' as [Ly],N'135' as [Sx],N'26' as [Sy],N'1' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'42' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'1' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'lblfilter' as [Name],N'txtfilter' as [ControlName],N'plg_fwcommand' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'314' as [Lx],N'0' as [Ly],N'886' as [Sx],N'26' as [Sy],N'1' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'PopupContainerEdit' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'64' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'lblreload' as [Name],N'btnreload' as [ControlName],N'item1' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'26' as [Ly],N'300' as [Sx],N'27' as [Sy],N'0' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'ParadiseSimpleButtonBase' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'-14838986' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'-1' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'lbltableeditor' as [Name],N'grdtableeditor' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'67' as [Ly],N'1378' as [Sx],N'742' as [Sy],N'0' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'GridControl' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'plg_fwcommand' as [Name],N'' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'g' as [Type],N'0' as [Lx],N'0' as [Ly],N'1378' as [Sx],N'67' as [Sy],N'0' as [ShowCaption],N'0' as [Padding],N'Top' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'0' as [PaddingTop],N'0' as [PaddingLeft],N'0' as [PaddingBottom],N'0' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'-1' as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],NULL as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_accumulatedot' as [TableName],N'root' as [Name],N'' as [ControlName],N'' as [NamePa],N'' as [TabbedGroupParentName],N'g' as [Type],N'0' as [Lx],N'0' as [Ly],N'1378' as [Sx],N'809' as [Sy],N'0' as [ShowCaption],N'0' as [Padding],N'Top' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'0' as [PaddingTop],N'0' as [PaddingLeft],N'0' as [PaddingBottom],N'0' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'-1' as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],NULL as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode]

DECLARE @sql VARCHAR(MAX) = 'TableName'+char(10)+'TypeLayout'
EXEC sp_SaveData  @TableNameTmp = '#tblDataSettingLayout' , @TableName = 'tblDataSettingLayout' , @Command = 'DeleteNot',@ColumnDeleteNot=@sql , @IsDropTableTmp =0,@IsPrint=0
EXEC sp_SaveData  @TableNameTmp = '#tblDataSettingLayout' , @TableName = 'tblDataSettingLayout' , @Command = 'insert,update', @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblDataSettingLayout') IS NOT NULL DROP TABLE #tblDataSettingLayout
--#endregion _
GO

--#region tblMD_Message
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message 
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
  create table #tblMD_Message (
   [MessageID] NVarChar(MAX) NULL 
 , [Language] NVarChar(MAX) NULL 
 , [Content] NVarChar(MAX) NULL 
 , [Frequency] BigInt NULL 
 , [IgnorePending] Bit NULL 
)

 INSERT INTO #tblMD_Message([MessageID],[Language],[Content],[Frequency],[IgnorePending])
Select  N'sp_accumulatedot.cbx@Month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.cbx@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.lbl@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.lbl@year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT1_ExcessOT' as [MessageID],N'EN' as [Language],N'OT1_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2b_ExcessOT' as [MessageID],N'EN' as [Language],N'OT2b_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT3_ExcessOT' as [MessageID],N'EN' as [Language],N'OT3_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT4_ExcessOT' as [MessageID],N'EN' as [Language],N'OT4_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT5_ExcessOT' as [MessageID],N'EN' as [Language],N'OT5_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.TotalExcessOT' as [MessageID],N'EN' as [Language],N'Total Excess OT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.ckb@isExcess' as [MessageID],N'VN' as [Language],N'Chỉ hiển thị CNV có OT vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.HireDate' as [MessageID],N'VN' as [Language],N'Ngày vào làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.item1' as [MessageID],N'VN' as [Language],N'item1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.item2' as [MessageID],N'VN' as [Language],N'item2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.lbl@isexcess' as [MessageID],N'VN' as [Language],N'Chỉ hiển thị CNV có OT vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT1' as [MessageID],N'VN' as [Language],N'OT1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT1_ExcessOT' as [MessageID],N'VN' as [Language],N'OT1 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT1_Total' as [MessageID],N'VN' as [Language],N'OT1_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2a' as [MessageID],N'VN' as [Language],N'OT2a' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2a_ExcessOT' as [MessageID],N'VN' as [Language],N'OT2a Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2a_Total' as [MessageID],N'VN' as [Language],N'OT2a_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2b' as [MessageID],N'VN' as [Language],N'OT2b' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2b_ExcessOT' as [MessageID],N'VN' as [Language],N'OT2b Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2b_Total' as [MessageID],N'VN' as [Language],N'OT2b_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT3' as [MessageID],N'VN' as [Language],N'OT3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT3_ExcessOT' as [MessageID],N'VN' as [Language],N'OT3 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT3_Total' as [MessageID],N'VN' as [Language],N'OT3_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT4' as [MessageID],N'VN' as [Language],N'OT4' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT4_ExcessOT' as [MessageID],N'VN' as [Language],N'OT4 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT4_Total' as [MessageID],N'VN' as [Language],N'OT4_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT5' as [MessageID],N'VN' as [Language],N'OT5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT5_ExcessOT' as [MessageID],N'VN' as [Language],N'OT5 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT5_Total' as [MessageID],N'VN' as [Language],N'OT5_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT6' as [MessageID],N'VN' as [Language],N'OT6' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT6_ExcessOT' as [MessageID],N'VN' as [Language],N'OT6 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT6_Total' as [MessageID],N'VN' as [Language],N'OT6_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT7' as [MessageID],N'VN' as [Language],N'OT7' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT7_ExcessOT' as [MessageID],N'VN' as [Language],N'OT7_ExcessOT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT7_Total' as [MessageID],N'VN' as [Language],N'OT7_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.TotalExcessOT' as [MessageID],N'VN' as [Language],N'Tổng OT Vượt 
(Quy đổi)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.TotalExcessOT_Raw' as [MessageID],N'VN' as [Language],N'Tổng OT Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.TotalOT' as [MessageID],N'VN' as [Language],N'Tổng OT' as [Content],NULL as [Frequency],NULL as [IgnorePending]
EXEC sp_SaveData  @TableNameTmp = '#tblMD_Message' , @TableName = 'tblMD_Message' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
--#endregion _
GO

--#region tblMD_Message
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message 
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
  create table #tblMD_Message (
   [MessageID] NVarChar(MAX) NULL 
 , [Language] NVarChar(MAX) NULL 
 , [Content] NVarChar(MAX) NULL 
 , [Frequency] BigInt NULL 
 , [IgnorePending] Bit NULL 
)

 INSERT INTO #tblMD_Message([MessageID],[Language],[Content],[Frequency],[IgnorePending])
Select  N'10' as [MessageID],N'EN' as [Language],N'Regional(area) allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'10' as [MessageID],N'VN' as [Language],N'Regional (area) allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'10.vldt' as [MessageID],N'EN' as [Language],N'10' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'10.vldt' as [MessageID],N'KR' as [Language],N'10' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'10.vldt' as [MessageID],N'VN' as [Language],N'10' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'11' as [MessageID],N'EN' as [Language],N'Incentive allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'11' as [MessageID],N'VN' as [Language],N'Incentive allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'11.vldt' as [MessageID],N'EN' as [Language],N'11' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'11.vldt' as [MessageID],N'KR' as [Language],N'11' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'11.vldt' as [MessageID],N'VN' as [Language],N'11' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'12' as [MessageID],N'EN' as [Language],N'Key process allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'12' as [MessageID],N'VN' as [Language],N'Key process allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'12.vldt' as [MessageID],N'EN' as [Language],N'12' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'12.vldt' as [MessageID],N'KR' as [Language],N'12' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'12.vldt' as [MessageID],N'VN' as [Language],N'12' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'13' as [MessageID],N'EN' as [Language],N'Bonus 6 month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'13' as [MessageID],N'VN' as [Language],N'Bonus 6 month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'13.vldt' as [MessageID],N'EN' as [Language],N'13' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'13.vldt' as [MessageID],N'KR' as [Language],N'13' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'13.vldt' as [MessageID],N'VN' as [Language],N'13' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'14' as [MessageID],N'EN' as [Language],N'Performance & Responsibility' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'14' as [MessageID],N'VN' as [Language],N'Performance & Responsibility' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'14.vldt' as [MessageID],N'EN' as [Language],N'14' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'14.vldt' as [MessageID],N'KR' as [Language],N'14' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'14.vldt' as [MessageID],N'VN' as [Language],N'14' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'15' as [MessageID],N'EN' as [Language],N'Bonus 6 month full attendance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'15' as [MessageID],N'VN' as [Language],N'Bonus 6 month full attendance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'15.vldt' as [MessageID],N'EN' as [Language],N'15' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'15.vldt' as [MessageID],N'KR' as [Language],N'15' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'15.vldt' as [MessageID],N'VN' as [Language],N'15' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16' as [MessageID],N'EN' as [Language],N'[Foreign] Meal allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16' as [MessageID],N'VN' as [Language],N'[Foreign] Meal allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16.vldt' as [MessageID],N'EN' as [Language],N'16' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16.vldt' as [MessageID],N'KR' as [Language],N'16' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16.vldt' as [MessageID],N'VN' as [Language],N'16' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17' as [MessageID],N'EN' as [Language],N'[Foreign] House allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17' as [MessageID],N'VN' as [Language],N'[Foreign] House allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17.vldt' as [MessageID],N'EN' as [Language],N'17' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17.vldt' as [MessageID],N'KR' as [Language],N'17' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17.vldt' as [MessageID],N'VN' as [Language],N'17' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18' as [MessageID],N'CN' as [Language],N'十八' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18' as [MessageID],N'EN' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18' as [MessageID],N'KR' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18' as [MessageID],N'VN' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18.vldt' as [MessageID],N'EN' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18.vldt' as [MessageID],N'KR' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18.vldt' as [MessageID],N'VN' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19' as [MessageID],N'CN' as [Language],N'十九' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19' as [MessageID],N'EN' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19' as [MessageID],N'KR' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19' as [MessageID],N'VN' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19.vldt' as [MessageID],N'EN' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19.vldt' as [MessageID],N'KR' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19.vldt' as [MessageID],N'VN' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20' as [MessageID],N'CN' as [Language],N'二十' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20' as [MessageID],N'EN' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20' as [MessageID],N'KR' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20' as [MessageID],N'VN' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20.vldt' as [MessageID],N'EN' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20.vldt' as [MessageID],N'KR' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20.vldt' as [MessageID],N'VN' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21' as [MessageID],N'CN' as [Language],N'二十一' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21' as [MessageID],N'EN' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21' as [MessageID],N'KR' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21' as [MessageID],N'VN' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21.vldt' as [MessageID],N'EN' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21.vldt' as [MessageID],N'KR' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21.vldt' as [MessageID],N'VN' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22' as [MessageID],N'CN' as [Language],N'二十二' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22' as [MessageID],N'EN' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22' as [MessageID],N'KR' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22' as [MessageID],N'VN' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22.vldt' as [MessageID],N'EN' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22.vldt' as [MessageID],N'KR' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22.vldt' as [MessageID],N'VN' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23' as [MessageID],N'CN' as [Language],N'二十三' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23' as [MessageID],N'EN' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23' as [MessageID],N'KR' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23' as [MessageID],N'VN' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23.vldt' as [MessageID],N'EN' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23.vldt' as [MessageID],N'KR' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23.vldt' as [MessageID],N'VN' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24' as [MessageID],N'CN' as [Language],N'二十四' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24' as [MessageID],N'EN' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24' as [MessageID],N'KR' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24' as [MessageID],N'VN' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24.vldt' as [MessageID],N'EN' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24.vldt' as [MessageID],N'KR' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24.vldt' as [MessageID],N'VN' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25' as [MessageID],N'CN' as [Language],N'二十五' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25' as [MessageID],N'EN' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25' as [MessageID],N'KR' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25' as [MessageID],N'VN' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25.vldt' as [MessageID],N'EN' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25.vldt' as [MessageID],N'KR' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25.vldt' as [MessageID],N'VN' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26' as [MessageID],N'CN' as [Language],N'二十六' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26' as [MessageID],N'EN' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26' as [MessageID],N'KR' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26' as [MessageID],N'VN' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26.vldt' as [MessageID],N'EN' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26.vldt' as [MessageID],N'KR' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26.vldt' as [MessageID],N'VN' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'27' as [MessageID],N'CN' as [Language],N'二十七' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'27' as [MessageID],N'EN' as [Language],N'27' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'27' as [MessageID],N'KR' as [Language],N'27' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'27' as [MessageID],N'VN' as [Language],N'27' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'27.vldt' as [MessageID],N'EN' as [Language],N'27' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'27.vldt' as [MessageID],N'KR' as [Language],N'27' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'27.vldt' as [MessageID],N'VN' as [Language],N'27' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'28' as [MessageID],N'CN' as [Language],N'二十八' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'28' as [MessageID],N'EN' as [Language],N'28' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'28' as [MessageID],N'KR' as [Language],N'28' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'28' as [MessageID],N'VN' as [Language],N'28' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'28.vldt' as [MessageID],N'EN' as [Language],N'28' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'28.vldt' as [MessageID],N'KR' as [Language],N'28' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'28.vldt' as [MessageID],N'VN' as [Language],N'28' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'29' as [MessageID],N'CN' as [Language],N'二十九' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'29' as [MessageID],N'EN' as [Language],N'29' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'29' as [MessageID],N'KR' as [Language],N'29' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'29' as [MessageID],N'VN' as [Language],N'29' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'29.vldt' as [MessageID],N'EN' as [Language],N'29' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'29.vldt' as [MessageID],N'KR' as [Language],N'29' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'29.vldt' as [MessageID],N'VN' as [Language],N'29' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'30' as [MessageID],N'CN' as [Language],N'三十' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'30' as [MessageID],N'EN' as [Language],N'30' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'30' as [MessageID],N'KR' as [Language],N'30' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'30' as [MessageID],N'VN' as [Language],N'30' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'30.vldt' as [MessageID],N'EN' as [Language],N'30' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'30.vldt' as [MessageID],N'KR' as [Language],N'30' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'30.vldt' as [MessageID],N'VN' as [Language],N'30' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'31' as [MessageID],N'EN' as [Language],N'31' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'31' as [MessageID],N'VN' as [Language],N'31' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'40' as [MessageID],N'VN' as [Language],N'40h' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'CN' as [Language],N'导出到Excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'EN' as [Language],N'Export to excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'JP' as [Language],N'リセット' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'KO' as [Language],N'엑셀로 내보내기' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'KR' as [Language],N'Export to excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'VN' as [Language],N'Xuất excel' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'CN' as [Language],N'重做' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'EN' as [Language],N'Reset' as [Content],N'34' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'JP' as [Language],N'リセット' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'KO' as [Language],N'재실행' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'KR' as [Language],N'Reset' as [Content],N'34' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'VN' as [Language],N'Làm lại' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'CN' as [Language],N'保存数据' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'EN' as [Language],N'Save' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'JP' as [Language],N'保存' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'KO' as [Language],N'저장' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'BtnfwSave' as [MessageID],N'KR' as [Language],N'저장' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'VN' as [Language],N'Lưu' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'CN' as [Language],N'重新載入資料' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'EN' as [Language],N'Refresh' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'KO' as [Language],N'새로 고침' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'BtnReload' as [MessageID],N'KR' as [Language],N'새로 만들기' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'VN' as [Language],N'Làm Mới' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'CN' as [Language],N'月份' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'KO' as [Language],N'달' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'CN' as [Language],N'年' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'KO' as [Language],N'년' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'ckb@isExcess' as [MessageID],N'VN' as [Language],N'Chỉ hiển thị CNV có OT vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'DateStatus' as [MessageID],N'CN' as [Language],N'状态' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'DateStatus' as [MessageID],N'EN' as [Language],N'Status' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'DateStatus' as [MessageID],N'VN' as [Language],N'Trạng thái' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'DepartmentName' as [MessageID],N'CN' as [Language],N'部门名称' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'DepartmentName' as [MessageID],N'EN' as [Language],N'Department name' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'DepartmentName' as [MessageID],N'VN' as [Language],N'Phòng ban' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'CN' as [Language],N'员工编号' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'EN' as [Language],N'Employee ID' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID' as [MessageID],N'JP' as [Language],N'従業員コード' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'KO' as [Language],N'직원 코드' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID' as [MessageID],N'KR' as [Language],N'사원 번호' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'VN' as [Language],N'Mã nhân viên' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid.vldt' as [MessageID],N'EN' as [Language],N'Employee code' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID.vldt' as [MessageID],N'JP' as [Language],N'従業員コード' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID.vldt' as [MessageID],N'KR' as [Language],N'사원 번호' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid.vldt' as [MessageID],N'VN' as [Language],N'Mã nhân viên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'CN' as [Language],N'姓名' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'EN' as [Language],N'Full name' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'JP' as [Language],N'フルネーム' as [Content],N'400' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'KO' as [Language],N'직원 이름' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'KR' as [Language],N'날짜' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'VN' as [Language],N'Tên nhân viên' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'EN' as [Language],N'Staff''s name' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'JP' as [Language],N'フルネーム' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'KR' as [Language],N'날짜' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'VN' as [Language],N'Tên nhân viên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'EN' as [Language],N'Training course list' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'KR' as [Language],N'Training course list' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'VN' as [Language],N'Danh sách đơn chờ duyệt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate' as [MessageID],N'CN' as [Language],N'入职日期' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate' as [MessageID],N'EN' as [Language],N'Hire date' as [Content],N'23' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate' as [MessageID],N'KO' as [Language],N'하루는 일을 시작합니다' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate' as [MessageID],N'KR' as [Language],N'Join date' as [Content],N'23' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate' as [MessageID],N'VN' as [Language],N'Ngày bắt đầu vào làm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate.vldt' as [MessageID],N'EN' as [Language],N'Join date' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate.vldt' as [MessageID],N'KR' as [Language],N'Join date' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate.vldt' as [MessageID],N'VN' as [Language],N'Ngày bắt đầu vào làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'CN' as [Language],N'年假' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'EN' as [Language],N'annual leave' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'KO' as [Language],N'연차' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'KR' as [Language],N'신청 명단' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'VN' as [Language],N'Nghỉ phép năm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item2' as [MessageID],N'CN' as [Language],N'影片播放清单' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item2' as [MessageID],N'EN' as [Language],N'Resident address' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item2' as [MessageID],N'VN' as [Language],N'Hình nền của chương trình' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@isexcess' as [MessageID],N'VN' as [Language],N'Chỉ hiển thị CNV có OT vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'CN' as [Language],N'月份' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'KO' as [Language],N'달' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'CN' as [Language],N'年' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'KO' as [Language],N'년' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'CN' as [Language],N'搜索' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'EN' as [Language],N'Search' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'KO' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'KR' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'VN' as [Language],N'Tìm kiếm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'CN' as [Language],N'影片播放清单' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'EN' as [Language],N'Resident address' as [Content],N'2' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'KO' as [Language],N'코드' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'KR' as [Language],N'Resident address' as [Content],N'2' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'VN' as [Language],N'Làm Mới' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'CN' as [Language],N'<color = crimson>如果更改标题，请单击新行以添加。生效日期无法更正，因此，如果生效日期不正确，请删除错误的行，然后添加一个新行以进行更正。</ color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'EN' as [Language],N'<color = crimson> If you change the title, click on a new line to add it. The effective date cannot be edited, so if the effective date is wrong, delete the wrong line, then add a new line to correct. </color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'KO' as [Language],N'<color = crimson> 제목을 변경하는 경우 추가 할 새 줄을 클릭하십시오. 유효 날짜를 편집 할 수 없으므로 유효 날짜가 틀린 경우 잘못된 줄을 삭제 한 다음 올바른 새 줄을 추가하십시오. </ color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'KR' as [Language],N'<color = crimson> If you change the title, click on a new line to add it. The effective date cannot be edited, so if the effective date is wrong, delete the wrong line, then add a new line to correct. </color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'VN' as [Language],N'<color=crimson>Nếu thay đổi chức danh thì bấm vào dòng mới để thêm.Ngày hiệu lực không sửa được nên nếu ngày hiệu lực sai thì xóa dòng sai đi, sau đó thêm 1 dòng mới cho đúng.</color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuMDT10042' as [MessageID],N'CN' as [Language],N'累计加班' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuMDT10042' as [MessageID],N'EN' as [Language],N'Accumulated overtime' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuMDT10042' as [MessageID],N'VN' as [Language],N'Tăng ca tích lũy' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT1' as [MessageID],N'EN' as [Language],N'OT1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT1' as [MessageID],N'VN' as [Language],N'OT1 tính lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT1_ExcessOT' as [MessageID],N'EN' as [Language],N'OT1_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT1_ExcessOT' as [MessageID],N'VN' as [Language],N'OT1 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT1_Total' as [MessageID],N'VN' as [Language],N'OT1_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT2a' as [MessageID],N'EN' as [Language],N'OT2a' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT2a' as [MessageID],N'VN' as [Language],N'OT2a' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT2a_ExcessOT' as [MessageID],N'VN' as [Language],N'OT2a Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT2a_Total' as [MessageID],N'VN' as [Language],N'OT2a_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT2b' as [MessageID],N'EN' as [Language],N'OT2b' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT2b' as [MessageID],N'VN' as [Language],N'OT2b' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT2b_ExcessOT' as [MessageID],N'EN' as [Language],N'OT2b_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT2b_ExcessOT' as [MessageID],N'VN' as [Language],N'OT2b Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT2b_Total' as [MessageID],N'VN' as [Language],N'OT2b_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT3' as [MessageID],N'EN' as [Language],N'OT3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT3' as [MessageID],N'VN' as [Language],N'OT3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT3_ExcessOT' as [MessageID],N'EN' as [Language],N'OT3_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT3_ExcessOT' as [MessageID],N'VN' as [Language],N'OT3 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT3_Total' as [MessageID],N'VN' as [Language],N'OT3_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT4' as [MessageID],N'EN' as [Language],N'OT4' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT4' as [MessageID],N'VN' as [Language],N'OT4' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT4_ExcessOT' as [MessageID],N'EN' as [Language],N'OT4_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT4_ExcessOT' as [MessageID],N'VN' as [Language],N'OT4 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT4_Total' as [MessageID],N'VN' as [Language],N'OT4_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT5' as [MessageID],N'EN' as [Language],N'OT5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT5' as [MessageID],N'VN' as [Language],N'OT5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT5_ExcessOT' as [MessageID],N'EN' as [Language],N'OT5_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT5_ExcessOT' as [MessageID],N'VN' as [Language],N'OT5 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT5_Total' as [MessageID],N'VN' as [Language],N'OT5_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT6' as [MessageID],N'EN' as [Language],N'OT6' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT6' as [MessageID],N'VN' as [Language],N'OT6' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT6_ExcessOT' as [MessageID],N'VN' as [Language],N'OT6 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT6_Total' as [MessageID],N'VN' as [Language],N'OT6_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT7' as [MessageID],N'EN' as [Language],N'OT7' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT7' as [MessageID],N'VN' as [Language],N'OT7' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT7_ExcessOT' as [MessageID],N'VN' as [Language],N'OT7_ExcessOT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'OT7_Total' as [MessageID],N'VN' as [Language],N'OT7_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'plg_FWCommand' as [MessageID],N'EN' as [Language],N'plg_fwcommand:en' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'plg_FWCommand' as [MessageID],N'VN' as [Language],N'plg_fwcommand:vn' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'CN' as [Language],N'根目錄' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'EN' as [Language],N'Root' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'KR' as [Language],N'Resident address' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'VN' as [Language],N'1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.cbx@Month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.cbx@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.ckb@isExcess' as [MessageID],N'VN' as [Language],N'Chỉ hiển thị CNV có OT vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.HireDate' as [MessageID],N'VN' as [Language],N'Ngày vào làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.item1' as [MessageID],N'VN' as [Language],N'item1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.item2' as [MessageID],N'VN' as [Language],N'item2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.lbl@isexcess' as [MessageID],N'VN' as [Language],N'Chỉ hiển thị CNV có OT vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.lbl@maxot' as [MessageID],N'VN' as [Language],N'Hạn mức OT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.lbl@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.lbl@year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT1' as [MessageID],N'VN' as [Language],N'OT1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT1_ExcessOT' as [MessageID],N'EN' as [Language],N'OT1_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT1_ExcessOT' as [MessageID],N'VN' as [Language],N'OT1 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT1_Total' as [MessageID],N'VN' as [Language],N'OT1_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2a' as [MessageID],N'VN' as [Language],N'OT2a' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2a_ExcessOT' as [MessageID],N'VN' as [Language],N'OT2a Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2a_Total' as [MessageID],N'VN' as [Language],N'OT2a_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2b' as [MessageID],N'VN' as [Language],N'OT2b' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2b_ExcessOT' as [MessageID],N'EN' as [Language],N'OT2b_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2b_ExcessOT' as [MessageID],N'VN' as [Language],N'OT2b Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT2b_Total' as [MessageID],N'VN' as [Language],N'OT2b_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT3' as [MessageID],N'VN' as [Language],N'OT3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT3_ExcessOT' as [MessageID],N'EN' as [Language],N'OT3_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT3_ExcessOT' as [MessageID],N'VN' as [Language],N'OT3 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT3_Total' as [MessageID],N'VN' as [Language],N'OT3_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT4' as [MessageID],N'VN' as [Language],N'OT4' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT4_ExcessOT' as [MessageID],N'EN' as [Language],N'OT4_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT4_ExcessOT' as [MessageID],N'VN' as [Language],N'OT4 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT4_Total' as [MessageID],N'VN' as [Language],N'OT4_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT5' as [MessageID],N'VN' as [Language],N'OT5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT5_ExcessOT' as [MessageID],N'EN' as [Language],N'OT5_Excess' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT5_ExcessOT' as [MessageID],N'VN' as [Language],N'OT5 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT5_Total' as [MessageID],N'VN' as [Language],N'OT5_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT6' as [MessageID],N'VN' as [Language],N'OT6' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT6_ExcessOT' as [MessageID],N'VN' as [Language],N'OT6 Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT6_Total' as [MessageID],N'VN' as [Language],N'OT6_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT7' as [MessageID],N'VN' as [Language],N'OT7' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT7_ExcessOT' as [MessageID],N'VN' as [Language],N'OT7_ExcessOT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.OT7_Total' as [MessageID],N'VN' as [Language],N'OT7_Total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.TotalExcessOT' as [MessageID],N'EN' as [Language],N'Total Excess OT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.TotalExcessOT' as [MessageID],N'VN' as [Language],N'Tổng OT Vượt 
(Quy đổi)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.TotalExcessOT_Raw' as [MessageID],N'VN' as [Language],N'Tổng OT Vượt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.TotalOT' as [MessageID],N'VN' as [Language],N'Tổng OT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_accumulatedot.txt@MaxOT' as [MessageID],N'VN' as [Language],N'Hạn mức OT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'TotalExcessOT' as [MessageID],N'EN' as [Language],N'Total Excess OT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'TotalExcessOT' as [MessageID],N'VN' as [Language],N'Tổng OT Vượt 
(Đã quy đổi' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'TotalExcessOT_Raw' as [MessageID],N'VN' as [Language],N'Tổng OT Vượt
(Chưa quy đổi)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'TotalOT' as [MessageID],N'EN' as [Language],N'Total OT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'TotalOT' as [MessageID],N'VN' as [Language],N'Tổng OT
(Chưa quy đổi' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'CN' as [Language],N'筛选条件' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'EN' as [Language],N'Filter' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'KR' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'VN' as [Language],N'Tìm kiếm' as [Content],NULL as [Frequency],NULL as [IgnorePending]
EXEC sp_SaveData  @TableNameTmp = '#tblMD_Message' , @TableName = 'tblMD_Message' , @Command = 'insert' , @IsDropTableTmp =0,@IsPrint=0IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
--#endregion _



IF OBJECT_ID('tempdb..#Paradise') IS NOT NULL DROP TABLE #Paradise

  create table #Paradise (
   [name] NVarChar(MAX) NULL 
 , [IsEncrypted] Bit NULL 
 , [type_desc] NVarChar(MAX) NULL 
 , [ss_ViewDependencyOBject] NVarChar(MAX) NULL 
)


 INSERT INTO #Paradise([name],[IsEncrypted],[type_desc],[ss_ViewDependencyOBject])
Select  N'sp_SalaryTransferByBank' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'SALCAL_MAIN' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'sp_MonthlySalarySummary' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'sp_ViewEmployeePaySlip' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'sp_CompanySalarySummary' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'sp_foreignSalarySummary' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject]
select * from #Paradise
GO

--#region tblDataSetting
IF OBJECT_ID('tempdb..#tblDataSetting') IS NOT NULL DROP TABLE #tblDataSetting
  create table #tblDataSetting (
   [TableName] NVarChar(MAX) NULL 
 , [ViewName] NVarChar(MAX) NULL 
 , [AllowAdd] Bit NULL 
 , [ReadOnlyColumns] NVarChar(MAX) NULL 
 , [ComboboxColumns] NVarChar(MAX) NULL 
 , [ColumnOrderBy] NVarChar(MAX) NULL 
 , [ColumnHide] NVarChar(MAX) NULL 
 , [ReadOnly] Bit NULL 
 , [TableEditorName] NVarChar(MAX) NULL 
 , [IsProcedure] Bit NULL 
 , [PaintColumns] NVarChar(MAX) NULL 
 , [FormatFontColumns] NVarChar(MAX) NULL 
 , [PaintRows] NVarChar(MAX) NULL 
 , [IsProcessForm] Bit NULL 
 , [IsShowLayout] Bit NULL 
 , [IsBatch] Bit NULL 
 , [LoadDataAfterShow] Bit NULL 
 , [GroupColumns] NVarChar(MAX) NULL 
 , [FixedColumns] NVarChar(MAX) NULL 
 , [ExportName] NVarChar(MAX) NULL 
 , [CheckLockAttStore] NVarChar(MAX) NULL 
 , [RptTemplate] NVarChar(MAX) NULL 
 , [spAction] NVarChar(MAX) NULL 
 , [DefaultValue] NVarChar(MAX) NULL 
 , [FilterColumn] NVarChar(MAX) NULL 
 , [IsEditForm] Bit NULL 
 , [ColumnEditSpecial] NVarChar(MAX) NULL 
 , [ColumnsFormatExtend] NVarChar(MAX) NULL 
 , [AllowDelete] Bit NULL 
 , [PaintCells] NVarChar(MAX) NULL 
 , [LayoutDataConfig] VarBinary(MAX) NULL 
 , [ColumnDataType] NVarChar(MAX) NULL 
 , [ProcBeforeSave] NVarChar(MAX) NULL 
 , [ProcAfterSave] NVarChar(MAX) NULL 
 , [IsLayoutParam] Bit NULL 
 , [ColumnSearch] NVarChar(MAX) NULL 
 , [AlwaysReloadColumn] Bit NULL 
 , [NotReloadAfterSave] Bit NULL 
 , [ColumnChangeEventProc] NVarChar(MAX) NULL 
 , [RowFontStyle] NVarChar(MAX) NULL 
 , [isWrapHeader] Bit NULL 
 , [ContextMenuIDs] NVarChar(MAX) NULL 
 , [ColumnNotLock] NVarChar(MAX) NULL 
 , [Import] NVarChar(MAX) NULL 
 , [ProcBeforeDelete] NVarChar(MAX) NULL 
 , [ProcAfterDelete] NVarChar(MAX) NULL 
 , [ConditionFormatting] VarBinary(MAX) NULL 
 , [ViewGridInShowLayout] Bit NULL 
 , [ShortcutsControl] NVarChar(MAX) NULL 
 , [LblMessage] NVarChar(MAX) NULL 
 , [MinWidthColumn] NVarChar(MAX) NULL 
 , [IsLayoutCommandButton] Bit NULL 
 , [LayoutDataConfigCrazy] VarBinary(MAX) NULL 
 , [NavigatorProcedure] NVarChar(MAX) NULL 
 , [ValidateRowConditions] NVarChar(MAX) NULL 
 , [ExecuteProcBeforeLoadData] NVarChar(MAX) NULL 
 , [LayoutDataConfigWeb] VarBinary(MAX) NULL 
 , [LayoutDataConfigMobile] VarBinary(MAX) NULL 
 , [GridBandConfig] NVarChar(MAX) NULL 
 , [ControlStateProcedure] NVarChar(MAX) NULL 
 , [ValidationProcedures] NVarChar(MAX) NULL 
 , [ReadonlyCellCondition] NVarChar(MAX) NULL 
 , [ComboboxColumn_BackupForTransfer] NVarChar(MAX) NULL 
 , [IsOpenSubForm] Bit NULL 
 , [Validation] NVarChar(MAX) NULL 
 , [ControlHiddenInShowLayout] NVarChar(MAX) NULL 
 , [IgnoreColumnOrder] Bit NULL 
 , [IgnoreLock] Bit NULL 
 , [ReadonlyCellCondition_Backup] NVarChar(MAX) NULL 
 , [SubDataSettingNames] NVarChar(MAX) NULL 
 , [IsViewReportForm] Bit NULL 
 , [ExportSeparateButton] Bit NULL 
 , [HashLayoutConfig] NVarChar(MAX) NULL 
 , [LayoutDataConfigFillter] VarBinary(MAX) NULL 
 , [LayoutParamConfig] VarBinary(MAX) NULL 
 , [OpenFormLink] NVarChar(MAX) NULL 
 , [SaveTableByBulk] NVarChar(MAX) NULL 
 , [IsNotPaintSaturday] Bit NULL 
 , [IsNotPaintSunday] Bit NULL 
 , [IsViewWeekName] Bit NULL 
 , [IgnoreCheckEECode] Bit NULL 
 , [ParadiseCommand] Int NULL 
 , [Labels] NVarChar(MAX) NULL 
 , [ColumnHideExport] NVarChar(MAX) NULL 
 , [ColumnWidthCalcData] Bit NULL 
 , [HideHeaderFilterButton] Bit NULL 
 , [HideColumnGrid] Bit NULL 
 , [TypeGrid] Int NULL 
 , [ProcBeforeAdd] NVarChar(MAX) NULL 
 , [ProcAfterAdd] NVarChar(MAX) NULL 
 , [ExecuteProcAfterLoadData] NVarChar(MAX) NULL 
 , [LayoutDataConfigColumnView] VarBinary(MAX) NULL 
 , [LayoutDataConfigCardView] VarBinary(MAX) NULL 
 , [HideFooter] Int NULL 
 , [IsFilterBox] Bit NULL 
 , [GetDefaultParamFromDB] Bit NULL 
 , [TaskTimeLine] Int NULL 
 , [HtmlCell] Int NULL 
 , [MinPageSizeGrid] Int NULL 
 , [ClickHereToAddNew] Int NULL 
 , [IgnoreQuestion] Bit NULL 
 , [FormLayoutJS] Int NULL 
 , [CheckBoxText] Int NULL 
 , [ColumnHideMobile] NVarChar(MAX) NULL 
 , [LayoutMobileLocalConfig] VarBinary(MAX) NULL 
 , [ViewMode] Int NULL 
 , [Mode] Int NULL 
 , [Template] NVarChar(MAX) NULL 
 , [NotResizeImage] Int NULL 
 , [DeleteOneRowReloadData] Int NULL 
 , [AutoHeightGrid] Bit NULL 
 , [ProcFileName] NVarChar(MAX) NULL 
 , [HeightImagePercentHeightFont] Float NULL 
 , [ColumnMinWidthPercent] NVarChar(MAX) NULL 
 , [GridViewAutoAddRow] Int NULL 
 , [GridViewNewItemRowPosition] Int NULL 
 , [LastColumnRemainingWidth] Int NULL 
 , [IsAutoSave] Bit NULL 
 , [VirtualColumn] NVarChar(MAX) NULL 
 , [GridTypeview] Int NULL 
 , [selectionMode] Int NULL 
 , [deleteMode] Int NULL 
 , [ClearDataBeforeLoadData] Int NULL 
 , [LockSort] Bit NULL 
 , [HightLightControlProc] NVarChar(MAX) NULL 
 , [ScriptInit0] NVarChar(MAX) NULL 
 , [ScriptInit1] NVarChar(MAX) NULL 
 , [ScriptInit2] NVarChar(MAX) NULL 
 , [ScriptInit3] NVarChar(MAX) NULL 
 , [ScriptInit4] NVarChar(MAX) NULL 
 , [ScriptInit5] NVarChar(MAX) NULL 
 , [ScriptInit6] NVarChar(MAX) NULL 
 , [ScriptInit7] NVarChar(MAX) NULL 
 , [ScriptInit8] NVarChar(MAX) NULL 
 , [ScriptInit9] NVarChar(MAX) NULL 
 , [FontSizeZoom0] Float NULL 
 , [FontSizeZoom1] Float NULL 
 , [FontSizeZoom2] Float NULL 
 , [FontSizeZoom3] Float NULL 
 , [FontSizeZoom4] Float NULL 
 , [FontSizeZoom5] Float NULL 
 , [FontSizeZoom6] Float NULL 
 , [FontSizeZoom7] Float NULL 
 , [FontSizeZoom8] Float NULL 
 , [FontSizeZoom9] Float NULL 
 , [NotBuildForm] Bit NULL 
 , [NotUseCancelButton] Bit NULL 
 , [GridUICompact] Float NULL 
 , [DisableFilterColumns] NVarChar(MAX) NULL 
 , [DisableFilterAll] Int NULL 
)

 INSERT INTO #tblDataSetting([TableName],[ViewName],[AllowAdd],[ReadOnlyColumns],[ComboboxColumns],[ColumnOrderBy],[ColumnHide],[ReadOnly],[TableEditorName],[IsProcedure],[PaintColumns],[FormatFontColumns],[PaintRows],[IsProcessForm],[IsShowLayout],[IsBatch],[LoadDataAfterShow],[GroupColumns],[FixedColumns],[ExportName],[CheckLockAttStore],[RptTemplate],[spAction],[DefaultValue],[FilterColumn],[IsEditForm],[ColumnEditSpecial],[ColumnsFormatExtend],[AllowDelete],[PaintCells],[LayoutDataConfig],[ColumnDataType],[ProcBeforeSave],[ProcAfterSave],[IsLayoutParam],[ColumnSearch],[AlwaysReloadColumn],[NotReloadAfterSave],[ColumnChangeEventProc],[RowFontStyle],[isWrapHeader],[ContextMenuIDs],[ColumnNotLock],[Import],[ProcBeforeDelete],[ProcAfterDelete],[ConditionFormatting],[ViewGridInShowLayout],[ShortcutsControl],[LblMessage],[MinWidthColumn],[IsLayoutCommandButton],[LayoutDataConfigCrazy],[NavigatorProcedure],[ValidateRowConditions],[ExecuteProcBeforeLoadData],[LayoutDataConfigWeb],[LayoutDataConfigMobile],[GridBandConfig],[ControlStateProcedure],[ValidationProcedures],[ReadonlyCellCondition],[ComboboxColumn_BackupForTransfer],[IsOpenSubForm],[Validation],[ControlHiddenInShowLayout],[IgnoreColumnOrder],[IgnoreLock],[ReadonlyCellCondition_Backup],[SubDataSettingNames],[IsViewReportForm],[ExportSeparateButton],[HashLayoutConfig],[LayoutDataConfigFillter],[LayoutParamConfig],[OpenFormLink],[SaveTableByBulk],[IsNotPaintSaturday],[IsNotPaintSunday],[IsViewWeekName],[IgnoreCheckEECode],[ParadiseCommand],[Labels],[ColumnHideExport],[ColumnWidthCalcData],[HideHeaderFilterButton],[HideColumnGrid],[TypeGrid],[ProcBeforeAdd],[ProcAfterAdd],[ExecuteProcAfterLoadData],[LayoutDataConfigColumnView],[LayoutDataConfigCardView],[HideFooter],[IsFilterBox],[GetDefaultParamFromDB],[TaskTimeLine],[HtmlCell],[MinPageSizeGrid],[ClickHereToAddNew],[IgnoreQuestion],[FormLayoutJS],[CheckBoxText],[ColumnHideMobile],[LayoutMobileLocalConfig],[ViewMode],[Mode],[Template],[NotResizeImage],[DeleteOneRowReloadData],[AutoHeightGrid],[ProcFileName],[HeightImagePercentHeightFont],[ColumnMinWidthPercent],[GridViewAutoAddRow],[GridViewNewItemRowPosition],[LastColumnRemainingWidth],[IsAutoSave],[VirtualColumn],[GridTypeview],[selectionMode],[deleteMode],[ClearDataBeforeLoadData],[LockSort],[HightLightControlProc],[ScriptInit0],[ScriptInit1],[ScriptInit2],[ScriptInit3],[ScriptInit4],[ScriptInit5],[ScriptInit6],[ScriptInit7],[ScriptInit8],[ScriptInit9],[FontSizeZoom0],[FontSizeZoom1],[FontSizeZoom2],[FontSizeZoom3],[FontSizeZoom4],[FontSizeZoom5],[FontSizeZoom6],[FontSizeZoom7],[FontSizeZoom8],[FontSizeZoom9],[NotBuildForm],[NotUseCancelButton],[GridUICompact],[DisableFilterColumns],[DisableFilterAll])
Select  N'sp_CompanySalarySummary' as [TableName],N'sp_CompanySalarySummary' as [ViewName],N'False' as [AllowAdd],N',ActualSalary' as [ReadOnlyColumns],N'' as [ComboboxColumns],N'STD_WorkingDays&0' as [ColumnOrderBy],N'isReadOnlyRow,dtftxxENGColumns' as [ColumnHide],N'False' as [ReadOnly],N'' as [TableEditorName],N'True' as [IsProcedure],N'' as [PaintColumns],N'' as [FormatFontColumns],N'' as [PaintRows],N'False' as [IsProcessForm],N'False' as [IsShowLayout],N'False' as [IsBatch],N'False' as [LoadDataAfterShow],N'' as [GroupColumns],N'' as [FixedColumns],N'' as [ExportName],N'' as [CheckLockAttStore],N'ExportSalaryPayment,SalaryToBank,EmployeePaySlip,MonthlySalarySummary,ForeignerSalary' as [RptTemplate],N'' as [spAction],N'' as [DefaultValue],N'' as [FilterColumn],N'False' as [IsEditForm],N'' as [ColumnEditSpecial],N'' as [ColumnsFormatExtend],N'False' as [AllowDelete],N'' as [PaintCells],as [LayoutDataConfig],N'' as [ColumnDataType],N'' as [ProcBeforeSave],N'' as [ProcAfterSave],N'False' as [IsLayoutParam],N'FullName' as [ColumnSearch],N'False' as [AlwaysReloadColumn],N'False' as [NotReloadAfterSave],N'' as [ColumnChangeEventProc],N'' as [RowFontStyle],N'False' as [isWrapHeader],N'CMN0001' as [ContextMenuIDs],N'' as [ColumnNotLock],N'' as [Import],N'' as [ProcBeforeDelete],N'' as [ProcAfterDelete],0x1F8B08000000000004007D8FB10AC24010447BC17F38D6564CAECF052BB1B032106D97B898C34BEED8EC45E2AF59F849FE82C1602188DD30CC1B669EF7477614C682D8A2B33762D51377D6B706F42A058521385BA1BC9DD2D215F2F94CA92CB00FC432A8161B32B0D8E1E0A394130B2AF9972A2A74B4C14A3C43BED6CB833D496DF4A8B664CFB5189D251FF267CFC67383B28F8E3A50B6BBD060403812A81E5D1C03E9B4204BBEBFE52FA791B64FEF000000 as [ConditionFormatting],N'True' as [ViewGridInShowLayout],N'' as [ShortcutsControl],N'' as [LblMessage],N'' as [MinWidthColumn],N'True' as [IsLayoutCommandButton],NULL as [LayoutDataConfigCrazy],N'' as [NavigatorProcedure],N'' as [ValidateRowConditions],N'' as [ExecuteProcBeforeLoadData],NULL as [LayoutDataConfigWeb],as [LayoutDataConfigMobile],N'' as [GridBandConfig],N'' as [ControlStateProcedure],N'' as [ValidationProcedures],N'' as [ReadonlyCellCondition],N'' as [ComboboxColumn_BackupForTransfer],N'False' as [IsOpenSubForm],N'' as [Validation],N'ckbExportSeparateFile,btnFWReset,btnFWSave,btnFWAdd,btnFWDelete,txtFilter,btnReload,btnExport,ddbRptTemplates,grdTableEditor,txt@EmployeeID,ckb@IsPayslip,ckb@isSummary' as [ControlHiddenInShowLayout],N'False' as [IgnoreColumnOrder],N'False' as [IgnoreLock],N'' as [ReadonlyCellCondition_Backup],N'' as [SubDataSettingNames],N'True' as [IsViewReportForm],N'True' as [ExportSeparateButton],N'' as [HashLayoutConfig],NULL as [LayoutDataConfigFillter],NULL as [LayoutParamConfig],N'' as [OpenFormLink],N'' as [SaveTableByBulk],N'False' as [IsNotPaintSaturday],N'False' as [IsNotPaintSunday],N'False' as [IsViewWeekName],N'False' as [IgnoreCheckEECode],N'0' as [ParadiseCommand],N'' as [Labels],N'' as [ColumnHideExport],N'False' as [ColumnWidthCalcData],N'False' as [HideHeaderFilterButton],N'False' as [HideColumnGrid],N'0' as [TypeGrid],N'' as [ProcBeforeAdd],N'' as [ProcAfterAdd],N'' as [ExecuteProcAfterLoadData],NULL as [LayoutDataConfigColumnView],NULL as [LayoutDataConfigCardView],N'0' as [HideFooter],N'False' as [IsFilterBox],N'False' as [GetDefaultParamFromDB],N'0' as [TaskTimeLine],N'0' as [HtmlCell],N'0' as [MinPageSizeGrid],N'0' as [ClickHereToAddNew],N'False' as [IgnoreQuestion],N'1' as [FormLayoutJS],N'0' as [CheckBoxText],N'' as [ColumnHideMobile],NULL as [LayoutMobileLocalConfig],N'0' as [ViewMode],N'0' as [Mode],N'' as [Template],N'0' as [NotResizeImage],N'0' as [DeleteOneRowReloadData],N'False' as [AutoHeightGrid],N'' as [ProcFileName],N'0' as [HeightImagePercentHeightFont],N'' as [ColumnMinWidthPercent],N'0' as [GridViewAutoAddRow],N'0' as [GridViewNewItemRowPosition],N'0' as [LastColumnRemainingWidth],N'False' as [IsAutoSave],N'' as [VirtualColumn],N'0' as [GridTypeview],N'0' as [selectionMode],N'0' as [deleteMode],N'0' as [ClearDataBeforeLoadData],N'False' as [LockSort],N'' as [HightLightControlProc],N'' as [ScriptInit0],N'' as [ScriptInit1],N'' as [ScriptInit2],N'' as [ScriptInit3],N'' as [ScriptInit4],N'' as [ScriptInit5],N'' as [ScriptInit6],N'' as [ScriptInit7],N'' as [ScriptInit8],N'' as [ScriptInit9],N'0' as [FontSizeZoom0],N'0' as [FontSizeZoom1],N'0' as [FontSizeZoom2],N'0' as [FontSizeZoom3],N'0' as [FontSizeZoom4],N'0' as [FontSizeZoom5],N'0' as [FontSizeZoom6],N'0' as [FontSizeZoom7],N'0' as [FontSizeZoom8],N'0' as [FontSizeZoom9],N'False' as [NotBuildForm],N'False' as [NotUseCancelButton],N'0' as [GridUICompact],N'' as [DisableFilterColumns],N'0' as [DisableFilterAll]

EXEC sp_SaveData  @TableNameTmp = '#tblDataSetting' , @TableName = 'tblDataSetting' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblDataSetting') IS NOT NULL DROP TABLE #tblDataSetting
--#endregion _
GO

--#region tblSPAction
IF OBJECT_ID('tempdb..#tblSPAction') IS NOT NULL DROP TABLE #tblSPAction
  create table #tblSPAction (
   [ProcedureName] NVarChar(MAX) NULL 
 , [TableName] NVarChar(MAX) NULL 
 , [RequireReloadData] Bit NULL 
 , [IgnoreQuestion] Bit NULL 
 , [ContinueWithoutSave] Bit NULL 
 , [IgnoreMessageSuccess] Int NULL 
 , [IgnoreTransaction] Int NULL 
 , [IgnoretblProcessErrorMessage] Int NULL 
)

 INSERT INTO #tblSPAction([ProcedureName],[TableName],[RequireReloadData],[IgnoreQuestion],[ContinueWithoutSave],[IgnoreMessageSuccess],[IgnoreTransaction],[IgnoretblProcessErrorMessage])
Select  N'SALCAL_MAIN' as [ProcedureName],N'sp_CompanySalarySummary' as [TableName],N'True' as [RequireReloadData],N'False' as [IgnoreQuestion],N'False' as [ContinueWithoutSave],NULL as [IgnoreMessageSuccess],NULL as [IgnoreTransaction],NULL as [IgnoretblProcessErrorMessage]

EXEC sp_SaveData  @TableNameTmp = '#tblSPAction' , @TableName = 'tblSPAction' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblSPAction') IS NOT NULL DROP TABLE #tblSPAction
--#endregion _
GO

--#region tblDataSettingLayout
IF OBJECT_ID('tempdb..#tblDataSettingLayout') IS NOT NULL DROP TABLE #tblDataSettingLayout
  create table #tblDataSettingLayout (
   [TableName] NVarChar(MAX) NULL 
 , [Name] NVarChar(MAX) NULL 
 , [ControlName] NVarChar(MAX) NULL 
 , [NamePa] NVarChar(MAX) NULL 
 , [TabbedGroupParentName] NVarChar(MAX) NULL 
 , [Type] NVarChar(MAX) NULL 
 , [Lx] Int NULL 
 , [Ly] Int NULL 
 , [Sx] Int NULL 
 , [Sy] Int NULL 
 , [ShowCaption] Int NULL 
 , [Padding] Int NULL 
 , [TextLocation] NVarChar(MAX) NULL 
 , [GroupBordersVisible] Int NULL 
 , [TypeLayout] NVarChar(MAX) NULL 
 , [Spacing] Int NULL 
 , [BackColor] NVarChar(MAX) NULL 
 , [ControlType] NVarChar(MAX) NULL 
 , [ColumnSpan] Int NULL 
 , [RowSpan] Int NULL 
 , [CaptionHorizontalAlign] NVarChar(MAX) NULL 
 , [CaptionVerticalAlign] NVarChar(MAX) NULL 
 , [WidthPercentage] Int NULL 
 , [FixMinSize] Bit NULL 
 , [AlignContent] NVarChar(MAX) NULL 
 , [BorderBottomColor] NVarChar(MAX) NULL 
 , [BorderBottomSize] NVarChar(MAX) NULL 
 , [BorderColor] NVarChar(MAX) NULL 
 , [BorderLeftColor] NVarChar(MAX) NULL 
 , [BorderLeftSize] NVarChar(MAX) NULL 
 , [BorderRightColor] NVarChar(MAX) NULL 
 , [BorderRightSize] NVarChar(MAX) NULL 
 , [BorderSize] NVarChar(MAX) NULL 
 , [BorderTopColor] NVarChar(MAX) NULL 
 , [BorderTopSize] NVarChar(MAX) NULL 
 , [BorderVisible] Bit NULL 
 , [ControlBackColor] NVarChar(MAX) NULL 
 , [ControlBorderBottomColor] NVarChar(MAX) NULL 
 , [ControlBorderBottomSize] NVarChar(MAX) NULL 
 , [ControlBorderColor] NVarChar(MAX) NULL 
 , [ControlBorderLeftColor] NVarChar(MAX) NULL 
 , [ControlBorderLeftSize] NVarChar(MAX) NULL 
 , [ControlBorderRightColor] NVarChar(MAX) NULL 
 , [ControlBorderRightSize] NVarChar(MAX) NULL 
 , [ControlBorderSize] NVarChar(MAX) NULL 
 , [ControlBorderTopColor] NVarChar(MAX) NULL 
 , [ControlBorderTopSize] NVarChar(MAX) NULL 
 , [ControlForeColor] NVarChar(MAX) NULL 
 , [ControlHorizontalAlign] NVarChar(MAX) NULL 
 , [ControlPadding] Int NULL 
 , [ControlVerticalAlign] NVarChar(MAX) NULL 
 , [FontSize] NVarChar(MAX) NULL 
 , [IconName] NVarChar(MAX) NULL 
 , [ItemBackColor] NVarChar(MAX) NULL 
 , [ItemBorderBottomColor] NVarChar(MAX) NULL 
 , [ItemBorderBottomSize] NVarChar(MAX) NULL 
 , [ItemBorderColor] NVarChar(MAX) NULL 
 , [ItemBorderLeftColor] NVarChar(MAX) NULL 
 , [ItemBorderLeftSize] NVarChar(MAX) NULL 
 , [ItemBorderRightColor] NVarChar(MAX) NULL 
 , [ItemBorderRightSize] NVarChar(MAX) NULL 
 , [ItemBorderSize] NVarChar(MAX) NULL 
 , [ItemBorderTopColor] NVarChar(MAX) NULL 
 , [ItemBorderTopSize] NVarChar(MAX) NULL 
 , [ItemForeColor] NVarChar(MAX) NULL 
 , [ItemPadding] Int NULL 
 , [MinGridPageSize] Int NULL 
 , [NotClientVisible] Bit NULL 
 , [NullTextMessageID] NVarChar(MAX) NULL 
 , [FullPageEmpty] Bit NULL 
 , [PaddingTop] Int NULL 
 , [PaddingLeft] Int NULL 
 , [PaddingBottom] Int NULL 
 , [PaddingRight] Int NULL 
 , [ControlCellPadding] Int NULL 
 , [MaxWidth] Float NULL 
 , [MinWidth] Float NULL 
 , [TabPageOrder] Int NULL 
 , [SelectedTabPageIndex] Int NULL 
 , [FixWidthClient] Int NULL 
 , [ErrorMessage] NVarChar(MAX) NULL 
 , [borderRadius] NVarChar(MAX) NULL 
 , [boxShadow] NVarChar(MAX) NULL 
 , [IsValidation] Bit NULL 
 , [HorizontalAlign] NVarChar(MAX) NULL 
 , [maxHeight] Int NULL 
 , [TextAlignMode] Int NULL 
 , [minHeight] Int NULL 
 , [HeightPercentageClient] Float NULL 
 , [ControlBorderRadius] NVarChar(MAX) NULL 
 , [ControlBoxShadow] NVarChar(MAX) NULL 
 , [ControlPaddingBottom] Float NULL 
 , [ControlPaddingLeft] Float NULL 
 , [ControlPaddingRight] Float NULL 
 , [ControlPaddingTop] Float NULL 
 , [ForeColor] NVarChar(MAX) NULL 
 , [CaptionWrap] Int NULL 
 , [LocationID] Int NULL 
 , [ContainerType] Int NULL 
 , [ControlNoBorder] Bit NULL 
 , [BackgroundImage] VarBinary(MAX) NULL 
 , [labelMode] Int NULL 
 , [selectionMode] Int NULL 
 , [deleteMode] Int NULL 
)

 INSERT INTO #tblDataSettingLayout([TableName],[Name],[ControlName],[NamePa],[TabbedGroupParentName],[Type],[Lx],[Ly],[Sx],[Sy],[ShowCaption],[Padding],[TextLocation],[GroupBordersVisible],[TypeLayout],[Spacing],[BackColor],[ControlType],[ColumnSpan],[RowSpan],[CaptionHorizontalAlign],[CaptionVerticalAlign],[WidthPercentage],[FixMinSize],[AlignContent],[BorderBottomColor],[BorderBottomSize],[BorderColor],[BorderLeftColor],[BorderLeftSize],[BorderRightColor],[BorderRightSize],[BorderSize],[BorderTopColor],[BorderTopSize],[BorderVisible],[ControlBackColor],[ControlBorderBottomColor],[ControlBorderBottomSize],[ControlBorderColor],[ControlBorderLeftColor],[ControlBorderLeftSize],[ControlBorderRightColor],[ControlBorderRightSize],[ControlBorderSize],[ControlBorderTopColor],[ControlBorderTopSize],[ControlForeColor],[ControlHorizontalAlign],[ControlPadding],[ControlVerticalAlign],[FontSize],[IconName],[ItemBackColor],[ItemBorderBottomColor],[ItemBorderBottomSize],[ItemBorderColor],[ItemBorderLeftColor],[ItemBorderLeftSize],[ItemBorderRightColor],[ItemBorderRightSize],[ItemBorderSize],[ItemBorderTopColor],[ItemBorderTopSize],[ItemForeColor],[ItemPadding],[MinGridPageSize],[NotClientVisible],[NullTextMessageID],[FullPageEmpty],[PaddingTop],[PaddingLeft],[PaddingBottom],[PaddingRight],[ControlCellPadding],[MaxWidth],[MinWidth],[TabPageOrder],[SelectedTabPageIndex],[FixWidthClient],[ErrorMessage],[borderRadius],[boxShadow],[IsValidation],[HorizontalAlign],[maxHeight],[TextAlignMode],[minHeight],[HeightPercentageClient],[ControlBorderRadius],[ControlBoxShadow],[ControlPaddingBottom],[ControlPaddingLeft],[ControlPaddingRight],[ControlPaddingTop],[ForeColor],[CaptionWrap],[LocationID],[ContainerType],[ControlNoBorder],[BackgroundImage],[labelMode],[selectionMode],[deleteMode])
Select  N'sp_CompanySalarySummary' as [TableName],N'lbl@month' as [Name],N'cbx@month' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'0' as [Ly],N'788' as [Sx],N'26' as [Sy],N'1' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'49' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lbl@year' as [Name],N'cbx@year' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'788' as [Lx],N'0' as [Ly],N'789' as [Sx],N'26' as [Sy],N'1' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'51' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lblexport.employeepayslip' as [Name],N'btnexport.employeepayslip' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'133' as [Ly],N'1577' as [Sx],N'41' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleExportButton' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#336633' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lblexport.exportsalarypayment' as [Name],N'btnexport.exportsalarypayment' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'51' as [Ly],N'1577' as [Sx],N'41' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleExportButton' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#336633' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lblexport.salarytobank' as [Name],N'btnexport.salarytobank' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'92' as [Ly],N'1577' as [Sx],N'41' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleExportButton' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#336633' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lblexporttofile' as [Name],N'ckbexporttofile' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'26' as [Ly],N'1577' as [Sx],N'25' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'CheckEdit' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lblspreadsheetviewer' as [Name],N'spcspreadsheetviewer' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'174' as [Ly],N'1577' as [Sx],N'752' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SpreadsheetControl' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'True' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'root' as [Name],N'' as [ControlName],N'' as [NamePa],N'' as [TabbedGroupParentName],N'g' as [Type],N'0' as [Lx],N'0' as [Ly],N'1577' as [Sx],N'926' as [Sy],N'0' as [ShowCaption],N'0' as [Padding],N'top' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'0' as [PaddingTop],N'0' as [PaddingLeft],N'0' as [PaddingBottom],N'0' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_companysalarysummary' as [TableName],N'item0' as [Name],N'' as [ControlName],N'item3' as [NamePa],N'' as [TabbedGroupParentName],N'g' as [Type],N'0' as [Lx],N'0' as [Ly],N'448' as [Sx],N'83' as [Sy],N'0' as [ShowCaption],N'4' as [Padding],N'Top' as [TextLocation],N'1' as [GroupBordersVisible],N'6' as [TypeLayout],N'2' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'32' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],NULL as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],NULL as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],NULL as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'4' as [PaddingTop],N'4' as [PaddingLeft],N'4' as [PaddingBottom],N'4' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],N'-1' as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],NULL as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'sp_companysalarysummary' as [TableName],N'item1' as [Name],N'' as [ControlName],N'item3' as [NamePa],N'' as [TabbedGroupParentName],N'' as [Type],N'448' as [Lx],N'27' as [Ly],N'737' as [Sx],N'10' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_companysalarysummary' as [TableName],N'item2' as [Name],N'' as [ControlName],N'item3' as [NamePa],N'' as [TabbedGroupParentName],N'' as [Type],N'816' as [Lx],N'0' as [Ly],N'369' as [Sx],N'27' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'26' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],NULL as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],NULL as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],NULL as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],N'0' as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'item3' as [Name],N'' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'g' as [Type],N'0' as [Lx],N'0' as [Ly],N'1380' as [Sx],N'83' as [Sy],N'0' as [ShowCaption],N'0' as [Padding],N'Top' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'0' as [PaddingTop],N'0' as [PaddingLeft],N'0' as [PaddingBottom],N'0' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'-1' as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],NULL as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lbl@month' as [Name],N'cbx@month' as [ControlName],N'item0' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'196' as [Lx],N'0' as [Ly],N'238' as [Sx],N'30' as [Sy],N'1' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'57' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lbl@year' as [Name],N'cbx@year' as [ControlName],N'item0' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'0' as [Ly],N'196' as [Sx],N'30' as [Sy],N'1' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'43' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lblexport.employeepayslip' as [Name],N'btnexport.employeepayslip' as [ControlName],N'item3' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'991' as [Lx],N'37' as [Ly],N'194' as [Sx],N'46' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleExportButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'14' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#336633' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lblexport.exportsalarypayment' as [Name],N'btnexport.exportsalarypayment' as [ControlName],N'item3' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'448' as [Lx],N'37' as [Ly],N'271' as [Sx],N'46' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'Bottom' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleExportButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'19' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#336633' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_companysalarysummary' as [TableName],N'lblexport.foreignersalary' as [Name],N'btnexport.foreignersalary' as [ControlName],N'item3' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'719' as [Lx],N'37' as [Ly],N'272' as [Sx],N'46' as [Sy],N'0' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleExportButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'19' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],N'-1' as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],N'-16732080' as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],N'CloudFile' as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],N'2' as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'sp_companysalarysummary' as [TableName],N'lblexport.monthlysalarysummary' as [Name],N'btnexport.monthlysalarysummary' as [ControlName],N'item3' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'1185' as [Lx],N'0' as [Ly],N'195' as [Sx],N'37' as [Sy],N'0' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleExportButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'16' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'-16732080' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'-1' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lblexport.salarytobank' as [Name],N'btnexport.salarytobank' as [ControlName],N'item3' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'1185' as [Lx],N'37' as [Ly],N'195' as [Sx],N'46' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleExportButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'48' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#336633' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lblexporttofile' as [Name],N'ckbexporttofile' as [ControlName],N'item3' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'448' as [Lx],N'0' as [Ly],N'368' as [Sx],N'27' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'CheckEdit' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'26' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_companysalarysummary' as [TableName],N'lblsalcal_main' as [Name],N'salcal_main' as [ControlName],N'item0' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'30' as [Ly],N'434' as [Sx],N'39' as [Sy],N'0' as [ShowCaption],N'5' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'ParadiseSimpleButtonBase' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'-1872887' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'-1' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'Processing' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'5' as [PaddingTop],N'5' as [PaddingLeft],N'5' as [PaddingBottom],N'5' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'1' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'lblspreadsheetviewer' as [Name],N'spcspreadsheetviewer' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'83' as [Ly],N'1380' as [Sx],N'753' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SpreadsheetControl' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'True' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_CompanySalarySummary' as [TableName],N'root' as [Name],N'' as [ControlName],N'' as [NamePa],N'' as [TabbedGroupParentName],N'g' as [Type],N'0' as [Lx],N'0' as [Ly],N'1380' as [Sx],N'836' as [Sy],N'0' as [ShowCaption],N'0' as [Padding],N'Top' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'0' as [PaddingTop],N'0' as [PaddingLeft],N'0' as [PaddingBottom],N'0' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'-1' as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],NULL as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode]

DECLARE @sql VARCHAR(MAX) = 'TableName'+char(10)+'TypeLayout'
EXEC sp_SaveData  @TableNameTmp = '#tblDataSettingLayout' , @TableName = 'tblDataSettingLayout' , @Command = 'DeleteNot',@ColumnDeleteNot=@sql , @IsDropTableTmp =0,@IsPrint=0
EXEC sp_SaveData  @TableNameTmp = '#tblDataSettingLayout' , @TableName = 'tblDataSettingLayout' , @Command = 'insert,update', @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblDataSettingLayout') IS NOT NULL DROP TABLE #tblDataSettingLayout
--#endregion _
GO

--#region tblExportList
IF OBJECT_ID('tempdb..#tblExportList') IS NOT NULL DROP TABLE #tblExportList
  create table #tblExportList (
   [ExportName] NVarChar(MAX) NULL 
 , [Description] NVarChar(MAX) NULL 
 , [ProcedureName] NVarChar(MAX) NULL 
 , [ExportType] NVarChar(MAX) NULL 
 , [TemplateFileName] NVarChar(MAX) NULL 
 , [StartRow] Int NULL 
 , [StartColumn] Int NULL 
 , [Catalog] NVarChar(MAX) NULL 
 , [ObjectId] BigInt NULL 
 , [Visible] Bit NULL 
 , [OneSheet] Bit NULL 
 , [TempStart] Int NULL 
 , [TempEnd] Int NULL 
 , [TempDataStart] Int NULL 
 , [TempRowEmpty] SmallInt NULL 
 , [MergeFormat] NVarChar(MAX) NULL 
 , [IsAllBoder] Bit NULL 
 , [ListSheetMerge] NVarChar(MAX) NULL 
 , [IsExportHeader] Bit NULL 
 , [MultipleReport] Bit NULL 
 , [BestFixColumn] Bit NULL 
 , [BestFixHeaderCount] Int NULL 
 , [TemplateSheetIndex] Int NULL 
 , [OneHeaderPerRow] Int NULL 
 , [NotShowInExportList] Bit NULL 
 , [InsertCellInsRow] Decimal NULL 
 , [ReloadFormAfterExport] Bit NULL 
 , [FollowConfigTable] Bit NULL 
 , [NotRequireSave] Bit NULL 
 , [IsTemplateImport] Bit NULL 
 , [RequireCheckHeader] Bit NULL 
 , [Frequency] Int NULL 
 , [LockExportData] Bit NULL 
 , [DescriptionEN] NVarChar(MAX) NULL 
 , [ProcExportCompleted] NVarChar(MAX) NULL 
 , [ExportMergeEmployeeCount] Int NULL 
 , [ProcAfterExport] NVarChar(MAX) NULL 
)

 INSERT INTO #tblExportList([ExportName],[Description],[ProcedureName],[ExportType],[TemplateFileName],[StartRow],[StartColumn],[Catalog],[ObjectId],[Visible],[OneSheet],[TempStart],[TempEnd],[TempDataStart],[TempRowEmpty],[MergeFormat],[IsAllBoder],[ListSheetMerge],[IsExportHeader],[MultipleReport],[BestFixColumn],[BestFixHeaderCount],[TemplateSheetIndex],[OneHeaderPerRow],[NotShowInExportList],[InsertCellInsRow],[ReloadFormAfterExport],[FollowConfigTable],[NotRequireSave],[IsTemplateImport],[RequireCheckHeader],[Frequency],[LockExportData],[DescriptionEN],[ProcExportCompleted],[ExportMergeEmployeeCount],[ProcAfterExport])
Select  N'EmployeePaySlip' as [ExportName],N'Phiếu lương nhân viên' as [Description],N'sp_ViewEmployeePaySlip' as [ProcedureName],N'PDF' as [ExportType],N'TRIPOD_Payslip.docx' as [TemplateFileName],N'10' as [StartRow],N'1' as [StartColumn],N'PR' as [Catalog],N'501' as [ObjectId],N'False' as [Visible],NULL as [OneSheet],NULL as [TempStart],NULL as [TempEnd],NULL as [TempDataStart],NULL as [TempRowEmpty],NULL as [MergeFormat],NULL as [IsAllBoder],NULL as [ListSheetMerge],NULL as [IsExportHeader],NULL as [MultipleReport],NULL as [BestFixColumn],NULL as [BestFixHeaderCount],NULL as [TemplateSheetIndex],NULL as [OneHeaderPerRow],NULL as [NotShowInExportList],NULL as [InsertCellInsRow],NULL as [ReloadFormAfterExport],NULL as [FollowConfigTable],NULL as [NotRequireSave],NULL as [IsTemplateImport],NULL as [RequireCheckHeader],N'345' as [Frequency],NULL as [LockExportData],NULL as [DescriptionEN],NULL as [ProcExportCompleted],NULL as [ExportMergeEmployeeCount],NULL as [ProcAfterExport] UNION ALL

Select  N'ExportSalaryPayment' as [ExportName],N'Detail Of Salary' as [Description],N'sp_CompanySalarySummary' as [ProcedureName],N'Excel' as [ExportType],N'TRIPOD_DetailOfSalary.xlsx' as [TemplateFileName],N'7' as [StartRow],N'1' as [StartColumn],N'PR' as [Catalog],N'403' as [ObjectId],N'False' as [Visible],NULL as [OneSheet],NULL as [TempStart],NULL as [TempEnd],NULL as [TempDataStart],NULL as [TempRowEmpty],NULL as [MergeFormat],NULL as [IsAllBoder],NULL as [ListSheetMerge],NULL as [IsExportHeader],N'True' as [MultipleReport],N'False' as [BestFixColumn],NULL as [BestFixHeaderCount],NULL as [TemplateSheetIndex],NULL as [OneHeaderPerRow],NULL as [NotShowInExportList],NULL as [InsertCellInsRow],NULL as [ReloadFormAfterExport],N'True' as [FollowConfigTable],NULL as [NotRequireSave],NULL as [IsTemplateImport],NULL as [RequireCheckHeader],N'543' as [Frequency],NULL as [LockExportData],NULL as [DescriptionEN],NULL as [ProcExportCompleted],NULL as [ExportMergeEmployeeCount],NULL as [ProcAfterExport] UNION ALL

Select  N'ForeignerSalary' as [ExportName],N'Foreigner Salary' as [Description],N'sp_foreignSalarySummary' as [ProcedureName],N'Excel' as [ExportType],N'TRIPOD_ForeignerSalary.xlsx' as [TemplateFileName],NULL as [StartRow],NULL as [StartColumn],N'PR' as [Catalog],N'501' as [ObjectId],N'True' as [Visible],NULL as [OneSheet],NULL as [TempStart],NULL as [TempEnd],NULL as [TempDataStart],NULL as [TempRowEmpty],NULL as [MergeFormat],NULL as [IsAllBoder],NULL as [ListSheetMerge],NULL as [IsExportHeader],NULL as [MultipleReport],N'True' as [BestFixColumn],NULL as [BestFixHeaderCount],NULL as [TemplateSheetIndex],NULL as [OneHeaderPerRow],NULL as [NotShowInExportList],NULL as [InsertCellInsRow],NULL as [ReloadFormAfterExport],N'True' as [FollowConfigTable],NULL as [NotRequireSave],NULL as [IsTemplateImport],NULL as [RequireCheckHeader],N'26' as [Frequency],NULL as [LockExportData],NULL as [DescriptionEN],NULL as [ProcExportCompleted],NULL as [ExportMergeEmployeeCount],NULL as [ProcAfterExport] UNION ALL

Select  N'MonthlySalarySummary' as [ExportName],N'Monthly Salary Summary' as [Description],N'sp_MonthlySalarySummary' as [ProcedureName],N'Excel' as [ExportType],N'TRIPOD_MonthlySalarySummary.xlsx' as [TemplateFileName],NULL as [StartRow],NULL as [StartColumn],N'PR' as [Catalog],N'501' as [ObjectId],N'True' as [Visible],NULL as [OneSheet],NULL as [TempStart],NULL as [TempEnd],NULL as [TempDataStart],NULL as [TempRowEmpty],NULL as [MergeFormat],NULL as [IsAllBoder],NULL as [ListSheetMerge],NULL as [IsExportHeader],NULL as [MultipleReport],N'True' as [BestFixColumn],NULL as [BestFixHeaderCount],NULL as [TemplateSheetIndex],NULL as [OneHeaderPerRow],NULL as [NotShowInExportList],NULL as [InsertCellInsRow],NULL as [ReloadFormAfterExport],N'True' as [FollowConfigTable],NULL as [NotRequireSave],NULL as [IsTemplateImport],NULL as [RequireCheckHeader],N'15' as [Frequency],NULL as [LockExportData],NULL as [DescriptionEN],NULL as [ProcExportCompleted],NULL as [ExportMergeEmployeeCount],NULL as [ProcAfterExport] UNION ALL

Select  N'SalaryToBank' as [ExportName],N'Lương chuyển đi ngân hàng' as [Description],N'sp_SalaryTransferByBank' as [ProcedureName],N'Excel' as [ExportType],N'TRIPOD_BankTransfer.xlsx' as [TemplateFileName],N'12' as [StartRow],N'2' as [StartColumn],N'PR' as [Catalog],N'501' as [ObjectId],N'False' as [Visible],NULL as [OneSheet],NULL as [TempStart],NULL as [TempEnd],NULL as [TempDataStart],NULL as [TempRowEmpty],NULL as [MergeFormat],NULL as [IsAllBoder],NULL as [ListSheetMerge],NULL as [IsExportHeader],NULL as [MultipleReport],N'True' as [BestFixColumn],NULL as [BestFixHeaderCount],NULL as [TemplateSheetIndex],NULL as [OneHeaderPerRow],NULL as [NotShowInExportList],NULL as [InsertCellInsRow],NULL as [ReloadFormAfterExport],N'True' as [FollowConfigTable],NULL as [NotRequireSave],NULL as [IsTemplateImport],NULL as [RequireCheckHeader],N'74' as [Frequency],NULL as [LockExportData],NULL as [DescriptionEN],NULL as [ProcExportCompleted],NULL as [ExportMergeEmployeeCount],NULL as [ProcAfterExport]

EXEC sp_SaveData  @TableNameTmp = '#tblExportList' , @TableName = 'tblExportList' , @Command = 'DeleteNot',@ColumnDeleteNot='ExportName' , @IsDropTableTmp =0,@IsPrint=0
EXEC sp_SaveData  @TableNameTmp = '#tblExportList' , @TableName = 'tblExportList' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblExportList') IS NOT NULL DROP TABLE #tblExportList
--#endregion _
GO

--#region tblMD_Message
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message 
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
  create table #tblMD_Message (
   [MessageID] NVarChar(MAX) NULL 
 , [Language] NVarChar(MAX) NULL 
 , [Content] NVarChar(MAX) NULL 
 , [Frequency] BigInt NULL 
 , [IgnorePending] Bit NULL 
)

 INSERT INTO #tblMD_Message([MessageID],[Language],[Content],[Frequency],[IgnorePending])
Select  N'sp_CompanySalarySummary.' as [MessageID],N'CN' as [Language],N'出勤津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ckbExportToFile' as [MessageID],N'CN' as [Language],N'导出到文件' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item0' as [MessageID],N'CN' as [Language],N'修改密码' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item1' as [MessageID],N'CN' as [Language],N'item1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item3' as [MessageID],N'CN' as [Language],N'商标' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Root' as [MessageID],N'CN' as [Language],N'根源' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.' as [MessageID],N'EN' as [Language],N'Attendance allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ckbExportToFile' as [MessageID],N'EN' as [Language],N'Export to file' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item0' as [MessageID],N'EN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item1' as [MessageID],N'EN' as [Language],N'item1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item2' as [MessageID],N'EN' as [Language],N'item2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item3' as [MessageID],N'EN' as [Language],N'item3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.lblExportToFile' as [MessageID],N'EN' as [Language],N'Export to file' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Root' as [MessageID],N'EN' as [Language],N'Root' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.SALCAL_MAIN' as [MessageID],N'EN' as [Language],N'Payroll Calculation' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.' as [MessageID],N'VN' as [Language],N'Phụ cấp chuyên cần' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ckbExportToFile' as [MessageID],N'VN' as [Language],N'Xuất ra tập tin' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item0' as [MessageID],N'VN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item1' as [MessageID],N'VN' as [Language],N'item1' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.item2' as [MessageID],N'VN' as [Language],N'item2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item3' as [MessageID],N'VN' as [Language],N'item3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.lblSALCAL_MAIN' as [MessageID],N'VN' as [Language],N'Tính lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Root' as [MessageID],N'VN' as [Language],N'Root' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.SALCAL_MAIN' as [MessageID],N'VN' as [Language],N'Tính lương' as [Content],NULL as [Frequency],NULL as [IgnorePending]
EXEC sp_SaveData  @TableNameTmp = '#tblMD_Message' , @TableName = 'tblMD_Message' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
--#endregion _
GO

--#region tblMD_Message
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message 
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
  create table #tblMD_Message (
   [MessageID] NVarChar(MAX) NULL 
 , [Language] NVarChar(MAX) NULL 
 , [Content] NVarChar(MAX) NULL 
 , [Frequency] BigInt NULL 
 , [IgnorePending] Bit NULL 
)

 INSERT INTO #tblMD_Message([MessageID],[Language],[Content],[Frequency],[IgnorePending])
Select  N'0' as [MessageID],N'CN' as [Language],N'零' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0' as [MessageID],N'En' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0' as [MessageID],N'KR' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0' as [MessageID],N'vn' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0.vldt' as [MessageID],N'En' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0.vldt' as [MessageID],N'KR' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0.vldt' as [MessageID],N'vn' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'CN' as [Language],N'月份' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'KO' as [Language],N'달' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'CN' as [Language],N'年' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'KO' as [Language],N'년' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'ckbexporttofile' as [MessageID],N'CN' as [Language],N'导出到Excel文件' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'ckbexporttofile' as [MessageID],N'EN' as [Language],N'Export to Excel file' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'ckbexporttofile' as [MessageID],N'VN' as [Language],N'Xuất ra file excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'CN' as [Language],N'修改密码' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'EN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'KO' as [Language],N'월페이퍼' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'KR' as [Language],N'승인 정보' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'VN' as [Language],N'Hình nền' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'CN' as [Language],N'年假' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'EN' as [Language],N'annual leave' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'KO' as [Language],N'연차' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'KR' as [Language],N'신청 명단' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'VN' as [Language],N'Nghỉ phép năm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item2' as [MessageID],N'CN' as [Language],N'影片播放清单' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item2' as [MessageID],N'EN' as [Language],N'Resident address' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item2' as [MessageID],N'VN' as [Language],N'Hình nền của chương trình' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item3' as [MessageID],N'CN' as [Language],N'工作表' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item3' as [MessageID],N'EN' as [Language],N'Calendar' as [Content],N'13' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item3' as [MessageID],N'VN' as [Language],N'Ngôn ngữ' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'CN' as [Language],N'月份' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'KO' as [Language],N'달' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'CN' as [Language],N'年' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'KO' as [Language],N'년' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblExportToFile' as [MessageID],N'CN' as [Language],N'导出到Excel文件' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblExportToFile' as [MessageID],N'EN' as [Language],N'Export to excel file' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblExportToFile' as [MessageID],N'VN' as [Language],N'Xuất ra file excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblSALCAL_MAIN' as [MessageID],N'VN' as [Language],N'Tính lại lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL092' as [MessageID],N'CN' as [Language],N'公司工资汇总' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL092' as [MessageID],N'EN' as [Language],N'Company salary summary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL092' as [MessageID],N'VN' as [Language],N'Bảng lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'CN' as [Language],N'根目錄' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'EN' as [Language],N'Root' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'KR' as [Language],N'Resident address' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'VN' as [Language],N'1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SALCAL_MAIN' as [MessageID],N'VN' as [Language],N'Tính lại lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SALCAL_MAIN_Action' as [MessageID],N'EN' as [Language],N'Are you sure re-calculate salary? After the calculation is complete, press the button view salary report again' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SALCAL_MAIN_Action' as [MessageID],N'VN' as [Language],N'Bạn chắc chắn muốn tính lại lương ? Sau khi tính xong nhấn lại nút xem bảng lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SALCAL_MAINSuccessful' as [MessageID],N'EN' as [Language],N'Re-calculate salary completed' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SALCAL_MAINSuccessful' as [MessageID],N'VN' as [Language],N'Đã hoàn thành tính lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.' as [MessageID],N'CN' as [Language],N'出勤津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.' as [MessageID],N'EN' as [Language],N'Attendance allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.' as [MessageID],N'VN' as [Language],N'Phụ cấp chuyên cần' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.1' as [MessageID],N'VN' as [Language],N'Seniority allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.10' as [MessageID],N'VN' as [Language],N'Regional (area) allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.11' as [MessageID],N'VN' as [Language],N'Incentive allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.12' as [MessageID],N'VN' as [Language],N'Key process allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.123' as [MessageID],N'EN' as [Language],N'123' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.123' as [MessageID],N'VN' as [Language],N'123' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.13' as [MessageID],N'VN' as [Language],N'Bonus 6 month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.14' as [MessageID],N'VN' as [Language],N'Performance & Responsibility' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.15' as [MessageID],N'VN' as [Language],N'Bonus 6 month full attendance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.16' as [MessageID],N'VN' as [Language],N'[Foreign] Meal allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.17' as [MessageID],N'VN' as [Language],N'[Foreign] House allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.2' as [MessageID],N'VN' as [Language],N'Production bonus' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.2222' as [MessageID],N'VN' as [Language],N'333333' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.3' as [MessageID],N'VN' as [Language],N'Foreign language allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.4' as [MessageID],N'VN' as [Language],N'Environmental allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.5' as [MessageID],N'VN' as [Language],N'Shift allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.6' as [MessageID],N'VN' as [Language],N'Fuel allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.7' as [MessageID],N'VN' as [Language],N'Professional allowance (design skill)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.8' as [MessageID],N'VN' as [Language],N'Attendance allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.9' as [MessageID],N'VN' as [Language],N'Meal allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AccountNo' as [MessageID],N'CN' as [Language],N'银行帐号' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AccountNo' as [MessageID],N'EN' as [Language],N'Bank account number' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AccountNo' as [MessageID],N'VN' as [Language],N'Số TK
ngân hàng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Achievement bonus_AL' as [MessageID],N'VN' as [Language],N'Thưởng thành tích' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AchievementBonus_AL' as [MessageID],N'VN' as [Language],N'Thưởng thành tích' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Actual_Salary_VND' as [MessageID],N'CN' as [Language],N'工作天薪水' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Actual_Salary_VND' as [MessageID],N'EN' as [Language],N'Actual salary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Actual_Salary_VND' as [MessageID],N'VN' as [Language],N'Lương ngày công' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ActualBasicSalary' as [MessageID],N'CN' as [Language],N'工资pay' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ActualBasicSalary' as [MessageID],N'EN' as [Language],N'Salary for working days 근무일' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ActualBasicSalary' as [MessageID],N'VN' as [Language],N'Lương ngày công
근무일' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ActualLIV_AL' as [MessageID],N'EN' as [Language],N'Actual Accomodation  Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ActualMonthlyBasic' as [MessageID],N'CN' as [Language],N'1号薪水' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ActualMonthlyBasic' as [MessageID],N'EN' as [Language],N'Salary No. 1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ActualMonthlyBasic' as [MessageID],N'VN' as [Language],N'Lương h.số 1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ActualMonthlyBasic_Retro_Amount' as [MessageID],N'EN' as [Language],N'Actual retro salary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ActualMonthlyBasic_Retro_Amount_NonTax' as [MessageID],N'EN' as [Language],N'Actual retro salary nontax' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ActualTAX_AL' as [MessageID],N'CN' as [Language],N'影片播放清单' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ActualTAX_AL' as [MessageID],N'EN' as [Language],N'Resident address' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ActualTAX_AL' as [MessageID],N'VN' as [Language],N'Địa chỉ thường trú' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ActualTRAN_AL' as [MessageID],N'CN' as [Language],N'实际旅行津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ActualTRAN_AL' as [MessageID],N'EN' as [Language],N'Actual travel allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ActualTRAN_AL' as [MessageID],N'VN' as [Language],N'Phụ cấp đi lại thực tế' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ActualWorkingSalary' as [MessageID],N'CN' as [Language],N'基于工作日的工资' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ActualWorkingSalary' as [MessageID],N'EN' as [Language],N'Salary by working day' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ActualWorkingSalary' as [MessageID],N'VN' as [Language],N'Lương theo ngày công' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Adj21' as [MessageID],N'EN' as [Language],N'Other non-taxable deduction' as [Content],N'1' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Adj9' as [MessageID],N'CN' as [Language],N'其他免税收入' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Adj9' as [MessageID],N'EN' as [Language],N'Other income tax free' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Adj9' as [MessageID],N'VN' as [Language],N'Thu nhập khác miễn thuế' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AdvanceAmt' as [MessageID],N'CN' as [Language],N'薪金预支' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AdvanceAmt' as [MessageID],N'EN' as [Language],N'Advance salary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AdvanceAmt' as [MessageID],N'VN' as [Language],N'Lương tạm ứng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AL' as [MessageID],N'CN' as [Language],N'年度许可' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AL' as [MessageID],N'EN' as [Language],N'Anual Leave' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AL' as [MessageID],N'VN' as [Language],N'Phép thường niên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALAmt' as [MessageID],N'CN' as [Language],N'年假' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALAmt' as [MessageID],N'EN' as [Language],N'Annual salary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALAmt' as [MessageID],N'VN' as [Language],N'Lương phép thường niên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALDays' as [MessageID],N'EN' as [Language],N'ALDays EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALInflation' as [MessageID],N'CN' as [Language],N'价格补偿' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALInflation' as [MessageID],N'EN' as [Language],N'Price compensation' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALInflation' as [MessageID],N'VN' as [Language],N'Bù vật giá' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALPosition' as [MessageID],N'CN' as [Language],N'位置' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALPosition' as [MessageID],N'EN' as [Language],N'Position Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALPosition' as [MessageID],N'VN' as [Language],N'Chức danh' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALResponsive' as [MessageID],N'CN' as [Language],N'责任感' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALResponsive' as [MessageID],N'EN' as [Language],N'Responsibility' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALResponsive' as [MessageID],N'VN' as [Language],N'Trách nhiệm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALSeniority' as [MessageID],N'CN' as [Language],N'资历' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALSeniority' as [MessageID],N'EN' as [Language],N'Seniority' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALSeniority' as [MessageID],N'VN' as [Language],N'Thâm niên' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALTechnical' as [MessageID],N'CN' as [Language],N'技术性' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALTechnical' as [MessageID],N'EN' as [Language],N'Skill' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ALTechnical' as [MessageID],N'VN' as [Language],N'Kỹ thuật' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AnnualRemain_AL' as [MessageID],N'VN' as [Language],N'Phép năm dư' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AnualLeaveSalary' as [MessageID],N'CN' as [Language],N'年假' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AnualLeaveSalary' as [MessageID],N'EN' as [Language],N'annual leave' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.AnualLeaveSalary' as [MessageID],N'VN' as [Language],N'nghỉ phép năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ATTSalary' as [MessageID],N'CN' as [Language],N'月薪' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ATTSalary' as [MessageID],N'EN' as [Language],N'Monthly salary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ATTSalary' as [MessageID],N'VN' as [Language],N'Lương tháng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.band_netabroad_sg_sgd' as [MessageID],N'EN' as [Language],N'netabroad_sg_sgd:Missing' as [Content],N'2' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.band_workinglocation' as [MessageID],N'EN' as [Language],N'workinglocation:Missing' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BasicSalary_New' as [MessageID],N'CN' as [Language],N'基本工资（新）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BasicSalary_New' as [MessageID],N'EN' as [Language],N'Basic salary (new)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BasicSalary_New' as [MessageID],N'VN' as [Language],N'Lương cơ bản (mới)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BasicSalary_Old' as [MessageID],N'CN' as [Language],N'基本工资（旧）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BasicSalary_Old' as [MessageID],N'EN' as [Language],N'Basic salary (old)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BasicSalary_Old' as [MessageID],N'VN' as [Language],N'Lương cơ bản (cũ)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Birthday' as [MessageID],N'CN' as [Language],N'出生日' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Birthday' as [MessageID],N'EN' as [Language],N'Birthday' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Birthday' as [MessageID],N'VN' as [Language],N'Birthday' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BizAmt' as [MessageID],N'CN' as [Language],N'商务旅行' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BizAmt' as [MessageID],N'EN' as [Language],N'Business trip' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BizAmt' as [MessageID],N'VN' as [Language],N'Đăng ký công tác' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Bonus' as [MessageID],N'CN' as [Language],N'奖励好CN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Bonus' as [MessageID],N'EN' as [Language],N'Enjoy the good sun' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Bonus' as [MessageID],N'VN' as [Language],N'Thưởng CN giỏi' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BONUS_AL' as [MessageID],N'CN' as [Language],N'奖励完成工作' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BONUS_AL' as [MessageID],N'EN' as [Language],N'Reward for work completion' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BONUS_AL' as [MessageID],N'VN' as [Language],N'Thưởng hoàn thành
công việc' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BonusFiveS' as [MessageID],N'CN' as [Language],N'5秒红利' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BonusFiveS' as [MessageID],N'EN' as [Language],N'Bonus 5s' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BonusFiveS' as [MessageID],N'VN' as [Language],N'Thưởng 5s' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BonusProductivity' as [MessageID],N'CN' as [Language],N'生产力奖励' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BonusProductivity' as [MessageID],N'EN' as [Language],N'Productivity bonus' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.BonusProductivity' as [MessageID],N'VN' as [Language],N'Thưởng năng suất' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Borrow' as [MessageID],N'CN' as [Language],N'預付' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Borrow' as [MessageID],N'EN' as [Language],N'Advances' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Borrow' as [MessageID],N'VN' as [Language],N'Tạm ứng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.btnReload' as [MessageID],N'VN' as [Language],N'Tính toán' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CD' as [MessageID],N'CN' as [Language],N'假期，政权' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CD' as [MessageID],N'EN' as [Language],N'Holiday, mode' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CD' as [MessageID],N'VN' as [Language],N'Nghỉ lễ, chế độ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CDAmt' as [MessageID],N'CN' as [Language],N'薪酬制度' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CDAmt' as [MessageID],N'EN' as [Language],N'Salary regime' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CDAmt' as [MessageID],N'VN' as [Language],N'Lương chế độ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CDP_TAX_EE_AL' as [MessageID],N'CN' as [Language],N'CDP支​​持总额（由EE支付）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CDP_TAX_EE_AL' as [MessageID],N'EN' as [Language],N'CDP Support gross (paid by EE)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CDP_TAX_EE_AL' as [MessageID],N'VN' as [Language],N'CDP Support gross (paid by EE)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Child_AL' as [MessageID],N'VN' as [Language],N'Hỗ trợ con nhỏ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ChildCare_AL' as [MessageID],N'VN' as [Language],N'Giữ trẻ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ckbExportToFile' as [MessageID],N'CN' as [Language],N'导出到文件' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ckbExportToFile' as [MessageID],N'EN' as [Language],N'Export to file' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ckbExportToFile' as [MessageID],N'VN' as [Language],N'Xuất ra tập tin' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Classification' as [MessageID],N'CN' as [Language],N'等级' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Classification' as [MessageID],N'EN' as [Language],N'Classification' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Classification' as [MessageID],N'VN' as [Language],N'Xếp loại' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ComHIAmt' as [MessageID],N'EN' as [Language],N'Company HI' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CompanySI' as [MessageID],N'EN' as [Language],N'ER SI' as [Content],N'1' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ComSIAmt' as [MessageID],N'EN' as [Language],N'Company SI' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ComUIAmt' as [MessageID],N'EN' as [Language],N'Company UI' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ComUnion' as [MessageID],N'CN' as [Language],N'公司工会' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ComUnion' as [MessageID],N'EN' as [Language],N'Company Union' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ComUnion' as [MessageID],N'VN' as [Language],N'Công đoàn Cty' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CostCenter' as [MessageID],N'CN' as [Language],N'费用代码' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CostCenter' as [MessageID],N'EN' as [Language],N'Cost code' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.CostCenter' as [MessageID],N'VN' as [Language],N'Mã chi phí' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DeductAmt' as [MessageID],N'CN' as [Language],N'额外扣除' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DeductAmt' as [MessageID],N'EN' as [Language],N'Deduct more' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DeductAmt' as [MessageID],N'VN' as [Language],N'Khấu trừ thêm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DeductFWC' as [MessageID],N'CN' as [Language],N'除了忘记计时' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DeductFWC' as [MessageID],N'EN' as [Language],N'Except for forgetting timekeeping' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DeductFWC' as [MessageID],N'VN' as [Language],N'Trừ quên chấm công' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DeductionAmt' as [MessageID],N'CN' as [Language],N'總加減' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DeductionAmt' as [MessageID],N'EN' as [Language],N'Total deduction' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DeductionAmt' as [MessageID],N'VN' as [Language],N'Tổng giảm trừ' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DEL_AL' as [MessageID],N'CN' as [Language],N'出勤津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DEL_AL' as [MessageID],N'EN' as [Language],N'Attendance allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DEL_AL' as [MessageID],N'VN' as [Language],N'Phụ cấp chuyên cần' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DELI_AL' as [MessageID],N'CN' as [Language],N'勤奋' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DELI_AL' as [MessageID],N'EN' as [Language],N'Deligion' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DELI_AL' as [MessageID],N'VN' as [Language],N'Chuyên cần' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DependantNumber' as [MessageID],N'CN' as [Language],N'撫養人數' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DependantNumber' as [MessageID],N'EN' as [Language],N'Dependant Number' as [Content],N'1' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DependantNumber' as [MessageID],N'VN' as [Language],N'Số người phụ thuộc' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Dil_AL' as [MessageID],N'CN' as [Language],N'出勤津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Diligence_AL' as [MessageID],N'VN' as [Language],N'Chuyên cần' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Diligent' as [MessageID],N'CN' as [Language],N'勤奋' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Diligent' as [MessageID],N'EN' as [Language],N'Deligion' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Diligent' as [MessageID],N'VN' as [Language],N'Chuyên cần' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DIP_AL' as [MessageID],N'CN' as [Language],N'嵌入式津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Domitory' as [MessageID],N'CN' as [Language],N'食宿' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Domitory' as [MessageID],N'EN' as [Language],N'Motel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Domitory' as [MessageID],N'VN' as [Language],N'Nhà trọ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DSCount' as [MessageID],N'CN' as [Language],N'龚移天' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DSCount' as [MessageID],N'EN' as [Language],N'Day shift' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.DSCount' as [MessageID],N'VN' as [Language],N'Công ca ngày' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmpInsurance' as [MessageID],N'CN' as [Language],N'社会保险，健康保险和失业保险' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmpInsurance' as [MessageID],N'EN' as [Language],N'Social insurance, health insurance and unemployment insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmpInsurance' as [MessageID],N'VN' as [Language],N'BHXH,BHYT & BHTN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeExemption' as [MessageID],N'CN' as [Language],N'减少家庭情况' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeExemption' as [MessageID],N'EN' as [Language],N'Employee Exemption' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeExemption' as [MessageID],N'VN' as [Language],N'Giảm trừ gia cảnh bản thân' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeHI' as [MessageID],N'CN' as [Language],N'健康保险' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeHI' as [MessageID],N'EN' as [Language],N'HI Amt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeHI' as [MessageID],N'VN' as [Language],N'BHYT' as [Content],N'3' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeIns' as [MessageID],N'CN' as [Language],N'保險' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeIns' as [MessageID],N'EN' as [Language],N'Insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeIns' as [MessageID],N'VN' as [Language],N'Bảo hiểm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeSI' as [MessageID],N'CN' as [Language],N'社会保险状况' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeSI' as [MessageID],N'EN' as [Language],N'Insurance Status' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeSI' as [MessageID],N'VN' as [Language],N'BHXH' as [Content],N'3' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeUI' as [MessageID],N'CN' as [Language],N'失业保险' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeUI' as [MessageID],N'EN' as [Language],N'Jobless Ins' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmployeeUI' as [MessageID],N'VN' as [Language],N'BHTN' as [Content],N'3' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.EmpUnion' as [MessageID],N'EN' as [Language],N'Employee Union' as [Content],N'1' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ERP_AL' as [MessageID],N'CN' as [Language],N'ERP津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.F_AL' as [MessageID],N'CN' as [Language],N'固定津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.F_AL' as [MessageID],N'EN' as [Language],N'Fix allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.F_AL' as [MessageID],N'VN' as [Language],N'Fix allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FamilyDeduction' as [MessageID],N'CN' as [Language],N'相依扣除' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FamilyDeduction' as [MessageID],N'EN' as [Language],N'Dependant Deduction' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FamilyDeduction' as [MessageID],N'VN' as [Language],N'Giảm trừ người phụ thuộc' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FamilyExemption' as [MessageID],N'CN' as [Language],N'根据家庭情况减少' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FamilyExemption' as [MessageID],N'EN' as [Language],N'Family Exemption' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FamilyExemption' as [MessageID],N'VN' as [Language],N'Giảm trừ gia cảnh' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Filter' as [MessageID],N'CN' as [Language],N'搜索' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Filter' as [MessageID],N'EN' as [Language],N'Search' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Filter' as [MessageID],N'VN' as [Language],N'Tìm kiếm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ForeignLanguage_AL' as [MessageID],N'CN' as [Language],N'外语津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FUNC_AL' as [MessageID],N'CN' as [Language],N'薪酬职位负责人' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FUNC_AL' as [MessageID],N'EN' as [Language],N'Salary for team leader' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FUNC_AL' as [MessageID],N'VN' as [Language],N'Lương vị trí trưởng nhóm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FUNC_AL_Org' as [MessageID],N'CN' as [Language],N'领导职位' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FUNC_AL_Org' as [MessageID],N'EN' as [Language],N'Team leader position' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.FUNC_AL_Org' as [MessageID],N'VN' as [Language],N'Vị trí trưởng nhóm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Gas_AL' as [MessageID],N'CN' as [Language],N'汽油补贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Gas_AL' as [MessageID],N'EN' as [Language],N'Gasoline Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Gas_AL' as [MessageID],N'VN' as [Language],N'Gasoline Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.GasBuiness_AL' as [MessageID],N'CN' as [Language],N'商务旅行汽油费' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.gfg' as [MessageID],N'CN' as [Language],N'fgf' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.GradeName' as [MessageID],N'CN' as [Language],N'薪水（新）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.GradeName' as [MessageID],N'EN' as [Language],N'Salary grade (new)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.GradeName' as [MessageID],N'VN' as [Language],N'Bậc lương (mới)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.GradeName_Old' as [MessageID],N'CN' as [Language],N'薪水（旧）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.GradeName_Old' as [MessageID],N'EN' as [Language],N'Salary grade (old)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.GradeName_Old' as [MessageID],N'VN' as [Language],N'Bậc lương (cũ)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.GrossTakeHome' as [MessageID],N'CN' as [Language],N'實領金額' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.GrossTakeHome' as [MessageID],N'EN' as [Language],N'Net take home' as [Content],N'1' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.GrossTakeHome' as [MessageID],N'VN' as [Language],N'Thực lãnh' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HI' as [MessageID],N'CN' as [Language],N'健康保险' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HI' as [MessageID],N'EN' as [Language],N'HI' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HI' as [MessageID],N'VN' as [Language],N'BHYT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HIAmt' as [MessageID],N'CN' as [Language],N'健康保险（1.5％）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HIAmt' as [MessageID],N'EN' as [Language],N'Health insurance (1.5%)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HIAmt' as [MessageID],N'VN' as [Language],N'BHYT (1.5%)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HIAmt_Comp' as [MessageID],N'CN' as [Language],N'3％的健康保险' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HIAmt_Comp' as [MessageID],N'EN' as [Language],N'Health insurance 3%' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HIAmt_Comp' as [MessageID],N'VN' as [Language],N'BHYT 3%' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HOUSE_AL' as [MessageID],N'CN' as [Language],N'房屋津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HOUSE_AL' as [MessageID],N'EN' as [Language],N'Housing Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HOUSE_AL' as [MessageID],N'VN' as [Language],N'Housing Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.House_AL_ForTax' as [MessageID],N'CN' as [Language],N'住房津贴仅用于税收目的' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.House_AL_ForTax' as [MessageID],N'EN' as [Language],N'Housing Allowance For Tax only' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.House_AL_ForTax' as [MessageID],N'VN' as [Language],N'Housing Allowance for tax purpose only' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.House_AL_InCash' as [MessageID],N'CN' as [Language],N'现金住房津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.House_AL_InCash' as [MessageID],N'EN' as [Language],N'Housing Allowance in cash' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.House_AL_InCash' as [MessageID],N'VN' as [Language],N'Housing Allowance in cash' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HOUSE_AL_Old' as [MessageID],N'CN' as [Language],N'房屋（旧）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HOUSE_AL_Old' as [MessageID],N'EN' as [Language],N'House (old)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.HOUSE_AL_Old' as [MessageID],N'VN' as [Language],N'Nhà ở (cũ)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Housing_AL' as [MessageID],N'CN' as [Language],N'住房补贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IncomeAfterPIT' as [MessageID],N'CN' as [Language],N'税后收入' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IncomeAfterPIT' as [MessageID],N'EN' as [Language],N'Net Income' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IncomeAfterPIT' as [MessageID],N'VN' as [Language],N'Thu nhập sau thuế' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IncomeAmt' as [MessageID],N'CN' as [Language],N'補休' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IncomeAmt' as [MessageID],N'EN' as [Language],N'Compensation' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IncomeAmt' as [MessageID],N'VN' as [Language],N'Trả bù' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IncomeTaxable' as [MessageID],N'CN' as [Language],N'应税收入' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IncomeTaxable' as [MessageID],N'EN' as [Language],N'Taxable income' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IncomeTaxable' as [MessageID],N'VN' as [Language],N'Thu nhập chịu tính thuế' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Initiative_AL' as [MessageID],N'CN' as [Language],N'奖励奖金计划' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Insurance' as [MessageID],N'CN' as [Language],N'保險' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Insurance' as [MessageID],N'EN' as [Language],N'Insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Insurance' as [MessageID],N'VN' as [Language],N'Bảo hiểm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IsCash' as [MessageID],N'CN' as [Language],N'现金支付' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IsCash' as [MessageID],N'EN' as [Language],N'Pay with cash' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.IsCash' as [MessageID],N'VN' as [Language],N'Trả bằng tiền mặt' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.isReadOnlyRow' as [MessageID],N'CN' as [Language],N'數據已鎖' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.isReadOnlyRow' as [MessageID],N'EN' as [Language],N'Blocked Record' as [Content],N'20' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.isReadOnlyRow' as [MessageID],N'VN' as [Language],N'Dữ liệu đã khóa' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item0' as [MessageID],N'CN' as [Language],N'修改密码' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item0' as [MessageID],N'EN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item0' as [MessageID],N'VN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item1' as [MessageID],N'CN' as [Language],N'item1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item1' as [MessageID],N'EN' as [Language],N'item1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item1' as [MessageID],N'VN' as [Language],N'item1' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item2' as [MessageID],N'EN' as [Language],N'item2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.item2' as [MessageID],N'VN' as [Language],N'item2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item3' as [MessageID],N'CN' as [Language],N'商标' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item3' as [MessageID],N'EN' as [Language],N'item3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.item3' as [MessageID],N'VN' as [Language],N'item3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.KH' as [MessageID],N'CN' as [Language],N'假期计划' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.KH' as [MessageID],N'EN' as [Language],N'Vacation plan' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.KH' as [MessageID],N'VN' as [Language],N'Nghỉ kế hoạch' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.KHAmt' as [MessageID],N'CN' as [Language],N'薪酬计划' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.KHAmt' as [MessageID],N'EN' as [Language],N'Salary plan' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.KHAmt' as [MessageID],N'VN' as [Language],N'Lương kế hoạch' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Kid_AL' as [MessageID],N'CN' as [Language],N'儿童抚养费' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Language_AL' as [MessageID],N'VN' as [Language],N'Tiếng Trung' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.LastMonth' as [MessageID],N'EN' as [Language],N'LastMonth EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.lbl@divisionid' as [MessageID],N'VN' as [Language],N'Phòng ban' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.lbl@issal' as [MessageID],N'VN' as [Language],N'Tính lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.lbl@istad' as [MessageID],N'VN' as [Language],N'Tính công' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.lblExportToFile' as [MessageID],N'EN' as [Language],N'Export to file' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblFilter' as [MessageID],N'CN' as [Language],N'搜索' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblFilter' as [MessageID],N'EN' as [Language],N'Search' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblFilter' as [MessageID],N'VN' as [Language],N'Tìm kiếm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblmonth' as [MessageID],N'CN' as [Language],N'月份' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblmonth' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblmonth' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblReload' as [MessageID],N'CN' as [Language],N'重新載入資料' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblReload' as [MessageID],N'EN' as [Language],N'Refresh' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblReload' as [MessageID],N'VN' as [Language],N'Làm Mới' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.lblSALCAL_MAIN' as [MessageID],N'VN' as [Language],N'Tính lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblyear' as [MessageID],N'CN' as [Language],N'年' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblyear' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lblyear' as [MessageID],N'VN' as [Language],N'Năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.LDR_AL' as [MessageID],N'EN' as [Language],N'Promotion bonus' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.LEAD_AL' as [MessageID],N'CN' as [Language],N'组长' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.LEAD_AL' as [MessageID],N'EN' as [Language],N'Leader' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.LEAD_AL' as [MessageID],N'VN' as [Language],N'Nhóm trưởng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.LEAD_AL_Org' as [MessageID],N'CN' as [Language],N'领导职位' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.LEAD_AL_Org' as [MessageID],N'EN' as [Language],N'Team leader position' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.LEAD_AL_Org' as [MessageID],N'VN' as [Language],N'Vị trí trưởng nhóm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.LIV_AL' as [MessageID],N'CN' as [Language],N'生活篇' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.LIV_AL' as [MessageID],N'EN' as [Language],N'Living Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.LIV_AL' as [MessageID],N'VN' as [Language],N'Đời sống' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Lock' as [MessageID],N'CN' as [Language],N'鎖' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Lock' as [MessageID],N'EN' as [Language],N'Lock' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Lock' as [MessageID],N'VN' as [Language],N'Khóa' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lvCD' as [MessageID],N'CN' as [Language],N'假期或其他假期' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lvCD' as [MessageID],N'EN' as [Language],N'Holiday or other holiday' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lvCD' as [MessageID],N'VN' as [Language],N'Nghỉ lễ hoặc nghỉ khác' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lvKH' as [MessageID],N'CN' as [Language],N'假期计划' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lvKH' as [MessageID],N'EN' as [Language],N'Vacation plan' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.lvKH' as [MessageID],N'VN' as [Language],N'Nghỉ kế hoạch' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MEA_AL' as [MessageID],N'CN' as [Language],N'白饭' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MEA_AL' as [MessageID],N'EN' as [Language],N'Rice' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MEA_AL' as [MessageID],N'VN' as [Language],N'Cơm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Meal_AL' as [MessageID],N'CN' as [Language],N'钱饭' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Meal_AL' as [MessageID],N'EN' as [Language],N'Meal Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Meal_AL' as [MessageID],N'VN' as [Language],N'Meal Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MealAttDays' as [MessageID],N'CN' as [Language],N'大米零件' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MealAttDays' as [MessageID],N'EN' as [Language],N'Rice portion' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MealAttDays' as [MessageID],N'VN' as [Language],N'Phần cơm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MealDeduct' as [MessageID],N'CN' as [Language],N'钱食堂饭' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MealDeduct' as [MessageID],N'EN' as [Language],N'Canteen' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MealDeduct' as [MessageID],N'VN' as [Language],N'Tiền cơm canteen' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.melDecAmt' as [MessageID],N'CN' as [Language],N'大米（-）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.melDecAmt' as [MessageID],N'EN' as [Language],N'Rice (-)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.melDecAmt' as [MessageID],N'VN' as [Language],N'Cơm (-)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MOBILE_H_AL' as [MessageID],N'CN' as [Language],N'电话' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MOBILE_H_AL' as [MessageID],N'EN' as [Language],N'Phone' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.MOBILE_H_AL' as [MessageID],N'VN' as [Language],N'Điện thoại' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NetTakeHome' as [MessageID],N'CN' as [Language],N'网带回家' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NetTakeHome' as [MessageID],N'EN' as [Language],N'Net Take Home' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NetTakeHome' as [MessageID],N'VN' as [Language],N'Net Take Home' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NewSalary' as [MessageID],N'CN' as [Language],N'工资总额' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NewSalary' as [MessageID],N'EN' as [Language],N'Gross salary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NewSalary' as [MessageID],N'VN' as [Language],N'Tổng lương gộp' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NONRES_AL' as [MessageID],N'CN' as [Language],N'外国人' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NONRES_AL' as [MessageID],N'EN' as [Language],N'Foreigner' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NONRES_AL' as [MessageID],N'VN' as [Language],N'Người nước ngoài' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NONRES_AL_Old' as [MessageID],N'CN' as [Language],N'外国人（前）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NONRES_AL_Old' as [MessageID],N'EN' as [Language],N'Foreigner (former)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NONRES_AL_Old' as [MessageID],N'VN' as [Language],N'Người nước ngoài (cũ)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NontaxableAllowance' as [MessageID],N'EN' as [Language],N'NontaxableAllowance EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NontaxableIncome' as [MessageID],N'CN' as [Language],N'免税收入' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NontaxableIncome' as [MessageID],N'EN' as [Language],N'Free income tax' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NontaxableIncome' as [MessageID],N'VN' as [Language],N'Thu nhập miễn thuế' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NontaxAmount' as [MessageID],N'CN' as [Language],N'免征所得税' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NontaxAmount' as [MessageID],N'EN' as [Language],N'Tax-free income' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NontaxAmount' as [MessageID],N'VN' as [Language],N'Thu nhập miễn thuế TNCN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NS_AL' as [MessageID],N'CN' as [Language],N'PC夜班' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NS_AL' as [MessageID],N'EN' as [Language],N'PC Night shift' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NS_AL' as [MessageID],N'VN' as [Language],N'PC Ca đêm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSAmount' as [MessageID],N'CN' as [Language],N'夜班津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSAmount' as [MessageID],N'EN' as [Language],N'Night shift allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSAmount' as [MessageID],N'VN' as [Language],N'Phụ cấp ca đêm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSAmt' as [MessageID],N'CN' as [Language],N'锣夜0.3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSAmt' as [MessageID],N'EN' as [Language],N'Night Amt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSAmt' as [MessageID],N'VN' as [Language],N'Công đêm 0.3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSCount' as [MessageID],N'CN' as [Language],N'夜班' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSCount' as [MessageID],N'EN' as [Language],N'Night shift' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSCount' as [MessageID],N'VN' as [Language],N'Công ca đêm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSDays' as [MessageID],N'CN' as [Language],N'夜班' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSDays' as [MessageID],N'EN' as [Language],N'Night shift' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSDays' as [MessageID],N'VN' as [Language],N'Ca đêm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSHour' as [MessageID],N'CN' as [Language],N'锣夜0.3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSHour' as [MessageID],N'EN' as [Language],N'Night Amt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSHour' as [MessageID],N'VN' as [Language],N'Công đêm 0.3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSHour_Old' as [MessageID],N'CN' as [Language],N'夜班（旧）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSHour_Old' as [MessageID],N'EN' as [Language],N'Night shift (old)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSHour_Old' as [MessageID],N'VN' as [Language],N'Công ca đêm(cũ)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSHours' as [MessageID],N'CN' as [Language],N'夜间工作小时数' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSHours' as [MessageID],N'EN' as [Language],N'Number of night work hours' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.NSHours' as [MessageID],N'VN' as [Language],N'Số giờ làm đêm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OldBasicSalary' as [MessageID],N'CN' as [Language],N'试用工资' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OldBasicSalary' as [MessageID],N'EN' as [Language],N'Probationary salary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OldBasicSalary' as [MessageID],N'VN' as [Language],N'Lương thử việc' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OldBasicSalary1' as [MessageID],N'CN' as [Language],N'实习食品' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OldBasicSalary1' as [MessageID],N'EN' as [Language],N'Practical food' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OldBasicSalary1' as [MessageID],N'VN' as [Language],N'Lương thực tập' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OldSalary' as [MessageID],N'EN' as [Language],N'OldSalary EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OldSalPaidDays' as [MessageID],N'CN' as [Language],N'工作日（旧）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OldSalPaidDays' as [MessageID],N'EN' as [Language],N'Workday (old)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OldSalPaidDays' as [MessageID],N'VN' as [Language],N'Ngày công (cũ)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ord' as [MessageID],N'CN' as [Language],N'号码' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ord' as [MessageID],N'EN' as [Language],N'No.' as [Content],N'23' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.ord' as [MessageID],N'VN' as [Language],N'SỐ TT.  次序' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OrdID' as [MessageID],N'CN' as [Language],N'不行' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OrdID' as [MessageID],N'EN' as [Language],N'No' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OrdID' as [MessageID],N'VN' as [Language],N'STT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11' as [MessageID],N'CN' as [Language],N'加班1.5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11' as [MessageID],N'EN' as [Language],N'Overtime 1.5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11' as [MessageID],N'VN' as [Language],N'Công ngoài giờ 1.5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11Amt' as [MessageID],N'CN' as [Language],N'工资单编号1.5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11Amt' as [MessageID],N'EN' as [Language],N'OT 150% Amt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11Amt' as [MessageID],N'VN' as [Language],N'Lương h.số 1.5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11Deduct' as [MessageID],N'CN' as [Language],N'OT 150％扣除' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11Deduct' as [MessageID],N'EN' as [Language],N'OT 150% deduct' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11Deduct' as [MessageID],N'VN' as [Language],N'OT 150% deduct' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11NonTax' as [MessageID],N'CN' as [Language],N'薪金1.5（免税）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11NonTax' as [MessageID],N'EN' as [Language],N'Salary No. 1.5 (tax separation)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT11NonTax' as [MessageID],N'VN' as [Language],N'Lương h.số 1,5 (tách thuế)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT150' as [MessageID],N'EN' as [Language],N'OT 150' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT150Amount' as [MessageID],N'CN' as [Language],N'进钱' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT150Amount' as [MessageID],N'EN' as [Language],N'into money' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT150Amount' as [MessageID],N'VN' as [Language],N'Thành tiền' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT150N' as [MessageID],N'EN' as [Language],N'OT 150N' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT200' as [MessageID],N'EN' as [Language],N'OT 200' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT200Amount' as [MessageID],N'CN' as [Language],N'进钱' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT200Amount' as [MessageID],N'EN' as [Language],N'into money' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT200Amount' as [MessageID],N'VN' as [Language],N'Thành tiền' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT200N' as [MessageID],N'EN' as [Language],N'OT 200N' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT21' as [MessageID],N'CN' as [Language],N'加班3.0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT21' as [MessageID],N'EN' as [Language],N'Overtime Public 3.0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT21' as [MessageID],N'VN' as [Language],N'Công Ngoài giờ 3.0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT21Amt' as [MessageID],N'CN' as [Language],N'薪金3.0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT21Amt' as [MessageID],N'EN' as [Language],N'OT 300% Amt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT21Amt' as [MessageID],N'VN' as [Language],N'Lương h.số 3.0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT22' as [MessageID],N'EN' as [Language],N'OT 210%' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT22Amt' as [MessageID],N'CN' as [Language],N'TC晚215％' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT22Amt' as [MessageID],N'EN' as [Language],N'OT 210% Amt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT22Amt' as [MessageID],N'VN' as [Language],N'TC Đêm 215%' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT22NonTax' as [MessageID],N'CN' as [Language],N'3号薪水（税金分割）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT22NonTax' as [MessageID],N'EN' as [Language],N'No. 3 salary (tax separation)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT22NonTax' as [MessageID],N'VN' as [Language],N'Lương h.số 3 (tách thuế)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT23' as [MessageID],N'CN' as [Language],N'加班2.0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT23' as [MessageID],N'EN' as [Language],N'Overtime 2.0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT23' as [MessageID],N'VN' as [Language],N'Công ngoài giờ 2.0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT23Amt' as [MessageID],N'CN' as [Language],N'工资单编号2.0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT23Amt' as [MessageID],N'EN' as [Language],N'OT 200% Amt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT23Amt' as [MessageID],N'VN' as [Language],N'Lương h.số 2.0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT23NonTax' as [MessageID],N'CN' as [Language],N'2号薪水（含税）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT23NonTax' as [MessageID],N'EN' as [Language],N'No. 2 salary (tax agent)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT23NonTax' as [MessageID],N'VN' as [Language],N'Lương h.số 2 (tác thuế)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT26' as [MessageID],N'CN' as [Language],N'周日加班' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT26' as [MessageID],N'EN' as [Language],N'OT 270%' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT26' as [MessageID],N'VN' as [Language],N'Tăng ca chủ nhật' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT26Amt' as [MessageID],N'EN' as [Language],N'OT 270% Amt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT27' as [MessageID],N'CN' as [Language],N'加班假期' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT27' as [MessageID],N'EN' as [Language],N'Holiday overtime' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT27' as [MessageID],N'VN' as [Language],N'Tăng ca ngày lễ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT29' as [MessageID],N'CN' as [Language],N'TC休假' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT29' as [MessageID],N'EN' as [Language],N'TC rested' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT29' as [MessageID],N'VN' as [Language],N'TC nghỉ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT300' as [MessageID],N'EN' as [Language],N'OT 300' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OT300N' as [MessageID],N'EN' as [Language],N'OT 300N' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTAmount' as [MessageID],N'CN' as [Language],N'进钱' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTAmount' as [MessageID],N'EN' as [Language],N'into money' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTAmount' as [MessageID],N'VN' as [Language],N'Thành tiền' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTAmtLastMonth' as [MessageID],N'EN' as [Language],N'OT Last Month Amt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTDeduction' as [MessageID],N'CN' as [Language],N'免征所得税' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTDeduction' as [MessageID],N'EN' as [Language],N'Tax-free income' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTDeduction' as [MessageID],N'VN' as [Language],N'Thu nhập miễn thuế TNCN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTH_AL' as [MessageID],N'CN' as [Language],N'其他津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTH_AL' as [MessageID],N'EN' as [Language],N'Other allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTH_AL' as [MessageID],N'VN' as [Language],N'PC Khác' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Oth_Allowance' as [MessageID],N'CN' as [Language],N'其他津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Oth_Allowance' as [MessageID],N'EN' as [Language],N'Other Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Oth_Allowance' as [MessageID],N'VN' as [Language],N'Other Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Oth_Allowance222' as [MessageID],N'CN' as [Language],N'其他电脑' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Oth_Allowance222' as [MessageID],N'EN' as [Language],N'Other PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Oth_Allowance222' as [MessageID],N'VN' as [Language],N'PC Khác' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTHER_AL' as [MessageID],N'CN' as [Language],N'其他津贴（抚养儿童+患有AV）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTHER_AL' as [MessageID],N'EN' as [Language],N'Other allowances (child support + by AV)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTHER_AL' as [MessageID],N'VN' as [Language],N'Phụ cấp khác (nuôi con + bằng AV)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTHER_AL_Org' as [MessageID],N'CN' as [Language],N'其他（AV + Con +...）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTHER_AL_Org' as [MessageID],N'EN' as [Language],N'Others (AV + Con +...)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTHER_AL_Org' as [MessageID],N'VN' as [Language],N'Khác (AV +Con+…)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Other_Allowance' as [MessageID],N'VN' as [Language],N'Khoản phụ cấp bù tháng khác' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OtherAddTaxable' as [MessageID],N'EN' as [Language],N'Other Taxable Income' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OtherDeduct' as [MessageID],N'CN' as [Language],N'除非另有' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OtherDeduct' as [MessageID],N'EN' as [Language],N'Except other' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OtherDeduct' as [MessageID],N'VN' as [Language],N'Trừ khác' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OtherDeductAmt' as [MessageID],N'CN' as [Language],N'除非另有' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OtherDeductAmt' as [MessageID],N'EN' as [Language],N'Except other' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OtherDeductAmt' as [MessageID],N'VN' as [Language],N'Trừ khác' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.otherDeduction' as [MessageID],N'CN' as [Language],N'除非另有' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.otherDeduction' as [MessageID],N'EN' as [Language],N'Except other' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.otherDeduction' as [MessageID],N'VN' as [Language],N'Trừ khác' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OtherDeductTaxable' as [MessageID],N'EN' as [Language],N'Other Taxable Deduction' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTNDHours' as [MessageID],N'CN' as [Language],N'工作日加班' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTNDHours' as [MessageID],N'EN' as [Language],N'Weekday overtime' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTNDHours' as [MessageID],N'VN' as [Language],N'Tăng ca ngày thường' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTNDSalary' as [MessageID],N'CN' as [Language],N'工作日的加班费' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTNDSalary' as [MessageID],N'EN' as [Language],N'Salary overtime on weekdays' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTNDSalary' as [MessageID],N'VN' as [Language],N'Lương tăng ca ngày thường' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTWHHours' as [MessageID],N'CN' as [Language],N'周末加班/假期' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTWHHours' as [MessageID],N'EN' as [Language],N'Weekend / week overtime' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTWHHours' as [MessageID],N'VN' as [Language],N'Tăng ca cuối tuần/ lễ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTWHSalary' as [MessageID],N'CN' as [Language],N'周末加班/假期的工资' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTWHSalary' as [MessageID],N'EN' as [Language],N'Weekend / holiday overtime pay' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OTWHSalary' as [MessageID],N'VN' as [Language],N'Lương tăng ca cuối tuần/ lễ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OwnerDeduction' as [MessageID],N'CN' as [Language],N'减少自己' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OwnerDeduction' as [MessageID],N'EN' as [Language],N'Personal Deduction' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.OwnerDeduction' as [MessageID],N'VN' as [Language],N'Giảm trừ bản thân' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PaidByInsSalaryLeaves' as [MessageID],N'CN' as [Language],N'休息模式' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PaidByInsSalaryLeaves' as [MessageID],N'EN' as [Language],N'Vacation mode' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PaidByInsSalaryLeaves' as [MessageID],N'VN' as [Language],N'Nghỉ chế độ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PARK_AL' as [MessageID],N'CN' as [Language],N'寄車' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PARK_AL' as [MessageID],N'EN' as [Language],N'Parking' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PARK_AL' as [MessageID],N'VN' as [Language],N'Parking Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PARK_AL_NT' as [MessageID],N'EN' as [Language],N'Parking - Other nontax' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PC Test' as [MessageID],N'VN' as [Language],N'PC Test' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PC1' as [MessageID],N'CN' as [Language],N'PC11' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PC1' as [MessageID],N'EN' as [Language],N'PC11' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PC1' as [MessageID],N'VN' as [Language],N'PC11' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PC2' as [MessageID],N'CN' as [Language],N'钱饭' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PC2' as [MessageID],N'EN' as [Language],N'Meal' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PC2' as [MessageID],N'VN' as [Language],N'Meal' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Period' as [MessageID],N'EN' as [Language],N'Period EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PH' as [MessageID],N'CN' as [Language],N'假期或其他假期' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PH' as [MessageID],N'EN' as [Language],N'Holiday or other holiday' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PH' as [MessageID],N'VN' as [Language],N'Nghỉ lễ hoặc nghỉ khác' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PHONE_AL' as [MessageID],N'CN' as [Language],N'电话津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PHONE_AL' as [MessageID],N'EN' as [Language],N'Phone Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PHONE_AL' as [MessageID],N'VN' as [Language],N'Phone Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PHONE_AL_Old' as [MessageID],N'CN' as [Language],N'电话（旧）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PHONE_AL_Old' as [MessageID],N'EN' as [Language],N'Phone (old)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PHONE_AL_Old' as [MessageID],N'VN' as [Language],N'Điện thoại (cũ)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.POS_AL' as [MessageID],N'CN' as [Language],N'位置' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.POS_AL' as [MessageID],N'EN' as [Language],N'Position Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.POS_AL' as [MessageID],N'VN' as [Language],N'Chức vụ (mới)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.POS_AL_Old' as [MessageID],N'CN' as [Language],N'位置（旧）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.POS_AL_Old' as [MessageID],N'EN' as [Language],N'Position (old)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.POS_AL_Old' as [MessageID],N'VN' as [Language],N'Chức vụ (cũ)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Position_AL' as [MessageID],N'CN' as [Language],N'职位津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PositionCode' as [MessageID],N'CN' as [Language],N'位置' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PositionCode' as [MessageID],N'EN' as [Language],N'Position Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.PositionCode' as [MessageID],N'VN' as [Language],N'Chức danh' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RA_AL' as [MessageID],N'CN' as [Language],N'大米（+）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RA_AL' as [MessageID],N'EN' as [Language],N'Rice (+)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RA_AL' as [MessageID],N'VN' as [Language],N'Cơm (+)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Reload' as [MessageID],N'CN' as [Language],N'重新載入資料' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Reload' as [MessageID],N'EN' as [Language],N'Refresh' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Reload' as [MessageID],N'VN' as [Language],N'Làm Mới' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RES_AL' as [MessageID],N'CN' as [Language],N'责任津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RES_AL' as [MessageID],N'EN' as [Language],N'Responsibility allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RES_AL' as [MessageID],N'VN' as [Language],N'Trách nhiệm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RES_AL_Org' as [MessageID],N'CN' as [Language],N'标准责任' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RES_AL_Org' as [MessageID],N'EN' as [Language],N'Standard responsibility' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RES_AL_Org' as [MessageID],N'VN' as [Language],N'Trách nhiệm chuẩn' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Responsibility_AL' as [MessageID],N'CN' as [Language],N'责任津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Responsibility_AL' as [MessageID],N'VN' as [Language],N'Trách nhiệm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Retailhours' as [MessageID],N'CN' as [Language],N'奇数小时' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Retailhours' as [MessageID],N'EN' as [Language],N'Odd hour' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Retailhours' as [MessageID],N'VN' as [Language],N'Giờ lẻ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RetailSalary' as [MessageID],N'CN' as [Language],N'区别点' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RetailSalary' as [MessageID],N'EN' as [Language],N'Difference' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.RetailSalary' as [MessageID],N'VN' as [Language],N'Chênh lệch' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Root' as [MessageID],N'CN' as [Language],N'根源' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Root' as [MessageID],N'EN' as [Language],N'Root' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Root' as [MessageID],N'VN' as [Language],N'Root' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SalaryDate' as [MessageID],N'CN' as [Language],N'工作时间' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SalaryDate' as [MessageID],N'EN' as [Language],N'Working time' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SalaryDate' as [MessageID],N'VN' as [Language],N'Thời gian làm việc' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SalaryHistoryID' as [MessageID],N'EN' as [Language],N'SalaryHistoryID EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SalaryHistoryIDLastMonth' as [MessageID],N'EN' as [Language],N'SalaryHistoryIDLastMonth EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SalaryHistoryIDOld' as [MessageID],N'EN' as [Language],N'SalaryHistoryIDOld EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SalaryLastmonth' as [MessageID],N'EN' as [Language],N'SalaryLastmonth EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SalaryPerHour' as [MessageID],N'EN' as [Language],N'Salary Per Hour' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.SALCAL_MAIN' as [MessageID],N'EN' as [Language],N'Payroll Calculation' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.SALCAL_MAIN' as [MessageID],N'VN' as [Language],N'Tính lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SalProbation' as [MessageID],N'CN' as [Language],N'L实习' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SalProbation' as [MessageID],N'EN' as [Language],N'L Internship' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SalProbation' as [MessageID],N'VN' as [Language],N'L Thực tập' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.sdfdf' as [MessageID],N'CN' as [Language],N'dfdf' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.sdsad' as [MessageID],N'CN' as [Language],N'ádsd' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SEN_AL' as [MessageID],N'EN' as [Language],N'Loyalty Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Senior_AL' as [MessageID],N'VN' as [Language],N'Thâm niên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Seniority_AL' as [MessageID],N'VN' as [Language],N'Thăm niên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Seniority1' as [MessageID],N'CN' as [Language],N'标准资历1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Seniority1' as [MessageID],N'EN' as [Language],N'Standard service 1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Seniority1' as [MessageID],N'VN' as [Language],N'Thâm niên chuẩn 1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Seniority2' as [MessageID],N'CN' as [Language],N'资历标准2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Seniority2' as [MessageID],N'EN' as [Language],N'Standard period 2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Seniority2' as [MessageID],N'VN' as [Language],N'Thâm niên chuẩn 2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SeniorityMonth' as [MessageID],N'CN' as [Language],N'高级资历' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SeniorityMonth' as [MessageID],N'EN' as [Language],N'Standard service period' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SeniorityMonth' as [MessageID],N'VN' as [Language],N'Thâm niên chuẩn' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SeniorProbation_AL' as [MessageID],N'VN' as [Language],N'Thâm niên (thử việc)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SI' as [MessageID],N'CN' as [Language],N'SI' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SI' as [MessageID],N'EN' as [Language],N'SI' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SI' as [MessageID],N'VN' as [Language],N'BHXH' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SIAmt' as [MessageID],N'CN' as [Language],N'社会保险（8％）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SIAmt' as [MessageID],N'EN' as [Language],N'Social insurance (8%)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SIAmt' as [MessageID],N'VN' as [Language],N'BHXH (8%)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SIAmt_Comp' as [MessageID],N'CN' as [Language],N'社会保险17.5％' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SIAmt_Comp' as [MessageID],N'EN' as [Language],N'Social insurance 17.5%' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SIAmt_Comp' as [MessageID],N'VN' as [Language],N'BHXH 17.5%' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SIHIIncome' as [MessageID],N'CN' as [Language],N'工资计算的社会保险-健康保险' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SIHIIncome' as [MessageID],N'EN' as [Language],N'Salary for SI,HI' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SIHIIncome' as [MessageID],N'VN' as [Language],N'Lương tính BHXH-BHYT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SIIncome' as [MessageID],N'EN' as [Language],N'Salary for SI' as [Content],N'1' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SInflation' as [MessageID],N'CN' as [Language],N'PC滑落' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SInflation' as [MessageID],N'EN' as [Language],N'PC price slippage' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SInflation' as [MessageID],N'VN' as [Language],N'PC trượt giá' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SPEC_AL' as [MessageID],N'CN' as [Language],N'专用电脑' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SPEC_AL' as [MessageID],N'EN' as [Language],N'Special PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SPEC_AL' as [MessageID],N'VN' as [Language],N'PC đặc biệt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SPEC_AL_Old' as [MessageID],N'CN' as [Language],N'专用PC（旧）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SPEC_AL_Old' as [MessageID],N'EN' as [Language],N'Special (old) PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SPEC_AL_Old' as [MessageID],N'VN' as [Language],N'PC đặc biệt (cũ)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SPECIAL_AL' as [MessageID],N'EN' as [Language],N'Special Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SPosition' as [MessageID],N'CN' as [Language],N'PC位置' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SPosition' as [MessageID],N'EN' as [Language],N'PC Position' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SPosition' as [MessageID],N'VN' as [Language],N'PC Chức vụ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SResponsive' as [MessageID],N'CN' as [Language],N'个人电脑责任' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SResponsive' as [MessageID],N'EN' as [Language],N'Responsibility PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SResponsive' as [MessageID],N'VN' as [Language],N'PC Trách nhiệm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SSeniority' as [MessageID],N'CN' as [Language],N'个人电脑资历' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SSeniority' as [MessageID],N'EN' as [Language],N'Senior PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SSeniority' as [MessageID],N'VN' as [Language],N'PC thâm niên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.StdWD' as [MessageID],N'CN' as [Language],N'標準工作天' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.StdWD' as [MessageID],N'EN' as [Language],N'STD WKDs' as [Content],N'1' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.StdWD' as [MessageID],N'VN' as [Language],N'Ngày công chuẩn' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.STechnical' as [MessageID],N'CN' as [Language],N'PC工程' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.STechnical' as [MessageID],N'EN' as [Language],N'Technical PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.STechnical' as [MessageID],N'VN' as [Language],N'PC kỹ thuật' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.STT2' as [MessageID],N'CN' as [Language],N'不行' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.STT2' as [MessageID],N'EN' as [Language],N'NO' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.STT2' as [MessageID],N'VN' as [Language],N'SỐ TT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SumDayWaitingWork' as [MessageID],N'CN' as [Language],N'等待工作的天数' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SumDayWaitingWork' as [MessageID],N'EN' as [Language],N'Number of days waiting for work' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SumDayWaitingWork' as [MessageID],N'VN' as [Language],N'Số ngày chờ việc' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SumLeaveHoliday' as [MessageID],N'CN' as [Language],N'假期，魔术' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SumLeaveHoliday' as [MessageID],N'EN' as [Language],N'Holidays, permission' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SumLeaveHoliday' as [MessageID],N'VN' as [Language],N'Ngày lễ, phép' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SundayRetail' as [MessageID],N'CN' as [Language],N'CN奇' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SundayRetail' as [MessageID],N'EN' as [Language],N'Sun odd' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SundayRetail' as [MessageID],N'VN' as [Language],N'CN lẻ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SundayWork' as [MessageID],N'CN' as [Language],N'周日' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SundayWork' as [MessageID],N'EN' as [Language],N'Sunday' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.SundayWork' as [MessageID],N'VN' as [Language],N'Chủ nhật' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.t' as [MessageID],N'CN' as [Language],N'根目錄' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.t' as [MessageID],N'EN' as [Language],N'Root' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.t' as [MessageID],N'VN' as [Language],N'Root' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TableEditor' as [MessageID],N'CN' as [Language],N'表格编辑器' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TableEditor' as [MessageID],N'EN' as [Language],N'TableEditor' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TableEditor' as [MessageID],N'VN' as [Language],N'TableEditor' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TakeHome' as [MessageID],N'CN' as [Language],N'进钱' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TakeHome' as [MessageID],N'EN' as [Language],N'into money' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TakeHome' as [MessageID],N'VN' as [Language],N'Thành tiền' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.TAX_AL' as [MessageID],N'EN' as [Language],N'Tax Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TaxableIncomeBeforeDeduction' as [MessageID],N'CN' as [Language],N'税前收益' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TaxableIncomeBeforeDeduction' as [MessageID],N'EN' as [Language],N'Chargeable Income' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TaxableIncomeBeforeDeduction' as [MessageID],N'VN' as [Language],N'Thu nhập trước thuế' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TaxableOT' as [MessageID],N'EN' as [Language],N'Taxable OT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TaxAmt' as [MessageID],N'EN' as [Language],N'PIT Amt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Test_AL' as [MessageID],N'VN' as [Language],N'Test_AL' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Total_INS_Com' as [MessageID],N'CN' as [Language],N'INS雇主总数' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Total_INS_Com' as [MessageID],N'EN' as [Language],N'Total INS Employer' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Total_INS_Com' as [MessageID],N'VN' as [Language],N'Total INS Employer' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.Total_INS_Emp' as [MessageID],N'EN' as [Language],N'Total insurance fund Employee' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalEarn' as [MessageID],N'EN' as [Language],N'TotalEarn EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalEmpIns' as [MessageID],N'CN' as [Language],N'员工总数' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalEmpIns' as [MessageID],N'EN' as [Language],N'Total SMUI' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalEmpIns' as [MessageID],N'VN' as [Language],N'Tổng tiền bảo hiểm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalEmploymentCost' as [MessageID],N'EN' as [Language],N'Total employment cost' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalGrossSalary' as [MessageID],N'CN' as [Language],N'工资总额' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalGrossSalary' as [MessageID],N'EN' as [Language],N'Gross salary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalGrossSalary' as [MessageID],N'VN' as [Language],N'Tổng lương gộp' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalIncome' as [MessageID],N'CN' as [Language],N'总薪水，奖金和PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalIncome' as [MessageID],N'EN' as [Language],N'Total salary, bonus & PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalIncome' as [MessageID],N'VN' as [Language],N'Tổng lương , thưởng & PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalIncome_ForSalaryTaxedAdj' as [MessageID],N'CN' as [Language],N'總收入' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalIncome_ForSalaryTaxedAdj' as [MessageID],N'EN' as [Language],N'Total income' as [Content],N'1' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalIncome_ForSalaryTaxedAdj' as [MessageID],N'VN' as [Language],N'Tổng thu nhập' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalOTAmt' as [MessageID],N'CN' as [Language],N'随着时间的推移' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalOTAmt' as [MessageID],N'EN' as [Language],N'Overtime' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalOTAmt' as [MessageID],N'VN' as [Language],N'Tổng tiền tăng ca' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalOTHour' as [MessageID],N'CN' as [Language],N'总加班时间（新）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalOTHour' as [MessageID],N'EN' as [Language],N'Total overtime hours (new)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalOTHour' as [MessageID],N'VN' as [Language],N'Tổng số giờ tăng ca (mới)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalOTHour_Old' as [MessageID],N'CN' as [Language],N'总加班时间（旧）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalOTHour_Old' as [MessageID],N'EN' as [Language],N'Total overtime hours (old)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalOTHour_Old' as [MessageID],N'VN' as [Language],N'Tổng số giờ tăng ca (cũ)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalPaidDay_C' as [MessageID],N'CN' as [Language],N'工作天' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalPaidDay_C' as [MessageID],N'EN' as [Language],N'Workday' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalPaidDay_C' as [MessageID],N'VN' as [Language],N'Ngày công' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalPaidDays' as [MessageID],N'CN' as [Language],N'工资发薪日' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalPaidDays' as [MessageID],N'EN' as [Language],N'Salary payday' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalPaidDays' as [MessageID],N'VN' as [Language],N'Ngày công trả lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalSalary_Old' as [MessageID],N'CN' as [Language],N'工资总额' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalSalary_Old' as [MessageID],N'EN' as [Language],N'total salary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalSalary_Old' as [MessageID],N'VN' as [Language],N'Tổng lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalSalaryAllowance' as [MessageID],N'CN' as [Language],N'工资总额和PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalSalaryAllowance' as [MessageID],N'EN' as [Language],N'Total salary & PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalSalaryAllowance' as [MessageID],N'VN' as [Language],N'Tổng lương & PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalSI' as [MessageID],N'EN' as [Language],N'Total SI' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalStandardSalary' as [MessageID],N'CN' as [Language],N'工资总额和PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalStandardSalary' as [MessageID],N'EN' as [Language],N'Total salary & PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalStandardSalary' as [MessageID],N'VN' as [Language],N'Tổng lương & PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalWorkingMonth' as [MessageID],N'CN' as [Language],N'在YS工作的月数' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalWorkingMonth' as [MessageID],N'EN' as [Language],N'Number of months working at YS' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TotalWorkingMonth' as [MessageID],N'VN' as [Language],N'Số tháng 
làm việc tại YS' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TRAFFIC_AL' as [MessageID],N'CN' as [Language],N'流量（新）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TRAFFIC_AL' as [MessageID],N'EN' as [Language],N'Traffic (new)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TRAFFIC_AL' as [MessageID],N'VN' as [Language],N'Giao thông (mới)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TRAFFIC_AL_Old' as [MessageID],N'CN' as [Language],N'交通（旧）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TRAFFIC_AL_Old' as [MessageID],N'EN' as [Language],N'Traffic (old)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.TRAFFIC_AL_Old' as [MessageID],N'VN' as [Language],N'Giao thông (cũ)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_companysalarysummary.TRAN_AL' as [MessageID],N'EN' as [Language],N'Transportation Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Trans_AL' as [MessageID],N'CN' as [Language],N'差旅津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Trans_AL' as [MessageID],N'EN' as [Language],N'Transportaion Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Trans_AL' as [MessageID],N'VN' as [Language],N'Transportaion Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Trans_Tax_EE_AL' as [MessageID],N'CN' as [Language],N'运输津贴总额（由EE支付）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Trans_Tax_EE_AL' as [MessageID],N'EN' as [Language],N'Transportaion Allowance gross (Paid by EE)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Trans_Tax_EE_AL' as [MessageID],N'VN' as [Language],N'Transportaion Allowance gross(Paid by EE)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UI' as [MessageID],N'CN' as [Language],N'失业保险' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UI' as [MessageID],N'EN' as [Language],N'UI' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UI' as [MessageID],N'VN' as [Language],N'BHTN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UIAmt_Comp' as [MessageID],N'CN' as [Language],N'1％失业保险' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UIAmt_Comp' as [MessageID],N'EN' as [Language],N'Unemployment insurance 1%' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UIAmt_Comp' as [MessageID],N'VN' as [Language],N'BHTN 1%' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UIIncome' as [MessageID],N'CN' as [Language],N'薪資金額算失業保' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UIIncome' as [MessageID],N'EN' as [Language],N'Salary for UI' as [Content],N'1' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UIIncome' as [MessageID],N'VN' as [Language],N'Mức lương tính BHTN' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UISalary' as [MessageID],N'EN' as [Language],N'UISalary EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ULDayCount' as [MessageID],N'CN' as [Language],N'无薪假期' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ULDayCount' as [MessageID],N'EN' as [Language],N'Unpaid leave' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.ULDayCount' as [MessageID],N'VN' as [Language],N'Nghỉ không lương' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Uniforrm_AL' as [MessageID],N'CN' as [Language],N'统一津贴' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Uniforrm_AL' as [MessageID],N'EN' as [Language],N'Uniform Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Uniforrm_AL' as [MessageID],N'VN' as [Language],N'Uniform Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Union' as [MessageID],N'CN' as [Language],N'工會' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Union' as [MessageID],N'EN' as [Language],N'EmpUnion EN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.Union' as [MessageID],N'VN' as [Language],N'Công đoàn' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UnionTotal' as [MessageID],N'EN' as [Language],N'Total trade union' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.UnPaidLeavesAmt' as [MessageID],N'EN' as [Language],N'UnPaid Leaves Amt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.WD_AL' as [MessageID],N'EN' as [Language],N'Working  Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.WORK_AL' as [MessageID],N'CN' as [Language],N'工作（新）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.WORK_AL' as [MessageID],N'EN' as [Language],N'(New) work 工作' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.WORK_AL' as [MessageID],N'VN' as [Language],N'Công việc (mới)  工作' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.WORK_AL_Old' as [MessageID],N'CN' as [Language],N'工作（旧）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.WORK_AL_Old' as [MessageID],N'EN' as [Language],N'(Old) work 工作' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.WORK_AL_Old' as [MessageID],N'VN' as [Language],N'Công việc (cũ)  工作' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.z123' as [MessageID],N'CN' as [Language],N'x' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.z123' as [MessageID],N'EN' as [Language],N'zxc' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.z123' as [MessageID],N'VN' as [Language],N'zxc' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.zxc1' as [MessageID],N'CN' as [Language],N'zxc1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.zxc1' as [MessageID],N'EN' as [Language],N'zxc1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_CompanySalarySummary.zxc1' as [MessageID],N'VN' as [Language],N'zxc1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'STD_WorkingDays' as [MessageID],N'CN' as [Language],N'標準工作天' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'STD_WorkingDays' as [MessageID],N'EN' as [Language],N'Standard workday' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'STD_WorkingDays' as [MessageID],N'VN' as [Language],N'Ngày công chuẩn' as [Content],N'100000' as [Frequency],NULL as [IgnorePending]
EXEC sp_SaveData  @TableNameTmp = '#tblMD_Message' , @TableName = 'tblMD_Message' , @Command = 'insert' , @IsDropTableTmp =0,@IsPrint=0IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
--#endregion _


ALTER TABLE tblCustomInputImportMonthly ALTER COLUMN [15] MONEY
ALTER TABLE tblCustomInputImportMonthly ALTER COLUMN [16] MONEY

ALTER TABLE tblCustomInputImportMonthly ALTER COLUMN [17] MONEY

if object_id('[dbo].[fn_vtblEmployeeList_Simple_ByDate]') is null
	EXEC('CREATE FUNCTION [dbo].[fn_vtblEmployeeList_Simple_ByDate]() RETURNS TABLE AS RETURN (SELECT 1 as Test)')
GO

ALTER FUNCTION [dbo].[fn_vtblEmployeeList_Simple_ByDate] (@ViewDate DATE, @EmployeeID NVARCHAR(MAX), @LoginID INT)
RETURNS TABLE
AS
RETURN (
		WITH LatestDivision AS (
				SELECT EmployeeID, DivisionID, DepartmentID, SectionID, GroupID, ChangedDate, ROW_NUMBER() OVER (
						PARTITION BY EmployeeID ORDER BY ChangedDate DESC
						) AS rn
				FROM dbo.tblDivDepSecPos
				WHERE ChangedDate <= @ViewDate
				), LatestPosition AS (
				SELECT EmployeeID, PositionID, EffectiveDate, ROW_NUMBER() OVER (
						PARTITION BY EmployeeID ORDER BY EffectiveDate DESC
						) AS rn
				FROM dbo.tblPositionHistory
				WHERE EffectiveDate <= @ViewDate
				), LatestEmployeeType AS (
				SELECT EmployeeID, EmployeeTypeID, EffectiveDate, ROW_NUMBER() OVER (
						PARTITION BY EmployeeID ORDER BY EffectiveDate DESC
						) AS rn
				FROM dbo.tblEmployeeTypeHistory
				WHERE EffectiveDate <= @ViewDate
				)
		SELECT te.EmployeeID, te.FullName, te.HireDate, te.ProbationEndDate, TerminateDate = CAST(CASE
					WHEN stat.EmployeeStatusID = 20
						THEN stat.ChangedDate
					ELSE NULL
					END AS DATE), div.DivisionID, div.DepartmentID, div.SectionID, div.GroupID, stat.EmployeeStatusID, pos.PositionID, et.EmployeeTypeID, te.Sex
			, te.Birthday, te.TAOptionID, CASE
				WHEN ISNULL(te.NationID, 0) <> 234
					THEN 1
				ELSE 0
				END AS IsForeign, LastWorkingDate = ISNULL(DATEADD(DAY, - 1, CAST(CASE
							WHEN stat.EmployeeStatusID = 20
								THEN stat.ChangedDate
							ELSE NULL
							END AS DATE)), '9999-12-31')
		FROM tblEmployee te
		INNER JOIN dbo.fn_vEmployeeStatus_ByDate(@ViewDate, @EmployeeID, @LoginID) stat ON te.EmployeeID = stat.EmployeeID
		LEFT JOIN LatestDivision div ON te.EmployeeID = div.EmployeeID AND div.rn = 1
		LEFT JOIN LatestPosition pos ON te.EmployeeID = pos.EmployeeID AND pos.rn = 1
		LEFT JOIN LatestEmployeeType et ON te.EmployeeID = et.EmployeeID AND et.rn = 1
		)
GO


if object_id('[dbo].[fn_vtblEmployeeList_Bydate]') is null
	EXEC('CREATE FUNCTION [dbo].[fn_vtblEmployeeList_Bydate]() RETURNS TABLE AS RETURN (SELECT 1 as Test)')
GO

ALTER FUNCTION [dbo].[fn_vtblEmployeeList_Bydate] (@ViewDate DATE, @EmployeeID NVARCHAR(max), @LoginID INT)
RETURNS TABLE
AS
RETURN (
    WITH LatestDivDepSec AS (
        SELECT
            EmployeeID,
            DivisionID,
            DepartmentID,
            SectionID,
            GroupID,
            ChangedDate,
            ROW_NUMBER() OVER (PARTITION BY EmployeeID ORDER BY ChangedDate DESC) as rn
        FROM dbo.tblDivDepSecPos
        WHERE ChangedDate <= @ViewDate
    ),
    LatestPosition AS (
        SELECT
            EmployeeID,
            PositionID,
            EffectiveDate,
            ROW_NUMBER() OVER (PARTITION BY EmployeeID ORDER BY EffectiveDate DESC) as rn
        FROM dbo.tblPositionHistory
        WHERE EffectiveDate <= @ViewDate
    ),
    LatestContract AS (
        SELECT
            EmployeeID,
            ContractID,
            ContractCode,
            ContractStartDay,
            ROW_NUMBER() OVER (PARTITION BY EmployeeID ORDER BY ContractStartDay DESC) as rn
        FROM dbo.tblLabourContract
        WHERE ContractStartDay <= @ViewDate
    ),
    LatestEmployeeType AS (
        SELECT
            EmployeeID,
            EmployeeTypeID,
            EffectiveDate,
            ROW_NUMBER() OVER (PARTITION BY EmployeeID ORDER BY EffectiveDate DESC) as rn
        FROM dbo.tblEmployeeTypeHistory
        WHERE EffectiveDate <= @ViewDate
    ),
    LatestLevel AS (
        SELECT
            EmployeeID,
            LevelID,
            EffectiveDate,
            ROW_NUMBER() OVER (PARTITION BY EmployeeID ORDER BY EffectiveDate DESC) as rn
        FROM dbo.tblLevelIDHistory
        WHERE EffectiveDate <= @ViewDate
    ),
    LatestCostCenter AS (
        SELECT
            EmployeeID,
            CostCenter,
            EffectiveDate,
            ROW_NUMBER() OVER (PARTITION BY EmployeeID ORDER BY EffectiveDate DESC) as rn
        FROM dbo.tblCostCenterHistory
        WHERE EffectiveDate <= @ViewDate
    ),
    LatestWorkingPlace AS (
        SELECT
            EmployeeID,
            WorkingPlaceID,
            WorkingPlaceEffectiveDate,
            ROW_NUMBER() OVER (PARTITION BY EmployeeID ORDER BY WorkingPlaceEffectiveDate DESC) as rn
        FROM tblWorkingPlaceHistory
    )
    SELECT
        ISNULL(REPLACE(te.EmployeeID, div_c.EmployeeCodePrefix, ''), CAST(te.EmployeeID AS VARCHAR(20))) as EmployeeCodeReal,
        div_c.EmployeeCodePrefix,
        te.*,
        wp.WorkingPlaceID,
        wp.WorkingPlaceEffectiveDate,
        CASE WHEN stat.EmployeeStatusID = 20 THEN CAST(stat.ChangedDate AS DATE) END as TerminateDate,
        div.DivisionID,
        div.DepartmentID,
        div.SectionID,
        div.GroupID,
        div.ChangedDate as DivDepSecChangedDate,
        stat.EmployeeStatusID,
        stat.ChangedDate as StatusChangedDate,
        stat.StatusEndDate,
        pos.PositionID,
        pos.EffectiveDate as PositionEffectiveDate,
        et.EmployeeTypeID,
        et.EffectiveDate as EmployeeTypeEffectiveDate,
        lv.LevelID,
        lv.EffectiveDate as LevelIDEffectiveDate,
        co.CostCenter,
        co.EffectiveDate as CostCenterEffectiveDate,
        ct.ContractID,
        ct.ContractCode,
        ct.ContractStartDay,
        ISNULL(
            DATEADD(DAY, -1, CASE WHEN stat.EmployeeStatusID = 20 THEN CAST(stat.ChangedDate AS DATE) END),
            '9999-12-31'
        ) as LastWorkingDate,
        CASE WHEN ISNULL(te.NationID, 234) <> 234 THEN 1 ELSE 0 END as IsForeign
    FROM tblEmployee te
    INNER JOIN dbo.fn_vEmployeeStatus_ByDate(@ViewDate, @EmployeeID, @LoginID) stat
        ON te.EmployeeID = stat.EmployeeID
    LEFT JOIN LatestDivDepSec div
        ON te.EmployeeID = div.EmployeeID AND div.rn = 1
    LEFT JOIN tblDivision div_c
        ON div.DivisionID = div_c.DivisionID
    LEFT JOIN LatestPosition pos
        ON te.EmployeeID = pos.EmployeeID AND pos.rn = 1
    LEFT JOIN LatestContract ct
      ON te.EmployeeID = ct.EmployeeID AND ct.rn = 1
    LEFT JOIN LatestEmployeeType et
        ON te.EmployeeID = et.EmployeeID AND et.rn = 1
    LEFT JOIN LatestLevel lv
        ON te.EmployeeID = lv.EmployeeID AND lv.rn = 1
    LEFT JOIN LatestCostCenter co
        ON te.EmployeeID = co.EmployeeID AND co.rn = 1
    LEFT JOIN LatestWorkingPlace wp
        ON te.EmployeeID = wp.EmployeeID AND wp.rn = 1
);
GO


if object_id('[dbo].[sp_processSummaryAttendance]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_processSummaryAttendance] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_processSummaryAttendance] (@LoginID INT, @Year INT, @Month INT, @ViewType INT = 0, @Payroll BIT = 0)
AS
BEGIN
	--View Type: 0: 0 view chỉ process, 1: view summary, 2: view in-out chi tiết
	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	--LeaveType
	DECLARE @Query NVARCHAR(MAX) = ''

	SELECT @Query += N'IF COL_LENGTH(''tblAttendanceSummary'',''' + LeaveCode + N''') is null
                        ALTER TABLE tblAttendanceSummary ADD [' + LeaveCode + N'] FLOAT;'
	FROM tblLeaveType
	WHERE IsVisible = 1

	EXEC (@Query)

	--Tạo bảng tạm để lưu trữ dữ liệu
	SELECT *, CAST(NULL AS DATETIME) TerminateDate, CAST(NULL AS DATETIME) HireDate, CAST(NULL AS FLOAT) PercentProbation, CAST(NULL AS DATETIME) ProbationEndDate, CAST(NULL AS INT) isForeign
	INTO #tblAttendanceSummary
	FROM tblAttendanceSummary
	WHERE 1 = 0

	SELECT te.EmployeeID, te.DivisionID, te.DepartmentID, te.SectionID, te.GroupID, te.EmployeeTypeID, te.PositionID, te.EmployeeStatusID, te.Sex, CASE
			WHEN te.HireDate > @fromDate
				THEN cast(1 AS BIT)
			ELSE 0
			END AS NewStaff, CAST(0 AS BIT) AS TerminatedStaff, HireDate, CAST(NULL AS DATETIME) TerminateDate, ProbationEndDate, te.LastWorkingDate, CAST(0 AS BIT) hasTwoPeriods, et.isLocalStaff, te.isForeign
	INTO #EmployeeList
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, '-1', @LoginID) te
	INNER JOIN tblDivision div ON te.DivisionID = div.DivisionID
	LEFT JOIN tblEmployeeType et ON te.EmployeeTypeID = et.EmployeeTypeID

	-- WHERE NOT EXISTS (
	-- 		SELECT 1
	-- 		FROM tblSal_Lock l
	-- 		WHERE te.EmployeeID = l.EmployeeID AND l.Month = @Month AND l.Year = @Year
	-- 		)
	IF EXISTS (
			SELECT a.EmployeeID
			FROM tblAtt_LockMonth a
			INNER JOIN #EmployeeList e ON a.EmployeeID = e.EmployeeID
			WHERE a.Month = @Month AND a.Year = @Year
			)
	BEGIN
		DELETE
		FROM #EmployeeList
		WHERE EmployeeID IN (
				SELECT DISTINCT a.EmployeeID
				FROM tblAtt_LockMonth a
				INNER JOIN #EmployeeList e ON a.EmployeeID = e.EmployeeID
				WHERE a.Month = @Month AND a.Year = @Year
				)
	END

	-- khoa roi thi khong tinh luong nua
	SELECT *
	INTO #fn_EmployeeStatus_ByDate
	FROM dbo.fn_EmployeeStatus_ByDate(@ToDate)

	SELECT *
	INTO #fn_EmployeeStatus_ByDate_FirstLastMonth
	FROM dbo.fn_EmployeeStatus_ByDate(dateadd(dd, 1, @ToDate))

	SELECT l.*
	INTO #tblLvHistory
	FROM tblLvHistory l
	INNER JOIN #EmployeeList e ON l.EmployeeID = e.EmployeeID
	WHERE LeaveDate BETWEEN @FromDate AND @ToDate

	--lay trang thai ben bang history cho chinh xac
	UPDATE #EmployeeList
	SET EmployeeStatusID = stt.EmployeeStatusID
	FROM #EmployeeList te
	INNER JOIN #fn_EmployeeStatus_ByDate stt ON te.EmployeeID = stt.EmployeeID

	UPDATE #EmployeeList
	SET EmployeeStatusID = stt.EmployeeStatusID, TerminateDate = stt.ChangedDate, LastWorkingDate = dateadd(dd, - 1, stt.ChangedDate)
	FROM #EmployeeList te
	INNER JOIN #fn_EmployeeStatus_ByDate_FirstLastMonth stt ON te.EmployeeID = stt.EmployeeID
	WHERE stt.EmployeeStatusID = 20

	UPDATE #EmployeeList
	SET TerminatedStaff = 1
	WHERE TerminateDate IS NOT NULL

	SELECT *
	INTO #CurrentSalary
	FROM dbo.fn_CurrentSalaryHistoryIDByDate(@ToDate)

	--Những người có 2 dòng công = 2 dòng lương
	INSERT INTO #tblAttendanceSummary (Year, Month, EmployeeID, HireDate, TerminateDate, ProbationEndDate, PeriodID, SalaryHistoryID, FromDate, ToDate, isForeign)
	SELECT @Year, @Month, sh.EmployeeID, HireDate, TerminateDate, ProbationEndDate, 0, sh.SalaryHistoryID, CASE
			WHEN sh.DATE < @FromDate
				THEN @FromDate
			ELSE sh.DATE
			END, @ToDate, te.isForeign
	FROM #EmployeeList te
	INNER JOIN #CurrentSalary s ON te.EmployeeID = s.EmployeeID
	INNER JOIN tblSalaryHistory sh ON s.SalaryHistoryID = sh.SalaryHistoryID
	WHERE sh.DATE >= te.HireDate

	INSERT INTO #tblAttendanceSummary (Year, Month, EmployeeID, HireDate, TerminateDate, ProbationEndDate, PeriodID, SalaryHistoryID, FromDate, ToDate, isForeign)
	SELECT @Year, @Month, sh.EmployeeID, HireDate, TerminateDate, ProbationEndDate, 1, sh.SalaryHistoryID, CASE
			WHEN sh.DATE < @FromDate
				THEN @FromDate
			ELSE sh.DATE
			END, @ToDate, te.isForeign
	FROM #EmployeeList te
	INNER JOIN tblSalaryHistory sh ON te.EmployeeID = sh.EmployeeID
	WHERE sh.SalaryHistoryID NOT IN (
			SELECT SalaryHistoryID
			FROM #CurrentSalary
			) AND [Date] > @FromDate AND NOT EXISTS (
			SELECT 1
			FROM #tblAttendanceSummary s
			WHERE sh.SalaryHistoryID = s.SalaryHistoryID
			) AND sh.DATE <= @ToDate AND ISNULL(te.isForeign, 0) = 0

	UPDATE #tblAttendanceSummary
	SET PeriodID = 0
	WHERE ToDate < @ToDate

	UPDATE #tblAttendanceSummary
	SET PeriodID = 0
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tblAttendanceSummary s
			GROUP BY EmployeeID
			HAVING COUNT(1) = 1
			)

	--Thử việc
	IF EXISTS (
			SELECT 1
			FROM #tblAttendanceSummary sh
			WHERE ProbationEndDate BETWEEN @FromDate AND @ToDate AND HireDate <> ProbationEndDate
			)
	BEGIN
		UPDATE #tblAttendanceSummary
		SET PercentProbation = ISNULL(CASE
					WHEN ISNULL(tsh.PercentProbation, 0) = 0
						THEN NULL
					ELSE tsh.PercentProbation
					END, et.PercentProbation)
		FROM #tblAttendanceSummary sh
		LEFT JOIN tblSalaryHistory tsh ON sh.SalaryHistoryID = tsh.SalaryHistoryID
		LEFT JOIN #EmployeeList te ON sh.EmployeeID = te.EmployeeID
		LEFT JOIN tblEmployeeType et ON et.EmployeeTypeID = te.EmployeeTypeID
		WHERE sh.ProbationEndDate BETWEEN @FromDate AND @ToDate AND sh.HireDate <> sh.ProbationEndDate

		--het thu viec trong thang nay
		UPDATE #tblAttendanceSummary
		SET FromDate = DATEADD(day, 1, ProbationEndDate), PeriodID = 1
		FROM #tblAttendanceSummary sh
		WHERE ISNULL(PercentProbation, 0) > 0 AND ProbationEndDate BETWEEN @FromDate AND @ToDate AND sh.HireDate <> sh.ProbationEndDate AND FromDate <= ProbationEndDate AND ToDate >= ProbationEndDate

		DECLARE @MaxSalaryHistoryId BIGINT

		SET @MaxSalaryHistoryId = (
				SELECT MAX(SalaryHistoryID)
				FROM #tblAttendanceSummary
				) + 7121997

		INSERT INTO #tblAttendanceSummary (Year, Month, EmployeeID, HireDate, TerminateDate, PeriodID, SalaryHistoryID, FromDate, ToDate)
		SELECT @Year, @Month, sh.EmployeeID, sh.HireDate, sh.TerminateDate, 0, sh.SalaryHistoryID, CASE
				WHEN @FromDate < HireDate
					THEN HireDate
				ELSE @FromDate
				END, ProbationEndDate
		FROM #tblAttendanceSummary sh
		WHERE sh.ProbationEndDate BETWEEN @FromDate AND @ToDate AND sh.HireDate <> sh.ProbationEndDate
	END

	SELECT ot.EmployeeID, ot.OTDate, ot.ApprovedHours, ot.OTKind
	INTO #tblOTList
	FROM tblOTList ot
	WHERE ot.OTDate BETWEEN @FromDate AND @ToDate AND ot.Approved = 1 AND ApprovedHours <> 0 AND ot.EmployeeID IN (
			SELECT te.EmployeeID
			FROM #EmployeeList te
			)

	IF (@Payroll = 0)
	BEGIN
		-- ko nằm trong danh sách thì ko tính lương nha
		CREATE TABLE #Tadata (EmployeeID VARCHAR(20), Attdate DATE, HireDate DATE, EmployeeStatusID INT, HolidayStatus INT, WorkingTime FLOAT(53), Std_Hour_PerDays FLOAT(53), Lvamount FLOAT(53), PaidAmount_Des FLOAT(53), UnpaidAmount_Des FLOAT(53), SalaryHistoryID INT, CutSI BIT, EmployeeTypeID INT)

		SET ANSI_NULLS ON;
		SET ANSI_PADDING ON;
		SET ANSI_WARNINGS ON;
		SET ARITHABORT ON;
		SET CONCAT_NULL_YIELDS_NULL ON;
		SET QUOTED_IDENTIFIER ON;
		SET NUMERIC_ROUNDABORT OFF;

		EXEC sp_WorkingTimeProvider @Month = @Month, @Year = @Year, @fromdate = @FromDate, @todate = @ToDate, @loginId = @LoginID
	END

	DECLARE @ROUND_TOTAL_WORKINGDAYS INT

	SET @ROUND_TOTAL_WORKINGDAYS = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_TOTAL_WORKINGDAYS'
			)
	SET @ROUND_TOTAL_WORKINGDAYS = ISNULL(@ROUND_TOTAL_WORKINGDAYS, 2)

	DELETE
	FROM #Tadata
	WHERE Attdate < HireDate

	--Người nước ngoài mặc định full công - trường hợp vào làm/nghỉ làm giữa tháng
	UPDATE att
	SET WorkingTime = 8, Std_Hour_PerDays = 8
	FROM #Tadata att
	INNER JOIN #EmployeeList e ON att.EmployeeID = e.EmployeeID
	WHERE ISNULL(e.IsForeign, 0) = 1 AND (e.HireDate BETWEEN @FromDate AND @ToDate OR e.TerminateDate BETWEEN @FromDate AND @ToDate)

	SELECT ta.EmployeeID, ta.SalaryHistoryID, SUM(CASE
				WHEN ISNULL(HolidayStatus, 0) <> 1
					THEN 1
				ELSE 0
				END) AS STD_PerHistoryID, ROUND(SUM(CASE
					WHEN ISNULL(HolidayStatus, 0) = 0
						THEN ta.WorkingTime / isnull(ta.Std_Hour_PerDays, 8)
					ELSE 0
					END), @ROUND_TOTAL_WORKINGDAYS) AS AttDays, ROUND(SUM(CASE
					WHEN ISNULL(HolidayStatus, 0) = 0
						THEN ta.WorkingTime
					ELSE 0
					END), @ROUND_TOTAL_WORKINGDAYS) AS AttHrs, SUM(ta.PaidAmount_Des) AS PaidLeaveHrs, SUM(ta.PaidAmount_Des / isnull(ta.Std_Hour_PerDays, 8)) AS PaidLeaveDays, SUM(ta.UnpaidAmount_Des) AS UnpaidLeaveHrs, SUM(ta.UnpaidAmount_Des / isnull(ta.Std_Hour_PerDays, 8)) AS UnpaidLeaveDays, SUM(CASE
				WHEN HolidayStatus = 1
					THEN 1
				ELSE 0
				END) AS TotalSunDay, SUM(CASE
				WHEN CutSI = 1 AND HolidayStatus <> 1
					THEN 1
				ELSE 0
				END) TotalNonWorkingDays, ta.Std_Hour_PerDays, s.PeriodID
	INTO #tblSal_AttendanceData
	FROM #Tadata ta
	INNER JOIN #tblAttendanceSummary s ON ta.EmployeeID = s.EmployeeID AND ta.AttDate BETWEEN s.FromDate AND s.ToDate
	GROUP BY ta.EmployeeID, ta.SalaryHistoryID, ta.Std_Hour_PerDays, s.PeriodID

	SELECT EmployeeID, SaturdayDate AS SatDate
	INTO #SatWorkList
	FROM dbo.fn_GetEmployeeSatWork(@LoginID, @Month, @Year)
	--WHERE SaturdayDate BETWEEN @FromDate AND @ToDate
	
	UNION
	
	SELECT EmployeeID, SaturdayDate_2nd AS SatDate
	FROM dbo.fn_GetEmployeeSatWork(@LoginID, @Month, @Year)

	-- Đếm số ngày thứ 7 cho từng nhân viên theo HireDate và TerminateDate
	UPDATE s
	SET AttHrs = ISNULL(s.AttHrs, 0) + (ISNULL(s.Std_Hour_PerDays, 8) * SatCount), AttDays = ISNULL(s.AttDays, 0) + SatCount
	FROM #tblSal_AttendanceData s
	INNER JOIN #EmployeeList e ON s.EmployeeID = e.EmployeeID
	INNER JOIN #tblAttendanceSummary ta ON ta.EmployeeID = s.EmployeeID AND s.PeriodID = ta.PeriodID
	CROSS APPLY (
		SELECT COUNT(*) AS SatCount
		FROM (
			SELECT TOP (
					DATEDIFF(DAY, CASE
							WHEN e.HireDate > FromDate
								THEN e.HireDate
							ELSE FromDate
							END, CASE
							WHEN e.TerminateDate IS NOT NULL AND e.TerminateDate < ToDate
								THEN e.TerminateDate
							ELSE ToDate
							END) + 1
					) DATEADD(DAY, ROW_NUMBER() OVER (
						ORDER BY (
								SELECT NULL
								)
						) - 1, CASE
						WHEN e.HireDate > FromDate
							THEN e.HireDate
						ELSE FromDate
						END) AS TheDate
			FROM sys.all_objects
			) AS Dates
		WHERE DATENAME(WEEKDAY, TheDate) = 'Saturday' AND TheDate NOT IN (
				SELECT SatDate
				FROM #SatWorkList sat
				WHERE sat.EmployeeID = e.EmployeeID
				)
		) Sat
	WHERE e.isLocalStaff = 1 AND e.HireDate <= @ToDate AND (e.TerminateDate IS NULL OR e.TerminateDate >= @FromDate)

	UPDATE #tblAttendanceSummary
	SET WorkingHrs_Total = ISNULL(ta.AttHrs, 0), WorkingDays_Total = ISNULL(ta.AttDays, 0) + ISNULL(ta.PaidLeaveDays, 0), PaidLeaveDays_Total = ta.PaidLeaveDays, Std_Hour_PerDays = ta.Std_Hour_PerDays, PaidLeaveHrs_Total = ta.PaidLeaveHrs, UnpaidLeaveDays = ta.UnpaidLeaveDays, UnpaidLeaveHrs = ta.UnpaidLeaveHrs
	FROM #tblAttendanceSummary att
	INNER JOIN #tblSal_AttendanceData ta ON att.EmployeeID = ta.EmployeeID AND att.PeriodID = ta.PeriodID

	UPDATE #tblAttendanceSummary
	SET STD_WorkingDays = wds.WorkingDays_Std
	FROM #tblAttendanceSummary att
	INNER JOIN #EmployeeList te ON att.EmployeeID = te.EmployeeID
	LEFT JOIN tblWorkingDaySetting wds ON wds.EmployeeTypeID = te.EmployeeTypeID AND wds.Year = @Year AND wds.Month = @Month

	UPDATE #tblAttendanceSummary
	SET RegularWorkdays = ISNULL(wds.WorkingDays_Std, 26)
	FROM #tblAttendanceSummary att
	LEFT JOIN tblWorkingDaySetting wds ON wds.EmployeeTypeID = 0 AND wds.Year = @Year AND wds.Month = @Month

	--Người nước ngoài mặc định full công - trường hợp vào làm/nghỉ làm giữa tháng
	UPDATE att
	SET RegularWorkdays = ISNULL(RegularWorkdays, 0), WorkingHrs_Total = (RegularWorkdays * 8)
	FROM #tblAttendanceSummary att
	WHERE ISNULL(att.IsForeign, 0) = 1 AND (HireDate <= @FromDate AND (TerminateDate IS NULL OR TerminateDate >= @ToDate))

	-- UPDATE #tblAttendanceSummary
	-- SET WorkingHrs_Total = WorkingHrs_Total + ((RegularWorkdays * Std_Hour_PerDays) - (STD_WorkingDays * Std_Hour_PerDays))
	-- FROM #tblAttendanceSummary att
	-- WHERE STD_WorkingDays <> RegularWorkdays AND RegularWorkdays * ISNULL(Std_Hour_PerDays, 0) <> ISNULL(WorkingHrs_Total, 0) + ISNULL(PaidLeaveHrs_Total, 0) + ISNULL(UnpaidLeaveHrs, 0)
	-- Dynamic set-based update: pivot LvAmount from #tblLvHistory per LeaveCode and update #tblAttendanceSummary
	-- Aggregates by EmployeeID and SalaryHistoryID to match multiple salary periods per employee
	DECLARE @cols NVARCHAR(MAX), @assign NVARCHAR(MAX), @sql NVARCHAR(MAX)

	-- build column list and assignments from visible LeaveCode
	SELECT @cols = STUFF((
				SELECT ',' + QUOTENAME(LeaveCode)
				FROM tblLeaveType
				WHERE IsVisible = 1
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '')

	SELECT @assign = STUFF((
				SELECT ',s.' + QUOTENAME(LeaveCode) + ' = ISNULL(p.' + QUOTENAME(LeaveCode) + ',0)'
				FROM tblLeaveType
				WHERE IsVisible = 1
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '')

	IF @cols IS NOT NULL AND LEN(@cols) > 0
	BEGIN
		SET @sql = N'
		;WITH lv AS (
			SELECT EmployeeID, LeaveCode, SUM(ISNULL(LvAmount,0)) AS LvAmount
			FROM #tblLvHistory
			GROUP BY EmployeeID, LeaveCode
		)
		SELECT * INTO #tmpLvPivot FROM (
			SELECT EmployeeID, LeaveCode, LvAmount FROM lv
		) src
		PIVOT (SUM(LvAmount) FOR LeaveCode IN (' + @cols + N')) AS pvt;

		UPDATE s
		SET ' + @assign + N'
		FROM #tblAttendanceSummary s
		LEFT JOIN #tmpLvPivot p ON s.EmployeeID = p.EmployeeID;

		DROP TABLE #tmpLvPivot;'

		EXEC sp_executesql @sql
	END

	DELETE t
	FROM tblAttendanceSummary t
	WHERE EXISTS (
			SELECT 1
			FROM #tblAttendanceSummary s
			WHERE t.EmployeeID = s.EmployeeID AND t.Year = s.Year AND t.Month = s.Month
			)

	-- Insert processed summary rows from temp table into permanent table
	INSERT INTO tblAttendanceSummary (Year, Month, EmployeeID, PeriodID, SalaryHistoryID, FromDate, ToDate, WorkingHrs_Total, WorkingDays_Total, PaidLeaveDays_Total, UnpaidLeaveDays, PaidLeaveHrs_Total, UnpaidLeaveHrs, STD_WorkingDays, Std_Hour_PerDays, RegularWorkdays)
	SELECT Year, Month, EmployeeID, ISNULL(PeriodID, 0), SalaryHistoryID, FromDate, ToDate, WorkingHrs_Total, WorkingDays_Total, PaidLeaveDays_Total, UnpaidLeaveDays, PaidLeaveHrs_Total, UnpaidLeaveHrs, STD_WorkingDays, Std_Hour_PerDays, RegularWorkdays
	FROM #tblAttendanceSummary;

	SET @sql = '
    UPDATE s SET ' + @assign + N'
		FROM tblAttendanceSummary s
		INNER JOIN #tblAttendanceSummary p ON s.EmployeeID = p.EmployeeID AND s.Year = p.Year AND s.Month = p.Month
    '

	EXEC sp_executesql @sql

	EXEC sp_accumulatedOT @LoginID = @LoginID, @Month = @Month, @Year = @Year, @MaxOT = 40, @isView = 1

	IF (ISNULL(@ViewType, 0) = 1)
		SELECT *
		FROM tblAttendanceSummary t
		WHERE EXISTS (
				SELECT 1
				FROM #tblAttendanceSummary s
				WHERE t.EmployeeID = s.EmployeeID AND t.Year = s.Year AND t.Month = s.Month
				)
			--exec sp_processSummaryAttendance 3,2025,7
END
GO


if object_id('[dbo].[sp_AttendanceSummaryMonthly_STD]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_AttendanceSummaryMonthly_STD] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_AttendanceSummaryMonthly_STD] (@Month INT, @Year INT, @LoginID INT = 3, @LanguageID VARCHAR(2) = 'VN', @OptionView INT = 1, @isExport INT = 0)
AS
BEGIN
	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	DECLARE @GetDate DATETIME = dbo.Truncate_Date(GetDate())

	SELECT EmployeeID, FullName, DivisionID, DepartmentID, SectionID, HireDate, PositionID, TerminateDate, EmployeeTypeID, GroupID
	INTO #fn_vtblEmployeeList_Bydate
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, '-1', @LoginID) e
	WHERE EXISTS (
			SELECT 1
			FROM tblWSchedule ws
			WHERE ws.ScheduleDate BETWEEN @FromDate AND @ToDate AND ws.EmployeeID = e.EmployeeID
			) AND (ISNULL(@OptionView, '-1') = '-1' OR ISNULL(@OptionView, 0) = 0 OR (ISNULL(@OptionView, 1) = 1 AND IsForeign = 0) OR (ISNULL(@OptionView, '-1') = 2 AND ISNULL(IsForeign, 1) = 1))

	-- IF (@OptionView = 1)
	-- BEGIN
	-- 	DELETE f
	-- 	FROM #fn_vtblEmployeeList_Bydate f
	-- 	WHERE TerminateDate BETWEEN @FromDate AND @ToDate OR TerminateDate < @FromDate
	-- END
	-- IF (@OptionView = 2) --chỉ xem những người đã thôi việc
	-- BEGIN
	-- 	DELETE f
	-- 	FROM #fn_vtblEmployeeList_Bydate f
	-- 	WHERE NOT EXISTS (
	-- 			SELECT *
	-- 			FROM #fn_vtblEmployeeList_Bydate e
	-- 			WHERE e.EmployeeID = f.EmployeeID AND (TerminateDate BETWEEN @FromDate AND @ToDate OR TerminateDate < @FromDate)
	-- 			)
	-- END
	SELECT ROW_NUMBER() OVER (
			ORDER BY ORD, LeaveCode
			) AS ORD, LeaveCode, TACode
	INTO #LeaveCode
	FROM tblLeaveType
	WHERE IsVisible = 1

	SELECT ROW_NUMBER() OVER (
			ORDER BY e.EmployeeID
			) AS [No], e.EmployeeID, FullName, p.PositionName, d.DivisionName, dept.DepartmentName, s.SectionName, g.GroupName, HireDate, TerminateDate
	INTO #EmployeeList
	FROM #fn_vtblEmployeeList_Bydate e
	LEFT JOIN tblSection s ON s.SectionID = e.SectionID
	LEFT JOIN tblPosition p ON p.PositionID = e.PositionID
	LEFT JOIN tblDivision d ON d.DivisionID = e.DivisionID
	LEFT JOIN tblDepartment dept ON dept.DepartmentID = e.DepartmentID
	LEFT JOIN tblGroup g ON g.GroupID = e.GroupID

	SELECT *
	INTO #tblAttendanceSummary
	FROM tblAttendanceSummary
	WHERE 1 = 0

	ALTER TABLE #tblAttendanceSummary

	ALTER COLUMN PeriodID INT NULL

	-- Tạo danh sách các cột cần tính tổng động
	DECLARE @cols NVARCHAR(MAX) = '', @querySelector NVARCHAR(MAX) = ''

	SELECT @cols += N',SUM(' + QUOTENAME(COLUMN_NAME) + N') AS ' + QUOTENAME(COLUMN_NAME), @querySelector += N',' + QUOTENAME(COLUMN_NAME)
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_NAME = 'tblAttendanceSummary' AND COLUMN_NAME NOT IN ('Month', 'Year', 'EmployeeID', 'PeriodID', 'FromDate', 'ToDate');

	-- Tạo truy vấn động
	DECLARE @sql NVARCHAR(MAX) = N'
        INSERT INTO #tblAttendanceSummary (EmployeeID, Month, Year ' + @querySelector + N')
        SELECT
            EmployeeID,
            @Month AS Month,
            @Year AS Year
            ' + @cols + N'
        FROM tblAttendanceSummary
        WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
            SELECT EmployeeID FROM #EmployeeList
        )
        GROUP BY EmployeeID, Month, Year
    ';

	-- Thực thi truy vấn động
	EXEC sp_executesql @sql, N'@Month INT, @Year INT', @Month = @Month, @Year = @Year;

	SELECT EmployeeID, AttDate, AttStart, AttEnd
	INTO #tblHasTA
	FROM tblHasTA
	WHERE AttDate BETWEEN @FromDate AND @ToDate AND EmployeeID IN (
			SELECT te.EmployeeID
			FROM #EmployeeList te
			)

	SELECT ot.EmployeeID, ot.OTDate, ot.ApprovedHours, ot.OTKind, ots.ColumnDisplayName OTType
	INTO #tblOTList
	FROM tblOTList ot
	INNER JOIN tblOvertimeSetting ots ON ots.OTKind = ot.OTKind
	WHERE ot.OTDate BETWEEN @FromDate AND @ToDate AND ot.Approved = 1 AND ApprovedHours <> 0 AND ot.EmployeeID IN (
			SELECT te.EmployeeID
			FROM #EmployeeList te
			)

	SELECT EmployeeID, SUM(HourApprove) NSHours
	INTO #NightShiftSum
	FROM tblNightShiftList
	WHERE DATE BETWEEN @FromDate AND @ToDate AND EmployeeID IN (
			SELECT te.EmployeeID
			FROM #EmployeeList te
			) AND Approval = 1
	GROUP BY EmployeeID

	SELECT EmployeeID, SUM(ApprovedHours) AS ApprovedHours, OTKind, OTType
	INTO #tblOTSummary
	FROM #tblOTList
	GROUP BY EmployeeID, OTKind, OTType

	SELECT e.EmployeeID, ROUND(SUM(IOMinutesDeduct) / 60, 1) AS IOHrs
	INTO #InLateOutEarly
	FROM tblInLateOutEarly e
	INNER JOIN #EmployeeList elb ON elb.EmployeeID = e.EmployeeID
	WHERE ApprovedDeduct = 1 AND IODate BETWEEN @FromDate AND @ToDate
	GROUP BY e.EmployeeID

	--Dữ liệu custom
	SELECT *
	INTO #tblCustomAttendanceData
	FROM tblCustomAttendanceData
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #EmployeeList
			)

	DECLARE @CustomOTInsert NVARCHAR(MAX) = ''

	SELECT @CustomOTInsert += '
	insert into #tblOTSummary(EmployeeID,OTKind,ApprovedHours)
	select EmployeeID,''' + CAST(OTKind AS VARCHAR(10)) + ''',' + ColumnNameOn_CustomAttendanceTable + '
	from #tblCustomAttendanceData where ' + ColumnNameOn_CustomAttendanceTable + ' <>0'
	FROM tblOvertimeSetting ov
	WHERE ov.ColumnNameOn_CustomAttendanceTable IN (
			SELECT COLUMN_NAME
			FROM INFORMATION_SCHEMA.COLUMNS c
			WHERE c.TABLE_NAME = 'tblCustomAttendanceData'
			)

	EXEC (@CustomOTInsert)

	UPDATE s
	SET OTType = ov.ColumnDisplayName
	FROM #tblOTSummary s
	INNER JOIN tblOvertimeSetting ov ON ov.OTKind = s.OTKind
	WHERE OTType IS NULL

	-- --Thông tin nghỉ
	SELECT h.EmployeeID, h.LeaveCode, LeaveDate, LvAmount, LeaveStatus, lc.TACode
	INTO #LeaveHistory
	FROM tblLvHistory h
	INNER JOIN #EmployeeList e ON e.EmployeeID = h.EmployeeID
	LEFT JOIN #LeaveCode lc ON lc.LeaveCode = h.LeaveCode
	WHERE LeaveDate BETWEEN @FromDate AND @ToDate

	-- ko nằm trong danh sách thì ko tính lương nha
	CREATE TABLE #Tadata (EmployeeID VARCHAR(20), Attdate DATE, HireDate DATE, EmployeeStatusID INT, HolidayStatus INT, WorkingTime FLOAT(53), Std_Hour_PerDays FLOAT(53), Lvamount FLOAT(53), PaidAmount_Des FLOAT(53), UnpaidAmount_Des FLOAT(53), SalaryHistoryID INT, CutSI BIT, LeaveCode VARCHAR(5), EmployeeTypeID INT)

	EXEC sp_WorkingTimeProvider @Month = @Month, @Year = @Year, @fromdate = @FromDate, @todate = @ToDate, @loginId = @LoginID

	CREATE TABLE #SummaryData (
		--Hay dùng từ pivot lắm mà k bao giờ chịu pivot con ngta
		STT INT, EmployeeID VARCHAR(20), FullName NVARCHAR(MAX), Office NVARCHAR(MAX), DepartmentName NVARCHAR(MAX), HireDate DATE
		)

	INSERT INTO #SummaryData (STT, EmployeeID, FullName, HireDate, Office, DepartmentName)
	SELECT No, EmployeeID, FullName, HireDate, ISNULL(DivisionName, '') + ISNULL(DepartmentName, ''), DepartmentName
	FROM #EmployeeList

	DECLARE @Query NVARCHAR(MAX) = 'ALTER TABLE #SummaryData ADD '

	SELECT @Query += ISNULL(TACode, '') + ' DECIMAL(10, 1), '
	FROM #LeaveCode
	ORDER BY ORD ASC

	SELECT @Query += 'IOHrs DECIMAL(10, 1), TotalOT DECIMAL(10, 1), TotalDayOff DECIMAL(10, 1), TotalNS DECIMAL(10, 1),'

	SELECT @Query += ISNULL(ColumnDisplayName, '') + ' DECIMAL(10, 1),'
	FROM tblOvertimeSetting
	ORDER BY ColumnDisplayName ASC

	IF (ISNULL(@isExport, 0) = 0)
	BEGIN
		SELECT @Query += N'[' + CAST(Number AS VARCHAR(3)) + 'Att] VARCHAR(30), '
		FROM dbo.fn_Numberlist(CAST(DAY(@FromDate) AS INT), CAST(DAY(@ToDate) AS INT))
	END

	SET @Query = @Query + ' WorkHours FLOAT, PaidLeaveHrs FLOAT, UnpaidLeave FLOAT, ForgetTimekeeper INT, Signture NVARCHAR(10), Notes NVARCHAR(200)'

	EXEC sp_executesql @Query

	ALTER TABLE #Tadata ADD WorkingTimeDisplay VARCHAR(100)

	UPDATE #Tadata
	SET WorkingTimeDisplay = CASE
			WHEN ISNULL(LeaveCode, '') <> ''
				THEN LeaveCode
			WHEN AttStart IS NOT NULL OR AttEnd IS NOT NULL AND ISNULL(LeaveCode, '') = ''
				THEN ISNULL(CONVERT(VARCHAR(5), AttStart, 8), '--:--') + ' | ' + ISNULL(CONVERT(VARCHAR(5), AttEnd, 8), '--:--')
			ELSE NULL
			END
	FROM #Tadata
	LEFT JOIN #tblHasTA t ON t.EmployeeID = #Tadata.EmployeeID AND t.Attdate = #Tadata.Attdate

	IF (ISNULL(@isExport, 0) = 0)
	BEGIN
		--update workingTime
		SET @Query = ''

		SELECT @Query += N'UPDATE s SET [' + CAST(Number AS VARCHAR(3)) + 'Att] = w.WorkingTimeDisplay
                            FROM #SummaryData s
                            INNER JOIN #Tadata w ON s.EmployeeID = w.EmployeeID
                            WHERE CAST(DAY(w.Attdate) AS VARCHAR(5)) = ''' + CAST(Number AS VARCHAR(3)) + ''';'
		FROM dbo.fn_Numberlist(CAST(DAY(@FromDate) AS INT), CAST(DAY(@ToDate) AS INT))

		EXEC sp_executesql @Query
	END

	SET @Query = ''

	SELECT @Query += N'UPDATE s SET [' + ISNULL(TACode, '') + '] = w.' + ISNULL(TACode, '') + '
                        FROM #SummaryData s
                        INNER JOIN #tblAttendanceSummary w ON s.EmployeeID = w.EmployeeID;'
	FROM #LeaveCode

	EXEC sp_executesql @Query

	SET @Query = ''

	SELECT @Query += N'UPDATE s SET [' + ISNULL(ColumnDisplayName, '') + '] = w.ApprovedHours
                        FROM #SummaryData s
                        INNER JOIN #tblOTSummary w ON s.EmployeeID = w.EmployeeID
						WHERE w.OTType = ''' + ISNULL(ColumnDisplayName, '') + N''';'
	FROM tblOvertimeSetting

	EXEC sp_executesql @Query

	UPDATE s
	SET WorkHours = a.WorkingHrs_Total, PaidLeaveHrs = a.PaidLeaveHrs_Total, UnpaidLeave = a.UnpaidLeaveDays * a.Std_Hour_PerDays
	FROM #SummaryData s
	INNER JOIN #tblAttendanceSummary a ON a.EmployeeID = s.EmployeeID

	UPDATE s
	SET TotalNS = ISNULL(a.NSHours, 0)
	FROM #SummaryData s
	INNER JOIN #NightShiftSum a ON a.EmployeeID = s.EmployeeID

	UPDATE s
	SET IOHrs = ISNULL(a.IOHrs, 0)
	FROM #SummaryData s
	INNER JOIN #InLateOutEarly a ON a.EmployeeID = s.EmployeeID

	UPDATE s
	SET TotalOT = ISNULL(a.SumOTHours, 0)
	FROM #SummaryData s
	INNER JOIN (
		SELECT EmployeeID, SUM(ApprovedHours) SumOTHours
		FROM #tblOTSummary
		GROUP BY EmployeeID
		) a ON a.EmployeeID = s.EmployeeID

	SELECT EmployeeID, SaturdayDate AS SatDate
	INTO #SatWorkList
	FROM dbo.fn_GetEmployeeSatWork(@LoginID, @Month, @Year)
	--WHERE SaturdayDate BETWEEN @FromDate AND @ToDate
	
	UNION
	
	SELECT EmployeeID, SaturdayDate_2nd AS SatDate
	FROM dbo.fn_GetEmployeeSatWork(@LoginID, @Month, @Year)

	UPDATE s
	SET TotalDayOff = ISNULL(a.DayOff, 0)
	FROM #SummaryData s
	INNER JOIN (
		SELECT EmployeeID, COUNT(1) DayOff
		FROM #SatWorkList
		GROUP BY EmployeeID
		) a ON a.EmployeeID = s.EmployeeID

	ALTER TABLE #SummaryData

	DROP COLUMN Office

	--Ẩn các cột k có dữ liệu
	SELECT l.ORD, l.TACode, c.ColumnExcel
	INTO #HideColumn
	FROM #LeaveCode l
	INNER JOIN dbo.fn_ColumnExcel('G', 'Y') c ON c.ORD = l.ORD
	ORDER BY l.ORD ASC;

	WITH OTKind_CTE
	AS (
		SELECT ROW_NUMBER() OVER (
				ORDER BY ColumnDisplayName
				) AS ORD, ColumnDisplayName, OTKind
		FROM tblOvertimeSetting h
		)
	SELECT CTE.ORD, OTKind, c.ColumnExcel, ColumnDisplayName
	INTO #HideColumn_OT
	FROM OTKind_CTE CTE
	INNER JOIN dbo.fn_ColumnExcel('Z', 'AG') c ON c.ORD = CTE.ORD

	DELETE
	FROM #HideColumn
	WHERE TACode IN (
			SELECT DISTINCT TACode
			FROM #LeaveHistory
			) OR TACode IN ('P', 'AWP', 'S', 'O', 'M', 'SP')

	DELETE
	FROM #HideColumn_OT
	WHERE OTKind IN (
			SELECT DISTINCT OTKind
			FROM #tblOTSummary
			WHERE ISNULL(OTKind, '') <> ''
			)

	-- SET @Query = 'ALTER TABLE #SummaryData DROP COLUMN'
	-- SELECT @Query += N'[' + ISNULL(TACode, '') + N'],'
	-- FROM #HideColumn
	-- SELECT @Query += N'[' + ISNULL(ColumnDisplayName, '') + N'],'
	-- FROM #HideColumn_OT
	-- SELECT @Query = ISNULL(@Query, '') + ' Notes'
	-- EXEC sp_executesql @Query
	DECLARE @HideColumn NVARCHAR(MAX) = ''

	IF (ISNULL(@isExport, 0) = 1)
	BEGIN
		CREATE TABLE #ExportConfig (ORD INT identity PRIMARY KEY, TableIndex VARCHAR(max), RowIndex INT, ColumnName NVARCHAR(200), ParseType NVARCHAR(max), Position NVARCHAR(200), SheetIndex INT, TestDescription NVARCHAR(max), WithHeader INT, WithBestFit BIT, ColumnList_formatCell VARCHAR(200), formatCell VARCHAR(200))

		SET @Query = 'SELECT '

		SELECT @Query += N'''' + ISNULL(TACode, '') + N''' AS [' + ISNULL(TACode, '') + N'],'
		FROM #LeaveCode
		ORDER BY ORD ASC

		SET @Query += '''In Late/Out Early'''

		EXEC sp_executesql @Query

		SELECT @HideColumn += N'' + ISNULL(TACode, '') + N','
		FROM #HideColumn

		SELECT @HideColumn += N'' + ISNULL(ColumnDisplayName, '') + N','
		FROM #HideColumn_OT

		-- IF EXISTS (
		-- 		SELECT 1
		-- 		FROM #HideColumn
		-- 		) OR EXISTS (
		-- 		SELECT 1
		-- 		FROM #HideColumn_OT
		-- 		)
		-- BEGIN
		-- 	INSERT INTO #ExportConfig (ParseType, Position, SheetIndex)
		-- 	SELECT 'DeleteColumn', ColumnExcel, 0
		-- 	FROM #HideColumn
		-- 	UNION
		-- 	SELECT 'DeleteColumn', ColumnExcel, 0
		-- 	FROM #HideColumn_OT
		--     ORDER BY ColumnExcel desc
		-- END
		INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex, WithHeader)
		VALUES (0, 'Table_NonInsert', 'G6', 0, 0)

		ALTER TABLE #SummaryData

		DROP COLUMN WorkHours, PaidLeaveHrs, UnpaidLeave

		SELECT *
		FROM #SummaryData

		SELECT N'From/Từ:  ' + CONVERT(NVARCHAR(10), @FromDate, 103) + N'                                    To/Đến: ' + CONVERT(NVARCHAR(10), @ToDate, 103)

		SELECT ColumnDisplayName + ': ' + DescriptionEN
		FROM tblOvertimeSetting
		ORDER BY ColumnDisplayName ASC

		SELECT TACode + ': ' + DescriptionEN
		FROM tblLeaveType
		WHERE IsVisible = 1
		ORDER BY ORD

		INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex, WithHeader)
		VALUES (3, 'Table_NonInsert', 'B11', 0, 0)

		INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex, WithHeader)
		VALUES (4, 'Table_NonInsert', 'F11', 0, 0)

		INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex, WithHeader)
		VALUES (1, 'Table|HideColumn=' + @HideColumn, 'B7', 0, 0)

		INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex, WithHeader)
		VALUES (2, 'Table_NonInsert', 'G3', 0, 0)

		SELECT *
		FROM #ExportConfig
		ORDER BY ORD

		RETURN
	END

	IF (ISNULL(@isExport, 0) = 0)
	BEGIN
		SET @Query = 'ALTER TABLE #SummaryData DROP COLUMN '

		SELECT @Query += N'' + ISNULL(TACode, '') + N','
		FROM #LeaveCode
		WHERE TACode NOT IN (
				SELECT DISTINCT TACode
				FROM #LeaveHistory
				)

		SELECT @Query += N'' + ISNULL(ColumnDisplayName, '') + N','
		FROM #HideColumn_OT

		SELECT @Query = ISNULL(@Query, '') + ' Notes'

		EXEC sp_executesql @Query
	END

	SELECT *
	FROM #SummaryData
	ORDER BY EmployeeID

	RETURN
		-- 	DECLARE @html NVARCHAR(MAX) = '', @css NVARCHAR(MAX) = '', @data NVARCHAR(MAX) = '', --cẩn thận k đủ chỗ chứa dữ liệu
		-- 		@Leave NVARCHAR(MAX) = '', @Date NVARCHAR(MAX) = '', @final NVARCHAR(MAX) = '', @javaScript NVARCHAR(MAX) = ''
		-- 	SET @css =
		-- 		N'
		-- 			<style>
		-- 	.table-container {
		-- 		width: auto;
		-- 		max-height: 97.8vh;
		-- 		font-family: ''Segoe UI'', Tahoma, Geneva, Verdana, sans-serif;
		-- 		padding: 0;
		-- 		min-height: 90vh;
		-- 		/* Make the container scrollable vertically so sticky headers work
		-- 		 Sticky positioning is relative to the nearest scrolling ancestor */
		-- 		overflow: auto;
		-- 		position: relative;
		-- 		background-color: white !important;
		-- 	}
		--     table {
		--         border-collapse: collapse;
		--         table-layout: fixed;
		--         font-size: 0.7rem;
		--         /* enforce specified column widths */
		--     }
		--     .th-td-css {
		--         border: 1px solid #eee;
		--         padding: 5px;
		--         text-align: center;
		--         white-space: nowrap;
		--         height: 30px;
		--         overflow: hidden;
		--         text-overflow: ellipsis;
		--     }
		-- 	thead {
		-- 		z-index: 2;
		-- 		/* position applied per-row below to support two stacked sticky header rows */
		-- 		border: 1px solid #FFF;
		-- 	}
		-- 	/* Make the first header row stick to the top */
		-- 	thead tr:first-child th {
		-- 		position: sticky;
		-- 		top: 0;
		-- 		z-index: 5;
		-- 	}
		-- 	/* Make the second header row stick right below the first row */
		-- 	thead tr:last-child th {
		-- 		position: sticky;
		-- 		top: 40px; /* adjust if header row height changes */
		-- 		z-index: 4;
		-- 	}
		--     .th-css {
		--         background-color: #004c39;
		--         color: #fff;
		--         font-size: 0.7rem;
		--         padding: 5px 10px;
		--     }
		--     .Sunday {
		--         background-color: #CFCFCF;
		--     }
		--     .section-name {
		--         padding-top: 5px;
		--         padding-bottom: 5px;
		--         padding-left: 170px;
		--         font-weight: bold;
		--         text-transform: uppercase;
		--         background-color: #DDDDDD;
		--     }
		--     .weekday {
		--         display: block;
		--         font-size: 0.6rem;
		--         color: #edffc8;
		--     }
		--     .day-num {
		--         display: block;
		--         font-weight: 600;
		--       border-bottom: 1px solid #d0d0d0;
		--         /* divider between day number and weekday */
		--     }
		--     td.sticky-col {
		--         position: sticky !important;
		--         z-index: 2;
		--         background-color: white;
		--         color: black;
		--     }
		--     th.sticky-col {
		--         position: sticky !important;
		--         z-index: 20;
		--     }
		--     /* Position first three sticky columns explicitly (adjust left values to match column widths) */
		--     th.sticky-col:nth-child(1),
		--     td.sticky-col:nth-child(1) {
		--         width: 35px;
		--         left: -1px;
		--     }
		-- 	th.sticky-col:nth-child(2),
		--     td.sticky-col:nth-child(2) {
		--     width: 60px;
		--         left: 32px;
		--     }
		--     th.sticky-col:nth-child(3),
		--     td.sticky-col:nth-child(3) {
		--         width: 120px;
		--         left: 118px;
		--         /* sum of widths of first and second columns */
		--     }
		--     /* Narrow day columns (T1..T31) */
		--     th:nth-child(n+10):nth-child(-n+40),
		--     td:nth-child(n+10):nth-child(-n+40) {
		--         width: 32px;
		--         min-width: 28px;
		--         max-width: 40px;
		--         white-space: nowrap;
		--         text-align: center;
		-- 		z-index: 1;
		--     }
		--     /* Work summary columns */
		--     th:nth-child(41),
		--     td:nth-child(41),
		--     th:nth-child(42),
		--     td:nth-child(42),
		--     th:nth-child(43),
		--     td:nth-child(43),
		--     th:nth-child(44),
		--     td:nth-child(44),
		--     th:nth-child(45),
		--     td:nth-child(45) {
		--         width: 90px;
		--         min-width: 80px;
		--     }
		--     .table-container tr:nth-child(even) {
		--         background-color: #F8F8FF;
		--     }
		--     /* Hiệu ứng khi được chọn */
		--     .table-container tr.selected {
		--         background-color: #004c39;
		--         color: #fff;
		--     }
		--     .table-container tr.selected td.sticky-col {
		--         background-color: #004c39;
		--         color: #fff;
		--     }
		-- </style>'
		-- 	-- Build dynamic two-row header: fixed columns (rowspan=2), day numbers (row1) and weekday abbreviations (row2)
		-- 	-- Create date list for the period
		-- 	IF OBJECT_ID('tempdb..#DateList') IS NOT NULL DROP TABLE #DateList;
		-- 	SELECT DAY([DATE]) AS JDate, DATEPART(WEEKDAY, [DATE]) AS DW, [DATE] AS FullDate
		-- 	INTO #DateList
		-- 	FROM dbo.fn_datelist(@FromDate, @ToDate)
		-- 	ORDER BY [DATE];
		-- 	DECLARE @dayHeader NVARCHAR(MAX) = N'', @weekdayHeader NVARCHAR(MAX) = N'';
		-- 	-- Build ordered day number header safely using FOR XML PATH
		-- 	SELECT @dayHeader = (
		-- 		SELECT N'<th class="th-td-css th-css">' + CAST(JDate AS NVARCHAR(3)) + N'</th>'
		-- 		FROM #DateList
		-- 		ORDER BY FullDate
		-- 		FOR XML PATH(''), TYPE
		-- 	).value('.', 'NVARCHAR(MAX)');
		-- 	-- Build ordered weekday header (3-letter EN abbreviations)
		-- 	SELECT @weekdayHeader = (
		-- 		SELECT N'<th class="th-td-css th-css"><span class="weekday">' +
		-- 			(CASE WHEN DW = 1 THEN N'Sun' WHEN DW = 2 THEN N'Mon' WHEN DW = 3 THEN N'Tue' WHEN DW = 4 THEN N'Wed' WHEN DW = 5 THEN N'Thu' WHEN DW = 6 THEN N'Fri' WHEN DW = 7 THEN N'Sat' END)
		-- 			+ N'</span></th>'
		-- 		FROM #DateList
		-- 		ORDER BY FullDate
		-- 		FOR XML PATH(''), TYPE
		-- 	).value('.', 'NVARCHAR(MAX)');
		-- 	DECLARE @queryTop NVARCHAR(MAX) = N'';
		-- 	DECLARE @queryBottom NVARCHAR(MAX) = N'';
		-- 	SET @queryTop = @queryTop + N'<th class="th-td-css th-css sticky-col" rowspan="2">STT</th>'
		-- 		+ N'<th class="th-td-css th-css sticky-col" rowspan="2">Mã nhân viên</th>'
		-- 		+ N'<th class="th-td-css th-css sticky-col" rowspan="2">Họ tên</th>'
		-- 		+ N'<th class="th-td-css th-css" rowspan="2">HireDate</th>'
		-- 		+ N'<th class="th-td-css th-css" rowspan="2">DepartmentName</th>'
		-- 		+ @dayHeader
		-- 		+ N'<th class="th-td-css th-css" rowspan="2">WorkHours</th>'
		-- 		+ N'<th class="th-td-css th-css" rowspan="2">Workdays</th>'
		-- 		+ N'<th class="th-td-css th-css" rowspan="2">PaidLeaveHrs</th>'
		-- 		+ N'<th class="th-td-css th-css" rowspan="2">PaidLeave</th>'
		-- 		+ N'<th class="th-td-css th-css" rowspan="2">UnpaidLeave</th>';
		-- 	SET @queryBottom = @weekdayHeader;
		-- 	SET @html = N'
		-- 			<div class="table-container">
		-- 				<table>
		-- 					<thead>
		-- 						<tr>' + @queryTop + N'</tr>
		-- 						<tr>' + @queryBottom + N'</tr>
		-- 					</thead>
		-- 					<tbody>
		-- 					';
		-- 	-- Build @data by concatenating rows from #SummaryData including dynamic day columns (T1..Tn)
		-- 	DECLARE @cols NVARCHAR(MAX) = N'';
		-- 	DECLARE @sql NVARCHAR(MAX) = N'';
		-- 		-- Check whether any T* columns exist in #SummaryData
		-- 		DECLARE @hasCols INT = 0;
		-- 		SELECT @hasCols = COUNT(*)
		-- 		FROM tempdb.INFORMATION_SCHEMA.COLUMNS
		-- 		WHERE TABLE_NAME LIKE '#SummaryData%'
		-- 			AND COLUMN_NAME LIKE 'T%';
		-- 		IF @hasCols > 0
		-- 	BEGIN
		-- 		DECLARE @colsExpr NVARCHAR(MAX) = N'';
		-- 		DECLARE @colname sysname;
		-- 		DECLARE col_cursor CURSOR LOCAL FAST_FORWARD FOR
		-- 			SELECT COLUMN_NAME
		-- 			FROM tempdb.INFORMATION_SCHEMA.COLUMNS
		-- 			WHERE TABLE_NAME LIKE '#SummaryData%'
		-- 			AND COLUMN_NAME LIKE 'T%'
		-- 			ORDER BY COLUMN_NAME;
		-- 		OPEN col_cursor;
		-- 		FETCH NEXT FROM col_cursor INTO @colname;
		-- 		WHILE @@FETCH_STATUS = 0
		-- 		BEGIN
		-- 			SET @colsExpr = @colsExpr + N' + N''<td class="th-td-css">'' + ISNULL(CAST(' + QUOTENAME(@colname) + N' AS VARCHAR(50)), N'''') + N''</td>'' ';
		-- 			FETCH NEXT FROM col_cursor INTO @colname;
		-- 		END
		-- 		CLOSE col_cursor;
		-- 		DEALLOCATE col_cursor;
		-- 		SET @sql = N'SELECT @out = (
		-- 			SELECT N''<tr>''
		-- 				+ N''<td class="th-td-css sticky-col">'' + CAST(STT AS NVARCHAR(10)) + N''</td>''
		-- 				+ N''<td class="th-td-css sticky-col">'' + ISNULL(EmployeeID, '''') + N''</td>''
		-- 				+ N''<td class="th-td-css sticky-col">'' + ISNULL(FullName, '''') + N''</td>''
		-- 				+ N''<td class="th-td-css">'' + ISNULL(CONVERT(VARCHAR(20), HireDate, 103), '''') + N''</td>''
		-- 				+ N''<td class="th-td-css">'' + ISNULL(DepartmentName, '''') + N''</td>''
		-- 				' + @colsExpr + N' + N''</tr>''
		-- 			FROM #SummaryData
		-- 			ORDER BY STT
		-- 			FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)'')';
		-- 		EXEC sp_executesql @sql, N'@out NVARCHAR(MAX) OUTPUT', @out=@data OUTPUT;
		-- 	END
		-- 	ELSE
		-- 	BEGIN
		-- 		SET @data = N''; -- no dynamic day columns found
		-- 	END
		-- 	SET @javaScript = N'<script>
		-- 						// Lấy tất cả các hàng trong tbody
		-- 						var rows = document.querySelectorAll("tbody tr");
		-- 						// Thêm sự kiện click cho mỗi hàng
		-- 						rows.forEach(function(row) {
		-- 							row.addEventListener("click", function() {
		-- 								// Loại bỏ hiệu ứng chọn từ tất cả các hàng
		-- 								rows.forEach(function(r) {
		-- 									r.classList.remove("selected");
		-- 								});
		-- 								// Thêm hiệu ứng chọn cho hàng được click và hàng kế tiếp (nếu có)
		-- 								this.classList.add("selected");
		-- 								var nextRow = this.nextElementSibling;
		-- 								if (nextRow) {
		-- 									nextRow.classList.add("selected");
		-- 								}
		-- 							});
		-- 						});
		-- 					</script>'
		-- 	SELECT @css + @html + ISNULL(@data, '') + N'</tbody>' + @javaScript AS Col1
END
GO


if object_id('[dbo].[sp_getMonthlyPayrollCheckList]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_getMonthlyPayrollCheckList] as select 1')
GO

--exec sp_getMonthlyPayrollCheckList 12,2017
ALTER PROCEDURE [dbo].[sp_getMonthlyPayrollCheckList] (@LoginID INT = 3, @Month INT = 1, @Year INT = 2019, @SalaryTermID INT = 0, @NotSelect BIT = 0, @OptionView INT = 0)
AS
BEGIN
	DECLARE @ToDate DATE, @FromDate DATE

	SELECT @ToDate = ToDate, @FromDate = FromDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	SELECT EmployeeID, FullName, HireDate, TerminateDate, LastWorkingDate, EmployeeStatusID, DivisionID, DepartmentID, EmployeeTypeID
	INTO #tmpEmployeeList
	FROM dbo.fn_vtblEmployeeList_Simple_Bydate(@ToDate, '-1', @LoginID)
	WHERE ISNULL(@OptionView, '-1') = '-1' OR @OptionView = 0 OR (ISNULL(@OptionView, 0) = 1 AND ISNULL(IsForeign, 0) = 0) OR (ISNULL(@OptionView, 0) = 2 AND ISNULL(IsForeign, 0) = 1)

	CREATE TABLE #Tadata (EmployeeID VARCHAR(20), Attdate DATE, HireDate DATE, EmployeeStatusID INT, HolidayStatus INT, WorkingTime FLOAT(53), Std_Hour_PerDays FLOAT(53), Lvamount FLOAT(53), PaidAmount_Des FLOAT(53), UnpaidAmount_Des FLOAT(53), SalaryHistoryID INT, CutSI BIT, EmployeeTypeID INT)

	EXEC sp_processSummaryAttendance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @ViewType = 0, @Payroll = 0

	SELECT *
	INTO #AttendanceSummary
	FROM tblAttendanceSummary
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			) AND PeriodID = 0

	DELETE tblMonthlyPayrollCheckList
	FROM tblMonthlyPayrollCheckList cl
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			) AND Month = @Month AND Year = @Year AND ISNULL(Approved, 0) <> 1 AND NOT EXISTS (
			SELECT 1
			FROM tblSal_Lock sl
			WHERE cl.EmployeeID = sl.EmployeeID AND sl.Month = @Month AND sl.Year = @Year
			)

	SELECT te.EmployeeID, te.FullName, te.HireDate, @Month Month, @Year Year, te.TerminateDate, te.EmployeeStatusID, cast(0 AS BIT) AS isLowTaxableInCome, CASE
			WHEN (@Year % 400 = 0) OR (@Year % 4 = 0 AND @Year % 100 <> 0)
				THEN 366
			ELSE 365
			END AS DaysOfYear, CAST(NULL AS FLOAT) ActualDayOfYear, CAST(NULL AS FLOAT) Bonus6Month_STD_Days, CAST(NULL AS FLOAT) Bonus6Month_ActualDays, a.RegularWorkdays * a.STD_Hour_PerDays STD_WorkingHours, CASE
			WHEN YEAR(te.HireDate) < @Year
				THEN 12
			WHEN YEAR(te.HireDate) > @Year
				THEN 0
			ELSE 12 - DATEPART(MONTH, te.HireDate) + 1
			END ActualMonth
	INTO #tblMonthlyPayrollCheckList
	FROM #tmpEmployeeList te
	INNER JOIN #AttendanceSummary a ON te.EmployeeID = a.EmployeeID
	WHERE te.EmployeeID NOT IN (
			SELECT EmployeeID
			FROM tblMonthlyPayrollCheckList m
			WHERE m.Month = @Month AND m.Year = @Year
			)

	-- nhan vien da nghi viecj hoan nghi thai san nhung co khoa tra bo sung
	INSERT INTO #tblMonthlyPayrollCheckList (EmployeeID, FullName, HireDate, Month, Year, TerminateDate, isLowTaxableInCome, EmployeeStatusID, DaysOfYear)
	SELECT te.EmployeeID, te.FullName, te.HireDate, @Month Month, @Year Year, TerminateDate, cast(0 AS BIT) AS isLowTaxableInCome, te.EmployeeStatusID, CASE
			WHEN (@Year % 400 = 0) OR (@Year % 4 = 0 AND @Year % 100 <> 0)
				THEN 366
			ELSE 365
			END
	FROM #tmpEmployeeList te
	WHERE EXISTS (
			SELECT 1
			FROM tblPr_Adjustment a
			WHERE te.EmployeeID = a.EmployeeID AND a.Month = @month AND a.Year = @year
			) AND NOT EXISTS (
			SELECT 1
			FROM #tblMonthlyPayrollCheckList c
			WHERE te.EmployeeID = c.EmployeeID
			)

	DECLARE @HalfStart DATE, @HalfEnd DATE, @HalfDays INT;

	IF @Month BETWEEN 1 AND 6
	BEGIN
		SET @HalfStart = DATEFROMPARTS(@Year, 1, 1);
		SET @HalfEnd = EOMONTH(DATEFROMPARTS(@Year, 6, 1));
	END
	ELSE
	BEGIN
		SET @HalfStart = DATEFROMPARTS(@Year, 7, 1);
		SET @HalfEnd = DATEFROMPARTS(@Year, 12, 31);
	END

	SET @HalfDays = DATEDIFF(day, @HalfStart, @HalfEnd) + 1;

	UPDATE e
	SET ActualDayOfYear = CASE
			WHEN e.HireDate IS NULL
				THEN e.DaysOfYear
			WHEN YEAR(e.HireDate) < @Year
				THEN e.DaysOfYear
			WHEN YEAR(e.HireDate) > @Year
				THEN 0
			ELSE e.DaysOfYear - DATEPART(dayofyear, e.HireDate)
			END + 1,
		-- Số ngày chuẩn cho 6 tháng và số ngày thực tế trong 6 tháng
		Bonus6Month_STD_Days = @HalfDays, Bonus6Month_ActualDays = CASE
			WHEN e.HireDate IS NULL
				THEN @HalfDays
			WHEN YEAR(e.HireDate) < @Year
				THEN @HalfDays
			WHEN YEAR(e.HireDate) > @Year
				THEN 0
			WHEN e.HireDate > @HalfEnd
				THEN 0
			WHEN e.HireDate <= @HalfStart
				THEN @HalfDays
			ELSE DATEDIFF(day, e.HireDate, @HalfEnd) + 1
			END, ActualMonth = CASE
			WHEN YEAR(e.HireDate) < @Year
				THEN 12
			WHEN YEAR(e.HireDate) > @Year
				THEN 0
			ELSE 12 - DATEPART(MONTH, e.HireDate) + 1
			END
	FROM #tblMonthlyPayrollCheckList e

	--vao lam lai
	--chua vao lam
	DELETE #tblMonthlyPayrollCheckList
	WHERE HireDate > @ToDate

	--nghi viec hoac nghi thai san roi
	DELETE c
	FROM #tblMonthlyPayrollCheckList c
	WHERE TerminateDate <= @FromDate AND NOT EXISTS (
			SELECT 1
			FROM tblPR_Adjustment p
			WHERE p.EmployeeID = c.EmployeeID AND p.Month = c.Month AND p.year = c.Year
			)

	--dua du lieu vao bang thuc te
	INSERT INTO tblMonthlyPayrollCheckList (EmployeeID, Month, Year, isSalCal, isLowTaxableInCome, Number6DayMonth, Number6DayMonth_Actual, NumberDayOfYear, NumberDayOfYear_Actual, STD_WorkingHours, ActualMonthInYear)
	SELECT DISTINCT EmployeeID, Month, Year, 1, isLowTaxableInCome, Bonus6Month_STD_Days, Bonus6Month_ActualDays, DaysOfYear, ActualDayOfYear, STD_WorkingHours, ActualMonth
	FROM #tblMonthlyPayrollCheckList
	WHERE NOT EXISTS (
			SELECT 1
			FROM tblMonthlyPayrollCheckList m
			WHERE m.EmployeeID = #tblMonthlyPayrollCheckList.EmployeeID AND m.Month = @Month AND m.Year = @Year
			)

	--xu ly cam ket thu nhap thap
	DECLARE @LastMonth INT = CASE
			WHEN @month = 1
				THEN 12
			ELSE @month - 1
			END, @LastYear INT = CASE
			WHEN @month = 1
				THEN @year - 1
			ELSE @year
			END

	SELECT *
	INTO #LastMonth
	FROM tblMonthlyPayrollCheckList c2
	WHERE c2.Month = @LastMonth AND c2.Year = @LastYear

	UPDATE c1
	SET c1.isLowTaxableInCome = isnull(c2.isLowTaxableInCome, 0)
	FROM tblMonthlyPayrollCheckList c1
	INNER JOIN #LastMonth c2 ON c1.EmployeeID = c2.EmployeeID AND c1.isLowTaxableInCome <> c2.isLowTaxableInCome
	WHERE isnull(c1.Approved, 0) = 0

	--loai nhan vien khong tinh luong
	DELETE p
	FROM tblMonthlyPayrollCheckList p
	INNER JOIN #tmpEmployeeList e ON p.EmployeeID = e.EmployeeID AND isnull(p.Approved, 0) = 0 AND month = @Month AND year = @Year AND e.EmployeeTypeID IN (
			SELECT EmployeeTypeID
			FROM tblEmployeeType
			WHERE isNotSalCal = 1
			)

	--xóa tạm đi
	DROP TABLE #tblMonthlyPayrollCheckList

	UPDATE e
	SET STD_WorkingHours = a.RegularWorkdays * a.STD_Hour_PerDays
	FROM tblMonthlyPayrollCheckList e
	INNER JOIN #AttendanceSummary a ON e.EmployeeID = a.EmployeeID
	WHERE e.Month = @Month AND e.Year = @Year AND e.STD_WorkingHours IS NULL

	--Ratio bonus 6 month
	SELECT l.DivisionID, l.LevelID, l.Bonus6MAllowance, l.Ratio
	INTO #tblBonus6Ratio
	FROM tblBonus6Ratio l
	INNER JOIN (
		SELECT DivisionID, LevelID, MAX(EffectiveDate) AS EffectiveDate
		FROM tblBonus6Ratio
		WHERE EffectiveDate <= @ToDate
		GROUP BY DivisionID, LevelID
		) r ON l.DivisionID = r.DivisionID AND l.LevelID = r.LevelID

	UPDATE e
	SET Bonus6MonthAllowance = ISNULL(b.Bonus6MAllowance, 1), RatioBonus6Month = ISNULL(b.Ratio, 1)
	FROM tblMonthlyPayrollCheckList e
	INNER JOIN #tmpEmployeeList t ON e.EmployeeID = t.EmployeeID
	LEFT JOIN #tblBonus6Ratio b ON t.DivisionID = b.DivisionID AND e.LevelID = b.LevelID
	WHERE e.Month = @Month AND e.Year = @Year AND (e.Bonus6MonthAllowance IS NULL OR e.RatioBonus6Month IS NULL)

	UPDATE e
	SET STD_WorkingHours = a.RegularWorkdays * a.STD_Hour_PerDays
	FROM tblMonthlyPayrollCheckList e
	INNER JOIN #AttendanceSummary a ON e.EmployeeID = a.EmployeeID
	WHERE e.Month = @Month AND e.Year = @Year AND e.STD_WorkingHours IS NULL

	-- bỏ vào tạm làm cho nhanh
	SELECT *
	INTO #tblMonthlyPayrollCheckList1
	FROM tblMonthlyPayrollCheckList
	WHERE month = @Month AND YEAR = @Year

	IF @SalaryTermID = 0
	BEGIN
		IF isnull(@NotSelect, 0) = 0
			SELECT m.*, e.FullName, e.DivisionID, e.DepartmentID
				--,sal.TotalPaidDay_C
				--,sal.AttHours_C
				, e.HireDate, e.TerminateDate, e.EmployeeStatusID
			FROM #tblMonthlyPayrollCheckList1 m
			INNER JOIN #tmpEmployeeList e ON m.EmployeeID = e.EmployeeID
			WHERE m.Month = @month AND m.Year = @year
			ORDER BY m.EmployeeID
	END
END
	--exec sp_getMonthlyPayrollCheckList 3, 8,2025
GO



if object_id('[dbo].[sp_foreignSalarySummary]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_foreignSalarySummary] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_foreignSalarySummary] @LoginID INT = 3, @Month INT, @Year INT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	SELECT f.EmployeeID, FullName, HireDate, LastWorkingDate, CAST(0 AS INT) Prio, f.DepartmentID, f.DivisionID, f.PositionID, s.SectionID, s.SectionName, ROW_NUMBER() OVER (
			ORDER BY f.EmployeeID
			) STTView, d.DepartmentName, p.PositionNameEN PositionName, f.CostCenter, cc.CostCenterName, CASE
			WHEN ISNULL(f.NationID, 234) = 234
				THEN 'Domestic'
			ELSE 'Foreign'
			END AS EmployeeClass, CASE
			WHEN et.isLocalStaff = 1
				THEN N'Indirect Labor'
			ELSE N'Direct Labor'
			END AS EmployeeType
	INTO #tmpEmployeeList
	FROM dbo.fn_vtblEmployeeList_ByDate(@ToDate, '-1', @LoginId) f
	LEFT JOIN tblSection s ON s.SectionID = f.SectionID
	LEFT JOIN tblDepartment d ON d.DepartmentID = f.DepartmentID
	LEFT JOIN tblPosition p ON p.PositionID = f.PositionID
	LEFT JOIN tblCostCenter cc ON cc.CostCenter = f.CostCenter
	LEFT JOIN tblEmployeeType et ON et.EmployeeTypeID = f.EmployeeTypeID

	SELECT s.*, sh.ExchangeRate_Contract
	INTO #Sal_Sal_Detail
	FROM tblSal_Sal_Detail s
	INNER JOIN #tmpEmployeeList te ON s.EmployeeID = te.EmployeeID
	LEFT JOIN tblSalaryHistory sh ON sh.SalaryHistoryID = s.SalaryHistoryID
	WHERE s.Year = @Year AND s.Month = @Month AND ISNULL(s.IsNet, 0) = 1

	DELETE
	FROM #tmpEmployeeList
	WHERE EmployeeID NOT IN (
			SELECT EmployeeID
			FROM tblSal_Sal_Detail s
			WHERE s.Year = @Year AND s.Month = @Month --AND ISNULL(isNET, 0) = 1
			)

	SELECT al.EmployeeID, al.AllowanceID, SUM(ROUND(al.Amount, 0)) Amount, SUM(al.DefaultAmount) DefaultAmount
	INTO #Allowance
	FROM tblSal_Allowance_Detail al
	INNER JOIN #tmpEmployeeList te ON al.EmployeeID = te.EmployeeID
	WHERE al.Year = @Year AND al.Month = @Month
	GROUP BY al.EmployeeID, al.AllowanceID

	--SELECT * FROM tblAllowanceSetting
	SELECT s.*
	INTO #AttendanceSummary
	FROM tblAttendanceSummary s
	INNER JOIN #tmpEmployeeList te ON s.EmployeeID = te.EmployeeID
	WHERE s.Year = @Year AND s.Month = @Month

	SELECT s.*
	INTO #tblSal_Insurance
	FROM tblSal_Insurance s
	INNER JOIN #tmpEmployeeList t ON s.EmployeeID = t.EmployeeID
	WHERE Year = @Year AND Month = @Month

	SELECT st.*
	INTO #tblSal_Tax
	FROM tblSal_Tax st
	INNER JOIN #tmpEmployeeList te ON st.EmployeeID = te.EmployeeID
	WHERE st.Year = @Year AND st.Month = @Month

	SELECT ROW_NUMBER() OVER (
			ORDER BY Raw_BasicSalary DESC, HireDate
			) AS STT, s.EmployeeID, s.FullName, s.DepartmentName, sal.Raw_BasicSalary, sal.Raw_BasicSalary * sal.ExchangeRate_Contract AS SalaryContract, ats.WorkingHrs_Total, RegularAmt / Raw_ExchangeRate AS Net_RegularAmt, RegularAmt, CAST(NULL AS MONEY) AS percent15HouseRent, house.Amount AS House, house.Amount AS HouseCalcTax, meal.Amount AS MealCalcTax, ins.EmployeeUI, ins.EmployeeSI, ins.EmployeeHI, ins.EmployeeSI, ins.CompanySI, ins.CompanyHI, tax.EmployeeExemption, tax.FamilyExemption, tax.IncomeTaxable, tax.TaxAmt, tax.TaxableIncome_SalaryOnly, tax.TaxAmt_SalaryOnly, ISNULL(tax.TaxAmt, 0) - ISNULL(tax.TaxAmt_SalaryOnly, 0) AS CompanyPay, sal.GrossTakeHome, sal.GrossTakeHome / Raw_ExchangeRate AS Net_GrossTakeHome
	FROM #tmpEmployeeList s
	INNER JOIN #Sal_Sal_Detail sal ON s.EmployeeID = sal.EmployeeID
	LEFT JOIN #AttendanceSummary ats ON s.EmployeeID = ats.EmployeeID
	LEFT JOIN #Allowance house ON s.EmployeeID = house.EmployeeID AND house.AllowanceID = 17
	LEFT JOIN #Allowance meal ON s.EmployeeID = meal.EmployeeID AND meal.AllowanceID = 16
	LEFT JOIN #tblSal_Insurance ins ON s.EmployeeID = ins.EmployeeID
	LEFT JOIN #tblSal_Tax tax ON s.EmployeeID = tax.EmployeeID
	ORDER BY Raw_BasicSalary DESC, HireDate

	SELECT CONCAT (@Year, ' ', FORMAT(DATEFROMPARTS(@Year, @Month, 1), 'MMMM', 'en-US')) AS MonthYear

	SELECT WorkingDays_Std * 8 AS STD_WorkingDays
	FROM tblWorkingDaySetting
	WHERE Year = @Year AND Month = @Month AND EmployeeTypeID = 0

	CREATE TABLE #ExportConfig (ORD INT identity PRIMARY KEY, TableIndex VARCHAR(max), RowIndex INT, ColumnName NVARCHAR(200), ParseType NVARCHAR(max), Position NVARCHAR(200), SheetIndex INT, TestDescription NVARCHAR(max), WithHeader INT, WithBestFit BIT, ColumnList_formatCell VARCHAR(200), formatCell VARCHAR(200))

	INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex)
	SELECT 0, 'Table|ZeroMeanNull=1 ', 'B11', 0

	INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex, WithHeader)
	VALUES (1, 'Table_NonInsert', 'B3', 0, 0)

	INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex, WithHeader)
	VALUES (2, 'Table_NonInsert', 'E16', 0, 0)

	SELECT *
	FROM #ExportConfig
END
	--exec sp_foreignSalarySummary 3,7,2025
GO


if object_id('[dbo].[sp_SalaryHistory_List]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_SalaryHistory_List] as select 1')
GO

--EXEC sp_salaryhistory_list @LoginID=3,@LanguageID='EN',@ViewAllRecord=0,@AddNewSalRecord=0,@Confirm=N'',@EmployeeID='-1'
ALTER PROCEDURE [dbo].[sp_SalaryHistory_List] (@LoginID INT, @LanguageID VARCHAR(2) = 'vn', @ViewAllRecord BIT = 0, @AddNewSalRecord BIT = 0, @Confirm NVARCHAR(50) = N'', @EmployeeID VARCHAR(20) = '-1', @IsExport BIT = 0, @OptionView INT = 0)
AS
BEGIN
	SET NOCOUNT ON;

	IF @IsExport = 1
	BEGIN
		EXEC Template_SalaryHistory_List @LoginID = @LoginID, @LanguageID = @LanguageID, @ViewAllRecord = @ViewAllRecord, @AddNewSalRecord = 0, @EmployeeID = @EmployeeID

		RETURN
	END

	UPDATE s
	SET CurrencyCode = UPPER(CurrencyCode)
	FROM tblSalaryHistory s
	WHERE CurrencyCode <> UPPER(CurrencyCode)

	-- SELECT in Correct columns order
	DECLARE @Query NVARCHAR(max), @TotalIncomeQry NVARCHAR(max), @ColumnNameCur VARCHAR(255), @SalCalRuleId INT = 1
	DECLARE @OnlyCurrent BIT = 0, @IsHasInsSalary BIT = 1

	SELECT @SalCalRuleId = isnull(Value, 1)
	FROM tblParameter
	WHERE Code = 'SalCalRuleID'

	IF NOT EXISTS (
			SELECT 1
			FROM tblParameter
			WHERE Value = 1 AND Code = 'SI_NEED_INPUTSALARY'
			)
		SET @IsHasInsSalary = 0

	IF @ViewAllRecord = 0
		SET @OnlyCurrent = 1
	SET @OnlyCurrent = ISNULL(@OnlyCurrent, 0)

	DECLARE @ViewDate DATE = GetDate(), @StopUPDATE BIT = 0

	IF len(rtrim(ltrim(isnull(@Confirm, '')))) = 0
		SET @AddNewSalRecord = 0

	--lay danh sach nhan vien
	SELECT te.EmployeeID, FullName, DivisionID, DepartmentID, PositionID, SectionID, GroupID, HireDate, TerminateDate, EmployeeStatusID, BankCode, AccountNo, TaxRegNo
	INTO #tblEmployee
	FROM fn_vtblEmployeeList_Bydate(@ViewDate, @EmployeeID, @LoginID) te
	WHERE ISNULL(@OptionView, '-1') = '-1' OR @OptionView = 0 OR (ISNULL(@OptionView, 0) = 1 AND ISNULL(IsForeign, 0) = 0) OR (ISNULL(@OptionView, 0) = 2 AND ISNULL(IsForeign, 0) = 1)

	IF @AddNewSalRecord = 1
	BEGIN
		SELECT EmployeeID, DATE, Salary, Note, @SalCalRuleId SalCalRuleID
		INTO #tblSalaryHistoryTmpInsert
		FROM tblSalaryHistory
		WHERE 1 = 0

		--SELECT tr.EmployeeID, sh.DIL_AL,sh.MEAL_AL, sh.MEAL_AL2, from tmpEmployeeTree tr left join dbo.fn_CurrentSalaryHistoryIDByDate(@ViewDate) cs on tr.EmployeeID = cs.EmployeeID left join tblSalaryHistory sh on cs.SalaryHistoryID = sh.SalaryHistoryID
		INSERT INTO #tblSalaryHistoryTmpInsert (EmployeeID, DATE, Salary, SalCalRuleID, Note)
		SELECT tr.EmployeeID, @ViewDate, 0, @SalCalRuleId, N'system add new salary at: ' + CONVERT(VARCHAR(16), getdate(), 121) + ' ' + @Confirm
		FROM tmpEmployeeTree tr
		WHERE tr.LoginID = @LoginID AND tr.EmployeeID NOT IN (
				SELECT EmployeeID
				FROM #tblEmployee
				WHERE EmployeeStatusID = 20
				) AND NOT EXISTS (
				SELECT 1
				FROM tblSalaryHistory sh
				WHERE sh.EmployeeID = tr.EmployeeID
				) -- and sh.Note like N'system add new salary at:%' and DATEDIFF(day,date,@ViewDate) < 30)
			--SELECT * from #tblSalaryHistoryTmpInsert

		IF (OBJECT_ID('sp_SalaryHistory_ProcessIncrement') IS NULL)
		BEGIN
			EXEC (
					'CREATE PROCEDURE dbo.sp_SalaryHistory_ProcessIncrement
   (
    @StopUPDATE bit output,
    @LoginID int
   )
   as
   BEGIN
    SET NOCOUNT ON;
   END'
					)
		END

		SET @StopUPDATE = 0

		EXEC sp_SalaryHistory_ProcessIncrement @StopUPDATE OUTPUT, @LoginID

		--IF @LoginID = 3 RETURN
		IF @StopUPDATE = 0
		BEGIN
			--INSERT INTO tblSalaryHistory(EmployeeID, Date,Salary,Note)
			--SELECT EmployeeID, Date,Salary,Note from #tblSalaryHistoryTmpInsert
			-- cap nhat cac khoan phu cap khac lay mac dinh ben thong tin luong cu
			SET @Query = 'INSERT INTO tblSalaryHistory(EmployeeID, Date,Salary,Note'

			SELECT @Query += ',' + c.column_name
			FROM Information_Schema.COLUMNS c
			WHERE Table_Name = 'tblsalaryHistory' AND Data_Type NOT IN ('nvarchar', 'varchar') AND column_Name NOT IN ('EmployeeID', 'Date', 'Salary', 'Note', 'SalaryHistoryId')

			SET @Query += ')
   SELECT i.EmployeeID, i.Date,i.Salary,i.Note'

			SELECT @Query += ',sh.' + c.column_name
			FROM Information_Schema.COLUMNS c
			WHERE Table_Name = 'tblsalaryHistory' AND Data_Type NOT IN ('nvarchar', 'varchar') AND column_Name NOT IN ('EmployeeID', 'Date', 'Salary', 'Note', 'SalaryHistoryId')

			SET @Query += '
   from
   #tblSalaryHistoryTmpInsert i
   left join tblSalaryHistory sh on i.EmployeeID = sh.EmployeeId
   left join (
   SELECT s.EmployeeID, max(s.Date) as Date
   from tblsalaryHistory s inner join #tblSalaryHistoryTmpInsert t on s.EmployeeID = t.EmployeeID and s.Date < t.Date
   group by s.EmployeeId
   ) tmp on sh.EmployeeID = tmp.EmployeeID and sh.Date = tmp.Date
   '

			--SELECT @Query RETURN
			EXECUTE (@Query)
		END
	END

	IF (OBJECT_ID('sp_SalaryHistory_ReOderColumn') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE sp_SalaryHistory_ReOderColumn
 (
  @StopUPDATE bit output,
  @LoginID int)
 as
 BEGIN
  SET NOCOUNT ON;
 END'
				)
	END

	SET @StopUPDATE = 0

	EXEC sp_SalaryHistory_ReOderColumn @StopUPDATE OUTPUT, @LoginID

	------------------------------Them vao neu chua co------------------------------
	INSERT INTO tblsalaryHistory (EmployeeID, DATE, IsNet, Salary)
	SELECT EmployeeID, HireDate, 0, 0
	FROM #tblEmployee te
	WHERE te.HireDate IS NOT NULL AND NOT EXISTS (
			SELECT 1
			FROM tblSalaryHistory s
			WHERE te.EmployeeID = s.EmployeeID AND te.HireDate = s.DATE
			) AND @OptionView IN (0, 1) -- chi them nhung nhan vien trong nuoc

	INSERT INTO tblsalaryHistory (EmployeeID, DATE, IsNet, NetSalary)
	SELECT EmployeeID, HireDate, 1, 0
	FROM #tblEmployee te
	WHERE te.HireDate IS NOT NULL AND NOT EXISTS (
			SELECT 1
			FROM tblSalaryHistory s
			WHERE te.EmployeeID = s.EmployeeID AND te.HireDate = s.DATE
			) AND @OptionView IN (2)

	SELECT c.EmployeeID, c.SalaryHistoryID, c.DATE
	INTO #tmpCurrentSalary
	FROM dbo.fn_CurrentSalaryHistoryIDByDate(@ViewDate) c
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployee te
			WHERE c.EmployeeID = te.EmployeeID
			)

	------------------------------cap nhap mot so thong tin khac------------------------------
	UPDATE tblSalaryHistory
	SET PositionID = d.PositionID
	FROM tblSalaryHistory sh
	INNER JOIN tblPositionHistory d ON sh.EmployeeID = d.EmployeeID AND sh.[Date] = d.EffectiveDate
	WHERE COALESCE(sh.PositionID, - 1) <> COALESCE(d.PositionID, - 1) AND sh.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployee
			)

	UPDATE tblSalaryHistory
	SET PositionID = d.PositionID
	FROM tblSalaryHistory sh
	CROSS APPLY (
		SELECT d.EmployeeID, MAX(d.EffectiveDate) ChangedDate
		FROM tblPositionHistory d
		WHERE sh.EmployeeID = d.EmployeeID AND d.EffectiveDate <= sh.[Date]
		GROUP BY d.EmployeeID
		) s
	INNER JOIN tblPositionHistory d ON s.EmployeeID = d.EmployeeID AND s.ChangedDate = d.EffectiveDate
	WHERE sh.EmployeeID = s.EmployeeID AND sh.PositionID IS NULL AND d.PositionID IS NOT NULL AND sh.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployee
			)

	UPDATE tblSalaryHistory
	SET SalCalRuleID = @SalCalRuleId
	WHERE SalCalRuleID IS NULL

	UPDATE tblSalaryHistory
	SET BaseSalRegionalID = CASE
			WHEN DivisionID = 1
				THEN 1
			ELSE 2
			END
	FROM tblSalaryHistory s
	INNER JOIN #tblEmployee te ON s.EmployeeID = te.EmployeeID
	WHERE ISNULL(s.BaseSalRegionalID, 0) = 0

	UPDATE tblSalaryHistory
	SET CurrencyCode = 'USD'
	WHERE IsNET = 1

	UPDATE tblSalaryHistory
	SET InsSalary = NETSalary
	WHERE IsNET = 1 AND ISNULL(InsSalary, 0) = 0

	UPDATE tblSalaryHistory
	SET Salary = NETSalary
	WHERE IsNET = 1 AND ISNULL(Salary, 0) = 0

	UPDATE tblSalaryHistory
	SET CurrencyCode = 'VND'
	WHERE IsNET = 0 AND (CurrencyCode IS NULL OR RTRIM(LTRIM(CurrencyCode)) = '')

	IF (OBJECT_ID('sp_SalaryHistory_FinishUpdateOtherInfo') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.sp_SalaryHistory_FinishUpdateOtherInfo
 (
  @StopUPDATE bit output,
  @LoginID int
 )
 as
 BEGIN
  SET NOCOUNT ON;
 END'
				)

	END

	SET @StopUPDATE = 0

	EXEC sp_SalaryHistory_FinishUpdateOtherInfo @StopUPDATE OUTPUT, @LoginID

	------------------------------lay thong tin luong------------------------------
	SELECT *
	INTO #tblSalaryHistory
	FROM tblSalaryHistory s
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployee te
			WHERE s.EmployeeID = te.EmployeeID
			) AND (
			@OnlyCurrent = 0 OR EXISTS (
				SELECT 1
				FROM #tmpCurrentSalary c
				WHERE s.SalaryHistoryID = c.SalaryHistoryID AND s.EmployeeID = c.EmployeeID
				)
			) AND ((@AddNewSalRecord = 1 AND s.Note LIKE N'system add new salary at:%') OR @AddNewSalRecord = 0)

	SELECT al.*
	INTO #tblAllowanceSETting
	FROM tblAllowanceSETting al
	WHERE AllowanceID = 14 --TRIPOD
		--	WHERE isnull(al.Visible, 1) = 1 --and isnull(NotInput,0) = 0

	--IF exists(SELECT 1 from #tblsalaryHistory WHERE IsNet = 1)
	-- SET @IsHasInsSalary  = 1
	SET @Query = '
 SELECT e.EmployeeID, e.FullName, dp.DepartmentName, tsh.PositionID, tsh.Date, tsh.RetroDate ' + CASE
			WHEN @IsHasInsSalary = 1
				THEN ',InsSalary'
			ELSE ''
			END -- ',InsSalary'
		+ '
 ,tsh.Salary '

	SELECT @Query += ',tsh.[' + al.AllowanceCode + ']' + CASE
			WHEN al.IsMutilCurrencyCode = 1
				THEN ',[' + al.AllowanceCode + '_CurrencyCode]'
			ELSE ''
			END
	FROM #tblAllowanceSETting al
	ORDER BY al.Ord

	-- tong luong
	SELECT @TotalIncomeQry = ', isnull(Salary,0) '

	SELECT @TotalIncomeQry += '+ isnull(tsh.[' + al.AllowanceCode + '],0)'
	FROM #tblAllowanceSETting al
	ORDER BY al.Ord

	--SET
	SELECT l.EmployeeID, d.ToDate
	INTO #LockedSalary
	FROM (
		SELECT l.EmployeeID, max(l.Year * 12 + l.Month) max_month_year
		FROM tblSal_Lock l
		WHERE EXISTS (
				SELECT 1
				FROM #tblEmployee te
				WHERE l.EmployeeID = te.EmployeeID
				)
		GROUP BY l.EmployeeID
		) l
	CROSS APPLY dbo.fn_GetMonthYearFromIntValue(l.max_month_year) my
	CROSS APPLY dbo.fn_Get_SalaryPeriod(my.Month, my.Year) d

	SET @Query = @Query + @TotalIncomeQry +
		N'as TotalIncome
   ,tsh.IsNet
   ,tsh.NETSalary
   , PercentProbation
   ,tsh.BaseSalRegionalID,tsh.CurrencyCode, ExchangeRate_Contract
   ,tsh.SalCalRuleID,tsh.SalaryHistoryID, @IsHasInsSalary as SI_NEED_INPUTSALARY
   ,tsh.Note,sc.SectionName,e.EmployeeStatusID,e.AccountNo, bk.BankName, bk.BankCode, e.TaxRegNo, depent.DepENDentNumber,case when tsh.Date <= l.ToDate then ''Salary Locked'' end StatusLock
   ,cast(case when tsh.Date <= l.ToDate then 1 else 0 end as bit) as IsReadOnlyRow, p.PositionNameEN PositionName
  FROM #tblsalaryHistory AS tsh
  INNER JOIN #tblEmployee AS e ON tsh.EmployeeID = e.EmployeeID
  LEFT JOIN tblDepartment dp on e.DepartmentID = dp.DepartmentID
  LEFT JOIN tblSection sc on e.SectionID = sc.SectionID
  LEFT JOIN tblPosition p on tsh.PositionID = p.PositionID
  left join #LockedSalary l on tsh.EmployeeID = l.EmployeeID
  LEFT JOIN dbo.fn_TaxDepENDentNumber_ByDate(getdate()) AS depent ON e.EmployeeID = depent.EmployeeID
  LEFT JOIN dbo.fn_BankInfoList(@LanguageID) AS bk ON e.BankCode = bk.BankCode
  order by ISNULL(dp.Priority,999),dp.DepartmentName,ISNULL(sc.Priority,999),sc.SectionName, tsh.EmployeeID, tsh.Date
 '

	EXECUTE sp_EXECutesql @Query, N'@LanguageID varchar(2), @LoginID int,@IsHasInsSalary bit', @LanguageID = @LanguageID, @LoginID = @LoginID, @IsHasInsSalary = @IsHasInsSalary
END
GO


if object_id('[dbo].[SALCAL_MAIN]') is null
	EXEC ('CREATE PROCEDURE [dbo].[SALCAL_MAIN] as select 1')
GO

--exec SALCAL_MAIN 7,2021,3,0,'-1',0
ALTER PROCEDURE [dbo].[SALCAL_MAIN] (@Month INT, @Year INT, @LoginID INT, @PeriodID INT = 0, @EmployeeID NVARCHAR(20) = '-1', @CalculateRetro INT = 0)
AS
BEGIN
	IF @CalculateRetro IS NULL
		SET @CalculateRetro = 0

	DECLARE @nextMonth INT = @month + 1, @nextYear INT = @Year

	IF (@nextMonth = 13)
	BEGIN
		SET @nextMonth = 1
		SET @nextYear += 1
	END

	IF ISNULL(@PeriodID, - 1) < 0
		SET @PeriodID = 0

	IF isnull(@EmployeeID, '') = ''
		SET @EmployeeID = '-1'

	DECLARE @Query NVARCHAR(max), @StopUPDATE BIT = 0

	SET NOCOUNT ON;
	SET ANSI_WARNINGS OFF;

	TRUNCATE TABLE tblProcessErrorMessage

	/*	Danh mục tính lương
	-- lấy 1 bảng bao gồm ngày công ,nghỉ
	- Phát sinh 2,3 mức lương trong tháng: muc luong phat sinh moi trong thang
	- Tính công chuẩn: standard working day
	- Tạo lvHistory để tính chuyên cần: tao nghi viec neu de tinh chuyen can, tru thieu cong
	- Xóa dữ liệu tính lương lần trước: Delete old data
	- Tính lương 1 ngày: Calculate salary per day
	- Tính lương 1 giờ: Calculate salary per hour
	- Tính nghỉ trả lương, trừ lương: Leave Amount
	- Tính lương cơ bản: Calculate Actual salary
	- Tính lương tăng ca: Calculate OT
	- Tính điều chỉnh trong tháng: Calculate Adjustment
	- Tính phụ cấp: Calculate Allowance
	- Tính phụ cấp thâm niên: thâm niên
	- Tính phụ cấp chuyên cần: chuyên cần, chuyen can chuyencan
	- Tính phụ cấp đồng phục, nhà ở: phụ cấp trang phục
	- Tính tiền bảo hiểm: Calculate Employee insurance
	- Phí công đoàn: Calculate Trade Union fee
	- Trừ tiền đi trễ về sớm: Calculate IO
	- Tổng lương thực lãnh lần 1: Payroll sumaried items
	- Tính thuế TNCN: Calculate tax
	- Cập nhật lại lương thực lãnh: UPDATE other sumaried items of Sumary Table
	- Cập nhật lương detail, bảng lương tổng: UPDATE salary detail records
*/
	EXEC sp_getMonthlyPayrollCheckList @Month = @Month, @Year = @Year, @LoginID = @LoginID, @NotSelect = 1

	--exec sp_UnionMembershipList @LoginID = @LoginID, @NotSelect = 1
	CREATE TABLE #NameOfPhysicTables (TempTablename NVARCHAR(500), PhysicTableName NVARCHAR(500), ColumnNeedToBeDeduct VARCHAR(max), PrimaryKeyCOlumns VARCHAR(max))

	SELECT *
	INTO #tblSal_Adjustment_des
	FROM tblSal_Adjustment
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Adjustment_des', 'tblSal_Adjustment', 'Amount,TaxableAmount,UntaxableAmount'

	SELECT *
	INTO #tblSal_Allowance_des
	FROM tblSal_Allowance
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Allowance_des', 'tblSal_Allowance', 'Amount,AmountLastMonth,UntaxableAmount,TaxableAmount,RetroAmount,RetroAmountNonTax,MonthlyCustomAmount'

	SELECT *
	INTO #tblSal_IO_des
	FROM tblSal_IO
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_IO_des', 'tblSal_IO', ''

	SELECT *
	INTO #tblSal_NS_des
	FROM tblSal_NS
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_NS_des', 'tblSal_NS', 'NSHours,NSAmount'

	SELECT *
	INTO #tblSal_OT_des
	FROM tblSal_OT
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_OT_des', 'tblSal_OT', 'OTAmount,TaxableOTAmount,NoneTaxableOTAmount,NightShiftAmount'

	SELECT *
	INTO #tblSal_PaidLeave_des
	FROM tblSal_PaidLeave
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_PaidLeave_des', 'tblSal_PaidLeave', 'LeaveDays,LeaveHour,AmountDeduct,AmountPaid'

	----from detail table
	SELECT *
	INTO #tblSal_Allowance_Detail_des
	FROM tblSal_Allowance_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Allowance_Detail_des', 'tblSal_Allowance_Detail', 'Amount,AmountLastMonth,TaxableAmount,UntaxableAmount,Raw_DefaultAmount,Raw_ExchangeRate,RetroAmount,RetroAmountNonTax,MonthlyCustomAmount'

	SELECT *
	INTO #tblSal_IO_Detail_des
	FROM tblSal_IO_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_IO_Detail_des', 'tblSal_IO_Detail', ''

	SELECT *
	INTO #tblSal_NS_Detail_des
	FROM tblSal_NS_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_NS_Detail_des', 'tblSal_NS_Detail', 'NSHours,NSAmount'

	SELECT *
	INTO #tblSal_OT_Detail_des
	FROM tblSal_OT_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_OT_Detail_des', 'tblSal_OT_Detail', 'OTHour,OTAmount,NightShiftAmount'

	SELECT *
	INTO #tblSal_PaidLeave_Detail_des
	FROM tblSal_PaidLeave_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_PaidLeave_Detail_des', 'tblSal_PaidLeave_Detail', 'LeaveDays,LeaveHour,AmountDeduct,AmountPaid'

	----other sal table
	SELECT *
	INTO #tblSal_Error_des
	FROM tblSal_Error
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName)
	SELECT '#tblSal_Error_des', 'tblSal_Error'

	SELECT *
	INTO #tblSal_Adjustment_ForAllowance_Des
	FROM tblSal_Adjustment_ForAllowance
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName)
	SELECT '#tblSal_Adjustment_ForAllowance_Des', 'tblSal_Adjustment_ForAllowance'

	SELECT *
	INTO #tblSal_Abroad_ForTaxPurpose_des
	FROM tblSal_Abroad_ForTaxPurpose
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Abroad_ForTaxPurpose_des', 'tblSal_Abroad_ForTaxPurpose', 'NetAmountVND,Raw_NetAmount,GrossAmountVND,Raw_GrossAmount'

	SELECT *
	INTO #tblSal_tax_des
	FROM tblSal_tax
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_tax_des', 'tblSal_tax', 'IncomeTaxable,TaxAmt,OTDeduction,Salary13Amount,TaxableIncome_EROnly_ForNETOnly,PITAmt_ER,TaxRetroImported'

	SELECT *
	INTO #tblSal_Sal_des
	FROM tblSal_Sal
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Sal_des', 'tblSal_Sal', 'ActualMonthlyBasic,TaxableAllowance,NontaxableAllowance,TaxableAdjustment,NontaxableAdj,TotalIncome,IOAmt,EmpUnion,CompUnion,TaxableIncomeBeforeDeduction,IncomeAfterPIT,GrossTakeHome,TotalEarn,RemainAL,TaxableAdjustmentTotal_ForSalary,TaxableAdjustmentTotal_NotForSalary,TotalIncome_Taxable_Without_INS_Persion_family,TotalIncome_ForSalaryTaxedAdj,TotalCostComPaid,TotalPayrollFund,TotalDeduction,UnpaidLeaveAmount,EmpUnion_RETRO,CompUnion_RETRO,TotalNetIncome_Custom,GrossedUpWithoutHousing_Custom,GrossedUpWithoutHousing_WithoutGrossIncome_Custom'

	SELECT *
	INTO #tblSal_Sal_Detail_des
	FROM tblSal_Sal_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Sal_Detail_des', 'tblSal_Sal_Detail', 'ATTHours,WorkingHours,ActualMonthlyBasic,TaxableAllowance,NontaxableAllowance,TaxableAdjustment,NontaxableAdj,TotalIncome,IOAmt,EmpUnion,CompUnion,TaxableIncomeBeforeDeduction,IncomeAfterPIT,GrossTakeHome,TotalEarn,DaysOfSalEntry,TaxableAdjustmentTotal_ForSalary,TaxableAdjustmentTotal_NotForSalary,UnpaidLeaveAmount,TotalNetIncome_Custom,GrossedUpWithoutHousing_Custom,GrossedUpWithoutHousing_WithoutGrossIncome_Custom'

	DECLARE @FromDate DATETIME, @ToDate DATETIME, @ToDateTruncate DATE, @CAL_SALTAX_PROGRESSIVE_ALLEMPS INT, @FIXEDWORKINGDAY FLOAT = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'FIXEDWORKINGDAY'
			), @ROUND_TAKE INT, @ROUND_NET INT, @ROUND_SALARY_UNIT INT, @PROBATION_PERECNT FLOAT, @ROUND_OT_NS_Detail_UNIT INT, @ROUND_TOTAL_WORKINGDAYS INT, @ROUND_ATTDAYS INT

	SET @ROUND_TAKE = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_TAKE'
			)
	SET @ROUND_TAKE = ISNULL(@ROUND_TAKE, - 3)
	SET @ROUND_ATTDAYS = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_ATTDAYS'
			)
	SET @ROUND_ATTDAYS = ISNULL(@ROUND_ATTDAYS, 4)
	SET @ROUND_NET = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_NET'
			)
	SET @ROUND_NET = ISNULL(@ROUND_NET, - 3)
	SET @ROUND_SALARY_UNIT = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_SALARY_UNIT'
			)
	SET @ROUND_SALARY_UNIT = ISNULL(@ROUND_SALARY_UNIT, 4)
	SET @ROUND_OT_NS_Detail_UNIT = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_OT_NS_Detail_UNIT'
			)
	SET @ROUND_OT_NS_Detail_UNIT = ISNULL(@ROUND_OT_NS_Detail_UNIT, 4)
	SET @ROUND_TOTAL_WORKINGDAYS = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_TOTAL_WORKINGDAYS'
			)
	SET @ROUND_TOTAL_WORKINGDAYS = ISNULL(@ROUND_TOTAL_WORKINGDAYS, 2)
	SET @FIXEDWORKINGDAY = ISNULL(@FIXEDWORKINGDAY, 26.0)
	SET @CAL_SALTAX_PROGRESSIVE_ALLEMPS = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'CAL_SALTAX_PROGRESSIVE_ALLEMPS'
			)

	IF (@CAL_SALTAX_PROGRESSIVE_ALLEMPS IS NULL)
		SET @CAL_SALTAX_PROGRESSIVE_ALLEMPS = 0
	SET @PROBATION_PERECNT = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'PROBATION_PERECNT'
			)
	SET @PROBATION_PERECNT = ISNULL(@PROBATION_PERECNT, 100)

	SELECT @FromDate = FromDate, @ToDate = ToDate, @ToDateTruncate = ToDate
	FROM dbo.fn_Get_SalaryPeriod_Term(@Month, @Year, @PeriodID)

	CREATE TABLE #tblSalDetail (
		EmployeeID VARCHAR(20), BasicSalary FLOAT(53), BasicSalaryOrg FLOAT(53), GrossSalary FLOAT(53), TotalSalary FLOAT(53), STD_WD FLOAT, STD_WD_Schedule FLOAT, OTSalary FLOAT(53), SalaryPerDay FLOAT(53), RegularAmt FLOAT(53), PaidLeaveAmt FLOAT(53), SalaryPerHour FLOAT(53), SalaryPerDayOT FLOAT(53), SalaryPerHourOT FLOAT(53), WorkingHoursPerDay FLOAT(53), DaysOfSalEntry FLOAT, ActualMonthlyBasic FLOAT(53), UnpaidLeaveAmount FLOAT(53), TaxableOTTotal FLOAT(53), NoneTaxableOTTotal FLOAT(53), TotalOTAmount FLOAT(53) --dung de round
		, TotalNSAmt FLOAT(53), NightShiftAmount FLOAT(53), NoneTaxableNSAmt FLOAT(53), TaxableAllowanceTotal FLOAT(53), NoneTaxableAllowanceTotal FLOAT(53), TotalAllowanceForSalary FLOAT(53), TaxableAdjustmentTotal FLOAT(53), TaxableAdjustmentTotal_ForSalary FLOAT(53), TaxableAdjustmentTotal_NotForSalary FLOAT(53), NoneTaxableAdjustmentTotal FLOAT(53), TotalAdjustmentForSalary FLOAT(53), TotalAdjustment_WithoutForce FLOAT(53), TotalEarn FLOAT(53) -- Tổng thu nhập gồm toàn những khoản cộng
		, TotalIncome FLOAT(53) -- Tổng thu nhập\	
		, TotalIncome_ForSalaryTaxedAdj FLOAT(53) -- Tổng thu nhập + allowance + adjustment trong lương chịu thuế
		, TotalIncome_Taxable_Without_INS_Persion_family FLOAT(53) -- Tổng thu nhập + allowance + adjustment trong lương chịu thuế
		, TaxableIncomeBeforeDeduction FLOAT(53), TaxableIncomeBeforeDeduction_EROnly_ForNETOnly FLOAT(53), OwnerDeduction FLOAT(53), DependentDeduction FLOAT(53), TaxableIncome FLOAT(53), TaxableIncome_EROnly_ForNETOnly FLOAT(53), PITAmt FLOAT(53), PITAmt_ER FLOAT(53), EmpUnion_RETRO FLOAT(53), EmpUnion FLOAT(53), CompUnion_RETRO FLOAT(53), CompUnion FLOAT(53), InsAmt FLOAT(53) --10.5% cua nhan vien dong
		, InsAmtComp FLOAT(53), PITReturn FLOAT(53) -- điều chỉnh sau lương
		, IncomeAfterPIT FLOAT(53), OtherDeductionAfterPIT FLOAT(53) -- mục đích thể hiện số tiền bị trừ sau thuế, giống cột tạm ứng
		, AdvanceAmt FLOAT(53), TotalCostComPaid FLOAT(53), TotalPayrollFund FLOAT(53), Salary13thProvision FLOAT(53), FromDate DATETIME, ToDate DATETIME, SalaryHistoryID BIGINT, BaseSalRegionalID INT, isTwoSalLevel BIT, SalCalRuleID INT, LatestSalEntry BIT, IOAmt FLOAT(53) -- đi trễ về sớm
		, TotalDeduct FLOAT(53) -- tổng các khoản khấu trừ, cong đoàn, bảo hiểm,thuế, trừ khác
		, GrossTakeHome FLOAT(53), AverageSalary FLOAT(53) -- luong binh quan khi co nhieu muc luong trong thang
		, CurrencyCode NVARCHAR(20), ExchangeRate FLOAT(53), IsNet BIT, TotalNetIncome_Custom FLOAT(53), GrossedUpWithoutHousing_Custom FLOAT(53), GrossedUpWithoutHousing_WithoutGrossIncome_Custom FLOAT(53)
		--,SalaryCalculationDAte date
		, STDPerSalaryHistoryId FLOAT(53), PayrollTypeCode VARCHAR(50), ProbationSalaryHistoryID BIGINT, PercentProbation FLOAT, AnnualBonus_Total FLOAT(53), AnnualBonus_EvMonth FLOAT(53), Bonus6Month_Total FLOAT(53), Bonus6M_EveryMonth FLOAT(53), NETSalary FLOAT(53) --TRIPOD
		)

	IF (OBJECT_ID('SALCAL_ADD_COLUMN_INTO_TMP_TABLE') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ADD_COLUMN_INTO_TMP_TABLE
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ADD_COLUMN_INTO_TMP_TABLE @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	--TRIPOD: STD
	SELECT EmployeeID, isSalCal, isLowTaxableInCome, PayrollCutOffDate, Number6DayMonth, Number6DayMonth_Actual, NumberDayOfYear, NumberDayOfYear_Actual, STD_WorkingHours, ActualMonthInYear, Bonus6MonthAllowance, RatioBonus6Month
	INTO #tmpMonthlyPayrollCheckList
	FROM tblMonthlyPayrollCheckList
	WHERE Month = @Month AND Year = @Year

	IF @PeriodID = 1
		DELETE #tmpMonthlyPayrollCheckList
		WHERE ISNULL(PayrollCutOffDate, DATEADD(day, 1, @todate)) NOT BETWEEN @FromDate AND @ToDate

	SELECT te.EmployeeID, te.DivisionID, te.DepartmentID, te.SectionID, te.GroupID, te.EmployeeTypeID, te.PositionID, te.EmployeeStatusID, te.Sex, CASE
			WHEN te.HireDate > @fromDate
				THEN cast(1 AS BIT)
			ELSE 0
			END AS NewStaff, CAST(0 AS BIT) AS TerminatedStaff, HireDate, CAST(NULL AS DATETIME) TerminateDate, ProbationEndDate, te.LastWorkingDate
	INTO #tblEmployeeIDList
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDateTruncate, @EmployeeID, @LoginID) te
	INNER JOIN tblDivision div ON te.DivisionID = div.DivisionID
	WHERE NOT EXISTS (
			SELECT 1
			FROM tblSal_Lock l
			WHERE te.EmployeeID = l.EmployeeID AND @CalculateRetro = 0 AND l.Month = @Month AND l.Year = @Year
			)

	-- khoa roi thi khong tinh luong nua
	SELECT *
	INTO #fn_EmployeeStatus_ByDate
	FROM dbo.fn_EmployeeStatus_ByDate(@ToDate)

	SELECT *
	INTO #fn_EmployeeStatus_ByDate_FirstLastMonth
	FROM dbo.fn_EmployeeStatus_ByDate(dateadd(dd, 1, @ToDate))

	--lay trang thai ben bang history cho chinh xac
	UPDATE #tblEmployeeIDList
	SET EmployeeStatusID = stt.EmployeeStatusID
	FROM #tblEmployeeIDList te
	INNER JOIN #fn_EmployeeStatus_ByDate stt ON te.EmployeeID = stt.EmployeeID

	UPDATE #tblEmployeeIDList
	SET EmployeeStatusID = stt.EmployeeStatusID, TerminateDate = stt.ChangedDate, LastWorkingDate = dateadd(dd, - 1, stt.ChangedDate)
	FROM #tblEmployeeIDList te
	INNER JOIN #fn_EmployeeStatus_ByDate_FirstLastMonth stt ON te.EmployeeID = stt.EmployeeID
	WHERE stt.EmployeeStatusID = 20

	UPDATE #tblEmployeeIDList
	SET TerminatedStaff = 1
	WHERE TerminateDate IS NOT NULL

	SELECT *
	INTO #tblEmployeeIDList_Needdelete
	FROM #tblEmployeeIDList
	WHERE 1 = 0

	-- ko nằm trong danh sách thì ko tính lương nha
	INSERT INTO #tblEmployeeIDList_Needdelete
	SELECT *
	FROM (
		DELETE #tblEmployeeIDList
		OUTPUT deleted.*
		FROM #tblEmployeeIDList te
		WHERE te.EmployeeID NOT IN (
				SELECT EmployeeID
				FROM #tmpMonthlyPayrollCheckList
				WHERE isSalCal = 1
				)
		) de

	IF @@ROWCOUNT > 0
	BEGIN
		-- delete các bảng thực
		SELECT EmployeeID, @Month AS Month, @year AS Year, @PeriodID AS PeriodID
		INTO #delete_data
		FROM #tblEmployeeIDList_Needdelete

		DELETE #delete_data
		FROM #delete_data de
		INNER JOIN tblSal_lock s ON de.EmployeeID = s.EmployeeId AND s.Month = @Month AND s.Year = @Year

		DECLARE @deleteQuery_Phy VARCHAR(max) = ''

		SELECT @deleteQuery_Phy += '
		delete ' + PhysictableName + ' from ' + physictablename + ' p inner join #delete_data d on p.employeeId = d.EmployeeID and p.Month = d.Month and p.Year = d.Year and p.PeriodID = d.PeriodID'
		FROM #NameOfPhysicTables

		EXEC (@deleteQuery_Phy)

		DROP TABLE #delete_data
	END

	IF NOT EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList
			)
		RETURN;

	-- những ai chưa khóa công thì ko cho tính lương
	INSERT INTO tblProcessErrorMessage (ErrorType, ErrorDetail, LoginID)
	SELECT N'Khóa công!', '[' + de.EmployeeID + N']	-- Bạn chưa khóa công!', @LoginID
	FROM (
		DELETE #tblEmployeeIDList
		OUTPUT deleted.EmployeeID
		FROM #tblEmployeeIDList e
		WHERE NOT EXISTS (
				SELECT 1
				FROM tblAtt_LockMonth f
				WHERE e.EmployeeID = f.EmployeeID AND f.Month = @Month AND f.Year = @Year
				)
		) de

	DELETE c
	FROM #tmpMonthlyPayrollCheckList c
	WHERE employeeID NOT IN (
			SELECT employeeID
			FROM #tblEmployeeIDList
			)

	SELECT *
	INTO #EmployeeExchangeRate
	FROM dbo.fn_GetExchangeRateInSalaryPeriod(@loginid, @FromDate, @ToDate) c
	WHERE c.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	IF EXISTS (
			SELECT 1
			FROM #EmployeeExchangeRate
			GROUP BY EmployeeId, CurrencyCode
			HAVING count(1) > 1
			)
	BEGIN
		RAISERROR ('MultiplecurrencyCode,Please Contact VietTinSoft to fix it!', 16, 1)

		RETURN;
	END

	IF (
			SELECT COUNT(1)
			FROM #tblEmployeeIDList
			) = 0
		RETURN

	-- move SAlretro here to query on sal OT, sal NS
	SELECT *
	INTO #tblSal_Retro
	FROM tblSal_Retro
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	SELECT DISTINCT EmployeeID, Month, Year
	INTO #tblsal_retro_Final
	FROM #tblSal_Retro

	DECLARE @querytblSAl_Retro VARCHAR(max) = ''
	DECLARE @querytblSAl_Retro_update VARCHAR(max) = ''
	DECLARE @querytblSAl_Retro_sumQue VARCHAR(max) = ''

	SELECT @querytblSAl_Retro += ',' + c.name + ' money', @querytblSAl_Retro_update += ', [' + c.name + '] = [S_' + c.name + ']', @querytblSAl_Retro_sumQue += ', sum([' + c.name + ']) as S_' + c.name + ''
	FROM tempdb.sys.columns c
	INNER JOIN sys.types t ON c.user_type_id = t.user_type_id AND t.name = 'money'
	WHERE c.object_id = object_id('tempdb..#tblSal_Retro')

	SET @querytblSAl_Retro = 'alter table #tblsal_retro_Final add BalanceDays float ,' + SUBSTRING(@querytblSAl_Retro, 2, 99999)

	EXEC (@querytblSAl_Retro)

	SET @querytblSAl_Retro_update = 'update #tblsal_retro_Final set BalanceDays= S_BalanceDays,' + SUBSTRING(@querytblSAl_Retro_update, 2, 99999) + '
	from #tblsal_retro_Final r
	inner join (select EmployeeID,Max(case when BalanceDays = 0 then -9999 else BalanceDays end) as S_BalanceDays' + @querytblSAl_Retro_sumQue + '
	from #tblsal_retro group by EmployeeID) sal on r.EmployeeId = sal.EmployeeID '

	EXEC (@querytblSAl_Retro_update)

	EXEC sp_InsertUpdateFromTempTableTOTable @TempTableName = N'#tblsal_retro_Final', @TableName = tblSal_Retro_Sumary

	DELETE tblSal_Retro_Sumary
	FROM tblSal_Retro_Sumary re
	WHERE month = @month AND year = @year AND NOT EXISTS (
			SELECT 1
			FROM tblSal_lock sl
			WHERE sl.EmployeeID = re.EmployeeID AND sl.Month = @Month AND sl.Year = @Year
			) AND NOT EXISTS (
			SELECT 1
			FROM tblSal_Retro re1
			WHERE re.EmployeeID = re1.EmployeeID AND re1.Month = @Month AND re1.Year = @Year
			) AND ISNULL(re.IsImported, 0) = 0

	DROP TABLE #tblSal_Retro

	SELECT EmployeeID
	INTO #EmployeeWorkingOn
	FROM tmpEmployeeTree
	WHERE LoginID = @LoginID

	--SET @LoginID = @LoginID + 1000
	--delete tmpEmployeeTree where LoginID = @LoginID
	--insert into tmpEmployeeTree(EmployeeID,LoginID)
	--select EmployeeID,@LoginID from #tblEmployeeIDList
	DECLARE @SIDate DATETIME

	SELECT @SIDate = cast(cast(Year(@ToDate) AS NVARCHAR(20)) + '-' + cast(Month(@ToDate) AS NVARCHAR(20)) + '-15' AS DATE)

	-- nhan vien dong thue thoi vu
	-- dùng để tính thuế cho thời vụ, thử việc không có cam kết thu nhập thấp hoặc nhân viên không có hợp đồng
	SELECT e.EmployeeID, cast(isnull(pit.FixedPercents, 10) / 100 AS FLOAT) TaxPercentage, isnull(lb.isLowSalary, 0) isLowSalary, ISNULL(pit.PITStatus, 1) AS PITStatus, DivisionID
	INTO #tblTemporaryContractTax
	FROM #tblEmployeeIDList e
	INNER JOIN (
		SELECT EmployeeID, ContractID
		FROM dbo.fn_CurrentContractListByDate(@SIDate) c
		WHERE c.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)
		
		UNION
		
		SELECT EmployeeID, ContractID
		FROM dbo.fn_CurrentContractListByDate(@ToDate) c
		WHERE c.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList ee
				WHERE ee.HireDate > @SIDate
				)
		) c ON e.EmployeeID = c.EmployeeID
	INNER JOIN tblLabourContract lb ON c.ContractID = lb.ContractID
	INNER JOIN tblMST_ContractType mst ON lb.ContractCode = mst.ContractCode
	LEFT JOIN tblContract_PIT_Status pit ON lb.PITStatus = pit.PITStatus
	WHERE ((isnull(pit.FollowLabourContract, 0) = 1 AND ISNULL(mst.ShortTermTax, 0) = 1) OR (isnull(pit.Progressive, 0) = 0)) AND @CAL_SALTAX_PROGRESSIVE_ALLEMPS = 0 AND EXISTS (
			SELECT 1
			FROM tblParameter
			WHERE Code = 'DEDUCT_TAX_FOR_SHORT_TERM' AND Value = '1'
			)

	INSERT INTO #tblTemporaryContractTax (EmployeeID, TaxPercentage, isLowSalary, PITStatus, DivisionID)
	SELECT EmployeeID, 0.1, 0, 2, DivisionID
	FROM #tblEmployeeIDList
	WHERE TerminateDate <= @FromDate AND EmployeeID NOT IN (
			SELECT EmployeeID
			FROM #tblTemporaryContractTax
			)

	--and DivisionId in(Select DivisionID from tblDivision where Terminate_Mean_10PercentTax = 1)
	--tripod
	DELETE
	FROM #tblTemporaryContractTax

	--UPDATE $ set isLowSalary = 1 where EmployeeID in (
	--	select EmployeeID from dbo.fn_CurrentContractListByDate(@ToDate) where  = 1
	--)
	--if @PROBATION_PERECNT >= 100.0
	BEGIN
		-- mức lương cũ
		INSERT INTO #tblSalDetail (EmployeeID, SalaryHistoryID, FromDate, ToDate, BasicSalary, BasicSalaryOrg, SalCalRuleID, LatestSalEntry, BaseSalRegionalID, CurrencyCode, IsNet, PayrollTypeCode, WorkingHoursPerDay, NETSalary)
		SELECT sh.EmployeeID, sh.SalaryHistoryID, CASE
				WHEN sh.DATE < @FromDate
					THEN @FromDate
				ELSE sh.DATE
				END, @ToDate, ISNULL(sh.Salary, 0) + ISNULL([14], 0), ISNULL(sh.Salary, 0) + ISNULL([14], 0), sh.SalCalRuleID, 1, sh.BaseSalRegionalID, sh.CurrencyCode, sh.IsNet, sh.PayrollTypeCode, ISNULL(nullif(sh.WorkingHoursPerDay, 0), 8), ISNULL(sh.NETSalary, 0)
		FROM dbo.fn_CurrentSalaryHistoryIDByDate(@FromDate) s
		INNER JOIN tblSalaryHistory sh ON s.SalaryHistoryID = sh.SalaryHistoryID
		WHERE EXISTS (
				SELECT 1
				FROM #tblEmployeeIDList te
				WHERE sh.EmployeeID = te.EmployeeID AND sh.DATE >= te.HireDate
				)
	END

	-- muc luong phat sinh moi trong thang
	INSERT INTO #tblSalDetail (EmployeeID, SalaryHistoryID, FromDate, ToDate, BasicSalary, BasicSalaryOrg, SalCalRuleID, LatestSalEntry, BaseSalRegionalID, CurrencyCode, IsNet, PayrollTypeCode, WorkingHoursPerDay, NETSalary)
	SELECT sh.EmployeeID, sh.SalaryHistoryID, CASE
			WHEN sh.DATE < @FromDate
				THEN @FromDate
			ELSE sh.DATE
			END, @ToDate, ISNULL(sh.Salary, 0) + ISNULL([14], 0), ISNULL(sh.Salary, 0) + ISNULL([14], 0), sh.SalCalRuleID, 1, sh.BaseSalRegionalID, sh.CurrencyCode, sh.IsNet, sh.PayrollTypeCode, ISNULL(nullif(sh.WorkingHoursPerDay, 0), 8), ISNULL(sh.NETSalary, 0)
	FROM tblSalaryHistory sh
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList te
			WHERE sh.EmployeeID = te.EmployeeID AND sh.DATE >= te.HireDate
			) AND [Date] > @FromDate AND NOT EXISTS (
			SELECT 1
			FROM #tblSalDetail s
			WHERE sh.SalaryHistoryID = s.SalaryHistoryID
			) AND sh.DATE <= @ToDate

	-- lấy dữ liệu bảng custom attendance ra
	SELECT *
	INTO #tblCustomAttendanceData
	FROM tblCustomAttendanceData c
	WHERE Month = @Month AND Year = @Year AND Approved = 1 AND c.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			) AND IsRetro = @CalculateRetro -- nhớ where vụ retro nhé

	ALTER TABLE #tblCustomAttendanceData ADD PaidLeaves FLOAT(53), UnPaidLeaves FLOAT(53), TotalNonWorkingDays FLOAT(53)

	DECLARE @CustomAttendanceQuery VARCHAR(max) = ''

	SELECT @CustomAttendanceQuery += '+isnull(' + LeaveCode + ',0)*' + CAST(lt.PaidRate AS VARCHAR(10)) + '/100'
	FROM tblLeaveType lt
	WHERE lt.PaidRate > 0 AND lt.LeaveCode IN (
			SELECT Column_Name
			FROM INFORMATION_SCHEMA.COLUMNS
			WHERE TABLE_NAME = 'tblCustomAttendanceData'
			)

	DECLARE @customAttendanceQuery_Unpaid VARCHAR(max) = ''

	SELECT @customAttendanceQuery_Unpaid += '+isnull(' + LeaveCode + ',0)'
	FROM tblLeaveType lt
	WHERE ISNULL(lt.PaidRate, 0) = 0 AND lt.LeaveCode IN (
			SELECT Column_Name
			FROM INFORMATION_SCHEMA.COLUMNS
			WHERE TABLE_NAME = 'tblCustomAttendanceData'
			)

	SET @CustomAttendanceQuery = 'update #tblCustomAttendanceData set PaidLeaves = 0' + @CustomAttendanceQuery + ',UnpaidLeaves = 0' + @customAttendanceQuery_Unpaid

	-- update các giá chị cần thiết match up mới bảng truyền thống trrc giờ
	EXEC (@CustomAttendanceQuery)

	SELECT ot.EmployeeID, ot.OTDate, ot.ApprovedHours, ot.OTKind
	INTO #tblOTList
	FROM tblOTList ot
	WHERE ot.OTDate BETWEEN @FromDate AND @ToDate AND ot.Approved = 1 AND ApprovedHours <> 0 AND ot.EmployeeID IN (
			SELECT te.EmployeeID
			FROM #tblEmployeeIDList te
			
			EXCEPT
			
			SELECT c.EmployeeID
			FROM #tblCustomAttendanceData c
			)

	DECLARE @CustomOTInsert VARCHAR(max) = ''

	CREATE TABLE #tempDataForOT (EmployeeID VARCHAR(20), OTKindID INT, OTAmountHours FLOAT(53))

	SELECT @CustomOTInsert += '
	insert into #tempDataForOT(EmployeeID,OTKindID,OTAmountHours)
	select EmployeeID,''' + CAST(OTKind AS VARCHAR(10)) + ''',' + ColumnNameOn_CustomAttendanceTable + ' as LvAmountDays
	from #tblCustomAttendanceData where ' + ColumnNameOn_CustomAttendanceTable + ' <>0'
	FROM tblOvertimeSetting ov
	WHERE ov.ColumnNameOn_CustomAttendanceTable IN (
			SELECT COLUMN_NAME
			FROM INFORMATION_SCHEMA.COLUMNS c
			WHERE c.TABLE_NAME = 'tblCustomAttendanceData'
			)

	EXEC (@CustomOTInsert)

	INSERT INTO #tblOTList (EmployeeID, OTDate, ApprovedHours, OTKind)
	SELECT EmployeeID, @ToDateTruncate AS OTDate, OTAmountHours AS ApprovedHours, OTKindID AS OTKind
	FROM #tempDataForOT

	DROP TABLE #tempDataForOT

	DELETE #tblOTList
	FROM #tblOTList ot
	WHERE NOT EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList te
			WHERE ot.EmployeeID = te.EmployeeID AND ot.OTDate BETWEEN te.HireDate AND te.LastWorkingDate
			)

	--TRIPOD-Foreign Currency
	UPDATE sd
	SET sd.ExchangeRate = er.ExchangeRate
	FROM #tblSalDetail sd
	INNER JOIN #EmployeeExchangeRate er ON sd.EmployeeID = er.EmployeeID
	WHERE isNET = 1

	--TRIPOD-foreign: mặc định cột Salary = NetSalaryy, khách muốn nhập cột nào cx đc
	UPDATE sal
	SET sal.BasicSalary = sal.NetSalary, sal.BasicSalaryOrg = sal.NetSalary
	FROM #tblSalDetail sal
	WHERE ISNULL(sal.BasicSalary, 0) = 0 AND ISNULL(sal.NetSalary, 0) > 0

	-- update lại theo tỷ giá nếu có
	UPDATE sal
	SET sal.BasicSalary = sal.BasicSalary * ISNULL(cs.[ExchangeRate], 1)
	FROM #tblSalDetail sal
	INNER JOIN #EmployeeExchangeRate cs ON sal.EmployeeID = cs.EmployeeID AND cs.CurrencyCode = sal.CurrencyCode

	-- nếu có thông tin lương có currencyCode <>'VND' mà chưa thiết lập tỷ giá tháng này thì phải thiết lập tỷ giá trước khi tính lương
	IF EXISTS (
			SELECT 1
			FROM #tblSalDetail
			WHERE isnull(CurrencyCode, 'VND') <> 'VND' AND ExchangeRate IS NULL
			)
	BEGIN
		INSERT INTO tblProcessErrorMessage (ErrorType, ErrorDetail, LoginID) --,ResolveLink)
		SELECT 'Exchange Rate not seted!', 'Exchange rate for "' + CurrencyCode + '" is not seted!, Please access Function "Currency Setting" first!', @loginID - 1000
		--,N'Object=MnuMDT150|Params=txtFilter=&cbx@Month='+cast(@Month as varchar(2))+'&cbx@Year='+cast(@year as varchar(4))+'|Text=Currency Setting'
		FROM #tblSalDetail
		WHERE isnull(CurrencyCode, 'VND') <> 'VND' AND ExchangeRate IS NULL

		RETURN;
	END

	--TRIPOD: PercentProbation in tblEmployeeType
	IF EXISTS (
			SELECT 1
			FROM #tblSalDetail sh
			INNER JOIN #tblEmployeeIDList te ON sh.EmployeeID = te.EmployeeID
			WHERE (ProbationEndDate BETWEEN @FromDate AND @ToDateTruncate OR ProbationEndDate > @ToDateTruncate) AND te.HireDate <> te.ProbationEndDate
			)
		--IF @PROBATION_PERECNT < 100.0
	BEGIN
		UPDATE #tblSalDetail
		SET PercentProbation = ISNULL(tsh.PercentProbation, et.PercentProbation)
		FROM #tblSalDetail sh
		INNER JOIN #tblEmployeeIDList te ON sh.EmployeeID = te.EmployeeID
		LEFT JOIN tblSalaryHistory tsh ON sh.SalaryHistoryID = tsh.SalaryHistoryID
		LEFT JOIN tblEmployeeType et ON te.EmployeeTypeID = et.EmployeeTypeID
		WHERE (ProbationEndDate BETWEEN @FromDate AND @ToDateTruncate OR ProbationEndDate > @ToDateTruncate) AND te.HireDate <> te.ProbationEndDate

		--cuoi thang hoac thang sau het thu viec
		-- UPDATE #tblSalDetail
		-- SET BasicSalaryOrg = BasicSalary, BasicSalary = BasicSalary * sh.PercentProbation / 100.0
		-- FROM #tblSalDetail sh
		-- INNER JOIN #tblEmployeeIDList te ON sh.EmployeeID = te.EmployeeID
		-- WHERE (ProbationEndDate BETWEEN @FromDate AND @ToDateTruncate OR ProbationEndDate > @ToDateTruncate) AND te.HireDate <> te.ProbationEndDate
		--het thu viec trong thang nay
		UPDATE #tblSalDetail
		SET FromDate = DATEADD(day, 1, ProbationEndDate)
		FROM #tblSalDetail sh
		INNER JOIN #tblEmployeeIDList te ON sh.EmployeeID = te.EmployeeID
		WHERE ISNULL(sh.PercentProbation, 0) > 0 AND ProbationEndDate BETWEEN @FromDate AND @ToDateTruncate AND te.HireDate <> te.ProbationEndDate

		DECLARE @MaxSalaryHistoryId BIGINT

		SET @MaxSalaryHistoryId = (
				SELECT MAX(SalaryHistoryID)
				FROM #tblSalDetail
				) + 7121997 --TN:fake id cao lên để tránh trùng lắp với ID real

		INSERT INTO #tblSalDetail (EmployeeID, SalaryHistoryID, ProbationSalaryHistoryID, FromDate, ToDate, BasicSalaryOrg, BasicSalary, SalCalRuleID, LatestSalEntry, BaseSalRegionalID, IsNet, PayrollTypeCode, WorkingHoursPerDay, CurrencyCode)
		SELECT sh.EmployeeID, SalaryHistoryID, SalaryHistoryID + @MaxSalaryHistoryId, CASE
				WHEN @FromDate < te.HireDate
					THEN te.HireDate
				ELSE @FromDate
				END, te.ProbationEndDate, sh.BasicSalary, sh.BasicSalary * @PROBATION_PERECNT / 100.0, sh.SalCalRuleID, 1, sh.BaseSalRegionalID, IsNet, PayrollTypeCode, sh.WorkingHoursPerDay, sh.CurrencyCode
		FROM #tblSalDetail sh
		INNER JOIN #tblEmployeeIDList te ON sh.EmployeeID = te.EmployeeID
		WHERE te.ProbationEndDate BETWEEN @FromDate AND @ToDateTruncate AND te.HireDate <> te.ProbationEndDate AND ISNULL(sh.isNET, 0) = 0
	END

	-- bao loi sai ngay hieu luc luong, hoac chua nhap thong tin luong
	INSERT INTO tblProcessErrorMessage (ErrorType, ErrorDetail, LoginID, ResolveLink)
	SELECT 'Wrong salary info', N'Bạn chưa nhập thông tin lương hoặc ngày hiệu lực lương lớn hơn kỳ tính lương', @LoginID, 'Object=MnuHRS145'
	FROM #tblEmployeeIDList e
	WHERE NOT EXISTS (
			SELECT 1
			FROM #tblSalDetail s
			WHERE e.employeeID = s.employeeID
			)

	UPDATE s1
	SET ToDate = dateadd(second, - 1, s2.FromDate)
	FROM #tblSalDetail s1
	CROSS APPLY (
		SELECT MIN(FromDate) FromDate
		FROM #tblSalDetail s2
		WHERE s1.EmployeeID = s2.EmployeeID AND s1.FromDate < s2.FromDate
		) s2
	WHERE s2.FromDate IS NOT NULL

	UPDATE #tblSalDetail
	SET isTwoSalLevel = 0

	UPDATE #tblSalDetail
	SET LatestSalEntry = 0
	WHERE ToDate < @ToDate

	UPDATE #tblSalDetail
	SET isTwoSalLevel = 1
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tblSalDetail s
			GROUP BY EmployeeID
			HAVING COUNT(1) > 1
			)

	--dong luong moi, nhung đã nghỉ việc
	SELECT sal.EmployeeID, sal.SalaryHistoryID
	INTO #NewSalaryButTerminated
	FROM #tblSalDetail sal
	INNER JOIN #tblEmployeeIDList te ON sal.EmployeeID = te.EmployeeID AND sal.FromDate > te.LastWorkingDate
	WHERE sal.isTwoSalLevel = 1 AND sal.LatestSalEntry = 1

	DELETE sal
	FROM #tblSalDetail sal
	WHERE sal.LatestSalEntry = 1 AND EXISTS (
			SELECT 1
			FROM #NewSalaryButTerminated n
			WHERE sal.EmployeeID = n.EmployeeID
			)

	UPDATE sal
	SET ProbationSalaryHistoryID = NULL, LatestSalEntry = 1
	FROM #tblSalDetail sal
	WHERE sal.LatestSalEntry = 0 AND EXISTS (
			SELECT 1
			FROM #NewSalaryButTerminated n
			WHERE sal.EmployeeID = n.EmployeeID
			)

	UPDATE #tblSalDetail
	SET isTwoSalLevel = 0
	FROM #tblSalDetail sal
	WHERE EXISTS (
			SELECT 1
			FROM #NewSalaryButTerminated n
			WHERE sal.EmployeeID = n.EmployeeID
			)

	-- standard working day
	-- ngày công chuẩn -- người vận chuyển lên đây để chạy dc cho những thằng import custom attendance data
	IF NOT EXISTS (
			SELECT 1
			FROM tblWorkingDaySetting s
			WHERE Month = @Month AND YEAR = @Year AND (
					EXISTS (
						SELECT 1
						FROM #tblEmployeeIDList e
						WHERE s.EmployeeTypeID = e.EmployeeTypeID
						) OR s.EmployeeTypeID = - 1
					)
			)
		EXEC sp_WorkingDaySetting @Month = @Month, @Year = @Year, @LoginID = @LoginID

	--tung nhan vien
	UPDATE s
	SET STD_WD = ee.WorkingDays_Std, STD_WD_Schedule = ee.WorkingDays_Std
	FROM #tblSalDetail s
	INNER JOIN tblWorkingDaySettingPerEE ee ON s.EmployeeID = ee.EMployeeID AND ee.Month = @Month AND ee.Year = @Year

	-- -- tung loai nhan vien
	-- UPDATE s set STD_WD = std.WorkingDays_Std, STD_WD_Schedule = std.WorkingDays_Std from #tblSalDetail s
	-- inner join #tblEmployeeIDList e on s.EmployeeID = e.EmployeeID
	-- inner join tblWorkingDaySetting std on e.EmployeeTypeID = std.EmployeeTypeID and std.Month = @Month and std.Year = @Year
	--TRIPOD:
	UPDATE s
	SET STD_WD = std.WorkingDays_Std, STD_WD_Schedule = std.WorkingDays_Std
	FROM #tblSalDetail s
	INNER JOIN tblWorkingDaySetting std ON std.EmployeeTypeID = 0 AND std.Month = @Month AND std.Year = @Year

	-- toan cong ty
	UPDATE s
	SET STD_WD = (
			SELECT std.WorkingDays_Std
			FROM tblWorkingDaySetting std
			WHERE std.EmployeeTypeID = - 1 AND std.Month = @Month AND std.Year = @Year
			)
	FROM #tblSalDetail s
	WHERE s.STD_WD IS NULL

	--TRIPOD
	UPDATE s
	SET STD_WD = 26
	FROM #tblSalDetail s
	WHERE STD_WD > 26

	UPDATE #tblSalDetail
	SET STD_WD_Schedule = STD_WD
	WHERE STD_WD_Schedule IS NULL

	UPDATE #tblSalDetail
	SET STD_WD = sc.FixedStdPerMonth
	FROM #tblSalDetail s
	INNER JOIN tblSalaryCalculationRule sc ON s.SalCalRuleID = sc.SalCalRuleID AND sc.IsFixedStd = 1

	--and not exists (select 1 from #tblEmployeeIDList e where e.EmployeeID = s.EmployeeID and (e.NewStaff = 1 or e.TerminatedStaff = 1))
	-- lấy ngày công ở đây
	CREATE TABLE #Tadata (EmployeeID VARCHAR(20), Attdate DATE, HireDate DATE, EmployeeStatusID INT, HolidayStatus INT, WorkingTime FLOAT(53), Std_Hour_PerDays FLOAT(53), Lvamount FLOAT(53), PaidAmount_Des FLOAT(53), UnpaidAmount_Des FLOAT(53), SalaryHistoryID INT, CutSI BIT, EmployeeTypeID INT)

	EXEC sp_WorkingTimeProvider @Month = @Month, @Year = @Year, @fromdate = @FromDate, @todate = @ToDate, @loginId = @LoginID

	IF (OBJECT_ID('SALCAL_CUSTOMIZE_TADATA') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_CUSTOMIZE_TADATA
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_CUSTOMIZE_TADATA @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	IF @StopUPDATE = 0
	BEGIN
		DELETE #Tadata
		WHERE EmployeeID NOT IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		UPDATE #Tadata
		SET SalaryHistoryID = ISNULL(sal.ProbationSalaryHistoryID, sal.SalaryHistoryID)
		FROM #Tadata ta
		INNER JOIN #tblSalDetail sal ON ta.EmployeeID = sal.EmployeeID AND ta.Attdate BETWEEN sal.FromDate AND sal.ToDate

		/*
		update #Tadata set SalaryHistoryID = ISNULL(sal.ProbationSalaryHistoryID, sal.SalaryHistoryID)
		,WorkingTime = case when ISNULL(sc.IsSTDMinusUnpaidLeave,0) =0 or WorkingTime is not null then WorkingTime	else
		case when
		HolidayStatus = 0 and CutSI = 0 and ISNULL(Lvamount,0) <8 then 8 - ISNULL(Lvamount,0) else 0 end
		end
		from #Tadata  ta
		inner join #tblSalDetail sal on ta.EmployeeID= sal.EmployeeID and ta.Attdate  between sal.FromDate and sal.ToDate
		inner join tblSalaryCalculationRule sc on sal.SalCalRuleID = sc.SalCalRuleID
		*/
		DELETE #Tadata
		WHERE SalaryHistoryID IS NULL
			--delete đi để câu dưới nó đừng tính nữa mất thời gian
			--delete #Tadata  where EmployeeID in(select EmployeeID from #tblCustomAttendanceData)
	END

	SELECT EmployeeID, ta.SalaryHistoryID, SUM(CASE
				WHEN ISNULL(HolidayStatus, 0) <> 1
					THEN 1
				ELSE 0
				END) AS STD_PerHistoryID, ROUND(SUM(CASE
					WHEN ISNULL(HolidayStatus, 0) = 0
						THEN ta.WorkingTime / isnull(ta.Std_Hour_PerDays, 8)
					ELSE 0
					END), @ROUND_TOTAL_WORKINGDAYS) AS AttDays, SUM(ta.PaidAmount_Des / isnull(ta.Std_Hour_PerDays, 8)) AS PaidLeaves, SUM(ta.UnpaidAmount_Des / isnull(ta.Std_Hour_PerDays, 8)) AS UnPaidLeaves, SUM(CASE
				WHEN HolidayStatus = 1
					THEN 1
				ELSE 0
				END) AS TotalSunDay, SUM(CASE
				WHEN CutSI = 1 AND HolidayStatus <> 1
					THEN 1
				ELSE 0
				END) TotalNonWorkingDays
	INTO #tblSal_AttendanceData_PerHistory
	FROM #Tadata ta
	GROUP BY EmployeeID, ta.SalaryHistoryID

	-- mặc dù đã xóa ở trên nhưng ở đây vẫn nên xóa 1 lần nữa
	--delete #tblSal_AttendanceData_PerHistory where EmployeeID in(select EmployeeID from #tblCustomAttendanceData)
	-- insert các giá trị đã được chuẩn bị sẵn
	--  insert into #tblSal_AttendanceData_PerHistory(EmployeeID,SalaryHistoryID,STD_PerHistoryID,AttDays,PaidLeaves,UnPaidLeaves,TotalNonWorkingDays)
	--  select sd.EmployeeID,ISNULL(sd.ProbationSalaryHistoryID,sd.SalaryHistoryID),sd.STD_WD,c.AttDays,c.PaidLeaves,c.UnpaidLeaves,sd.STD_WD - ISNULL(c.AttDays,0) - ISNULL(c.PaidLeaves,0) - ISNULL(c.UnpaidLeaves,0)
	--   from #tblSalDetail sd
	--  inner join #tblCustomAttendanceData c on sd.EmployeeID = c.EmployeeID
	--  where sd.LatestSalEntry = 1
	SELECT EmployeeID, sum(STD_PerHistoryID) AS STDWorkingDays, SUM(AttDays) AS AttDays, SUM(PaidLeaves) AS PaidLeaves, SUM(UnPaidLeaves) AS UnPaidLeaves, SUM(ISNULL(AttDays, 0) + ISNULL(PaidLeaves, 0)) AS TotalPaidDays, SUM(TotalSunDay) AS TotalSunDay, 0 AS ProbationHours, 0 AS DeductionHours, sum(TotalNonWorkingDays) AS TotalNonWorkingDays
	INTO #tblSal_AttendanceData
	FROM #tblSal_AttendanceData_PerHistory
	GROUP BY EmployeeID

	UPDATE #tblSal_AttendanceData
	SET STDWorkingDays = sd.STD_WD
	FROM #tblSal_AttendanceData sal
	INNER JOIN #tblSalDetail sd ON sal.employeeId = sd.EmployeeID AND sd.LatestSalEntry = 1

	SELECT lv.EmployeeID, lv.LeaveCode, lv.LvAmount, lv.LeaveDate, lt.PaidRate, lv.LeaveStatus, lt.CutDiligent, ISNULL(lt.LeaveCategory, 0) AS LeaveCategory
	INTO #tblLvHistory
	FROM tblLvHistory lv
	INNER JOIN tblLeaveType lt ON lv.LeaveCode = lt.LeaveCode AND lv.EmployeeID IN (
			SELECT te.EmployeeID
			FROM #tblEmployeeIDList te
			
			EXCEPT
			
			SELECT c.EmployeeID
			FROM #tblCustomAttendanceData c -- except để giảm thời gian thực thi bớt di
			) AND lv.LeaveDate BETWEEN @FromDate AND @ToDate

	-- xóa những ngày nghỉ trong phần chưa đi làm hoặc nghỉ dài hạn đi
	DELETE #tblLvHistory
	FROM #tblLvHistory lv
	INNER JOIN #Tadata ta ON lv.EmployeeID = ta.EmployeeID AND lv.LeaveDate = ta.Attdate AND ta.CutSI = 1

	-- nhập custom leave
	DECLARE @CustomLeaveCodeInsert VARCHAR(max) = ''

	CREATE TABLE #tempDataForLeave (EmployeeID VARCHAR(20), LeaveCode VARCHAR(50), lvAmountdays FLOAT(53))

	SELECT @CustomLeaveCodeInsert += '
	insert into #tempDataForLeave(EmployeeID,LeaveCode,lvAmountdays)
	select EmployeeID,''' + LeaveCode + ''',' + LeaveCode + ' as LvAmountDays
	from #tblCustomAttendanceData where ' + LeaveCode + ' <>0'
	FROM tblLeaveType lt
	WHERE lt.LeaveCode IN (
			SELECT column_Name
			FROM INFORMATION_SCHEMA.COLUMNS c
			WHERE c.TABLE_NAME = 'tblCustomAttendanceData'
			)

	EXEC (@CustomLeaveCodeInsert)

	INSERT INTO #tblLvHistory (EmployeeID, LeaveCode, LvAmount, LeaveDate, PaidRate, LeaveStatus, CutDiligent, LeaveCategory)
	SELECT lv.EmployeeID, lv.LeaveCode, lv.lvAmountdays * 8, @ToDateTruncate AS LeaveDate, lt.PaidRate, 3 AS LeaveStatus, 0 AS CutDiligent, ISNULL(lt.LeaveCategory, 0) AS LeaveCategory
	FROM #tempDataForLeave lv
	INNER JOIN tblLeaveType lt ON lv.LeaveCode = lt.LeaveCode

	DROP TABLE #tempDataForLeave

	-- Nhung ngay khong di làm mà không có đăng ký nghỉ, không phải cuối tuần hay ngày lễ thì tính là nghỉ không phép
	IF NOT EXISTS (
			SELECT 1
			FROM tblLeaveType
			WHERE LeaveCode IN (
					SELECT Value
					FROM tblParameter
					WHERE Code = 'NO_TA_LEAVE_CODE'
					)
			)
		UPDATE tblParameter
		SET Value = (
				SELECT TOP 1 LeaveCode
				FROM tblLeaveType
				WHERE PaidRate = 0
				)
		WHERE Code = 'NO_TA_LEAVE_CODE'

	INSERT INTO #tblLvHistory (EmployeeID, LeaveCode, LvAmount, LeaveDate, PaidRate, LeaveStatus, LeaveCategory)
	SELECT EmployeeID, (
			SELECT Value
			FROM tblParameter
			WHERE Code = 'NO_TA_LEAVE_CODE'
			), Std_Hour_PerDays - (isnull(WorkingTime, 0) + isnull(Lvamount, 0)), Attdate, 0, 2, 1
	FROM #Tadata ta
	WHERE ta.HolidayStatus = 0 AND isnull(WorkingTime, 0) + isnull(Lvamount, 0) < Std_Hour_PerDays

	UPDATE TA
	SET Lvamount = isnull(Lvamount, 0) + (Std_Hour_PerDays - (isnull(WorkingTime, 0) + isnull(Lvamount, 0))), UnpaidAmount_Des = isnull(UnpaidAmount_Des, 0) + (Std_Hour_PerDays - (isnull(WorkingTime, 0) + isnull(Lvamount, 0)))
	FROM #Tadata ta
	WHERE ta.HolidayStatus = 0 AND isnull(WorkingTime, 0) + isnull(Lvamount, 0) < Std_Hour_PerDays

	SELECT LeaveCode, EmployeeID, round(SUM(LvAmount) / 8.0, @ROUND_ATTDAYS) AS LvAmount
	INTO #LeaveTMpDAta
	FROM (
		SELECT EmployeeID, LeaveDate, LeaveCode, LvAmount
		FROM #tblLvHistory
		
		UNION
		
		SELECT ta.EmployeeID, ta.Attdate AS LeaveDate, es.LeaveCodeForCutSI AS LeaveCode, 8 AS lvAmount
		FROM #Tadata ta
		INNER JOIN tblEmployeeStatus es ON ta.EmployeeStatusID = es.EmployeeStatusID AND es.LeaveCodeForCutSI IN (
				SELECT LeaveCode
				FROM tblLeaveType
				)
		WHERE ta.CutSI = 1 AND es.LeaveCodeForCutSI IS NOT NULL AND ta.HolidayStatus = 0
		) lv
	GROUP BY EmployeeID, LeaveCode

	-- DECLARE @altertblSal_AttDataSumary_ForReport NVARCHAR(max) = ''
	-- DECLARE @currLeaveCode NVARCHAR(50) = ''
	-- SELECT @altertblSal_AttDataSumary_ForReport += 'if col_length(''tblSal_AttDataSumary_ForReport'',''' + LeaveCode + ''') is null
	-- alter table tblSal_AttDataSumary_ForReport add ' + LeaveCode + ' float
	-- '
	-- FROM tblLeaveType
	-- EXEC (@altertblSal_AttDataSumary_ForReport)
	-- INSERT INTO tblSal_AttDataSumary_ForReport (EmployeeID, Month, Year, PeriodID)
	-- SELECT EmployeeID, @Month, @Year, @PeriodID
	-- FROM #tblEmployeeIDList e
	-- WHERE NOT EXISTS (
	-- 		SELECT 1
	-- 		FROM tblSal_AttDataSumary_ForReport s
	-- 		WHERE e.EmployeeID = s.EmployeeID AND s.Month = @Month AND s.Year = @Year AND s.PeriodID = @PeriodID
	-- 		)
	-- -- phải chơi hết ko thôi mấy cái update rồi giờ ko update nữa là khộ
	-- SELECT DISTINCT LeaveCode
	-- INTO #LeaveCode
	-- FROM tblLeaveType
	-- IF @CalculateRetro = 0
	-- 	WHILE EXISTS (
	-- 			SELECT 1
	-- 			FROM #LeaveCode
	-- 			)
	-- 	BEGIN
	-- 		SELECT @currLeaveCode = LeaveCode
	-- 		FROM #LeaveCode
	-- 		SET @altertblSal_AttDataSumary_ForReport = 'update tblSal_AttDataSumary_ForReport set ' + @currLeaveCode + ' = LvAmount from tblSal_AttDataSumary_ForReport sal
	-- 	left join #LeaveTMpDAta tmp on sal.EmployeeID = tmp.EmployeeID  and tmp.LEaveCode = ''' + @currLeaveCode + '''
	-- 	where sal.EmployeeID in(select EmployeeID from #tblEmployeeIDList) and sal.Month = ' + CAST(@Month AS VARCHAR(2)) + ' and sal.Year =' + CAST(@Year AS VARCHAR(4)) + ' and sal.PeriodID = ' + CAST(@PeriodID AS VARCHAR(2))
	-- 		EXEC (@altertblSal_AttDataSumary_ForReport)
	-- 		DELETE #LeaveCode
	-- 		WHERE LeaveCode = @currLeaveCode
	-- 		DELETE #LeaveTMpDAta
	-- 		WHERE LeaveCode = @currLeaveCode
	-- 	END
	DROP TABLE #LeaveTMpDAta

	DELETE #tblLvHistory
	WHERE LeaveCategory = 0

	--TRIPOD: process Allowance
	SET ANSI_WARNINGS ON;

	EXEC sp_processAllAllowance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @SalCal = 1

	UPDATE #tblSalDetail
	SET GrossSalary = BasicSalary

	-- cap nhat tong luong
	UPDATE sal
	SET TotalSalary = ISNULL(BasicSalary, 0) + ISNULL(c.Allowance, 0), BasicSalary = ISNULL(BasicSalary, 0) + ISNULL(c.Allowance, 0)
	FROM #tblSalDetail sal
	CROSS APPLY dbo.fn_CurrentSalaryByDate_TRIPOD(@ToDate, @LoginID) c
	WHERE sal.SalaryHistoryID = c.SalaryHistoryID

	--UPDATE sal set TotalSalary = c.Totalsalary from #tblSalDetail sal
	--inner join dbo.fn_CurrentSalaryByDate_TRIPOD(@FromDate) c on sal.SalaryHistoryID = c.SalaryHistoryID
	--where sal.TotalSalary is null
	--Insert into Salary PITAmt table
	SELECT EmployeeID, 'Has no salary entry' AS Reason, CAST(1 AS BIT) AS DoNotSalCal
	INTO #TableVarSalError
	FROM #tblEmployeeIDList
	WHERE EmployeeID IN (
			SELECT DISTINCT EmployeeID
			FROM #tblSalDetail
			WHERE TotalSalary <= 0
			)

	DELETE
	FROM #tblSalDetail
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #TableVarSalError
			WHERE DoNotSalCal = 1
			)

	--DELETE FROM #tblEmployeeIDList WHERE EmployeeID in (select EmployeeID from #TableVarSalError where DoNotSalCal = 1)
	------------------------------Calculate salary per day------------------------------------------
	UPDATE sal
	SET OTSalary = fnTO.OTSalary
	FROM (
		SELECT DISTINCT Fromdate
		FROM #tblSalDetail
		) f
	CROSS APPLY (
		SELECT *
		FROM dbo.fn_CurrentOTSalary_byDate(f.FromDate, @LoginID) fnTO
		) fnTO
	INNER JOIN #tblSalDetail sal ON sal.EmployeeID = fnTO.EmployeeID AND sal.SalaryHistoryID = fnTO.SalaryHistoryID
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID AND isnull(IsDaily, 0) = 0 AND isnull(IsHourly, 0) = 0

	IF @PROBATION_PERECNT > 0 AND @PROBATION_PERECNT < 100.0
		UPDATE #tblSalDetail
		SET OTSalary = OTSalary * @PROBATION_PERECNT / 100.0
		WHERE BasicSalaryOrg IS NOT NULL AND BasicSalaryOrg <> BasicSalary

	--TRIPOD OT
	UPDATE #tblSalDetail
	SET OTSalary = CASE
			WHEN ISNULL(TotalSalary, 0) <> 0
				THEN TotalSalary
			ELSE OTSalary
			END

	UPDATE sal
	SET sal.OTSalary = sal.OTSalary * ISNULL(cs.[ExchangeRate], 1)
	FROM #tblSalDetail sal
	INNER JOIN #EmployeeExchangeRate cs ON sal.EmployeeID = cs.EmployeeID AND cs.CurrencyCode = sal.CurrencyCode

	UPDATE #tblSalDetail
	SET SalaryPerDay = CASE
			WHEN isnull(IsDaily, 0) = 1
				THEN BasicSalary
			WHEN isnull(IsHourly, 0) = 1
				THEN BasicSalary * 8.0
			ELSE TotalSalary / STD_WD
			END, SalaryPerDayOT = CASE
			WHEN isnull(IsDaily, 0) = 1
				THEN BasicSalary
			WHEN isnull(IsHourly, 0) = 0
				THEN OTSalary / STD_WD
			END
	FROM #tblSalDetail sal
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID

	------------------------------Calculate salary per hour------------------------------------------
	UPDATE #tblSalDetail
	SET SalaryPerHour = CASE
			WHEN isnull(IsHourly, 0) = 1
				THEN BasicSalary
			ELSE SalaryPerDay / 8.0
			END, SalaryPerHourOT = CASE
			WHEN isnull(IsHourly, 0) = 1
				THEN BasicSalary
			ELSE SalaryPerDayOT / sal.WorkingHoursPerDay
			END
	FROM #tblSalDetail sal
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID

	------------------------------Calculate Leave---------------------------------
	IF (OBJECT_ID('SALCAL_LEAVE_AUTOMATIC_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_LEAVE_AUTOMATIC_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_LEAVE_AUTOMATIC_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	CREATE TABLE #DataLeave (EmployeeID VARCHAR(20), LeaveDate DATETIME, LeaveCode VARCHAR(20), LeaveStatus INT, LeaveDays FLOAT, LeaveHours FLOAT, PaidRate FLOAT)

	CREATE TABLE #TableVarLeaveAmount (EmployeeID VARCHAR(20), SalaryHistoryID BIGINT, ContractSalary FLOAT(53), LeaveDate DATETIME, LeaveCode VARCHAR(20), PaidRate FLOAT, UnpaidRate FLOAT, LeaveDays FLOAT, LeaveHours FLOAT, SalaryPerDay FLOAT(53), AmountPaid FLOAT(53), AmountDeduct FLOAT(53))

	-------------------------Leave Days---------------------------------------
	INSERT INTO #DataLeave (EmployeeID, LeaveDate, LeaveCode, LeaveStatus, LeaveHours, LeaveDays, PaidRate)
	SELECT lv.EmployeeID, lv.LeaveDate, lv.LeaveCode, lv.LeaveStatus, lv.LvAmount, round(lv.LvAmount / 8.0, @ROUND_ATTDAYS), lv.PaidRate
	FROM #tblLvHistory lv
	WHERE lv.LeaveCategory = 1 AND Lv.LeaveCode <> 'FWC'

	--Remove illegal records
	DELETE l
	FROM #DataLeave l
	WHERE datename(dw, l.LeaveDate) = 'Sunday' AND EXISTS (
			SELECT 1
			FROM tblWSchedule ws
			WHERE ws.EmployeeID = l.EmployeeID AND ws.ScheduleDate = l.LeaveDate AND ws.HolidayStatus > 0
			)

	-------------------------Leave Amount---------------------------------------
	INSERT INTO #TableVarLeaveAmount (EmployeeID, LeaveCode, LeaveDays, LeaveHours, LeaveDate, PaidRate, UnpaidRate, SalaryHistoryID, SalaryPerDay) (SELECT t.EmployeeID, LeaveCode, SUM(ISNULL(LeaveDays, 0)), SUM(ISNULL(LeaveHours, 0)), LeaveDate, PaidRate, 100 - PaidRate, SalaryHistoryID, MAX(SalaryPerDay) AS SalaryPerDay FROM #DataLeave t INNER JOIN #tblSalDetail sal ON t.EmployeeID = sal.EmployeeID AND t.LeaveDate BETWEEN FromDate AND ToDate GROUP BY t.EmployeeID, LeaveCode, LeaveDate, PaidRate, SalaryHistoryID)

	---------------------------------------------------------------------------------------
	UPDATE #TableVarLeaveAmount
	SET AmountPaid = (PaidRate / 100.00) * LeaveDays * SalaryPerDay -- ContractSalary * (PaidRate/100.00) * (LeaveDays/TotalDays) --chinh xac hon lay SalaryPerDays * LeaveDays
		, AmountDeduct = (UnpaidRate / 100.00) * LeaveDays * SalaryPerDay -- ContractSalary * (UnpaidRate/100.00) * (LeaveDays/TotalDays) --chinh xac hon lay SalaryPerDays * LeaveDays

	-------------------------UPDATE into #tblSal_PaidLeave_Detail_des-------------------------------------
	INSERT INTO #tblSal_PaidLeave_Detail_des (EmployeeID, LeaveCode, Month, Year, SalaryHistoryID, LeaveDays, LeaveHour, AmountDeduct, AmountPaid, PeriodID) (SELECT EmployeeID, LeaveCode, @Month, @Year, SalaryHistoryID, SUM(LeaveDays), SUM(LeaveHours), ROUND(SUM(AmountDeduct), @ROUND_SALARY_UNIT), ROUND(SUM(AmountPaid), @ROUND_SALARY_UNIT), @PeriodID FROM #TableVarLeaveAmount GROUP BY EmployeeID, LeaveCode, SalaryHistoryID)

	-- tính tổng các ngày ko đi làm
	UPDATE #tblSalDetail
	SET UnpaidLeaveAmount = ROUND(tmp.AmountDeduct, @ROUND_SALARY_UNIT)
	FROM #tblSalDetail sal
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID AND sc.IsSTDMinusUnpaidLeave = 1 -- nếu là STD trừ đi ngày nghỉ
	INNER JOIN (
		SELECT EmployeeID, SalaryHistoryID, SUM(ISNULL(AmountDeduct, 0)) AmountDeduct
		FROM #TableVarLeaveAmount
		GROUP BY EmployeeID, SalaryHistoryID
		) tmp ON sal.EmployeeID = tmp.EmployeeID AND sal.SalaryHistoryID = tmp.SalaryHistoryID

	------------------------UPDATE into #tblSal_PaidLeave_des-----------------------
	INSERT INTO #tblSal_PaidLeave_des (EmployeeID, LeaveCode, [Month], [Year], LeaveDays, LeaveHour, AmountDeduct, AmountPaid, SalaryNameID, SalaryTermID, PeriodID) (SELECT EmployeeID, LeaveCode, @Month, @Year, SUM(ISNULL(LeaveDays, 0)), SUM(ISNULL(LeaveHours, 0)), ROUND(SUM(ISNULL(AmountDeduct, 0)), @ROUND_SALARY_UNIT), ROUND(SUM(ISNULL(AmountPaid, 0)), @ROUND_SALARY_UNIT), '', 0, @PeriodID FROM #TableVarLeaveAmount GROUP BY EmployeeID, LeaveCode)

	------------------------------Calculate Actual salary---------------------------------
	-- Luong thuc nhan cua thang
	SET ANSI_NULLS ON;
	SET ANSI_PADDING ON;
	SET ANSI_WARNINGS ON;
	SET ARITHABORT ON;
	SET CONCAT_NULL_YIELDS_NULL ON;
	SET QUOTED_IDENTIFIER ON;
	SET NUMERIC_ROUNDABORT OFF;

	--TRIPOD
	EXEC sp_processSummaryAttendance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @ViewType = 0, @Payroll = 1

	SELECT *
	INTO #AttendanceSummary
	FROM tblAttendanceSummary
	WHERE Year = @Year AND Month = @Month AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblSalDetail
			)

	--TRIPOD: gross salary - (gross salary with allowances/number of working hours * (number of working hours - number of actual working hours))
	UPDATE #tblSalDetail
	SET RegularAmt = ROUND(GrossSalary - (TotalSalary / (m.STD_WorkingHours)) * ((m.STD_WorkingHours) - WorkingHrs_Total), 0), PaidLeaveAmt = ROUND(PaidLeaveHrs_Total * (TotalSalary / (m.STD_WorkingHours)), 0), SalaryPerHour = (TotalSalary / (m.STD_WorkingHours)), SalaryPerHourOT = (TotalSalary / (m.STD_WorkingHours)), UnpaidLeaveAmount = ROUND(a.UnpaidLeaveHrs * (TotalSalary / (m.STD_WorkingHours)), 0)
	FROM #tblSalDetail s
	INNER JOIN #AttendanceSummary a ON a.EmployeeID = s.EmployeeID AND CAST(a.FromDate AS DATE) = CAST(s.FromDate AS DATE) AND CAST(a.ToDate AS DATE) = CAST(s.ToDate AS DATE)
	LEFT JOIN #tmpMonthlyPayrollCheckList m ON m.EmployeeID = s.EmployeeID

	--TRIPOD: If salary increases in the middle of the month: Gross salary - leave allowance (including all types of leave and late/early departure) - ((new gross salary - old gross salary) /  number of working hours * number of working hours have old gross salary))
	UPDATE #tblSalDetail
	SET DaysOfSalEntry = ISNULL(ca.WorkingDays_Total, 0) + ISNULL(ca.PaidLeaveDays_Total, 0) + (ISNULL(ca.RegularWorkdays, 0) - ISNULL(ca.STD_WorkingDays, 0)), STDPerSalaryHistoryId = CASE
			WHEN ca.STD_WorkingDays > sal.STD_WD
				THEN sal.STD_WD
			ELSE ca.STD_WorkingDays
			END
	FROM #tblSalDetail sal
	CROSS APPLY (
		SELECT *
		FROM #AttendanceSummary ta
		WHERE sal.EmployeeID = ta.EmployeeID AND ta.SalaryHistoryID = ISNULL(sal.ProbationSalaryHistoryID, sal.SalaryHistoryID)
		) ca

	--TRIPOD: Annual bonus, bonus 6 month total
	UPDATE #tblSalDetail
	SET AnnualBonus_Total = ROUND(((sal.BasicSalaryOrg / a.NumberDayOfYear) * a.NumberDayOfYear_Actual), 0), AnnualBonus_EvMonth = ROUND(((sal.BasicSalaryOrg / a.NumberDayOfYear) * a.NumberDayOfYear_Actual) / a.ActualMonthInYear, 0), Bonus6Month_Total = ROUND(((c.Salary / a.Number6DayMonth * a.Number6DayMonth_Actual) * (a.Bonus6MonthAllowance / 100) * (a.RatioBonus6Month / 100)), 0), Bonus6M_EveryMonth = ROUND(((c.Salary / a.Number6DayMonth * a.Number6DayMonth_Actual) * (a.Bonus6MonthAllowance / 100) * (a.RatioBonus6Month / 100)) / 6, 0)
	FROM #tblSalDetail sal
	INNER JOIN #tmpMonthlyPayrollCheckList a ON a.EmployeeID = sal.EmployeeID
	LEFT JOIN dbo.fn_CurrentSalaryByDate_TRIPOD(@ToDate, @LoginID) c ON c.EmployeeID = sal.EmployeeID AND c.SalaryHistoryID = sal.SalaryHistoryID

	IF @CalculateRetro = 0
		-- update tblSal_AttDataSumary_ForReport set TotalPaidDays = ISNULL(s.AttDays,0)+ISNULL(s.PaidLeaves,0)
		-- ,Attdays = s.AttDays
		-- ,PaidLeaves = s.PaidLeaves
		-- ,UnPaidLeaves = s.UnPaidLeaves
		-- ,STDWorkingDays = s.STDWorkingDays
		-- ,TotalNonWorkingDays = s.TotalNonWorkingDays
		-- ,TotalSunDay = s.TotalSunDay
		--  from tblSal_AttDataSumary_ForReport sal
		--  inner join  #tblSal_AttendanceData s on sal.EmployeeId = s.EmployeeId and sal.Month=@month and sal.Year = @Year and sal.PeriodID= @PeriodID
		-- update sal set ActualMonthlyBasic =case
		-- 	 when isnull(sc.IsSTDMinusUnpaidLeave,0) =0 then SalaryPerDay * DaysOfSalEntry
		-- 	 else
		-- 		 /*case when STD_WD = STDPerSalaryHistoryId then BasicSalary else BasicSalary*STDPerSalaryHistoryId /STD_WD end*/ BasicSalary - isnull(UnpaidLeaveAmount,0)
		-- 	 end
		-- 	 from #tblSalDetail sal
		-- 	inner join tblSalaryCalculationRule sc on sal.SalCalRuleID = sc.SalCalRuleID
		UPDATE #tblSalDetail
		SET ActualMonthlyBasic = ROUND(ISNULL(RegularAmt, 0) + ISNULL(PaidLeaveAmt, 0), @ROUND_SALARY_UNIT)

	-- trừ thêm cho các ngày ko đi làm
	UPDATE sal
	SET ActualMonthlyBasic = ActualMonthlyBasic - (isnull(TotalNonWorkingDays, 0) * SalaryPerDay)
	FROM #tblSalDetail sal
	INNER JOIN #tblSal_AttendanceData_PerHistory n ON sal.EmployeeId = n.Employeeid AND sal.SalaryHistoryID = n.SalaryHistoryID
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID
	WHERE isnull(sc.IsSTDMinusUnpaidLeave, 0) = 1

	IF COL_LENGTH('tblSal_Sal_Detail', 'RegularAmt') IS NULL
	BEGIN
		ALTER TABLE tblSal_Sal_Detail ADD RegularAmt MONEY
	END

	IF COL_LENGTH('tblSal_Sal_Detail', 'PaidLeaveAmt') IS NULL
	BEGIN
		ALTER TABLE tblSal_Sal_Detail ADD PaidLeaveAmt MONEY
	END

	IF COL_LENGTH('tblSal_Sal_Detail', 'GrossSalary') IS NULL
	BEGIN
		ALTER TABLE tblSal_Sal_Detail ADD GrossSalary MONEY
	END

	IF (OBJECT_ID('SALCAL_MONTHLYBASIC_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_MONTHLYBASIC_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_MONTHLYBASIC_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	------- lấy thông tin của Allowance ở đây do cần thông tin này
	CREATE TABLE #tblAllowance (EmployeeID VARCHAR(20), AllowanceID INT, AllowanceRuleID INT, AllowanceCode VARCHAR(200), SalaryHistoryID BIGINT, SalCalRuleID INT, FromDate DATETIME, ToDate DATETIME, DefaultAmount FLOAT(53), DefaultAmount_WithoutCustomAmount FLOAT(53), ReceiveAmount FLOAT(53), TaxableAmount FLOAT(53), UntaxableAmount FLOAT(53), TakeHome BIT, STD_WD FLOAT, TotalPaidDays FLOAT, CurrencyCode VARCHAR(20), Raw_DefaultAmount FLOAT(53), Raw_CurrencyCode NVARCHAR(20), Raw_ExchangeRate FLOAT(53), IsMutilCurrencyCode BIT, RetroAmount MONEY, RetroAmountNonTax MONEY, TaxFreeMaxAmount MONEY, MonthlyCustomAmount MONEY, MonthlyCustomReceiveAmount MONEY, LatestSalEntry BIT, IsTaxable BIT)

	CREATE TABLE #AllowanceCodeList (AllowanceCode VARCHAR(20), AllowanceID INT, DefaultAmount FLOAT(53), AllowanceRuleID INT, ForSalary BIT, TaxfreeMaxAmount FLOAT(53), IsHouseAllowance BIT, isUniformAllowance BIT, BasedOnSalaryScale BIT, IsTaxable BIT, IsMutilCurrencyCode BIT)

	INSERT INTO #AllowanceCodeList (AllowanceID, AllowanceCode, ForSalary, AllowanceRuleID, TaxfreeMaxAmount, IsHouseAllowance, isUniformAllowance, DefaultAmount, BasedOnSalaryScale, IsTaxable, IsMutilCurrencyCode)
	SELECT AllowanceID, AllowanceCode, ForSalary, AllowanceRuleID, TaxfreeMaxAmount, IsHouseAllowance, isUniformAllowance, DefaultAmount, BasedOnSalaryScale, IsTaxable, IsMutilCurrencyCode
	FROM tblAllowanceSetting
	WHERE AllowanceCode IN (
			SELECT c.COLUMN_NAME
			FROM INFORMATION_SCHEMA.COLUMNS c
			WHERE c.TABLE_NAME = N'tblSalaryHistory' AND c.DATA_TYPE = 'money' AND c.COLUMN_NAME NOT IN ('Salary', 'InsSalary', 'NETSalary') AND Visible = 1 AND ISNULL(ForSalary, 0) = 1
			)

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, AllowanceRuleID, AllowanceCode, SalaryHistoryID, FromDate, ToDate, DefaultAmount, TakeHome, SalCalRuleID, TotalPaidDays, IsMutilCurrencyCode, TaxFreeMaxAmount, LatestSalEntry, IsTaxable)
	SELECT s.EmployeeID, a.AllowanceID, a.AllowanceRuleID, a.AllowanceCode, s.SalaryHistoryID, s.FromDate, s.ToDate, a.DefaultAmount, a.ForSalary, s.SalCalRuleID, s.DaysOfSalEntry
		--,case when BasedOnSalaryScale = 1 then DaysOfSalEntry else s.DaysOfSalEntry end
		, a.IsMutilCurrencyCode, CASE
			WHEN isnull(a.IsTaxable, 0) = 0
				THEN 9999999999
			ELSE isnull(TaxFreeMaxAmount, 0)
			END AS TaxFreeMaxAmount, s.LatestSalEntry, a.IsTaxable
	FROM #AllowanceCodeList a
	CROSS JOIN #tblSalDetail s

	--on S.LatestSalEntry = 1 or a.BasedOnSalaryScale =1
	--left join #tblSal_AttendanceData sal on s.EmployeeID = sal.EmployeeID
	SET @Query = ''

	SELECT @Query += 'UPDATE #tblAllowance set DefaultAmount = sh.[' + c.AllowanceCode + ']
,CurrencyCode =' + CASE
			WHEN isnull(c.IsMutilCurrencyCode, 0) = 1
				THEN 'sh.[' + c.AllowanceCode + '_CurrencyCode]'
			ELSE 'sh.CurrencyCode'
			END + '
from #tblAllowance tmp
inner join tblSalaryHistory sh on tmp.SalaryHistoryID = sh.SalaryHistoryID and AllowanceID = ' + cast(c.AllowanceID AS VARCHAR) + '
'
	FROM #AllowanceCodeList c

	EXECUTE sp_executesql @Query

	UPDATE al
	SET SalaryHistoryID = ISNULL(s.ProbationSalaryHistoryID, s.SalaryHistoryID)
	FROM #tblAllowance al
	INNER JOIN #tblSalDetail s ON al.EmployeeID = s.EmployeeID AND al.LatestSalEntry = s.LatestSalEntry
	WHERE al.SalaryHistoryID <> ISNULL(s.ProbationSalaryHistoryID, s.SalaryHistoryID)

	DROP TABLE #AllowanceCodeList

	DELETE
	FROM #tblAllowance
	WHERE ISNULL(DefaultAmount, 0) = 0 AND LatestSalEntry = 0

	--tringuyen:huong tron goi & chuyen can lay theo muc luong moi
	DELETE
	FROM #tblAllowance
	WHERE AllowanceRuleID IN (1, 9) AND LatestSalEntry = 0

	-- kiểm tra coi có thằng nào bị miss exchange rate nữa hay ko
	INSERT INTO tblProcessErrorMessage (ErrorType, ErrorDetail, LoginID)
	SELECT 'Exchange Rate not seted!', 'Exchange rate for "' + a.CurrencyCode + '" is not seted!, Please complete Function "Currency Setting" first!', @loginID - 1000
	FROM #tblAllowance a
	INNER JOIN #tblSalDetail sal ON a.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1
	LEFT JOIN #EmployeeExchangeRate c ON a.CurrencyCode = c.CurrencyCode AND c.EmployeeID = a.EmployeeID
	WHERE isnull(a.CurrencyCode, 'vnd') <> 'vnd' AND c.[ExchangeRate] IS NULL

	IF @@ROWCOUNT > 0
	BEGIN
		-- nếu có lỗi thì
		RETURN;
	END

	-- update tỷ giá cho thằng default Amount trước khi tính toán để cho đúng hơn
	--,Raw_DefaultAmount float(53)
	--	,Raw_ReceiveAmount float(53)
	--	,Raw_ExchangeRate float(53)
	UPDATE al
	SET DefaultAmount = al.DefaultAmount * isnull(c.[ExchangeRate], 1), Raw_ExchangeRate = c.[ExchangeRate], Raw_DefaultAmount = al.DefaultAmount, Raw_CurrencyCode = al.CurrencyCode
	FROM #tblAllowance al
	INNER JOIN #tblSalDetail sal ON al.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1
	LEFT JOIN #EmployeeExchangeRate c ON al.CurrencyCode = c.CurrencyCode AND c.EmployeeID = al.EmployeeID

	IF @PROBATION_PERECNT < 100.0
	BEGIN
		--cuoi thang hoac thang sau moi ket thuc thu viec
		UPDATE #tblAllowance
		SET DefaultAmount = DefaultAmount * @PROBATION_PERECNT / 100.0
		FROM #tblAllowance al
		INNER JOIN #tblEmployeeIDList te ON al.EmployeeID = te.EmployeeID
		WHERE te.ProbationEndDate >= @ToDateTruncate AND @PROBATION_PERECNT > 0 AND al.DefaultAmount > 0 AND te.HireDate <> te.ProbationEndDate

		--het thu viec trong thang nay
		UPDATE #tblAllowance
		SET DefaultAmount = DefaultAmount * @PROBATION_PERECNT / 100.0
		FROM #tblAllowance al
		INNER JOIN #tblEmployeeIDList te ON al.EmployeeID = te.EmployeeID
		LEFT JOIN #NewSalaryButTerminated n ON al.EmployeeID = n.EmployeeID
		WHERE (al.LatestSalEntry = 0 OR (al.LatestSalEntry = 1 AND n.EmployeeID IS NOT NULL)) AND al.DefaultAmount > 0 AND @PROBATION_PERECNT > 0 AND te.ProbationEndDate >= @FromDate AND te.ProbationEndDate < @ToDateTruncate AND te.HireDate <> te.ProbationEndDate
	END

	-- kết thúc thông tin của allowance
	-------------------------calculate Adjustment--------------------------------------
	CREATE TABLE #tblAdjustment (EmployeeID VARCHAR(20), SalaryHistoryID INT, BasicSalary FLOAT(53), IncomeID INT, ByAmount BIT, SalaryPercent FLOAT(10), AdjustmentAmount FLOAT(53), Raw_AdjustmentAmount FLOAT(53), EmpAdjustmentID BIGINT, CurrencyCode VARCHAR(20), ExchangeRate FLOAT(53))

	-- xu ly nhung nhan vien co dc thanh toan tien phep chua su dung hang thang
	DELETE p
	FROM dbo.tblAnnualLeavePayment p
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList e
			WHERE p.EmployeeID = e.EmployeeID
			) AND p.Month = @Month AND p.Year = @Year AND ISNULL(p.Approved, 0) = 0

	DELETE p
	FROM dbo.tblAnnualLeavePayment p
	WHERE EXISTS (
			SELECT 1
			FROM tblALPaymentTracking t
			WHERE p.EmployeeID = t.EmployeeID AND p.Month = t.Month AND p.Year = t.Year AND ISNULL(t.ALPaidDays, 0) = 0
			) AND p.Month = @Month AND p.Year = @Year AND ISNULL(p.Approved, 0) = 0

	INSERT INTO tblAnnualLeavePayment (EmployeeID, EffectiveDate, SalaryHistoryID, Salary, ALDays, SalPerDay, Amount, ApprovedAmount, Approved, Year, Month)
	SELECT s.EmployeeID, @FromDate, s.SalaryHistoryID, s.BasicSalary, ap.ALPaidDays, s.SalaryPerDay, ap.ALPaidDays * s.SalaryPerDay, ap.ALPaidDays * s.SalaryPerDay, 0, @Year, @Month
	FROM tblALPaymentTracking ap
	INNER JOIN #tblSalDetail s ON ap.EmployeeID = s.EmployeeID AND s.LatestSalEntry = 1
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList e
			WHERE ap.EmployeeID = e.EmployeeID
			) AND ap.Month = @Month AND ap.Year = @Year AND ISNULL(ALPaidDays, 0) <> 0 AND NOT EXISTS (
			SELECT 1
			FROM dbo.tblAnnualLeavePayment p
			WHERE ap.EmployeeID = p.EmployeeID AND p.Approved = 1 AND ap.Month = p.Month AND ap.year = p.Year
			)

	-- dua vao bang tblPR_Adjustment
	UPDATE a
	SET a.Amount = p.ApprovedAmount
	FROM dbo.tblPR_Adjustment a
	INNER JOIN dbo.tblAnnualLeavePayment p ON a.EmployeeID = p.EmployeeID AND a.Month = p.Month AND a.Year = p.Year
	WHERE a.IncomeID = 5 AND a.Remark LIKE N'System automatic paid AL unused days%' AND a.Month = @Month AND a.Year = @Year AND ISNULL(a.SalaryTerm, 0) = 0 AND ISNULL(a.Amount, 0) <> ISNULL(p.ApprovedAmount, 0) AND EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList e
			WHERE e.EmployeeID = a.EmployeeID
			)

	DELETE a
	FROM dbo.tblPR_Adjustment a
	WHERE a.IncomeID = 5 AND a.Remark LIKE N'System automatic paid AL unused days%' AND NOT EXISTS (
			SELECT 1
			FROM tblAnnualLeavePayment p
			WHERE p.EmployeeID = a.EmployeeID AND p.Month = a.Month AND p.Year = a.Year AND a.IncomeID = 5 AND a.Remark LIKE N'System automatic paid AL unused days'
			) AND a.Month = @Month AND a.Year = @Year AND ISNULL(a.SalaryTerm, 0) = 0

	INSERT INTO dbo.tblPR_Adjustment (EmployeeID, Month, Year, IncomeID, ByAmount, Amount, Remark, SalaryTerm)
	SELECT p.EmployeeID, @Month, @Year, 5, 1, p.ApprovedAmount, N'System automatic paid AL unused days', 0
	FROM dbo.tblAnnualLeavePayment p
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList e
			WHERE p.EmployeeID = e.EmployeeID
			) AND p.Month = @Month AND p.Year = @Year AND NOT EXISTS (
			SELECT 1
			FROM dbo.tblPR_Adjustment a
			WHERE a.EmployeeID = p.EmployeeID AND a.Month = p.Month AND p.Year = a.Year AND a.IncomeID = 5
			)

	--TRIPOD
	SELECT o.EmployeeID, LatestSalEntry, ROUND(a.TotalExcessOT * SalaryPerHourOT, @ROUND_OT_NS_Detail_UNIT) ExcessOTAmount
	INTO #ExcessOT
	FROM #tblSalDetail o
	LEFT JOIN #AttendanceSummary a ON o.EmployeeID = a.EmployeeID AND CAST(a.FromDate AS DATE) = CAST(o.FromDate AS DATE) AND CAST(a.ToDate AS DATE) = CAST(o.ToDate AS DATE)
	WHERE isnull(a.TotalExcessOT, 0) > 0
	GROUP BY o.EmployeeID, LatestSalEntry, a.TotalExcessOT, o.SalaryPerHourOT

	DELETE
	FROM tblPR_Adjustment
	WHERE IncomeID = 16 AND EmployeeID IN (
			SELECT EmployeeID
			FROM #ExcessOT
			) AND [Month] = @Month AND [Year] = @Year

	INSERT INTO tblPR_Adjustment (EmployeeID, Month, Year, IncomeID, ByAmount, Amount)
	SELECT EmployeeID, @Month, @Year, 16, Amount, Amount
	FROM (
		SELECT EmployeeID, SUM(ExcessOTAmount) AS Amount
		FROM #ExcessOT
		GROUP BY EmployeeID
		) ex

	IF (OBJECT_ID('SALCAL_ADJUSTMENT_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ADJUSTMENT_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
	,@CalculateRetro int =0
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ADJUSTMENT_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID, @CalculateRetro

	-------------------Employees who have Adjustment--------------------------------
	INSERT INTO #tblAdjustment (EmployeeID, IncomeID, ByAmount, SalaryPercent, AdjustmentAmount, EmpAdjustmentID, CurrencyCode, ExchangeRate) (
		SELECT p.EmployeeID, p.IncomeID, ByAmount, SalaryPercent, p.Amount * isnull(c.[ExchangeRate], 1) AS Amount, EmpAdjustmentID, p.CurrencyCode, ISNULL(c.[ExchangeRate], 1) AS ExchangeRate FROM tblPR_Adjustment p INNER JOIN tblIrregularIncome ir ON p.InComeID = ir.IncomeID AND isnull(ir.AppendToPIT, 0) = 0 INNER JOIN #tblSalDetail sal ON p.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1 LEFT JOIN #EmployeeExchangeRate c ON p.EmployeeID = c.EmployeeID AND p.CurrencyCode = c.CurrencyCode WHERE p.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			) AND [Month] = @Month AND [Year] = @Year
		)

	UPDATE #tblAdjustment
	SET CurrencyCode = 'VND'
	WHERE ISNULL(CurrencyCode, '-1') = '-1'

	INSERT INTO tblProcessErrorMessage (ErrorType, ErrorDetail, LoginID)
	SELECT 'Exchange Rate not seted!', 'Exchange rate for "' + a.CurrencyCode + '" is not seted!, Please complete Function "Currency Setting" first!', @loginID - 1000
	FROM #tblAdjustment a
	INNER JOIN #tblSalDetail sal ON a.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1
	LEFT JOIN #EmployeeExchangeRate c ON a.CurrencyCode = c.CurrencyCode AND c.EmployeeID = a.EmployeeID
	WHERE isnull(a.CurrencyCode, 'vnd') <> 'vnd' AND c.[ExchangeRate] IS NULL

	IF @@ROWCOUNT > 0
	BEGIN
		-- nếu có lỗi thì
		RETURN;
	END

	------------Determine whether Adjustment is calculated base on Salary percent or not----------
	UPDATE #tblAdjustment
	SET ByAmount = 1 -- ISNULL(ByAmount,1)
		, SalaryPercent = 0 -- ISNULL(SalaryPercent,0)

	UPDATE #tblAdjustment
	SET BasicSalary = sd.BasicSalary
	FROM #tblAdjustment adj, #tblSalDetail sd
	WHERE adj.EmployeeID = sd.EmployeeID AND adj.ByAmount = 0 --tinh theo salary percent
		AND sd.LatestSalEntry = 1

	-------------------Calculate if Adjustment is based on Salary percent---------------
	--UPDATE #tblAdjustment
	--SET AdjustmentAmount = BasicSalary * SalaryPercent/100.0
	--WHERE ByAmount = 0
	UPDATE #tblAdjustment
	SET AdjustmentAmount = ISNULL(AdjustmentAmount, 0)

	SELECT EmployeeID, als.AllowanceID, ad.IncomeID, AdjustmentAmount, EmpAdjustmentID, ir.TaxBaseOnAllowanceCode, ad.Raw_AdjustmentAmount, ad.CurrencyCode AS Raw_CurrencyCode, ad.ExchangeRate AS Raw_ExchangeRate
	INTO #tblAdjustmentForAllowance
	FROM #tblAdjustment ad
	INNER JOIN tblIrregularIncome ir ON ad.IncomeID = ir.IncomeID AND len(ir.TaxBaseOnAllowanceCode) > 0 AND ForAllowance = 1
	INNER JOIN tblAllowanceSetting als ON ir.TaxBaseOnAllowanceCode = als.AllowanceCode

	INSERT INTO #tblSal_Adjustment_ForAllowance_Des (EmployeeID, Month, Year, PeriodID, AllowanceID, IncomeID, AdjustmentAmount, Raw_AdjustmentAmount, Raw_CurrencyCode, Raw_ExchangeRate)
	SELECT EmployeeID, @Month, @Year, @PeriodID, AllowanceID, IncomeID, AdjustmentAmount, Raw_AdjustmentAmount, Raw_CurrencyCode, Raw_ExchangeRate
	FROM #tblAdjustmentForAllowance

	DELETE #tblAdjustment
	FROM #tblAdjustment a
	INNER JOIN #tblAdjustmentForAllowance aa ON a.EmployeeId = aa.EmployeeId AND a.IncomeID = aa.IncomeID

	-----------------Insert into the table #tblSal_Adjustment_des-------------------
	SELECT EmployeeID, IncomeID, SUM(AdjustmentAmount) AdjustmentAmount, sum(Raw_AdjustmentAmount) AS Raw_AdjustmentAmount, CAST(0 AS FLOAT(53)) TaxableAmount, CAST(0 AS FLOAT(53)) UntaxableAmount
	INTO #AdjustmentSum
	FROM #tblAdjustment
	GROUP BY EmployeeID, IncomeID

	UPDATE a
	SET UntaxableAmount = ISNULL(i.TaxfreeMaxAmount, 0)
	FROM #AdjustmentSum a
	INNER JOIN tblIrregularIncome i ON a.IncomeID = i.IncomeID AND i.Taxable = 1

	UPDATE a
	SET UntaxableAmount = isnull(UntaxableAmount, 0) + AdjustmentAmount
	FROM #AdjustmentSum a
	INNER JOIN tblIrregularIncome i ON a.IncomeID = i.IncomeID AND isnull(i.Taxable, 0) = 0

	UPDATE #AdjustmentSum
	SET UntaxableAmount = AdjustmentAmount
	WHERE UntaxableAmount > AdjustmentAmount AND AdjustmentAmount > 0

	UPDATE #AdjustmentSum
	SET TaxableAmount = AdjustmentAmount - UntaxableAmount

	UPDATE #AdjustmentSum
	SET Raw_AdjustmentAmount = AdjustmentAmount, AdjustmentAmount = ROUND(AdjustmentAmount, @ROUND_SALARY_UNIT), UntaxableAmount = ROUND(UntaxableAmount, @ROUND_SALARY_UNIT), TaxableAmount = ROUND(TaxableAmount, @ROUND_SALARY_UNIT)

	IF (OBJECT_ID('SALCAL_ADJUSTMENT_BEFORE_INSERT') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ADJUSTMENT_BEFORE_INSERT
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ADJUSTMENT_BEFORE_INSERT @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	------------------------------Calculate OT------------------------------------
	-- giống như thằng Leave thì đoạn này cũng cần phải
	SELECT o.OTKind, o.EmployeeID, @Month Month, @Year Year, s.SalaryHistoryID, os.OvValue AS OTRate, SUM(o.ApprovedHours) AS OTHour, CAST(0 AS FLOAT(53)) OTAmount, s.SalaryPerDayOT, s.SalaryPerHourOT, s.STD_WD, s.LatestSalEntry, MAX(os.NSPercents) AS NSPercents, CAST(0 AS MONEY) AS NightShiftAmount
	INTO #tblSal_OT_Detail
	FROM #tblOTList o
	INNER JOIN #tblSalDetail s ON o.EmployeeID = s.EmployeeID AND o.OTDate BETWEEN s.FromDate AND s.ToDate
	INNER JOIN tblOvertimeSetting os ON o.OTKind = os.OTKind
	GROUP BY o.OTKind, o.EmployeeID, s.SalaryHistoryID, os.OvValue, s.SalaryPerDayOT, s.SalaryPerHourOT, s.SalaryPerHour, s.STD_WD, s.LatestSalEntry

	IF (OBJECT_ID('SALCAL_OT_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_OT_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,

	@FromDatedatetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,

	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_OT_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	IF @StopUPDATE = 0
	BEGIN
		-- add thêm phần night shift
		UPDATE #tblSal_OT_Detail
		SET OTAmount = o.OTRate * o.OTHour * o.SalaryPerHourOT / 100.0, NightShiftAmount = o.NSPercents * o.OTHour * o.SalaryPerHourOT / 100.0
		FROM #tblSal_OT_Detail o
	END

	--TRIPOD
	SELECT o.EmployeeID, o.SalaryHistoryID, LatestSalEntry, SUM(OTAmount / OTRate * 100.0) TaxableOTAmount, SUM(OTAmount - round((OTAmount / OTRate * 100.0), @ROUND_SALARY_UNIT)) NoneTaxableOTAmount -- làm vầy cộng lại mới tròn
		, ROUND(SUM(OTAmount), @ROUND_OT_NS_Detail_UNIT) TotalOTAmount, ROUND(SUM(NightShiftAmount), @ROUND_OT_NS_Detail_UNIT) NightShiftAmount
	INTO #SummaryOT
	FROM #tblSal_OT_Detail o
	LEFT JOIN #AttendanceSummary a ON o.EmployeeID = a.EmployeeID AND o.LatestSalEntry = a.PeriodID
	WHERE isnull(a.TotalExcessOT, 0) = 0
	GROUP BY o.EmployeeID, o.SalaryHistoryID, LatestSalEntry
	
	UNION
	
	SELECT o.EmployeeID, o.SalaryHistoryID, LatestSalEntry, ROUND(a.TaxableOT * SalaryPerHourOT, @ROUND_OT_NS_Detail_UNIT) TaxableOTAmount, ROUND(a.NontaxableOT * SalaryPerHourOT, @ROUND_OT_NS_Detail_UNIT) NoneTaxableOTAmount -- làm vầy cộng lại mới tròn
		, ROUND(a.TotalOT * SalaryPerHourOT, @ROUND_OT_NS_Detail_UNIT) TotalOTAmount, ROUND(SUM(NightShiftAmount), @ROUND_OT_NS_Detail_UNIT) NightShiftAmount
	FROM #tblSal_OT_Detail o
	LEFT JOIN #AttendanceSummary a ON o.EmployeeID = a.EmployeeID AND o.LatestSalEntry = a.PeriodID
	WHERE isnull(a.TotalExcessOT, 0) > 0
	GROUP BY o.EmployeeID, o.SalaryHistoryID, LatestSalEntry, a.TaxableOT, a.NontaxableOT, a.TotalOT, o.SalaryPerHourOT

	UPDATE #tblSalDetail
	SET TaxableOTTotal = round(tmp.TaxableOTAmount, @ROUND_SALARY_UNIT), NoneTaxableOTTotal = round(tmp.NoneTaxableOTAmount, @ROUND_OT_NS_Detail_UNIT), TotalOTAmount = tmp.TotalOTAmount, NightShiftAmount = tmp.NightShiftAmount
	FROM #tblSalDetail s
	INNER JOIN #SummaryOT tmp ON s.EmployeeID = tmp.EmployeeID AND s.SalaryHistoryID = tmp.SalaryHistoryID AND s.LatestSalEntry = tmp.LatestSalEntry

	UPDATE #tblSalDetail
	SET TotalOTAmount = ISNULL(TotalOTAmount, 0) + ISNULL(re.OT_Retro_Amount, 0), TaxableOTTotal = ISNULL(TaxableOTTotal, 0) + ISNULL(re.Taxed_OT_REtro, 0), NoneTaxableOTTotal = ISNULL(NoneTaxableOTTotal, 0) + ISNULL(re.Nontax_OT_Retro_Amount, 0)
	FROM #tblSalDetail sal
	INNER JOIN (
		SELECT EmployeeID, OT_Retro_Amount, Nontax_OT_Retro_Amount, ISNULL(OT_Retro_Amount, 0) - ISNULL(Nontax_OT_Retro_Amount, 0) AS Taxed_OT_REtro
		FROM #tblsal_retro_Final
		) re ON sal.EmployeeID = re.EmployeeID
	WHERE sal.LatestSalEntry = 1

	INSERT INTO #tblSal_OT_Detail_des (OverTimeID, EmployeeID, Year, Month, SalaryHistoryID, OTHour, OTAmount, OTRate, SalaryPerDay, SalaryPerHour, LatestSalEntry, PeriodID, NightShiftAmount, TaxableOTAmount, NoneTaxableOTAmount)
	SELECT OTKind, EmployeeID, Year, Month, SalaryHistoryID, OTHour, ROUND(OTAmount, @ROUND_OT_NS_Detail_UNIT) OTAmount, OTRate, SalaryPerDayOT, SalaryPerHourOT, LatestSalEntry, @PeriodID, NightShiftAmount, OTAmount / OTRate * 100.0 AS TaxableOTAmount, OTAmount - round((OTAmount / OTRate * 100.0), @ROUND_SALARY_UNIT) AS NoneTaxableOTAmount
	FROM #tblSal_OT_Detail

	IF (OBJECT_ID('SALCAL_OT_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_OT_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_OT_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	UPDATE #tblSalDetail
	SET TotalOTAmount = ROUND(TotalOTAmount, @ROUND_OT_NS_Detail_UNIT), TaxableOTTotal = ROUND(TaxableOTTotal, @ROUND_OT_NS_Detail_UNIT), NoneTaxableOTTotal = ROUND(NoneTaxableOTTotal, @ROUND_OT_NS_Detail_UNIT), NightShiftAmount = ROUND(NightShiftAmount, @ROUND_OT_NS_Detail_UNIT)

	-- OT summary--
	INSERT INTO #tblSal_OT_des (EmployeeID, Month, Year, OTAmount, TaxableOTAmount, NoneTaxableOTAmount, PeriodID, NightShiftAmount)
	SELECT EmployeeID, @Month, @Year, round(SUM(TotalOTAmount), @ROUND_OT_NS_Detail_UNIT), round(SUM(TaxableOTTotal), @ROUND_OT_NS_Detail_UNIT), round(SUM(NoneTaxableOTTotal), @ROUND_OT_NS_Detail_UNIT), @PeriodID, sum(NightShiftAmount) AS NightShiftAmount
	FROM #tblSalDetail s
	WHERE s.TaxableOTTotal + s.NoneTaxableOTTotal > 0
	GROUP BY EmployeeID

	-------------------------calculate Nightshift adjustment--------------------------------------
	DECLARE @PERCENT FLOAT

	SELECT @PERCENT = CAST([Value] AS FLOAT)
	FROM tblParameter
	WHERE Code = 'NIGHT_SHIFT_PERCENT'

	SET @PERCENT = ISNULL(@PERCENT, 30)

	SELECT NSKind, EmployeeID, HourApprove, [Date]
	INTO #tblNightShiftList
	FROM tblNightShiftList
	WHERE Approval = 1 AND DATE BETWEEN @FromDate AND @ToDate AND EmployeeID IN (
			SELECT te.EmployeeId
			FROM #tblEmployeeIDList te
			
			EXCEPT
			
			SELECT c.EmployeeId
			FROM #tblCustomAttendanceData c
			)

	DELETE #tblNightShiftList
	WHERE EmployeeID IN (
			SELECT c.EmployeeId
			FROM #tblCustomAttendanceData c
			)

	INSERT INTO #tblNightShiftList (NSKind, EmployeeID, HourApprove, [Date])
	SELECT 1 AS NSKind, EmployeeID, NS_Hour_1 AS HourApprove, @ToDateTruncate AS DATE
	FROM #tblCustomAttendanceData
	WHERE NS_Hour_1 <> 0
	
	UNION
	

	SELECT 2 AS NSKind, EmployeeID, NS_Hour_2 AS HourApprove, @ToDateTruncate AS DATE
	FROM #tblCustomAttendanceData
	WHERE NS_Hour_2 <> 0
	
	UNION
	
	SELECT 3 AS NSKind, EmployeeID, NS_Hour_3 AS HourApprove, @ToDateTruncate AS DATE
	FROM #tblCustomAttendanceData
	WHERE NS_Hour_3 <> 0
	
	UNION
	
	SELECT 4 AS NSKind, EmployeeID, NS_Hour_4 AS HourApprove, @ToDateTruncate AS DATE
	FROM #tblCustomAttendanceData
	WHERE NS_Hour_4 <> 0

	SELECT o.NSKind, o.EmployeeID, @Month Month, @Year Year, s.SalaryHistoryID, os.NSValue AS OTRate, SUM(o.HourApprove) AS OTHour, CAST(0 AS FLOAT(53)) NSAmount, s.SalaryPerDayOT, s.SalaryPerHourOT, s.LatestSalEntry
	INTO #tblSal_NS_Detail
	FROM #tblNightShiftList o
	INNER JOIN #tblSalDetail s ON o.EmployeeID = s.EmployeeID AND o.[Date] BETWEEN s.FromDate AND s.ToDate
	INNER JOIN tblNightShiftSetting os ON o.NSKind = os.NSKind
	GROUP BY o.NSKind, o.EmployeeID, s.SalaryHistoryID, os.NSValue, s.SalaryPerDayOT, s.SalaryPerHourOT, s.LatestSalEntry

	UPDATE #tblSal_NS_Detail
	SET OTRate = @PERCENT
	WHERE OTRate IS NULL

	IF (OBJECT_ID('SALCAL_NS_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_NS_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_NS_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	IF @StopUPDATE = 0
	BEGIN
		UPDATE #tblSal_NS_Detail
		SET NSAmount = ROUND(o.OTRate * o.OTHour * o.SalaryPerHourOT / 100.0, @ROUND_OT_NS_Detail_UNIT)
		FROM #tblSal_NS_Detail o
	END

	UPDATE #tblSal_NS_Detail
	SET NSAmount = ROUND(NSAmount, @ROUND_OT_NS_Detail_UNIT)

	INSERT INTO #tblSal_NS_Detail_des (EmployeeID, Month, Year, SalaryHistoryID, NSKind, NSHours, NSAmount, LatestSalEntry, PeriodID)
	SELECT EmployeeID, Month, Year, SalaryHistoryID, NSKind, SUM(OTHour) OTHour, SUM(NSAmount) NSAmount, LatestSalEntry, @PeriodID
	FROM #tblSal_NS_Detail
	GROUP BY EmployeeID, Month, Year, SalaryHistoryID, LatestSalEntry, NSKind

	UPDATE #tblSalDetail
	SET TotalNSAmt = round(tmp.TotalNSAmt, @ROUND_OT_NS_Detail_UNIT), NoneTaxableNSAmt = round(tmp.NoneTaxableNSAmt, @ROUND_OT_NS_Detail_UNIT)
	FROM #tblSalDetail s
	INNER JOIN (
		SELECT EmployeeID, SalaryHistoryID, LatestSalEntry, SUM(NSAmount) TotalNSAmt, SUM(NSAmount) NoneTaxableNSAmt
		FROM #tblSal_NS_Detail
		GROUP BY EmployeeID, SalaryHistoryID, LatestSalEntry
		) tmp ON s.EmployeeID = tmp.EmployeeID AND s.SalaryHistoryID = tmp.SalaryHistoryID AND s.LatestSalEntry = tmp.LatestSalEntry

	-- update retro amount of night shift (normal days only)
	UPDATE #tblSalDetail
	SET TotalNSAmt = ISNULL(TotalNSAmt, 0) + ISNULL(re.NightShift_RETRO, 0)
	FROM #tblSalDetail sal
	INNER JOIN #tblsal_retro_Final re ON sal.EmployeeID = re.EmployeeID
	WHERE sal.LatestSalEntry = 1

	IF (OBJECT_ID('SALCAL_NS_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_NS_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_NS_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	UPDATE #tblSal_NS_Detail
	SET NSAmount = ROUND(NSAmount, @ROUND_OT_NS_Detail_UNIT)

	-- NS summary--
	INSERT INTO #tblSal_NS_des (EmployeeID, Month, Year, NSHours, NSAmount, PeriodID)
	SELECT EmployeeID, Month, Year, SUM(OTHour) NSHours, ROUND(SUM(NSAmount), @ROUND_OT_NS_Detail_UNIT) NSAmount, @PeriodID
	FROM #tblSal_NS_Detail s
	GROUP BY EmployeeID, Month, Year

	-----------------------Calculate Allowance---------------------------
	UPDATE #tblAllowance
	SET DefaultAmount_WithoutCustomAmount = DefaultAmount

	UPDATE #tblAllowance
	SET MonthlyCustomAmount = isnull(MonthlyCustomAmount, 0) + isnull(a.AdjustmentAmount, 0), DefaultAmount = isnull(DefaultAmount, 0) + isnull(a.AdjustmentAmount, 0)
	FROM #tblAllowance al
	INNER JOIN (
		SELECT EmployeeID, TaxBaseOnAllowanceCode, Sum(AdjustmentAmount) AS AdjustmentAmount
		FROM #tblAdjustmentForAllowance a
		GROUP BY EmployeeID, TaxBaseOnAllowanceCode
		) a ON al.EmployeeID = a.EmployeeId AND al.AllowanceCode = a.TaxBaseOnAllowanceCode
	WHERE al.LatestSalEntry = 1

	UPDATE #tblAllowance
	SET STD_WD = CASE
			WHEN A.AllowanceRuleID IN (3, 7)
				THEN @FIXEDWORKINGDAY
			WHEN AllowanceRuleID IN (4, 8)
				THEN sal.STD_WD_Schedule
			ELSE sal.STD_WD
			END
	FROM #tblAllowance a
	INNER JOIN #tblSalDetail sal ON a.EmployeeID = sal.EmployeeID

	UPDATE a
	SET TotalPaidDays = sal.STD_WD - lv.lvAmount
	FROM #tblSalDetail sal
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID
	INNER JOIN #tblAllowance a ON sal.EmployeeID = a.EmployeeID
	INNER JOIN (
		SELECT EmployeeID, ISNULL(SUM(lv.LvAmount / 8.0), 0) AS lvAmount
		FROM #tblLvHistory lv
		INNER JOIN tblLeaveType lt ON lv.LeaveCode = lt.LeaveCode AND isnull(lt.PaidRate, 0) = 0 AND lv.LeaveDate BETWEEN @FromDate AND @ToDate
		GROUP BY lv.EmployeeID
		) lv ON a.EmployeeID = lv.EmployeeID
	WHERE a.AllowanceRuleID = 17 AND sc.IsSTDMinusUnpaidLeave = 1

	-- tinh theo luong co ban
	--chia cong chuan * cong thuc te
	UPDATE #tblAllowance
	SET TotalPaidDays = sal.AttDays
	FROM #tblAllowance al
	INNER JOIN #tblSal_AttendanceData_PerHistory sal ON al.EmployeeID = sal.EmployeeID AND al.SalaryHistoryID = sal.SalaryHistoryID
	WHERE al.AllowanceRuleID = 4

	--ngay cong di lam thuc te
	UPDATE #tblAllowance
	SET TotalPaidDays = ISNULL(att.AttDays, 0) + ISNULL(att.ProbationHours, 0) / 8.0
	FROM #tblAllowance a
	INNER JOIN #tblSal_AttendanceData att ON a.EmployeeID = att.EmployeeID AND AllowanceRuleID IN (2, 10, 19)

	UPDATE #tblAllowance
	SET TotalPaidDays = ISNULL(a.TotalPaidDays, 0) + ISNULL(lv.LvAmount, 0)
	FROM #tblAllowance a
	INNER JOIN (
		SELECT EmployeeID, ISNULL(SUM(lv.LvAmount / 8.0), 0) AS lvAmount
		FROM #tblLvHistory lv
		INNER JOIN tblLeaveType lt ON lv.LeaveCode = lt.LeaveCode AND lt.PaidRate > 0 AND lv.LeaveDate BETWEEN @FromDate AND @ToDate
		GROUP BY lv.EmployeeID
		) lv ON a.EmployeeID = lv.EmployeeID AND AllowanceRuleID IN (19)

	--ngay cong di lam thuc te + ngay chu nhat
	UPDATE #tblAllowance
	SET TotalPaidDays = ISNULL(a.TotalPaidDays, 0) + ISNULL(att.TotalSunDay, 0)
	FROM #tblAllowance a
	INNER JOIN (
		SELECT EmployeeID, SUM(CASE
					WHEN WorkingTime > Std_Hour_PerDays
						THEN 1
					ELSE WorkingTime / Std_Hour_PerDays
					END) AS TotalSunDay
		FROM #Tadata
		WHERE HolidayStatus > 0
		GROUP BY EmployeeID
		) att ON a.EmployeeID = att.EmployeeID AND AllowanceRuleID IN (10)

	-- rule 20 nhan voi so ngay Chu nhan di lam du cong
	UPDATE #tblAllowance
	SET TotalPaidDays = isnull(FullWorkingTimeSunDays, 0)
	FROM #tblAllowance a
	INNER JOIN (
		SELECT EmployeeID, COUNT(1) AS FullWorkingTimeSunDays
		FROM #Tadata
		WHERE WorkingTime >= Std_Hour_PerDays AND HolidayStatus = 1
		GROUP BY EmployeeID
		) att ON a.EmployeeID = att.EmployeeID AND AllowanceRuleID IN (20)

	--So ngay di lam tron cong (lam du 8h cong 1 ngay moi dc tinh 1 lan tra)
	UPDATE #tblAllowance
	SET TotalPaidDays = isnull(FullWorkingTimeDays, 0)
	FROM #tblAllowance a
	INNER JOIN (
		SELECT EmployeeID, COUNT(1) AS FullWorkingTimeDays
		FROM #Tadata
		WHERE WorkingTime >= Std_Hour_PerDays
		GROUP BY EmployeeID
		) att ON a.EmployeeID = att.EmployeeID AND AllowanceRuleID IN (18)

	IF (OBJECT_ID('SALCAL_ALLOWANCE_BEFORE_PROCESS') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_BEFORE_PROCESS
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_BEFORE_PROCESS @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	--hưởng trọn gói
	UPDATE #tblAllowance
	SET ReceiveAmount = CASE
			WHEN ISNULL(TotalPaidDays, 0) = 0
				THEN 0
			ELSE ISNULL(DefaultAmount, 0)
			END
	WHERE AllowanceRuleID = 1

	--theo ngày tổng ngày công hưởng lương
	UPDATE al
	SET ReceiveAmount = CASE
			/*
	 when isnull(sc.IsDaily,0)=1
			then DefaultAmount*TotalPaidDays -- ngày
			*/
			WHEN isnull(sc.IsFixedStd, 0) = 1
				THEN DefaultAmount * TotalPaidDays / FixedStdPerMonth
			ELSE DefaultAmount * TotalPaidDays / STD_WD
			END
	FROM #tblAllowance al
	INNER JOIN tblSalaryCalculationRule sc ON al.SalCalRuleID = sc.SalCalRuleID
	WHERE AllowanceRuleID IN (3, 4, 5, 7, 8, 17)

	UPDATE al
	SET ReceiveAmount = DefaultAmount * TotalPaidDays
	FROM #tblAllowance al
	INNER JOIN tblSalaryCalculationRule sc ON al.SalCalRuleID = sc.SalCalRuleID --and isnull(sc.IsDaily,0)=0
	WHERE AllowanceRuleID IN (2, 10, 18, 20)

	-- thâm niên
	-- select EmployeeID
	-- ,Hiredate BeginDate
	-- ,@ToDate EndDate
	-- ,1 FirstMonthAddition --mac dinh tinh luon thang vao lam
	-- ,1 LastMonthAddition --tinh ca thang ket thuc
	-- ,TerminateDate
	-- ,0 as Months
	-- into #tmpSeniority
	-- from #tblEmployeeIDList e where Hiredate < @ToDate
	-- --nhan vien nghi viec thi chi tinh den thang nghi viec thoi
	-- UPDATE #tmpSeniority SET EndDate = TerminateDate where TerminateDate is not null
	IF (OBJECT_ID('SALCAL_ALLOWANCE_SENIORIRY_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_SENIORIRY_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_SENIORIRY_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- if @StopUPDATE = 0
	-- begin
	-- 	DECLARE @SENIORITY_FOR_FIRST_MONTH int, @SENIORITY_FOR_LAST_MONTH int
	-- 	select @SENIORITY_FOR_FIRST_MONTH = [Value] from tblParameter where Code = 'SENIORITY_FOR_FIRST_MONTH'
	-- 	SET @SENIORITY_FOR_FIRST_MONTH = ISNULL(@SENIORITY_FOR_FIRST_MONTH,0)
	-- 	select @SENIORITY_FOR_LAST_MONTH = [Value] from tblParameter where Code = 'SENIORITY_FOR_LAST_MONTH'
	-- 	SET @SENIORITY_FOR_LAST_MONTH = ISNULL(@SENIORITY_FOR_LAST_MONTH,31)
	-- 	if @SENIORITY_FOR_FIRST_MONTH > 0 --VD: neu vao lam sau ngay 15 thi khong duoc tham nien thang dau
	-- 		UPDATE #tmpSeniority SET FirstMonthAddition = 0 where day(BeginDate) > @SENIORITY_FOR_FIRST_MONTH
	-- 	if @SENIORITY_FOR_LAST_MONTH <= 0 --nhap 0 thi tinh den cuoi thang truoc
	-- 		UPDATE #tmpSeniority SET LastMonthAddition = 0 where TerminateDate is not null
	-- 	else if @SENIORITY_FOR_LAST_MONTH < 31 --nhap ngay trong thang, gia su nhap 15 thi nghi viec truoc ngay 15 thi khong duoc, tu ngay 16 tro di thi duoc
	-- 		UPDATE #tmpSeniority SET LastMonthAddition = 0 where day(TerminateDate) < @SENIORITY_FOR_LAST_MONTH
	-- 	else if @SENIORITY_FOR_LAST_MONTH >= 31 --nhap 31 thi nghi viec ngay 1 thi khong duoc, vi LastWorkingDay la ngay cuoi cung cua thang truoc, tu ngay 2 duoc
	-- 		UPDATE #tmpSeniority SET LastMonthAddition = 0 where day(TerminateDate) = 1
	-- 	--tru 2 la tru thang dau tien va thang cuoi cung
	-- 	--UPDATE #tmpSeniority SET Months = DATEDIFF(month,BeginDate,EndDate) - 2 + FirstMonthAddition + LastMonthAddition
	-- end
	-- CREATE TABLE #tblSeniorityAllowance(EmployeeID varchar(20),AllowanceAmount float(53))
	-- insert into #tblSeniorityAllowance(EmployeeID,AllowanceAmount)
	-- select EmployeeID,c.AllowanceAmt from #tmpSeniority a cross apply (
	-- 	select Min(FromMonth) FromMonth
	-- 		from tblSeniorityAllwanceSetting b where a.Months between b.FromMonth and b.ToMonth
	-- ) b
	-- inner join tblSeniorityAllwanceSetting c on b.FromMonth = c.FromMonth
	-- UPDATE a set ReceiveAmount = s.AllowanceAmount
	-- from #tblAllowance a
	-- inner join #tblSeniorityAllowance s on a.EmployeeID = s.EmployeeID
	-- where a.AllowanceRuleID in (13)
	--cap nhat phu cap tham nien vao bang history
	SET @Query = ''

	SELECT @Query += '
update sal set [' + AllowanceCode + '] = ReceiveAmount
 from tblSalaryHistory sal
inner join #tblAllowance al on sal.SalaryHistoryID = al.SalaryHistoryID
where al.AllowanceCode= ''' + AllowanceCode + '''
'
	FROM (
		SELECT DISTINCT AllowanceCode
		FROM #tblAllowance al
		WHERE al.AllowanceRuleID = 13
		) al

	EXECUTE sp_executesql @Query

	IF (OBJECT_ID('SALCAL_ALLOWANCE_SENIORIRY_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_SENIORIRY_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_SENIORIRY_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- chuyên cần, chuyen can chuyencan
	-- RuleID = 9
	IF (OBJECT_ID('SALCAL_ALLOWANCE_DILIGENTALL_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_DILIGENTALL_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_DILIGENTALL_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- sp_DiligentDeductItems_DataSetting -- danh sach cac muc tru chuyen can
	-- tblDiligentAllowanceRule -- cac thiet lap tinh chuyen can
	SELECT s.Code, s.Qty, s.DeductPercentage, cast(0 AS FLOAT) AS ActualQty, cast(0 AS FLOAT(53)) DeductAmount, a.*
	INTO #tblDiligentAll
	FROM #tblAllowance a, tblDiligentAllowanceRule s
	WHERE a.AllowanceRuleID = 9
	ORDER BY a.EmployeeID, s.Code, s.PaidPercentage DESC

	-- Đi trễ về - sớm bao nhiêu phút
	SELECT EmployeeID, IODate, IOKind, IOMinutes, IOMinutesDeduct, ApprovedDeduct
	INTO #tblIOData
	FROM tblInLateOutEarly il
	WHERE ApprovedDeduct = 1 AND ApprovedDeduct > 0 AND IODate BETWEEN @FromDate AND @ToDate AND EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList te
			WHERE il.EmployeeID = te.EmployeeID AND il.IODate BETWEEN te.HireDate AND te.LastWorkingDate
			)

	UPDATE #tblDiligentAll
	SET ActualQty = tmp.IOMinute
	FROM #tblDiligentAll d
	INNER JOIN (
		SELECT EmployeeID, SUM(IOMinutesDeduct) AS IOMinute
		FROM #tblIOData
		GROUP BY EmployeeID
		) tmp ON d.EmployeeID = tmp.EmployeeID
	WHERE d.Code = 'IOMinute'

	-- so lan di tre
	-- Đi trễ về - sớm bao nhiêu lần trong tháng
	UPDATE #tblDiligentAll
	SET ActualQty = tmp.IOMinute
	FROM #tblDiligentAll d
	INNER JOIN (
		SELECT EmployeeID, count(1) AS IOMinute
		FROM #tblIOData
		GROUP BY EmployeeID
		) tmp ON d.EmployeeID = tmp.EmployeeID
	WHERE d.Code = 'IOCount'

	--Không xuống ca - không tăng ca theo lịch: NotOT
	UPDATE #tblDiligentAll
	SET ActualQty = tmp.NotOTCount
	FROM #tblDiligentAll D
	INNER JOIN (
		SELECT EmployeeID, Count(1) NotOTCount
		FROM tblNotOtList ot
		WHERE OTDate BETWEEN @FromDate AND @ToDate AND Approved = 1 AND EXISTS (
				SELECT 1
				FROM #tblEmployeeIDList te
				WHERE ot.EmployeeID = te.EmployeeID AND ot.OTDate BETWEEN te.HireDate AND te.LastWorkingDate
				)
		GROUP BY EmployeeID
		) TMP ON d.EmployeeID = tmp.EmployeeID
	WHERE d.Code = 'NotOT'

	-- Số lần quyên bấm thẻ, vân tay: FWCCount
	UPDATE #tblDiligentAll
	SET ActualQty = tmp.FWCCount
	FROM #tblDiligentAll D
	INNER JOIN (
		SELECT EmployeeID, SUM(CASE
					WHEN LeaveStatus = 3
						THEN 2
					ELSE 1
					END) FWCCount
		FROM #tblLvHistory
		WHERE LeaveCode = 'FWC'
		GROUP BY EmployeeID
		) TMP ON d.EmployeeID = tmp.EmployeeID
	WHERE d.Code = 'FWCCount'

	-- Tổng số ngày công hưởng lương
	UPDATE #tblDiligentAll
	SET ActualQty = STD_WD - TotalPaidDays
	WHERE Code IN ('PD', 'PDAWD')

	-- các loại nghỉ bị trừ chuyên cần
	UPDATE #tblDiligentAll
	SET ActualQty = lv.lvCount
	FROM #tblDiligentAll D
	CROSS APPLY (
		SELECT SUM(lv.LvAmount) / 8.0 lvCount
		FROM #tblLvHistory lv
		WHERE D.EmployeeID = lv.EmployeeID AND D.Code = lv.LeaveCode
		) lv
	WHERE lv.lvCount > 0 AND d.Code NOT IN ('PD', 'PDAWD', 'IOMinute', 'IOCount', 'NotOT', 'FWCCount', 'FWC')

	UPDATE #tblDiligentAll
	SET ActualQty = tmp.lvCount
	FROM #tblDiligentAll D
	INNER JOIN (
		SELECT lv.EmployeeID, lv.lvCount
		FROM #tblDiligentAll d
		INNER JOIN (
			SELECT SUM(lv.LvAmount) / 8.0 AS lvCount, EmployeeID
			FROM #tblLvHistory lv
			WHERE isnull(lv.CutDiligent, 0) = 1
			GROUP BY lv.EmployeeID
			) lv ON d.EmployeeID = lv.EmployeeID
		) TMP ON d.EmployeeID = tmp.EmployeeID
	WHERE Code IN ('ALL_leave')

	DELETE #tblDiligentAll
	WHERE Qty > ActualQty

	DELETE d
	FROM #tblDiligentAll d
	WHERE NOT EXISTS (
			SELECT 1
			FROM (
				SELECT Code, EmployeeID, MAX(Qty) Qty
				FROM #tblDiligentAll
				WHERE Qty <= ActualQty
				GROUP BY Code, EmployeeID
				) tmp
			WHERE d.EmployeeID = tmp.EmployeeID AND d.Code = tmp.Code AND d.Qty = tmp.Qty
			)

	UPDATE #tblDiligentAll
	SET DeductAmount = DefaultAmount * DeductPercentage / 100

	-- Get the remain of diligent allowance
	-- Negative set to zero
	UPDATE d
	SET ReceiveAmount = CASE
			WHEN tmp.DefaultAmount - tmp.DeductAmount > 0
				THEN tmp.DefaultAmount - tmp.DeductAmount
			ELSE 0
			END
	FROM #tblDiligentAll d
	INNER JOIN (
		SELECT d.EmployeeID, Max(d.DefaultAmount) DefaultAmount, SUM(d.DeductAmount) DeductAmount
		FROM #tblDiligentAll d
		GROUP BY d.EmployeeID
		) tmp ON d.EmployeeID = tmp.EmployeeID

	-- store the result
	UPDATE a
	SET ReceiveAmount = isnull(d.ReceiveAmount, a.DefaultAmount)
	FROM #tblAllowance a
	LEFT JOIN #tblDiligentAll d ON a.EmployeeID = d.EmployeeID AND a.AllowanceID = d.AllowanceID
	WHERE a.AllowanceRuleID = 9

	IF (OBJECT_ID('SALCAL_ALLOWANCE_DILIGENTALL_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_DILIGENTALL_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_DILIGENTALL_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- ket thuc chuyen can
	SELECT DISTINCT AllowanceCode, AllowanceID
	INTO #CustomColname
	FROM tblAllowanceSetting
	WHERE AllowanceCode IN (
			SELECT Column_Name
			FROM INFORMATION_SCHEMA.COLUMNS
			WHERE TABLE_NAME = 'tblCustomInputImportMonthly'
			) AND Visible = 1

	SELECT *
	INTO #tblCustomInputImportMonthly
	FROM tblCustomInputImportMonthly c
	WHERE Month = @Month AND Year = @Year AND EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList te
			WHERE c.EmployeeID = te.EmployeeID
			)

	SET @Query = ''

	DECLARE @AllowanceCustomInput NVARCHAR(100) = ''
	DECLARE @AllowanceID NVARCHAR(10) = ''

	WHILE EXISTS (
			SELECT 1
			FROM #CustomColname
			)
	BEGIN
		SELECT TOP 1 @AllowanceCustomInput = AllowanceCode, @AllowanceID = AllowanceID
		FROM #CustomColname

		SET @Query = 'update #tblAllowance
		set ReceiveAmount = isnull(c.[' + @AllowanceCustomInput + '] ,0)
		from #tblAllowance al
		inner join #tblCustomInputImportMonthly c on al.EmployeeId = c.EmployeeID
		where al.AllowanceID  =' + @AllowanceID + ' and c.[' + @AllowanceCustomInput + '] is not null
		and al.LatestSalEntry = 1'

		EXEC (@Query)

		--neu co import thi xoa nhung dong luong cu di
		SET @Query = 'delete #tblAllowance
		from #tblAllowance al
		inner join #tblCustomInputImportMonthly c on al.EmployeeId = c.EmployeeID
		where al.AllowanceID  =' + @AllowanceID + ' and c.[' + @AllowanceCustomInput + '] is not null
		and al.LatestSalEntry = 0'

		EXEC (@Query)

		DELETE #CustomColname
		WHERE AllowanceCode = @AllowanceCustomInput
	END

	DROP TABLE #tblCustomInputImportMonthly

	DROP TABLE #CustomColname

	-- Lap trinh rieng theo quy tac cua khach hang
	IF (OBJECT_ID('SALCAL_ALLOWANCE_CUSTOMER_RULE') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_CUSTOMER_RULE
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_CUSTOMER_RULE @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- cộng Retro allowance vào
	CREATE TABLE #tblRetro_Allowance_detail (EmployeeId VARCHAR(20), AllowanceCode NVARCHAR(200), Amount MONEY)

	SELECT SUBSTRING(SUBSTRING(c.COLUMN_NAME, 4, 9999), 1, LEN(SUBSTRING(c.COLUMN_NAME, 4, 9999)) - 6) AS AllowanceName, c.COLUMN_NAME
	INTO #AllowanceCodeFromRetroTable
	FROM INFORMATION_SCHEMA.COLUMNS c
	WHERE c.TABLE_NAME = 'tblSal_Retro_Sumary' AND c.COLUMN_NAME IN (
			SELECT 'AL_' + AllowanceCode + '_Retro'
			FROM tblAllowanceSetting
			WHERE Visible = 1
			)

	IF (
			SELECT COUNT(1)
			FROM #AllowanceCodeFromRetroTable
			) > 0
	BEGIN
		SET @Query = ''

		SELECT @Query += ' select EmployeeID,''' + AllowanceName + ''',' + COLUMN_NAME + '
	from #tblsal_retro_Final where ' + COLUMN_NAME + ' <> 0
	union all'
		FROM #AllowanceCodeFromRetroTable

		SET @Query = SUBSTRING(@Query, 1, len(@Query) - LEN('union all'))
		SET @Query = 'insert into #tblRetro_Allowance_detail(EmployeeId,AllowanceCode,Amount)
	' + @Query

		EXEC (@Query)
	END

	UPDATE al
	SET RetroAmount = re.Amount, ReceiveAmount = ISNULL(ReceiveAmount, 0) + ISNULL(re.Amount, 0)
	FROM #tblRetro_Allowance_detail re
	INNER JOIN #tblAllowance al ON re.EmployeeId = al.EmployeeID AND re.AllowanceCode = al.AllowanceCode

	-- hết cộng retro vào
	UPDATE #tblAllowance
	SET UntaxableAmount = TaxfreeMaxAmount
	FROM #tblAllowance a

	--inner join tblAllowanceSetting al on a.AllowanceID = al.AllowanceID
	SELECT al.EmployeeID, al.AllowanceID, SUM(al.ReceiveAmount) sum_ReceiveAmount, MAX(al.TaxFreeMaxAmount) max_TaxFreeMaxAmount
	INTO #TwoAllowanceFreeTax
	FROM #tblAllowance al
	WHERE al.isTaxable = 1 AND al.TaxfreeMaxAmount > 0 AND al.ReceiveAmount > 0
	GROUP BY al.EmployeeID, al.AllowanceID
	HAVING COUNT(1) > 1 AND SUM(al.ReceiveAmount) > max(al.TaxFreeMaxAmount)

	SELECT ROW_NUMBER() OVER (
			PARTITION BY al.EmployeeID, al.AllowanceID ORDER BY al.LatestSalEntry
			) ORD, al.EmployeeID, al.AllowanceID, al.LatestSalEntry, al.ReceiveAmount, tw.sum_ReceiveAmount, tw.max_TaxFreeMaxAmount, CAST(NULL AS MONEY) UntaxableAmount_Accummulate
	INTO #AccummulateUntaxableAmount
	FROM #tblAllowance al
	INNER JOIN #TwoAllowanceFreeTax tw ON al.EmployeeID = tw.EmployeeID AND al.AllowanceID = tw.AllowanceID

	UPDATE #AccummulateUntaxableAmount
	SET UntaxableAmount_Accummulate = CASE
			WHEN ReceiveAmount > max_TaxFreeMaxAmount
				THEN max_TaxFreeMaxAmount
			ELSE ReceiveAmount
			END
	WHERE ORD = 1

	UPDATE a2
	SET max_TaxFreeMaxAmount = a2.max_TaxFreeMaxAmount - a1.UntaxableAmount_Accummulate
	FROM #AccummulateUntaxableAmount a1
	INNER JOIN #AccummulateUntaxableAmount a2 ON a1.EmployeeID = a2.EmployeeID AND a1.AllowanceID = a2.AllowanceID
	WHERE a1.ORD = 1 AND a2.ORD = 2

	UPDATE #AccummulateUntaxableAmount
	SET UntaxableAmount_Accummulate = CASE
			WHEN ReceiveAmount > max_TaxFreeMaxAmount
				THEN max_TaxFreeMaxAmount
			ELSE ReceiveAmount
			END
	WHERE ORD = 2

	UPDATE #tblAllowance
	SET UntaxableAmount = ac.UntaxableAmount_Accummulate
	FROM #tblAllowance al
	INNER JOIN #AccummulateUntaxableAmount ac ON al.EmployeeID = ac.EmployeeID AND al.AllowanceID = ac.AllowanceID
	WHERE al.LatestSalEntry = ac.LatestSalEntry

	UPDATE #tblAllowance
	SET UntaxableAmount = 0
	WHERE UntaxableAmount IS NULL

	UPDATE #tblAllowance
	SET UntaxableAmount = round(CASE
				WHEN ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0) > UntaxableAmount
					THEN UntaxableAmount
				ELSE ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0)
				END, @ROUND_SALARY_UNIT), RetroAmountNonTax = round(CASE
				WHEN ISNULL(ReceiveAmount, 0) > UntaxableAmount
					THEN UntaxableAmount
				ELSE ISNULL(ReceiveAmount, 0)
				END, @ROUND_SALARY_UNIT) - round(CASE
				WHEN ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0) > UntaxableAmount
					THEN UntaxableAmount
				ELSE ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0)
				END, @ROUND_SALARY_UNIT)

	-- phụ cấp trang phục, đồng phục, 1 năm được miễn thuế 5tr, nếu vượt quá thì không được miễn thuế nữa
	UPDATE a
	SET UntaxableAmount = round(CASE
				WHEN ISNULL(a.ReceiveAmount, 0) > t.TaxfreeMaxAmount
					THEN t.TaxfreeMaxAmount
				ELSE a.ReceiveAmount
				END, @ROUND_SALARY_UNIT)
	FROM #tblAllowance a
	INNER JOIN (
		SELECT tmp.EmployeeID, tmp.AllowanceID, sa.TaxfreeMaxAmount - ISNULL(tmp.UntaxableAmount, 0) TaxfreeMaxAmount
		FROM tblAllowanceSetting sa
		INNER JOIN (
			SELECT a.EmployeeID, SUM(a.UntaxableAmount) UntaxableAmount, sa.AllowanceID
			FROM #tblSal_Allowance_Detail_des a
			INNER JOIN tblAllowanceSetting sa ON a.AllowanceID = sa.AllowanceID AND isnull(sa.isUniformAllowance, 0) = 1
			INNER JOIN #tblAllowance al ON a.EmployeeID = al.EmployeeID AND al.AllowanceID = a.AllowanceID
			WHERE (a.Month + a.Year * 12) BETWEEN @Year * 12 + 1 AND @Year * 12 + 12 AND a.Month + a.Year <> @month + @year
			GROUP BY a.EmployeeID, a.AllowanceID, sa.AllowanceID
			) tmp ON sa.AllowanceID = tmp.AllowanceID
		) t ON a.EmployeeID = t.EmployeeID AND a.AllowanceID = t.AllowanceID

	-- phụ cấp nhà ở
	DECLARE @HouseAllPercent REAL

	SET @HouseAllPercent = (
			SELECT cast(Value AS FLOAT(53))
			FROM tblParameter
			WHERE code = 'HOUSE_ALL_PER_COMP'
			)
	SET @HouseAllPercent = isnull(@HouseAllPercent, 15)

	--tổng số tiền tinh thuế kovượt quá 15% tổng thu nhập chịu thuế (không bao gồm phụ cấp nhà ở)
	-- tổng hợp thu nhập chịu thuế chua gồm tiền nhà
	UPDATE #tblAllowance
	SET ReceiveAmount = ROUND(ReceiveAmount, @ROUND_SALARY_UNIT)

	UPDATE #tblSalDetail
	SET ActualMonthlyBasic = ROUND(ActualMonthlyBasic, @ROUND_SALARY_UNIT)

	UPDATE #tblSalDetail
	SET ActualMonthlyBasic = ISNULL(ActualMonthlyBasic, 0) + ISNULL(sr.ActualMonthlyBasic_Retro_Amount, 0)
	FROM #tblSalDetail sal
	INNER JOIN #tblsal_retro_Final sr ON sal.EmployeeID = sr.EmployeeID --and sr.Month= @Month and sr.Year= @Year
	WHERE sal.LatestSalEntry = 1

	UPDATE #tblAllowance
	SET TaxableAmount = ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0) - ISNULL(UntaxableAmount, 0)

	UPDATE #tblAllowance
	SET TaxableAmount = 0, UntaxableAmount = 0
	WHERE isnull(ReceiveAmount, 0) = 0

	CREATE TABLE #tblAdjustmentNeedConfig (EmployeeId VARCHAR(20), IncomeID INT)

	INSERT INTO #tblAdjustmentNeedConfig (EmployeeId, IncomeID)
	SELECT EmployeeId, IncomeID
	FROM (
		UPDATE #AdjustmentSum
		SET UntaxableAmount = CASE
				WHEN a.AdjustmentAmount > al.TaxFreeMaxAmount - al.UntaxableAmount
					THEN al.TaxFreeMaxAmount - al.UntaxableAmount
				ELSE a.AdjustmentAmount
				END
		OUTPUT inserted.EmployeeID, inserted.IncomeID
		FROM #AdjustmentSum a
		INNER JOIN tblIrregularIncome irr ON a.IncomeID = irr.IncomeID
		INNER JOIN tblAllowanceSetting als ON irr.TaxBaseOnAllowanceCode = als.AllowanceCode
		INNER JOIN #tblAllowance al ON als.AllowanceID = al.AllowanceID AND a.EmployeeID = al.EmployeeID
		WHERE al.TaxFreeMaxAmount > al.UntaxableAmount
		) ud

	IF @@ROWCOUNT > 0
	BEGIN
		UPDATE #AdjustmentSum
		SET TaxableAmount = AdjustmentAmount - ISNULL(a.UntaxableAmount, 0)
		FROM #AdjustmentSum a
		INNER JOIN #tblAdjustmentNeedConfig n ON a.EmployeeID = n.EmployeeId AND a.IncomeID = n.IncomeID
	END

	--tringuyen
	UPDATE #AdjustmentSum
	SET TaxableAmount = 0, UntaxableAmount = 0
	WHERE isnull(AdjustmentAmount, 0) = 0

	DROP TABLE #tblAdjustmentNeedConfig

	-- người vận chuyển đoạn insert update của thằng adjustment xuống đây
	INSERT INTO #tblSal_Adjustment_des (EmployeeID, Month, Year, IncomeID, Amount, Raw_Amount, PeriodID, UntaxableAmount, TaxableAmount)
	SELECT EmployeeID, @Month, @Year, IncomeID, AdjustmentAmount, Raw_AdjustmentAmount, @PeriodID, UntaxableAmount, TaxableAmount
	FROM #AdjustmentSum

	UPDATE #tblSalDetail
	SET TaxableAdjustmentTotal = round(tmp.TaxableAmount, @ROUND_SALARY_UNIT), TaxableAdjustmentTotal_ForSalary = round(tmp.TaxableAmount_ForSalary, @ROUND_SALARY_UNIT), TaxableAdjustmentTotal_NotForSalary = round(tmp.TaxableAmount_NotForSalary, @ROUND_SALARY_UNIT), NoneTaxableAdjustmentTotal = round(tmp.UntaxableAmount, @ROUND_SALARY_UNIT), TotalAdjustmentForSalary = round(tmp.TotalAdjustmentForSalary, @ROUND_SALARY_UNIT), TotalAdjustment_WithoutForce = round(tmp.TotalAdjustment_WithoutForce, @ROUND_SALARY_UNIT)
	FROM #tblSalDetail sal, (
			SELECT a.EmployeeID, SUM(CASE
						WHEN i.IncomeKind = 0
							THEN - 1 * UntaxableAmount
						ELSE UntaxableAmount
						END) UntaxableAmount, SUM(CASE
						WHEN i.IncomeKind = 0
							THEN - 1 * TaxableAmount
						ELSE TaxableAmount
						END) TaxableAmount, SUM(CASE
						WHEN isnull(i.ForSalary, 0) = 0
							THEN 0
						WHEN i.IncomeKind = 0
							THEN - 1 * AdjustmentAmount
						ELSE AdjustmentAmount
						END * CASE
						WHEN Taxable = 1
							THEN 1
						ELSE 0
						END) TaxableAmount_ForSalary, SUM(CASE
						WHEN isnull(i.ForSalary, 0) = 1
							THEN 0
						WHEN i.IncomeKind = 0
							THEN - 1 * TaxableAmount
						ELSE TaxableAmount
						END) TaxableAmount_NotForSalary, SUM(CASE
						WHEN ISNULL(i.ForSalary, 0) = 0
							THEN 0
						ELSE CASE
								WHEN i.IncomeKind = 0
									THEN - 1
								ELSE 1
								END * AdjustmentAmount
						END) TotalAdjustmentForSalary, SUM(CASE
						WHEN ISNULL(ForceNonTax, 0) = 0
							THEN CASE
									WHEN i.IncomeKind = 0
										THEN - 1
									ELSE 1
									END * AdjustmentAmount
						ELSE 0
						END) TotalAdjustment_WithoutForce, sum(CASE
						WHEN i.incomeKind = 1
							THEN 1
						ELSE 0
						END * a.AdjustmentAmount) AS TotalDeductFromTotalEarnCauseOfNegativeAmount
			FROM #AdjustmentSum a
			INNER JOIN tblIrregularIncome i ON a.IncomeID = i.IncomeID
			GROUP BY a.EmployeeID
			) tmp
	WHERE sal.EmployeeID = tmp.EmployeeID AND sal.LatestSalEntry = 1

	--OtherDeductionAfterPIT
	UPDATE #tblSalDetail
	SET OtherDeductionAfterPIT = tmp.Amount
	FROM #tblSalDetail s
	INNER JOIN (
		SELECT a.EmployeeID, sum(a.AdjustmentAmount) Amount
		FROM #AdjustmentSum a
		INNER JOIN tblIrregularIncome ir ON a.IncomeID = ir.IncomeID AND ir.IncomeKind = 0 AND isnull(ir.Taxable, 0) = 0
		GROUP BY a.EmployeeID
		) tmp ON s.EmployeeID = tmp.EmployeeID

	IF (OBJECT_ID('SALCAL_ADJUSTMENT_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ADJUSTMENT_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ADJUSTMENT_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- hết adjustment
	UPDATE #tblSalDetail
	SET TaxableIncomeBeforeDeduction = ISNULL(ActualMonthlyBasic, 0) + ROUND(ISNULL(TotalNSAmt, 0), 0) - ROUND(isnull(NoneTaxableNSAmt, 0), 0) + ROUND(ISNULL(TaxableAdjustmentTotal, 0), 0) + ROUND(isnull(TaxableOTTotal, 0), 0) - ROUND(ISNULL(NoneTaxableOTTotal, 0), 0)


	--tripod
	UPDATE s
	SET TaxableIncomeBeforeDeduction = isnull(s.TaxableIncomeBeforeDeduction, 0) + ISNULL(tmp.TaxableAmount, 0)
	FROM #tblSalDetail s
	INNER JOIN (
		SELECT a.EmployeeID, SUM(ISNULL(a.TaxableAmount, a.ReceiveAmount)) TaxableAmount
		FROM #tblAllowance a
		INNER JOIN tblAllowanceSetting sa ON a.AllowanceID = sa.AllowanceID AND isnull(sa.IsHouseAllowance, 0) = 0
		GROUP BY EmployeeID
		) tmp ON s.EmployeeID = tmp.EmployeeID

	-- cộng với lương từ nước ngoài để gross up
	-- delete first
	SELECT sa.*
	INTO #tblSalaryAbroad
	FROM #tblEmployeeIDList e
	CROSS APPLY (
		SELECT MAX(Month + Year * 12) MY
		FROM tblSalaryAbroad sa1
		WHERE e.EmployeeID = sa1.EmployeeID AND sa1.Month + sa1.Year * 12 <= @month + @year * 12 AND (sa1.ToMonth IS NULL OR sa1.ToYear IS NULL OR sa1.ToMonth + sa1.ToYear * 12 >= @month + @year * 12)
		) ca
	INNER JOIN tblSalaryAbroad sa ON sa.EmployeeID = e.EmployeeID AND sa.Month + sa.Year * 12 = ca.MY

	INSERT INTO #tblSal_Abroad_ForTaxPurpose_Des (EmployeeID, Month, Year, NetAmountVND, Raw_NetAmount, GrossAmountVND, Raw_GrossAmount, CurrencyCode, ExchangeRate, NationID, PeriodID, VND_Amount, Raw_Amount_AfterDeductVND)
	SELECT sa.EmployeeID, @month AS month, @Year AS year, round(isnull(NetAmount, 0) * c.[ExchangeRate], @ROUND_SALARY_UNIT) AS NetAmountVND, NetAmount AS Raw_NetAmount, round(isnull(GrossAmount, 0) * c.[ExchangeRate], @ROUND_SALARY_UNIT) AS GrossAmountVND, GrossAmount AS Raw_Amount, sa.CurrencyCode, c.[ExchangeRate] AS ExchangeRate, sa.NationID, @PeriodID, sa.VND_Amount, NetAmount - (sa.VND_Amount / c.[ExchangeRate]) AS Raw_Amount_AfterDeductVND
	FROM #tblSalaryAbroad sa
	INNER JOIN #tblSalDetail sal ON sa.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1
	LEFT JOIN #EmployeeExchangeRate c ON sa.CurrencyCode = c.CurrencyCode AND c.EmployeeID = sa.EmployeeID

	-- lấy danh sách allowance Gross ra trừ đi trước khi grossup
	-- có thể net hóa nó nhưng mà khó lém
	SELECT EmployeeID, sum(TaxableAmount) AS TotalGrossAllowanceAmount_Taxable
	INTO #grossAllowanceAmount
	FROM #tblAllowance a
	INNER JOIN tblAllowanceSetting al ON a.AllowanceCode = al.AllowanceCode
	WHERE al.IsTaxable = 1 AND al.IsGrossAllowance_InNetSal = 1
	GROUP BY EmployeeID

	IF @@ROWCOUNT > 0 -- nếu có gross allowance thì phải trừ đi rồi mới gross up
	BEGIN
		UPDATE #tblSalDetail
		SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction - isnull(gross.TotalGrossAllowanceAmount_Taxable, 0)
		FROM #tblSalDetail sal
		INNER JOIN #grossAllowanceAmount gross ON sal.EmployeeID = gross.EmployeeID AND sal.LatestSalEntry = 1
		WHERE sal.IsNet = 1
	END

	-- cộng cục này với phần Net từ nước ngoài trả
	UPDATE #tblSalDetail
	SET TaxableIncomeBeforeDeduction += isnull(ca.NetAmountVND, 0) -- cộng phần net để grossup trước
	FROM #tblSalDetail sal
	CROSS APPLY (
		SELECT sum(NetAmountVND) AS NetAmountVND
		FROM #tblSal_Abroad_ForTaxPurpose_des sa
		WHERE sa.Month = @Month AND sa.Year = @Year AND sa.EmployeeID = sal.EmployeeID
		) ca
	WHERE sal.LatestSalEntry = 1 AND sal.IsNet = 1

	-- custom lấy cái TotalNetIncome ra nào
	UPDATE #tblSalDetail
	SET TotalNetIncome_Custom = TaxableIncomeBeforeDeduction

	--gross it up
	SELECT (IncomeFrom - (IncomeFrom - 1)) * TaxPercent + ProgressiveAmount AS MinTax -- số thuế tối thiểu phải đóng
		, (IncomeTo - (IncomeFrom - 1)) * TaxPercent + ProgressiveAmount AS MaxTax -- số thuế tối đa phải đóng
		, IncomeFrom - 1 --+9000000
		- ((IncomeFrom - (IncomeFrom - 1)) * TaxPercent + ProgressiveAmount) AS MinNet -- số tiền net tối thiểu (chưa tính giảm trừ trong này nha)
		, IncomeTo - 1 --+9000000
		- ((IncomeTo - (IncomeFrom - 1)) * TaxPercent + ProgressiveAmount) AS MaxNet -- số tiền net tối đa (chưa tính giảm trừ trong này nha)
		, *
	INTO #TaxForGrossup
	FROM tblTax tt
	WHERE tt.EffectDate = (
			SELECT Max(EffectDate)
			FROM tblTax tx
			WHERE tx.EffectDate <= @FromDate
			) --for gross up

	DECLARE @PesonalDeduct FLOAT(53), @RelationDeduct FLOAT(53)

	SELECT @PesonalDeduct = TAX_PERSONAL_DEDUCT, @RelationDeduct = TAX_RELATE_DEDUCT
	FROM fn_TaxDeduction_byMonthYear(@Month, @Year)

	--set @PesonalDeduct = (select cast(Value as float(53)) from tblParameter where code = 'TAX_PERSONAL_DEDUCT')
	SET @PesonalDeduct = isnull(@PesonalDeduct, 9000000)
	--set @RelationDeduct = (select cast(Value as float(53)) from tblParameter where code = 'TAX_RELATE_DEDUCT')
	SET @RelationDeduct = isnull(@RelationDeduct, 3600000)

	SELECT EmployeeID, count(EmployeeID) AS CountDeduct
	INTO #CountRelation
	FROM tblFamilyInfo
	WHERE TaxDependant = 1 AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			) AND ISNULL(EffectiveDate, @ToDate) <= @ToDate AND ISNULL(EffectiveToDate, @FromDate) >= @FromDate
	GROUP BY EmployeeID

	-- đang làm tới đây
	----update dependant truocws nhes
	--select TaxableIncomeBeforeDeduction,-- tính before tax coi có ngon chưa nào
	UPDATE sal
	SET TaxableIncomeBeforeDeduction = round((IncomeFrom - 1) + -- lấy khoản Income from
			((TaxableIncomeBeforeDeduction - (MinNet + @PesonalDeduct + (isnull(c.CountDeduct, 0) * @RelationDeduct))) / (1 - TaxPercent)) -- cộng với công thức ba lăng nhăng
			+ @PesonalDeduct + (isnull(c.CountDeduct, 0) * @RelationDeduct) -- cộng với giảm trừ bản thân, gia đình, tới đây còn thiếu cái tiền bảo hiểm tý mới cộng
			--as TaxableIncomeBeforeDeduction_GrossedUp
			--,MinNet
			--,*
			, 0, 1)
	FROM #tblSalDetail sal
	LEFT JOIN #CountRelation c ON sal.EmployeeID = c.EmployeeID
	INNER JOIN #TaxForGrossup tg ON sal.TaxableIncomeBeforeDeduction -- đổi với những người lương NET thì cái này được hiểu là tổng lương net Nhé anh em
		- @PesonalDeduct - (isnull(c.CountDeduct, 0) * @RelationDeduct) BETWEEN tg.MinNet AND tg.MaxNet
	WHERE IsNet = 1

	UPDATE #tblSalDetail
	SET GrossedUpWithoutHousing_WithoutGrossIncome_Custom = TaxableIncomeBeforeDeduction

	IF EXISTS (
			SELECT 1
			FROM #grossAllowanceAmount
			) -- nếu có gross allowance thì cộng vào lại chứ ko vỡ mồm
	BEGIN
		UPDATE #tblSalDetail
		SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + isnull(gross.TotalGrossAllowanceAmount_Taxable, 0)
		FROM #tblSalDetail sal
		INNER JOIN #grossAllowanceAmount gross ON sal.EmployeeID = gross.EmployeeID AND sal.LatestSalEntry = 1
		WHERE sal.IsNet = 1
	END

	-------------------------Calculate Employee insurance --------------------------------
	IF @PeriodID IN (0, 2)
	BEGIN
		IF @CalculateRetro = 1
			EXEC EmpInsuranceMonthly_List @Month = @Month, @Year = @Year, @LoginID = @LoginID, @CalFromSalCal = 1, @CalculateRetro = 1, @EmployeeID = @EmployeeID
		ELSE
			EXEC EmpInsuranceMonthly_List @Month = @Month, @Year = @Year, @LoginID = @LoginID, @CalFromSalCal = 1, @EmployeeID = @EmployeeID
	END

	----khong co cham cong thi khong dong bao hiem
	--select si.EmployeeTotal,TaxableIncomeBeforeDeduction,TaxableIncomeBeforeDeduction*0.15,*
	UPDATE sal
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + isnull(si.EmployeeTotal, 0), GrossedUpWithoutHousing_WithoutGrossIncome_Custom = GrossedUpWithoutHousing_WithoutGrossIncome_Custom + isnull(si.EmployeeTotal, 0)
	FROM #tblSalDetail sal
	INNER JOIN tblSal_Insurance si ON sal.EmployeeID = si.EmployeeID AND si.Month = @Month AND si.Year = @Year
	WHERE sal.LatestSalEntry = 1 AND sal.IsNet = 1 AND @PeriodID IN (0, 2)

	-- cộng thêm lương gross từ nước ngoài
	UPDATE sal
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + isnull(ca.GrossAmountVND, 0)
	FROM #tblSalDetail sal
	CROSS APPLY (
		SELECT sum(GrossAmountVND) AS GrossAmountVND
		FROM #tblSal_Abroad_ForTaxPurpose_des sa
		WHERE sa.Month = @Month AND sa.Year = @Year AND sa.EmployeeID = sal.EmployeeID
		) ca
	WHERE sal.LatestSalEntry = 1 AND sal.IsNet = 1

	UPDATE #tblSalDetail
	SET GrossedUpWithoutHousing_Custom = round(TaxableIncomeBeforeDeduction, 0)

	--tien nha mac dinh tinh thue het, neu vuot qua 15% thu nhap chiu thue thi duoc mien thue phan du tren 15% đó ~~ TriNg: la khoản fixed - nen thue f lay full thang
	UPDATE a
	SET UntaxableAmount = round(CASE
				WHEN ISNULL(a.ReceiveAmount, 0) > s.TaxableIncomeBeforeDeduction * @HouseAllPercent / 100.0
					THEN a.ReceiveAmount - s.TaxableIncomeBeforeDeduction * @HouseAllPercent / 100.0
				ELSE 0
				END, @ROUND_SALARY_UNIT)
	FROM #tblAllowance a
	INNER JOIN tblAllowanceSetting sa ON a.AllowanceID = sa.AllowanceID AND sa.IsHouseAllowance = 1 AND a.ReceiveAmount > 0
	INNER JOIN (
		SELECT EmployeeID, SUM(TaxableIncomeBeforeDeduction) TaxableIncomeBeforeDeduction
		FROM #tblSalDetail
		GROUP BY EmployeeID
		) s ON a.EmployeeID = s.EmployeeID

	IF (OBJECT_ID('SALCAL_ALLOWANCE_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,


	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20),
	@CalculateRetro bit =0
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID, @CalculateRetro

	UPDATE #tblAllowance
	SET TaxableAmount = ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0) - ISNULL(UntaxableAmount, 0)

	DELETE #tblAllowance
	WHERE isnull(DefaultAmount, 0) = 0 AND isnull(ReceiveAmount, 0) = 0

	UPDATE #tblAllowance
	SET ReceiveAmount = 0
	WHERE ReceiveAmount IS NULL

	UPDATE #tblAllowance
	SET ReceiveAmount = ROUND(ReceiveAmount, @ROUND_SALARY_UNIT), TaxableAmount = ROUND(TaxableAmount, @ROUND_SALARY_UNIT), UntaxableAmount = ROUND(UntaxableAmount, @ROUND_SALARY_UNIT), MonthlyCustomAmount = ROUND(MonthlyCustomAmount, @ROUND_SALARY_UNIT), DefaultAmount = ROUND(DefaultAmount_WithoutCustomAmount, @ROUND_SALARY_UNIT)

	--bang detail cung sum luôn, vi se co nhung thang thu viec trùng salaryhistoryid wtc
	INSERT INTO #tblSal_Allowance_Detail_des (
		EmployeeID, AllowanceID, Year, Month, SalaryHistoryID, Amount, TakeHome, TaxableAmount, UntaxableAmount, DefaultAmount --chay lenh nay neu bao loi:	ALTER TABLE #tblSal_Allowance_Detail_des ADD DefaultAmount float(53)
		, Raw_DefaultAmount, Raw_CurrencyCode, Raw_ExchangeRate, RetroAmount, RetroAmountNonTax, MonthlyCustomAmount, PeriodID, TotalPaidDays, LatestSalEntry
		)
	SELECT a.EmployeeID, a.AllowanceID, @Year, @Month, a.SalaryHistoryID, sum(a.ReceiveAmount), a.TakeHome, sum(a.TaxableAmount), sum(a.UntaxableAmount), sum(DefaultAmount), sum(a.Raw_DefaultAmount), max(a.Raw_CurrencyCode), max(a.Raw_ExchangeRate), sum(a.RetroAmount), sum(a.RetroAmountNonTax), sum(a.MonthlyCustomAmount), @PeriodID, sum(a.TotalPaidDays), MAX(cast(LatestSalEntry AS INT))
	FROM #tblAllowance a
	GROUP BY a.EmployeeID, a.AllowanceID, a.SalaryHistoryID, a.TakeHome

	INSERT INTO #tblSal_Allowance_des (EmployeeID, AllowanceID, [Year], [Month], Amount, TakeHome, UntaxableAmount, TaxableAmount, Raw_DefaultAmount, Raw_CurrencyCode, Raw_ExchangeRate, RetroAmount, RetroAmountNonTax, MonthlyCustomAmount, PeriodID) (
		SELECT al.EmployeeID, al.AllowanceID, @Year, @Month, SUM(ISNULL(al.ReceiveAmount, 0)), al.TakeHome, sum(UntaxableAmount) AS UntaxableAmount, sum(TaxableAmount) AS TaxableAmount, sum(CASE
				WHEN LatestSalEntry = 1
					THEN Raw_DefaultAmount
				ELSE 0
				END) AS Raw_DefaultAmount, max(Raw_CurrencyCode) AS Raw_CurrencyCode, max(Raw_ExchangeRate) AS Raw_ExchangeRate, sum(RetroAmount) AS RetroAmount, SUM(RetroAmountNonTax) AS RetroAmountNonTax, SUM(MonthlyCustomAmount) AS MonthlyCustomAmount, @PeriodID FROM #tblAllowance al GROUP BY al.EmployeeID, al.AllowanceID, al.TakeHome
		)

	-- taxable allowance
	UPDATE #tblSalDetail
	SET TaxableAllowanceTotal = round(tmp.TaxableAmount, @ROUND_SALARY_UNIT)
	FROM #tblSalDetail sal, (
			SELECT SUM(ISNULL(al.TaxableAmount, 0) + ISNULL(al.RetroAmount, 0) - ISNULL(al.RetroAmountNonTax, 0)) TaxableAmount, al.EmployeeID
			FROM #tblAllowance al
			GROUP BY al.EmployeeID
			) tmp
	WHERE sal.EmployeeID = tmp.EmployeeID AND sal.LatestSalEntry = 1

	-- Nonetaxable allowance
	UPDATE #tblSalDetail
	SET NoneTaxableAllowanceTotal = round(tmp.UntaxableAmount, @ROUND_SALARY_UNIT)
	FROM #tblSalDetail sal, (
			SELECT SUM(ISNULL(al.UntaxableAmount, 0) + ISNULL(al.RetroAmountNonTax, 0)) UntaxableAmount, al.EmployeeID
			FROM #tblAllowance al
			GROUP BY al.EmployeeID
			) tmp
	WHERE sal.EmployeeID = tmp.EmployeeID AND sal.LatestSalEntry = 1

	UPDATE #tblSalDetail
	SET TotalAllowanceForSalary = tmp.ReceiveAmount
	FROM #tblSalDetail sal, (
			SELECT SUM(ISNULL(al.ReceiveAmount, 0)) ReceiveAmount, al.EmployeeID
			FROM #tblAllowance al
			INNER JOIN tblAllowanceSetting a ON al.AllowanceID = a.AllowanceID
			GROUP BY al.EmployeeID
			) tmp
	WHERE sal.EmployeeID = tmp.EmployeeID AND sal.LatestSalEntry = 1

	--select TotalAllowanceForSalary,* from #tblSalDetail
	-------------------------Calculate Employee insurance --------------------------------
	EXEC EmpInsuranceMonthly_List @Month = @Month, @Year = @Year, @LoginID = @LoginID, @CalFromSalCal = 1

	--bao hiem
	UPDATE #tblSalDetail
	SET InsAmtComp = CompanyTotal --ISNULL(CompanySI,0) + ISNULL(CompanyHI,0) + ISNULL(CompanyUI,0)
		, InsAmt = EmployeeTotal --ISNULL(EmployeeSI,0) + ISNULL(EmployeeHI,0) + ISNULL(EmployeeUI,0)
	FROM #tblSalDetail sd
	INNER JOIN tblSal_Insurance ins ON sd.EmployeeID = ins.EmployeeID
		--AND sd.SalaryHistoryID = ins.SalaryHistoryID
		AND ins.[Month] = @Month AND ins.[Year] = @Year AND sd.LatestSalEntry = 1 AND @PeriodID IN (0, 2) AND sd.isNet = 0

	UPDATE #tblSalDetail
	SET InsAmtComp = CompanyTotal --ISNULL(CompanySI,0) + ISNULL(CompanyHI,0) + ISNULL(CompanyUI,0)
		, InsAmt = EmployeeTotal - ISNULL(ins.EmployeeSI, 0) --ISNULL(EmployeeSI,0) + ISNULL(EmployeeHI,0) + ISNULL(EmployeeUI,0)
	FROM #tblSalDetail sd
	INNER JOIN tblSal_Insurance ins ON sd.EmployeeID = ins.EmployeeID
		--AND sd.SalaryHistoryID = ins.SalaryHistoryID
		AND ins.[Month] = @Month AND ins.[Year] = @Year AND sd.LatestSalEntry = 1 AND @PeriodID IN (0, 2) AND sd.isNet = 1

	-------------------------Calculate Trade Union fee--------------------------------
	DECLARE @UNION_FEE_METHOD TINYINT

	-- 1: Dựa vào phần trăm lương,
	-- 2: Số tiền đóng cố định,
	-- 3: nhân viên đóng số tiền cố định, công ty đóng theo % lương cơ bản,
	-- 4: đóng theo phần trăm lương tối thiểu,
	-- 5: đóng theo phần trăm lương cơ bản, nhân viên đóng tối đa 10% lương tối thiểu
	SET @UNION_FEE_METHOD = (
			SELECT CAST([Value] AS FLOAT)
			FROM tblParameter
			WHERE Code = 'UNION_FEE_METHOD'
			)
	SET @UNION_FEE_METHOD = isnull(@UNION_FEE_METHOD, 1)

	-- danh sach tham gia cong doan
	--co phat sinh bao hiem xa hoi trong thang nay thi se dong tien cong doan
	SELECT EmployeeID
	INTO #Insurance
	FROM tblSal_Insurance
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			) AND CompanyTotal > 0

	--VU: tripod: tự động tham gia công đoàn
	INSERT INTO tblJoinedUnionEmployeeMonthly (EmployeeID, Month, Year, EmpPay)
	SELECT EmployeeID, @Month, @Year, 1
	FROM #tblEmployeeIDList t
	WHERE NOT EXISTS (
			SELECT *
			FROM tblJoinedUnionEmployeeMonthly m
			WHERE m.EmployeeID = t.EmployeeID AND m.Month = @Month AND m.Year = @Year
			)

	DECLARE @UnionPercentEmp FLOAT, @UnionPercentComp FLOAT, @UnionPackageEmp FLOAT, @UnionPackageComp FLOAT

	CREATE TABLE #tblTradeUnion (EmployeeID VARCHAR(20), BasicSalary FLOAT(53), BaseSalaryRegional FLOAT(53), IsEmpPaid BIT, IsComPaid BIT, UnionFeeEmp FLOAT(53), UnionFeeComp FLOAT(53), Comp_ByPercent BIT, Emp_ByPercent BIT, Is_CeilSalary BIT, UNION_PERCENT_COMP FLOAT, UNION_PERCENT_EMP FLOAT, UNION_PACKAGE_COMP FLOAT, UNION_PACKAGE_EMP FLOAT, UNION_PACKAGE_EMP_MAX FLOAT, UNION_PACKAGE_COMP_MAX FLOAT, MaximumByPercentsOfBaseSalaryRegional FLOAT)

	INSERT INTO #tblTradeUnion (EmployeeID, IsEmpPaid, IsComPaid, Comp_ByPercent, Emp_ByPercent, Is_CeilSalary, UNION_PERCENT_COMP, UNION_PERCENT_EMP, UNION_PACKAGE_COMP, UNION_PACKAGE_EMP, UNION_PACKAGE_EMP_MAX, UNION_PACKAGE_COMP_MAX, MaximumByPercentsOfBaseSalaryRegional)
	SELECT u.EmployeeID, 0, 1, Comp_ByPercent, Emp_ByPercent, Is_CeilSalary, UNION_PERCENT_COMP, UNION_PERCENT_EMP, UNION_PACKAGE_COMP, UNION_PACKAGE_EMP, isnull(UNION_PACKAGE_EMP_MAX, 0), isnull(UNION_PACKAGE_COMP_MAX, 0), MaximumByPercentsOfBaseSalaryRegional
	FROM #tblEmployeeIDList u
	INNER JOIN tblDivision div ON u.DivisionID = div.DivisionID
	CROSS APPLY (
		SELECT TOP 1 (UNION_FEE_METHOD) AS UNION_FEE_METHOD
		FROM tblCompany c
		) c
	LEFT JOIN tblUnionFeeMethod f ON f.UnionFeeMethodID = isnull(isnull(div.UNION_FEE_METHOD, c.UNION_FEE_METHOD), 3)

	UPDATE #tblTradeUnion
	SET IsEmpPaid = 1
	FROM #tblTradeUnion t
	WHERE EXISTS (
			SELECT 1
			FROM tblJoinedUnionEmployeeMonthly un
			WHERE t.EmployeeID = un.EmployeeID AND un.Month = @Month AND un.Year = @Year AND isnull(EmpPay, 0) = 1
			) AND t.EmployeeID IN (
			SELECT EmployeeID
			FROM #Insurance
			)

	SELECT EmployeeID, Year, Month, HIIncome, SIIncome, EmployeeHI, EmployeeSI, EmployeeTotal, CompanyHI, CompanySI, CompanySM, CompanyTotal, Total, SalaryHistoryID, UIIncome, EmployeeUI, CompanyUI, Approval, UnionFeeEmp, UnionFeeComp, Notes, InsPaymentStatus
	INTO #tblSal_Insurance_Forquery
	FROM tblSal_Insurance_Retro
	WHERE @CalculateRetro = 1 AND Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	INSERT INTO #tblSal_Insurance_Forquery (EmployeeID, Year, Month, HIIncome, SIIncome, EmployeeHI, EmployeeSI, EmployeeTotal, CompanyHI, CompanySI, CompanySM, CompanyTotal, Total, SalaryHistoryID, UIIncome, EmployeeUI, CompanyUI, Approval, UnionFeeEmp, UnionFeeComp, Notes, InsPaymentStatus)
	SELECT EmployeeID, Year, Month, HIIncome, SIIncome, EmployeeHI, EmployeeSI, EmployeeTotal, CompanyHI, CompanySI, CompanySM, CompanyTotal, Total, SalaryHistoryID, UIIncome, EmployeeUI, CompanyUI, Approval, UnionFeeEmp, UnionFeeComp, Notes, InsPaymentStatus
	FROM tblSal_Insurance
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			) AND EmployeeID NOT IN (
			SELECT EmployeeID
			FROM #tblSal_Insurance_Forquery
			)

	--bao giam thi ko dong tien cong doan thang nay
	UPDATE #tblTradeUnion
	SET IsComPaid = 0, IsEmpPaid = 0
	FROM #tblTradeUnion u
	WHERE u.EmployeeID NOT IN (
			SELECT EmployeeID
			FROM #tblSal_Insurance_Forquery i
			WHERE (ISNULL(i.EmployeeSI, 0) <> 0 OR ISNULL(i.CompanySI, 0) <> 0)
			) AND u.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList e
			)

	UPDATE #tblTradeUnion
	SET IsEmpPaid = 0
	FROM #tblTradeUnion t
	LEFT JOIN #tblSal_AttendanceData ta ON t.EmployeeID = ta.EmployeeID
	WHERE (ta.EmployeeID IS NULL OR ISNULL(ta.TotalPaidDays, 0) = 0)

	UPDATE #tblTradeUnion
	SET BasicSalary = i.SIIncome
	FROM #tblTradeUnion u
	INNER JOIN #tblSal_Insurance_Forquery i ON u.EmployeeID = i.EmployeeID

	--where i.Month = @Month and i.Year = @Year and i.EmployeeID in (select EmployeeID from #tblEmployeeIDList)
	UPDATE #tblTradeUnion
	SET BasicSalary = s.SI_Salary
	FROM #tblTradeUnion u
	INNER JOIN dbo.fn_CurrentSISalary_byDate(@SIDate, @LoginID) s ON u.EmployeeID = s.EmployeeID
	WHERE u.BasicSalary IS NULL OR u.BasicSalary <= 0

	DECLARE @miniMumsal MONEY = (
			SELECT TOP 1 a.MinimumSal
			FROM tblSI_CeilSalary a
			WHERE a.EffectiveDate = (
					SELECT Max(sie.EffectiveDate) EffectiveDate
					FROM tblSI_CeilSalary sie
					WHERE sie.EffectiveDate <= @FromDate
					)
			)

	UPDATE u
	SET BaseSalaryRegional = @miniMumsal
	FROM #tblTradeUnion u -- thay đổi đóng theo lương tối thiểu
		-- inner join #tblSalDetail s on u.EmployeeID = s.EmployeeID
		--inner join dbo.fn_CurrentBaseSalRegionalByDate(@SIDate) b on s.BaseSalRegionalID = b.BaseSalRegionalID
		--where s.LatestSalEntry = 1

	-- nếu đóng theo lương cơ sở
	UPDATE #tblTradeUnion
	SET BasicSalary = @miniMumsal
	WHERE Is_CeilSalary = 1

	-- nếu dc chặn lại bởi 10% lương cơ sở vùng
	UPDATE #tblTradeUnion
	SET UnionFeeEmp = CASE
			WHEN isnull(Emp_ByPercent, 0) = 1
				THEN UNION_PERCENT_EMP * BasicSalary / 100
			ELSE UNION_PACKAGE_EMP
			END * IsEmpPaid, UnionFeeComp = CASE
			WHEN isnull(Comp_ByPercent, 0) = 1
				THEN UNION_PERCENT_COMP * BasicSalary / 100
			ELSE UNION_PACKAGE_COMP
			END * IsComPaid

	UPDATE #tblTradeUnion
	SET UnionFeeEmp = BaseSalaryRegional * MaximumByPercentsOfBaseSalaryRegional / 100
	WHERE MaximumByPercentsOfBaseSalaryRegional > 0 AND UnionFeeEmp > BaseSalaryRegional * MaximumByPercentsOfBaseSalaryRegional / 100

	UPDATE #tblTradeUnion
	SET UnionFeeEmp = ISNULL(i.UnionFeeEmp, u.UnionFeeEmp), UnionFeeComp = ISNULL(i.UnionFeeComp, u.UnionFeeComp)
	FROM #tblTradeUnion u
	INNER JOIN #tblSal_Insurance_Forquery i ON u.EmployeeID = i.EmployeeID
		--	and i.Month = @Month and i.Year = @Year
		AND (i.UnionFeeEmp IS NOT NULL OR i.UnionFeeComp IS NOT NULL)

	-- Bị chặn bởi mức max trong thiết lập công đoàn
	UPDATE #tblTradeUnion
	SET UnionFeeEmp = UNION_PACKAGE_EMP_MAX
	WHERE UNION_PACKAGE_EMP_MAX > 0 AND UnionFeeEmp > UNION_PACKAGE_EMP_MAX

	UPDATE #tblTradeUnion
	SET UnionFeeComp = UNION_PACKAGE_COMP_MAX
	WHERE UNION_PACKAGE_COMP_MAX > 0 AND UnionFeeComp > UNION_PACKAGE_COMP_MAX

	INSERT INTO #tblTradeUnion (EmployeeID, UnionFeeEmp, UnionFeeComp)
	SELECT EmployeeID, ISNULL(UnionFeeEmp, 0), ISNULL(UnionFeeComp, 0)
	FROM #tblSal_Insurance_Forquery i
	WHERE --i.Month = @Month and i.Year = @Year and
		(i.UnionFeeEmp IS NOT NULL OR i.UnionFeeComp IS NOT NULL) AND NOT EXISTS (
			SELECT 1
			FROM #tblTradeUnion u
			WHERE i.EmployeeID = u.EmployeeID
			) AND i.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	UPDATE sal
	SET EmpUnion_RETRO = round(re.Union_RETRO_EE, 0), EmpUnion = round(uni.UnionFeeEmp, 0), CompUnion_RETRO = round(re.Union_RETRO_ER, 0), CompUnion = round(uni.UnionFeeComp, 0)
	FROM #tblSalDetail sal
	LEFT JOIN #tblTradeUnion uni ON sal.EmployeeID = uni.EmployeeID
	LEFT JOIN #tblsal_retro_Final re ON sal.EmployeeID = re.EmployeeID --and re.Month = @Month and re.Year = @Year
	WHERE sal.LatestSalEntry = 1

	--------------------- Calculate IO ----------------------------------
	IF (OBJECT_ID('SALCAL_IO_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_IO_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_IO_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	IF @StopUPDATE = 0
	BEGIN
		INSERT INTO #tblSal_IO_des (EmployeeID, Month, Year, InLateHours, InLateAmount, PeriodID)
		SELECT EmployeeID, Month, Year, InLateHours, InLateAmount, @PeriodID
		FROM (
			INSERT INTO #tblSal_IO_Detail_des (EmployeeID, Month, Year, SalaryHistoryID, InLateHours, OutEarlyHours, InLateAmount, OutEarlyAmount, PeriodID)
			OUTPUT inserted.*
			SELECT sal1.EmployeeID, @Month, @Year, isnull(sal1.ProbationSalaryHistoryID, SalaryHistoryID), sal2.DeductionHours, 0, sal1.IOAmt, 0, @PeriodID
			FROM #tblSalDetail sal1
			INNER JOIN #tblSal_AttendanceData sal2 ON sal1.EmployeeID = sal2.EmployeeID
			WHERE sal2.DeductionHours IS NOT NULL
			) tmp
		WHERE tmp.InLateAmount IS NOT NULL
	END

	----------------------Payroll sumaried items-----------------------------------------
	UPDATE #tblSalDetail
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0)
	WHERE isNet = 0

	SELECT *, CAST(NULL AS FLOAT(53)) TaxableIncome_SalaryOnly
	INTO #tblSalDetail_ForTax
	FROM #tblSalDetail
	WHERE LatestSalEntry = 1 --lấy dòng lương cuối cùng chắc chắn có

	UPDATE #tblSalDetail_ForTax
	SET ActualMonthlyBasic = s.ActualMonthlyBasic, UnpaidLeaveAmount = s.UnpaidLeaveAmount, TaxableOTTotal = s.TaxableOTTotal, NoneTaxableOTTotal = s.NoneTaxableOTTotal, TotalOTAmount = s.TotalOTAmount, TotalNSAmt = s.TotalNSAmt, NoneTaxableNSAmt = s.NoneTaxableNSAmt
	FROM #tblSalDetail_ForTax t
	INNER JOIN (
		SELECT EmployeeID, SUM(ActualMonthlyBasic) ActualMonthlyBasic, SUM(UnpaidLeaveAmount) UnpaidLeaveAmount, SUM(TaxableOTTotal) TaxableOTTotal, SUM(NoneTaxableOTTotal) NoneTaxableOTTotal, SUM(TotalOTAmount) TotalOTAmount, SUM(TotalNSAmt) TotalNSAmt, SUM(NoneTaxableNSAmt) NoneTaxableNSAmt
		FROM #tblSalDetail d
		GROUP BY EmployeeID
		) s ON t.EmployeeID = s.EmployeeID

	UPDATE #tblSalDetail_ForTax
	SET GrossTakeHome = round((ActualMonthlyBasic + isnull(TotalOTAmount, 0) + isnull(TotalNSAmt, 0) + ISNULL(TotalAllowanceForSalary, 0) + isnull(TotalAdjustmentForSalary, 0)), @ROUND_TAKE) - (ISNULL(InsAmt, 0) + ISNULL(IOAmt, 0) + ISNULL(EmpUnion, 0)), TotalCostComPaid = ActualMonthlyBasic + isnull(TotalOTAmount, 0) + isnull(TotalNSAmt, 0) + ISNULL(TaxableAllowanceTotal, 0) + ISNULL(NoneTaxableAllowanceTotal, 0) + ISNULL(InsAmtComp, 0) - ISNULL(IOAmt, 0) + ISNULL(CompUnion, 0) + isnull(CompUnion_RETRO, 0) + CASE
			WHEN ISNULL(IsNet, 0) = 1
				THEN ISNULL(InsAmt, 0)
			ELSE 0
			END

	UPDATE #tblSalDetail_ForTax
	SET TotalPayrollFund = TotalCostComPaid

	--tripod
	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0)
	WHERE isNet = 0

	UPDATE #tblSalDetail_ForTax
	SET TotalCostComPaid = ISNULL(TotalCostComPaid, 0) + adj.AdjustmentAmount
	FROM #tblSalDetail_ForTax sal
	INNER JOIN (
		SELECT a.EmployeeID, SUM(CASE
					WHEN ir.IncomeKind = 1
						THEN a.AdjustmentAmount
					ELSE - 1 * a.AdjustmentAmount
					END) AS AdjustmentAmount
		FROM #AdjustmentSum a
		INNER JOIN tblIrregularIncome ir ON a.IncomeID = ir.IncomeID AND ISNULL(ir.isNotLabourCost, 0) = 0
		GROUP BY a.EmployeeID
		) adj ON sal.EmployeeID = adj.EmployeeID

	UPDATE #tblSalDetail_ForTax
	SET TotalPayrollFund = ISNULL(TotalPayrollFund, 0) + adj.AdjustmentAmount
	FROM #tblSalDetail_ForTax sal
	INNER JOIN (
		SELECT a.EmployeeID, SUM(CASE
					WHEN ir.IncomeKind = 1
						THEN a.AdjustmentAmount
					ELSE - 1 * a.AdjustmentAmount
					END) AS AdjustmentAmount
		FROM #AdjustmentSum a
		INNER JOIN tblIrregularIncome ir ON a.IncomeID = ir.IncomeID -- and ISNULL(ir.isNotLabourCost,0) = 0
		GROUP BY a.EmployeeID
		) adj ON sal.EmployeeID = adj.EmployeeID

	--Taxable before deduct co tru luon tien bao hiem 10.5% cua nhan vien
	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction = ISNULL(ActualMonthlyBasic, 0) + ISNULL(TotalNSAmt, 0) - isnull(NoneTaxableNSAmt, 0) + ISNULL(TaxableAllowanceTotal, 0) + ISNULL(TaxableAdjustmentTotal, 0) - ISNULL(IOAmt, 0) + ISNULL(TaxableOTTotal, 0) - ISNULL(InsAmt, 0), TotalIncome_Taxable_Without_INS_Persion_family = ISNULL(ActualMonthlyBasic, 0) + ISNULL(TotalNSAmt, 0) - isnull(NoneTaxableNSAmt, 0) + ISNULL(TaxableAllowanceTotal, 0) + ISNULL(TaxableAdjustmentTotal, 0) - ISNULL(IOAmt, 0) + ISNULL(TaxableOTTotal, 0)

	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + ISNULL(InsAmt, 0)
	WHERE IsNet = 1

	-- nếu muốn cộng insurance vào nếu 10%
	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + ISNULL(InsAmt, 0)
	FROM #tblSalDetail_ForTax t
	INNER JOIN #tblEmployeeIDList e ON t.EmployeeId = e.EmployeeID
	--inner join tblDivision div on e.DivisionId = div.DivisionID and div.Add_EE_Insurance_Into_TaxableIncome = 1
	WHERE isnull(t.IsNet, 0) = 0 AND t.employeeID IN (
			SELECT employeeId
			FROM #tblTemporaryContractTax
			)

	-- cộng INS vào làm tổng lương trước khi trừ deduction
	-- trừ các khoảng thuế gross ra
	-- + với net từ nước ngoài
	-- gross up nó
	-- + lại allowance gross
	-- + insurance + gross từ nước ngoài
	-- tính toán lại tổng số lương trước khi nhảy qua đoạn thu
	--select 9999,* from tblSal_Abroad_ForTaxPurpose
	-- lấy danh sách allowance Gross ra trừ đi trước khi grossup
	-- có thể net hóa nó nhưng mà khó lém
	TRUNCATE TABLE #grossAllowanceAmount

	INSERT INTO #grossAllowanceAmount
	SELECT EmployeeID, sum(TaxableAmount) AS TotalGrossAllowanceAmount_Taxable
	FROM #tblAllowance a
	INNER JOIN tblAllowanceSetting al ON a.AllowanceCode = al.AllowanceCode
	WHERE al.IsTaxable = 1 AND al.IsGrossAllowance_InNetSal = 1
	GROUP BY EmployeeID

	IF @@ROWCOUNT > 0 -- nếu có gross allowance thì phải trừ đi rồi mới gross up
	BEGIN
		UPDATE #tblSalDetail_ForTax
		SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction - isnull(gross.TotalGrossAllowanceAmount_Taxable, 0)
		FROM #tblSalDetail_ForTax sal
		INNER JOIN #grossAllowanceAmount gross ON sal.EmployeeID = gross.EmployeeID AND sal.LatestSalEntry = 1
		WHERE sal.IsNet = 1
	END

	-- cộng cục này với phần Net từ nước ngoài trả
	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction += ISNULL(ca.NetAmountVND, 0) -- cộng phần net để grossup trước
	FROM #tblSalDetail_ForTax sal
	CROSS APPLY (
		SELECT sum(NetAmountVND) AS NetAmountVND
		FROM #tblSal_Abroad_ForTaxPurpose_des sa
		WHERE sa.Month = @Month AND sa.Year = @Year AND sa.EmployeeID = sal.EmployeeID
		) ca
	WHERE sal.LatestSalEntry = 1 AND sal.IsNet = 1

	--gross it up
	----update dependant truocws nhes
	--select TaxableIncomeBeforeDeduction,-- tính before tax coi có ngon chưa nào
	UPDATE sal
	SET TaxableIncomeBeforeDeduction = round((IncomeFrom - 1) + -- lấy khoản Income from
			((TaxableIncomeBeforeDeduction - (MinNet + @PesonalDeduct + (isnull(c.CountDeduct, 0) * @RelationDeduct))) / (1 - TaxPercent)) -- cộng với công thức ba lăng nhăng
			+ @PesonalDeduct + (isnull(c.CountDeduct, 0) * @RelationDeduct) -- cộng với giảm trừ bản thân, gia đình, tới đây còn thiếu cái tiền bảo hiểm tý mới cộng
			--as TaxableIncomeBeforeDeduction_GrossedUp
			--,MinNet
			--,*
			, 0, 1)
	FROM #tblSalDetail_ForTax sal
	LEFT JOIN #CountRelation c ON sal.EmployeeID = c.EmployeeID
	INNER JOIN #TaxForGrossup tg ON sal.TaxableIncomeBeforeDeduction -- đổi với những người lương NET thì cái này được hiểu là tổng lương net Nhé anh em
		- @PesonalDeduct - (isnull(c.CountDeduct, 0) * @RelationDeduct) BETWEEN tg.MinNet AND tg.MaxNet
	WHERE IsNet = 1

	-- lấy cái net của cty ra trước khi cộng gross - ee trả thuế vào
	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction_EROnly_ForNETOnly = TaxableIncomeBeforeDeduction
	WHERE IsNet = 1

	IF EXISTS (
			SELECT 1
			FROM #grossAllowanceAmount
			) -- nếu có gross allowance thì cộng vào lại chứ ko vỡ mồm
	BEGIN
		UPDATE #tblSalDetail_ForTax
		SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + isnull(gross.TotalGrossAllowanceAmount_Taxable, 0)
		FROM #tblSalDetail_ForTax sal
		INNER JOIN #grossAllowanceAmount gross ON sal.EmployeeID = gross.EmployeeID
		WHERE sal.IsNet = 1 AND sal.LatestSalEntry = 1
	END

	-------------------------Calculate Employee insurance --------------------------------
	--select si.EmployeeTotal,TaxableIncomeBeforeDeduction,TaxableIncomeBeforeDeduction*0.15,*
	UPDATE sal
	SET TotalIncome_Taxable_Without_INS_Persion_family = TaxableIncomeBeforeDeduction + isnull(si.EmployeeTotal, 0)
	FROM #tblSalDetail_ForTax sal
	LEFT JOIN tblSal_Insurance si ON sal.EmployeeID = si.EmployeeID AND si.Month = @Month AND si.Year = @Year
	WHERE sal.LatestSalEntry = 1 AND IsNet = 1

	-- cộng thêm lương gross từ nước ngoài
	UPDATE sal
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + isnull(ca.GrossAmountVND, 0)
	FROM #tblSalDetail_ForTax sal
	CROSS APPLY (
		SELECT sum(GrossAmountVND) AS GrossAmountVND
		FROM #tblSal_Abroad_ForTaxPurpose_des sa
		WHERE sa.Month = @Month AND sa.Year = @Year AND sa.EmployeeID = sal.EmployeeID
		) ca
	WHERE sal.LatestSalEntry = 1 AND sal.IsNet = 1

	-- kết thúc gross up
	UPDATE #tblSalDetail_ForTax
	SET TotalIncome = round(isnull(ActualMonthlyBasic, 0) + isnull(TotalOTAmount, 0) + isnull(TotalNSAmt, 0) + ISNULL(TotalAllowanceForSalary, 0) + isnull(TotalAdjustmentForSalary, 0) + isnull(OtherDeductionAfterPIT, 0) - ISNULL(IOAmt, 0), @ROUND_NET), TaxableIncome = TaxableIncomeBeforeDeduction - ROUND(ISNULL(NoneTaxableOTTotal, 0), 0) --TRIPOD
		, TaxableIncome_EROnly_ForNETOnly = TaxableIncomeBeforeDeduction_EROnly_ForNETOnly, TotalIncome_ForSalaryTaxedAdj = round(isnull(ActualMonthlyBasic, 0) + isnull(TotalOTAmount, 0) + isnull(TotalNSAmt, 0) + ISNULL(TotalAllowanceForSalary, 0) + isnull(TaxableAdjustmentTotal_ForSalary, 0) - ISNULL(IOAmt, 0), @ROUND_NET)

	UPDATE #tblSalDetail_ForTax
	SET TotalEarn = isnull(ActualMonthlyBasic, 0) + isnull(TotalOTAmount, 0) + isnull(TotalNSAmt, 0) + ISNULL(TotalAllowanceForSalary, 0)

	UPDATE #tblSalDetail_ForTax
	SET TotalEarn = ISNULL(TotalEarn, 0) + t.AdjustmentAmount
	FROM #tblSalDetail_ForTax tx
	INNER JOIN (
		SELECT a.EmployeeID, SUM(a.AdjustmentAmount) AdjustmentAmount
		FROM #tblAdjustment a
		INNER JOIN tblIrregularIncome ir ON a.IncomeID = ir.IncomeID AND ir.IncomeKind = 1 AND ir.ForSalary = 1 AND (ISNULL(DoNotAddToTotalEarnIfNegative, 0) = 0 OR AdjustmentAmount > 0)
		GROUP BY A.EmployeeID
		) t ON tx.EmployeeID = t.EmployeeID

	-- select 7878787878 as asdasdsa,EmployeeID
	-- ,sum(case when i.incomeKind = 1 then 1 else 0 end * a.AdjustmentAmount) as TotalDeductFromTotalEarnCauseOfNegativeAmount
	--from #AdjustmentSum a
	--inner join tblIrregularIncome i on a.IncomeID = i.IncomeID  and i.DoNotAddToTotalEarnIfNegative =1
	--group by a.EmployeeID
	-------------------------------------Calculate tax----------------------------------------------
	IF (OBJECT_ID('SALCAL_TAX_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_TAX_INITIAL
(
	@StopUPDATE bit output,
	@Month int,	@Year int,

	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_TAX_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	--tinh thue 10% thi khong duoc mien thue tang ca
	SELECT EMployeeId
	INTO #empNeedToFixTaxAmount
	FROM #tblTemporaryContractTax c

	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction - ISNULL(TaxableOTTotal, 0) + ISNULL(TotalOTAmount, 0) - ISNULL(TaxableAdjustmentTotal, 0) + ISNULL(TotalAdjustment_WithoutForce, 0) - ISNULL(TaxableAllowanceTotal, 0) + ISNULL(TotalAllowanceForSalary, 0), TotalIncome_Taxable_Without_INS_Persion_family = TotalIncome_Taxable_Without_INS_Persion_family - ISNULL(TaxableOTTotal, 0) + ISNULL(TotalOTAmount, 0) - ISNULL(TaxableAdjustmentTotal, 0) + ISNULL(TotalAdjustment_WithoutForce, 0) - ISNULL(TaxableAllowanceTotal, 0) + ISNULL(TotalAllowanceForSalary, 0)
	FROM #tblSalDetail_ForTax s
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #empNeedToFixTaxAmount
			)

	-- ở đây sẽ xử lý hết mấy thằng OT, Allowance, Adjustment
	UPDATE #tblSal_OT_des
	SET Raw_TaxableOTAmount = TaxableOTAmount, Raw_NoneTaxableOTAmount = NoneTaxableOTAmount

	UPDATE #tblSal_OT_des
	SET TaxableOTAmount = OTAmount, NoneTaxableOTAmount = 0
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #empNeedToFixTaxAmount
			)

	UPDATE #tblSal_Allowance_des
	SET Raw_TaxableAmount = TaxableAmount, Raw_UntaxableAmount = UntaxableAmount, Raw_RetroAmountNonTax = RetroAmountNonTax

	UPDATE #tblSal_Allowance_des
	SET TaxableAmount = Amount, UntaxableAmount = 0, RetroAmountNonTax = 0
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #empNeedToFixTaxAmount
			)

	UPDATE #tblSal_Allowance_Detail_des
	SET Raw_TaxableAmount = TaxableAmount, Raw_UntaxableAmount = UntaxableAmount, Raw_RetroAmountNonTax = RetroAmountNonTax

	UPDATE #tblSal_Allowance_Detail_des
	SET TaxableAmount = Amount, UntaxableAmount = 0, RetroAmountNonTax = 0
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #empNeedToFixTaxAmount
			)

	UPDATE #tblSal_Adjustment_des
	SET Raw_TaxableAmount = TaxableAmount, Raw_UntaxableAmount = UntaxableAmount

	UPDATE #tblSal_Adjustment_des
	SET TaxableAmount = Amount, UntaxableAmount = 0
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #empNeedToFixTaxAmount
			) AND IncomeID NOT IN (
			SELECT IncomeID
			FROM tblIrregularIncome
			WHERE ForceNonTax = 1
			) AND IncomeID IN (
			SELECT IncomeID
			FROM tblIrregularIncome
			WHERE IncomeKind = 1
			)

	DROP TABLE #empNeedToFixTaxAmount

	IF (OBJECT_ID('SALCAL_TAX_10_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_TAX_10_INITIAL
(
	@StopUPDATE bit output,

	@Month int,	@Year int,

	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	-- custom
	EXEC SALCAL_TAX_10_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- TAX_DEDUCTION: Khấu trừ thuế khi tính lương? 0: không trừ, 1: có trừ tiền thuế
	-- không tính thuế từ phần mềm, có thể import từ bên ngoài vào
	DECLARE @TAX_DEDUCTION BIT

	SET @TAX_DEDUCTION = ISNULL((
				SELECT Value
				FROM tblParameter
				WHERE Code = 'TAX_DEDUCTION'
				), 1) --mot vai cong ty khong tinh thue ma import tu file - nếu từ file thì phải set = 0

	IF @TAX_DEDUCTION = 1
	BEGIN
		CREATE TABLE #TableVarTax (
			EmployeeID VARCHAR(20), TaxableIncome FLOAT(53), TaxableIncome_EROnly_ForNETOnly FLOAT(53), TaxableIncomeFrom FLOAT(53), TaxableIncomeFrom_EROnly_ForNETOnly FLOAT(53), TaxableIncomeTo FLOAT(53), TaxableIncomeTo_EROnly_ForNETOnly FLOAT(53), TaxPercent FLOAT, TaxPercent_EROnly_ForNETOnly FLOAT, ProgressiveAmount FLOAT(53), ProgressiveAmount_EROnly_ForNETOnly FLOAT(53), PITAmt FLOAT(53), PITAmt_ER FLOAT(53), SalaryHistoryID BIGINT, FixedPercent BIT, IncomeTaxableEmployeeOld FLOAT(53), TaxRetroImported FLOAT(53), TaxableIncome_SalaryOnly FLOAT(53), PITAmt_SalaryOnly FLOAT(53) --TRIPOD Foreigner
			)

		SELECT te.EmployeeID, te.TaxRegNo
		INTO #tmpEmpTaxNo
		FROM tblEmployee te
		INNER JOIN #tblEmployeeIDList a ON te.EmployeeID = a.EmployeeID

		-- Family deduction
		SELECT EmployeeID, cast(0.0 AS FLOAT(53)) AS DeductionAmount, cast(@PesonalDeduct AS FLOAT(53)) PesonalDeduct, CAST(0 AS FLOAT(53)) FamilyDeduction
		INTO #Deduction
		FROM #tblEmployeeIDList

		UPDATE #Deduction
		SET DeductionAmount = ISNULL(PesonalDeduct, @PesonalDeduct)

		UPDATE #Deduction
		SET DeductionAmount = DeductionAmount + @RelationDeduct * isnull(CountDeduct, 0), FamilyDeduction = @RelationDeduct * isnull(CountDeduct, 0)
		FROM #Deduction a
		INNER JOIN #CountRelation b ON a.EmployeeID = b.EmployeeID

		UPDATE #CountRelation
		SET CountDeduct = 0
		WHERE EmployeeID IN (
				SELECT EmployeeID
				FROM #tblTemporaryContractTax
				)

		UPDATE #Deduction
		SET DeductionAmount = 0, FamilyDeduction = 0, PesonalDeduct = 0
		WHERE EmployeeID IN (
				SELECT EmployeeID
				FROM #tblTemporaryContractTax
				)

		--TRIPOD
		UPDATE #tblSalDetail_ForTax
		SET TaxableIncome = TotalIncome - ROUND(ISNULL(NoneTaxableOTTotal, 0), 0) - ISNULL(DeductionAmount, 0) - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0), TaxableIncome_SalaryOnly = RegularAmt - ISNULL(DeductionAmount, 0) - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0), TaxableIncome_EROnly_ForNETOnly = TaxableIncome_EROnly_ForNETOnly - (ISNULL(DeductionAmount, 0))
		FROM #tblSalDetail_ForTax a
		INNER JOIN #Deduction b ON a.EmployeeID = b.EmployeeID
		WHERE isNet = 0

		UPDATE #tblSalDetail_ForTax
		SET TaxableIncome = TotalIncome - ROUND(ISNULL(NoneTaxableOTTotal, 0), 0) - ISNULL(DeductionAmount, 0) - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0), TaxableIncome_SalaryOnly = RegularAmt - ISNULL(DeductionAmount, 0) - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0), TaxableIncome_EROnly_ForNETOnly = TaxableIncome_EROnly_ForNETOnly - (ISNULL(DeductionAmount, 0))
		FROM #tblSalDetail_ForTax a
		INNER JOIN #Deduction b ON a.EmployeeID = b.EmployeeID
		WHERE isNet = 1

		--SELECT * FROM #tblSalDetail where EmployeeID = '62250010' return
		--nhung nguoi hd duoi 3 thang ko duoc huong tang ca mien thue, neu luong < 9tr va co tich lowincome va co ma so thue thi duoc giam tru OTnontax
		INSERT INTO #TableVarTax (EmployeeID, TaxableIncome, TaxableIncome_EROnly_ForNETOnly)
		SELECT EmployeeID, TaxableIncome, TaxableIncome_EROnly_ForNETOnly
		FROM #tblSalDetail_ForTax

		UPDATE #TableVarTax
		SET TaxableIncomeFrom = tx.IncomeFrom, TaxableIncomeTo = tx.IncomeTo, TaxPercent = tx.TaxPercent, ProgressiveAmount = tx.ProgressiveAmount
		FROM #TableVarTax txv, (
				SELECT *
				FROM tblTax tt
				WHERE tt.EffectDate = (
						SELECT MAX(EffectDate)
						FROM tblTax
						WHERE datediff(day, tt.EffectDate, @FromDate) >= 0
						)
				) tx
		WHERE txv.TaxableIncome BETWEEN tx.IncomeFrom AND tx.IncomeTo

		--TRIPOD Foreigner
		UPDATE t
		SET TaxableIncome_SalaryOnly = sal.TaxableIncome_SalaryOnly
		FROM #TableVarTax t
		INNER JOIN #tblSalDetail_ForTax sal ON t.EmployeeID = sal.EmployeeID
		WHERE sal.isNET = 1

		UPDATE #TableVarTax
		SET TaxableIncomeFrom_EROnly_ForNETOnly = tx.IncomeFrom, TaxableIncomeTo_EROnly_ForNETOnly = tx.IncomeTo, TaxPercent_EROnly_ForNETOnly = tx.TaxPercent, ProgressiveAmount_EROnly_ForNETOnly = tx.ProgressiveAmount
		FROM #TableVarTax txv, (
				SELECT *
				FROM tblTax tt
				WHERE tt.EffectDate = (
						SELECT MAX(EffectDate)
						FROM tblTax
						WHERE datediff(day, tt.EffectDate, @FromDate) >= 0
						)
				) tx
		WHERE txv.TaxableIncome_EROnly_ForNETOnly BETWEEN tx.IncomeFrom AND tx.IncomeTo

		UPDATE #TableVarTax
		SET TaxableIncomeFrom = ISNULL(TaxableIncomeFrom, 0), TaxableIncomeTo = ISNULL(TaxableIncomeTo, 0), TaxPercent = ISNULL(TaxPercent, 0), ProgressiveAmount = ISNULL(ProgressiveAmount, 0), TaxableIncomeFrom_EROnly_ForNETOnly = ISNULL(TaxableIncomeFrom_EROnly_ForNETOnly, 0), TaxableIncomeTo_EROnly_ForNETOnly = ISNULL(TaxableIncomeTo_EROnly_ForNETOnly, 0), TaxPercent_EROnly_ForNETOnly = ISNULL(TaxPercent_EROnly_ForNETOnly, 0), ProgressiveAmount_EROnly_ForNETOnly = ISNULL(ProgressiveAmount_EROnly_ForNETOnly, 0)

		UPDATE #TableVarTax
		SET PITAmt = (TaxableIncome - (TaxableIncomeFrom - 1)) * TaxPercent + ProgressiveAmount, PITAmt_SalaryOnly = (TaxableIncome_SalaryOnly - (TaxableIncomeFrom - 1)) * TaxPercent + ProgressiveAmount, PITAmt_ER = (TaxableIncome_EROnly_ForNETOnly - (TaxableIncomeFrom_EROnly_ForNETOnly - 1)) * TaxPercent_EROnly_ForNETOnly + ProgressiveAmount_EROnly_ForNETOnly
		FROM #TableVarTax a
		WHERE EmployeeID NOT IN (
				SELECT EmployeeID
				FROM #tblTemporaryContractTax
				)

		-- thuế cho người chưa có hợp đồng chính thức, mac dinh 10%
		UPDATE #TableVarTax
		SET TaxableIncome = CASE
				WHEN ISNULL(sal.TaxableIncomeBeforeDeduction, 0) < 0 AND e.DivisionID IS NULL
					THEN 0
				ELSE ISNULL(sal.TaxableIncomeBeforeDeduction, 0)
				END, PITAmt = CASE
				WHEN ISNULL(sal.TaxableIncomeBeforeDeduction, 0) < 2000000
					THEN 0
				ELSE ISNULL(sal.TaxableIncomeBeforeDeduction, 0) * tmp.TaxPercentage
				END, FixedPercent = 1
		FROM #TableVarTax a
		INNER JOIN #tblTemporaryContractTax tmp ON a.EmployeeID = tmp.EmployeeID
		LEFT JOIN #tblEmployeeIDList e ON a.EmployeeID = e.EmployeeId
		--and e.DivisionID in(select DivisionID from tblDivision where DoNotFixTaxableIncome = 1)
		INNER JOIN #tblSalDetail_ForTax sal ON a.EmployeeID = sal.EmployeeID

		UPDATE #TableVarTax
		SET PITAmt = 0, TaxableIncome = 0, FixedPercent = 0
		WHERE PITAmt <= 0.05

		--co ma so thue + cam ket thu nhap thap + < 9tr: khong tinh thue nhung duoc tru tang ca mien thue, dong phuc mien thue, tien an mien thue
		UPDATE #TableVarTax
		SET PITAmt = CASE
				WHEN LTRIM(RTRIM(ISNULL(te.TaxRegNo, ''))) <> '' AND tmp.IsLowSalary = 1 AND sal.TotalSalary <= @PesonalDeduct
					THEN 0
				ELSE t.PITAmt
				END, TaxableIncome = CASE
				WHEN LTRIM(RTRIM(ISNULL(te.TaxRegNo, ''))) <> '' AND tmp.IsLowSalary = 1 AND sal.TotalSalary <= @PesonalDeduct
					THEN 0
				ELSE t.TaxableIncome
				END
		FROM #TableVarTax t
		INNER JOIN #tblTemporaryContractTax tmp ON t.EmployeeID = tmp.EmployeeID
		INNER JOIN #tblSalDetail_ForTax sal ON t.EmployeeID = sal.EmployeeID
		INNER JOIN #tmpEmpTaxNo te ON t.EmployeeID = te.EmployeeID

		UPDATE #TableVarTax
		SET SalaryHistoryID = b.SalaryHistoryID
		FROM #TableVarTax a, (
				SELECT MAX(SalaryHistoryID) SalaryHistoryID, EmployeeID
				FROM #tblSalDetail_ForTax
				GROUP BY EmployeeID
				) b
		WHERE a.EmployeeID = b.EmployeeID

		UPDATE #TableVarTax
		SET TaxableIncome = 0, TaxableIncome_SalaryOnly = 0
		WHERE TaxableIncome < 0 OR TaxableIncome IS NULL

		UPDATE #TableVarTax
		SET TaxableIncome_EROnly_ForNETOnly = 0
		WHERE TaxableIncome_EROnly_ForNETOnly < 0 OR TaxableIncome_EROnly_ForNETOnly IS NULL

		UPDATE #TableVarTax
		SET TaxableIncome = ROUND(TaxableIncome, @ROUND_SALARY_UNIT), PITAmt = ROUND(PITAmt, @ROUND_SALARY_UNIT)

		--UPDATE #Sal_OT1_0 SET OTDeduction = OTDeduction
		UPDATE #TableVarTax
		SET FixedPercent = 0
		WHERE PITAmt <= 0.05

		UPDATE #TableVarTax
		SET TaxRetroImported = pit.totalPITRetro, PITAmt = round(ISNULL(PITAmt, 0) + ISNULL(pit.totalPITRetro, 0), 0)
		FROM #TableVarTax tax
		INNER JOIN (
			SELECT EmployeeID, SUM(Amount) AS totalPITRetro
			FROM tblPR_Adjustment p
			WHERE p.EmployeeID IN (
					SELECT EmployeeID
					FROM #tblEmployeeIDList
					) AND p.Month = @Month AND p.Year = @Year AND p.IncomeID IN (
					SELECT IncomeID
					FROM tblIrregularIncome
					WHERE AppendToPIT = 1
					)
			GROUP BY p.EmployeeID
			) pit ON tax.EmployeeID = pit.EmployeeID

		UPDATE #TableVarTax
		SET TaxRetroImported = isnull(TaxRetroImported, 0) + isnull(re.PIT_Retro_Amount, 0), PITAmt = round(ISNULL(PITAmt, 0) + ISNULL(re.PIT_Retro_Amount, 0), 0)
		FROM #TableVarTax tax
		INNER JOIN tblSal_Retro_Imported re ON tax.EmployeeID = re.EmployeeID AND re.Month = @month AND re.YEar = @year AND re.PIT_Retro_Amount <> 0

		UPDATE #TableVarTax
		SET PITAmt = ROUND(PITAmt, 0), PITAmt_ER = ROUND(PITAmt_ER, 0), PITAmt_SalaryOnly = ROUND(PITAmt_SalaryOnly, 0)

		-- calculate PIT retro by cal back dependants
		EXEC sp_ProcessDependentAdjustment @LoginID, @Month, @Year, @NotSelect = 1

		UPDATE #TableVarTax
		SET PITAmt = CASE
				WHEN Round(ISNULL(PITAmt, 0) + a.PITAdjustment, @ROUND_SALARY_UNIT) < 0
					THEN 0
				ELSE Round(ISNULL(PITAmt, 0) + a.PITAdjustment, @ROUND_SALARY_UNIT)
				END
		FROM #TableVarTax p
		INNER JOIN (
			SELECT EmployeeId, sum(PITAdjustment) AS PITAdjustment
			FROM tblPIT_Adjustment_For_ChangedDependants
			WHERE ToMonth = @month AND ToYear = @year
			GROUP BY EmployeeID
			) a ON p.EmployeeID = a.EmployeeID

		-- end calculate PIT retro by cal back dependants
		IF (OBJECT_ID('SALCAL_TAX_FINISHED') IS NULL)
		BEGIN
			EXEC (
					'CREATE PROCEDURE dbo.SALCAL_TAX_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
					)
		END

		SET @StopUPDATE = 0

		EXEC SALCAL_TAX_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

		--alter table tblSal_tax add FixedPercents float
		INSERT INTO #tblSal_tax_des (EmployeeID, Month, year, IncomeTaxable, DeductionAmt, EmployeeExemption, FamilyExemption, DependantNumber, OTDeduction, TaxAmt, IsNET, TaxableIncome_EROnly_ForNETOnly, PITAmt_ER, TaxRetroImported, FixedPercents, isLowSalary, PeriodID, TaxableIncome_SalaryOnly, TaxAmt_SalaryOnly) --TRIPOD Foreigner
		SELECT tx.EmployeeID, @Month, @Year, tx.TaxableIncome, d.DeductionAmount, d.PesonalDeduct, isnull(dp.CountDeduct, 0) * isnull(@RelationDeduct, 0), dp.CountDeduct, sal.NoneTaxableOTTotal, tx.PITAmt, sh.IsNET, tx.TaxableIncome_EROnly_ForNETOnly, tx.PITAmt_ER, TaxRetroImported, tc.TaxPercentage AS FixedPercents, tc.isLowSalary, @PeriodID, tx.TaxableIncome_SalaryOnly, tx.PITAmt_SalaryOnly
		FROM #TableVarTax tx
		INNER JOIN #tblSalDetail_ForTax sal ON tx.SalaryHistoryID = sal.SalaryHistoryID AND sal.LatestSalEntry = 1
		LEFT JOIN tblSalaryHistory sh ON tx.SalaryHistoryID = sh.SalaryHistoryID
		LEFT JOIN #Deduction d ON tx.EmployeeID = d.EmployeeID
		LEFT JOIN #CountRelation dp ON tx.EmployeeID = dp.EmployeeID
		LEFT JOIN #tblTemporaryContractTax tc ON tx.EmployeeID = tc.EmployeeID

		UPDATE #tblSalDetail_ForTax
		SET PITAmt = tx.PITAmt, PITAmt_ER = tx.PITAmt_ER
		FROM #tblSalDetail_ForTax sal
		INNER JOIN #TableVarTax tx ON sal.EmployeeID = tx.EmployeeID AND sal.LatestSalEntry = 1
	END
	ELSE
	BEGIN
		DELETE #tblSal_tax_des
		WHERE month = @Month AND Year = @Year AND EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		SELECT t.EmployeeID, t.IncomeTaxable, t.TaxAmt
		INTO #tblSal_TaxImport
		FROM tblSal_TaxImport t
		WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		INSERT INTO #tblSal_tax_des (EmployeeID, Month, Year, IncomeTaxable, TaxAmt)
		SELECT t.EmployeeID, @Month, @Year, t.IncomeTaxable, t.TaxAmt
		FROM #tblSal_TaxImport t

		UPDATE #tblSalDetail_ForTax
		SET PITAmt = tx.TaxAmt
		FROM #tblSalDetail_ForTax sal
		INNER JOIN #tblSal_TaxImport tx ON sal.EmployeeID = tx.EmployeeID AND sal.LatestSalEntry = 1
	END

	--------------------------UPDATE other sumaried items of Sumary Table--------------------------
	UPDATE #tblSalDetail_ForTax
	SET IncomeAfterPIT = TotalIncome - ISNULL(InsAmt, 0) - ISNULL(PITAmt, 0) - (ISNULL(EmpUnion, 0) + ISNULL(EmpUnion_RETRO, 0))
	WHERE isnull(IsNet, 0) = 0

	UPDATE #tblSalDetail_ForTax
	SET IncomeAfterPIT = TotalIncome - (ISNULL(PITAmt, 0) - isnull(PITAmt_ER, 0))
	WHERE isnull(IsNet, 0) = 1

	--UPDATE #tblSalDetail_ForTax set PITReturn = ISNULL(TaxableAdjustmentTotal,0) + ISNULL(NoneTaxableAdjustmentTotal,0) - ISNULL(TotalAdjustmentForSalary,0)
	--deduct advance and union
	UPDATE sal
	SET AdvanceAmt = av.AdvanceAmount
	FROM tblSal_Advance av
	INNER JOIN #tblSalDetail_ForTax sal ON av.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1
	WHERE av.Month = @Month AND av.Year = @Year AND av.IsLock = 1

	UPDATE #tblSalDetail_ForTax
	SET GrossTakeHome = ROUND(IncomeAfterPIT - ISNULL(OtherDeductionAfterPIT, 0) - ISNULL(PITReturn, 0) - ISNULL(AdvanceAmt, 0), @ROUND_SALARY_UNIT)
	WHERE IncomeAfterPIT <> 0

	--select GrossTakeHome,@ROUND_SALARY_UNIT from #tblSalDetail_ForTax
	-- total cost thì phải trừ các khoản không dc tính trong total Cót Com Paid
	-- use IsNotLabourCost column
	UPDATE sal
	SET sal.TotalCostComPaid = sal.TotalCostComPaid - isnull(al.Total_Allowance_NotInLabourCost, 0)
	FROM #tblSalDetail_ForTax sal
	INNER JOIN (
		SELECT employeeID, sum(ReceiveAmount) AS Total_Allowance_NotInLabourCost
		FROM #tblAllowance a
		INNER JOIN tblAllowanceSetting al ON a.AllowanceID = al.AllowanceID AND al.IsNotLabourCost = 1
		GROUP BY EmployeeID
		) al ON sal.EmployeeID = al.EmployeeID
	WHERE sal.LatestSalEntry = 1

	-----------------------UPDATE salary detail records-----------------------------
	--dong luong cu ko can update
	UPDATE #tblSalDetail
	SET TaxableIncomeBeforeDeduction = 0, TotalIncome_Taxable_Without_INS_Persion_family = 0
	WHERE LatestSalEntry = 0

	--already delete old data
	UPDATE #tblSalDetail
	SET GrossTakeHome = sal2.GrossTakeHome, TotalCostComPaid = sal2.TotalCostComPaid + CASE
			WHEN isnull(sal2.IsNet, 0) = 1
				THEN isnull(sal2.PITAmt_ER, 0)
			ELSE 0
			END -- nếu là net thì phải trả thêm nha
		, TotalPayrollFund = sal2.TotalPayrollFund + CASE
			WHEN isnull(sal2.IsNet, 0) = 1
				THEN isnull(sal2.PITAmt_ER, 0)
			ELSE 0
			END -- nếu là net thì phải trả thêm nha
		, TaxableIncomeBeforeDeduction = sal2.TaxableIncomeBeforeDeduction, TaxableIncomeBeforeDeduction_EROnly_ForNETOnly = sal2.TaxableIncomeBeforeDeduction_EROnly_ForNETOnly, TotalIncome = sal2.TotalIncome, TotalEarn = sal2.TotalEarn, TaxableIncome = sal2.TaxableIncome, TaxableIncome_EROnly_ForNETOnly = sal2.TaxableIncome_EROnly_ForNETOnly, PITAmt = sal2.PITAmt, PITAmt_ER = sal2.PITAmt_ER, IncomeAfterPIT = sal2.IncomeAfterPIT, PITReturn = sal2.PITReturn, AdvanceAmt = sal2.AdvanceAmt, TotalIncome_ForSalaryTaxedAdj = sal2.TotalIncome_ForSalaryTaxedAdj, TotalIncome_Taxable_Without_INS_Persion_family = sal2.TotalIncome_Taxable_Without_INS_Persion_family
	FROM #tblSalDetail sal1
	INNER JOIN #tblSalDetail_ForTax sal2 ON sal1.EmployeeID = sal2.EmployeeID AND sal1.LatestSalEntry = 1

	DROP TABLE #tblSalDetail_ForTax

	UPDATE #tblSalDetail
	SET GrossTakeHome = ROUND(GrossTakeHome, @ROUND_TAKE), TotalEarn = ROUND(TotalEarn, @ROUND_NET), TotalIncome = ROUND(TotalIncome, @ROUND_NET)

	IF @PROBATION_PERECNT > 0 AND @PROBATION_PERECNT < 100.0 --xu ly mot vai nguoi co probation tu dong
		UPDATE #tblSalDetail
		SET BasicSalaryOrg = BasicSalary
		WHERE LatestSalEntry = 0 AND BasicSalaryOrg IS NOT NULL

	--xoa mot so du lieu thua o lan tinh luong truoc
	DELETE
	FROM #tblSalDetail
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			WHERE TerminatedStaff = 1 AND TerminateDate <= @FromDate
			) AND GrossTakeHome = 0 AND ISNULL(TotalIncome, 0) = 0 AND ISNULL(PITAmt, 0) = 0 AND ISNULL(TotalCostComPaid, 0) = 0

	--luu du lieu truoc khi delete	
	SELECT EmployeeID, IsCash, RemainAL, Notes
	INTO #tmpSalSal_Backup
	FROM tblSal_Sal
	WHERE [Month] = @Month AND [Year] = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	UPDATE #tblSalDetail
	SET ActualMonthlyBasic = ISNULL(ActualMonthlyBasic, 0) - isnull(sr.ActualMonthlyBasic_Retro_Amount, 0)
	FROM #tblSalDetail sal
	INNER JOIN #tblsal_retro_Final sr ON sal.EmployeeID = sr.EmployeeID --and sr.Month= @Month and sr.Year= @Year
	WHERE sal.LatestSalEntry = 1

	INSERT INTO #tblSal_Sal_Detail_des (EmployeeID, Month, Year, PeriodID, SalaryHistoryID, FromDate, ToDate, DepartmentID, SectionID, PositionID, StandardWDays, BasicSalary, SalaryPerDay, ActualMonthlyBasic, TaxableAllowance, NontaxableAllowance, TaxableAdjustment, NontaxableAdj, TaxableAdjustmentTotal_ForSalary, TaxableAdjustmentTotal_NotForSalary, TotalIncome, TotalEarn, IOAmt, EmpUnion, CompUnion, TaxableIncomeBeforeDeduction, IncomeAfterPIT, GrossTakeHome, SalaryPerHour, SalCalRuleID, LatestSalEntry, DaysOfSalEntry, Raw_BasicSalary, Raw_CurrencyCode, Raw_ExchangeRate, IsNet, UnpaidLeaveAmount, TotalNetIncome_Custom, GrossedUpWithoutHousing_Custom, GrossedUpWithoutHousing_WithoutGrossIncome_Custom, RegularAmt, PaidLeaveAmt, GrossSalary, AnnualBonus_Total, AnnualBonus_EvMonth, Bonus6Month_Total, Bonus6M_EveryMonth) --TRIPOD
	SELECT sal.EmployeeID, @Month, @Year, @PeriodID, ISNULL(sal.ProbationSalaryHistoryID, sal.SalaryHistoryID), sal.FromDate, sal.ToDate, e.DepartmentID, e.SectionID, e.PositionID, sal.STD_WD, sal.BasicSalary, sal.SalaryPerDay, sal.ActualMonthlyBasic, sal.TaxableAllowanceTotal, sal.NoneTaxableAllowanceTotal, sal.TaxableAdjustmentTotal, sal.NoneTaxableAdjustmentTotal, TaxableAdjustmentTotal_ForSalary, TaxableAdjustmentTotal_NotForSalary, sal.TotalIncome, TotalEarn, sal.IOAmt, sal.EmpUnion, sal.CompUnion, sal.TaxableIncomeBeforeDeduction, sal.IncomeAfterPIT, sal.GrossTakeHome, sal.SalaryPerHour, sal.SalCalRuleID, LatestSalEntry, DaysOfSalEntry, CASE
			WHEN ISNULL(sal.isNET, 0) = 1
				THEN sal.NetSalary
			ELSE sh.Salary
			END AS Raw_BasicSalary, sal.CurrencyCode AS Raw_CurrencyCode, sal.ExchangeRate AS Raw_ExchangeRate, sal.IsNet, UnpaidLeaveAmount, TotalNetIncome_Custom, GrossedUpWithoutHousing_Custom, round(GrossedUpWithoutHousing_WithoutGrossIncome_Custom, 0), sal.RegularAmt, sal.PaidLeaveAmt, sal.GrossSalary, AnnualBonus_Total, AnnualBonus_EvMonth, Bonus6Month_Total, Bonus6M_EveryMonth
	FROM #tblSalDetail sal
	INNER JOIN #tblEmployeeIDList e ON sal.EmployeeID = e.EmployeeID
	INNER JOIN tblSalaryHistory sh ON sal.SalaryHistoryID = sh.SalaryHistoryID

	--select 9999,TotalNetIncome_Custom,GrossedUpWithoutHousing_Custom,* from #tblSalDetail
	IF (OBJECT_ID('SALCAL_FinishUpdateSalDetail') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_FinishUpdateSalDetail
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_FinishUpdateSalDetail @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	----------------------------UPDATE Salary sumary record-----------------------------
	--already delete old data
	INSERT INTO #tblSal_Sal_des (EmployeeID, Month, Year, PeriodID, ActualMonthlyBasic, TaxableAllowance, NontaxableAllowance, TaxableAdjustment, NontaxableAdj, TaxableAdjustmentTotal_ForSalary, TaxableAdjustmentTotal_NotForSalary, TotalIncome, TotalEarn, IOAmt, EmpUnion, CompUnion, EmpUnion_RETRO, CompUnion_RETRO, TaxableIncomeBeforeDeduction, IncomeAfterPIT, GrossTakeHome, TotalCostComPaid, TotalPayrollFund, TotalIncome_ForSalaryTaxedAdj, TotalIncome_Taxable_Without_INS_Persion_family, UnpaidLeaveAmount, TotalNetIncome_Custom, GrossedUpWithoutHousing_Custom, GrossedUpWithoutHousing_WithoutGrossIncome_Custom)
	SELECT EmployeeID, @Month, @Year, @PeriodID, SUM(ActualMonthlyBasic), SUM(TaxableAllowanceTotal), SUM(NoneTaxableAllowanceTotal), SUM(TaxableAdjustmentTotal), SUM(NoneTaxableAdjustmentTotal), SUM(TaxableAdjustmentTotal_ForSalary), SUM(TaxableAdjustmentTotal_NotForSalary), SUM(TotalIncome), SUM(TotalEarn), SUM(IOAmt), SUM(EmpUnion), SUM(CompUnion), SUM(EmpUnion_RETRO), SUM(CompUnion_RETRO), SUM(TaxableIncomeBeforeDeduction), SUM(IncomeAfterPIT), SUM(GrossTakeHome), Round(SUM(TotalCostComPaid), @ROUND_SALARY_UNIT), Round(SUM(TotalPayrollFund), @ROUND_SALARY_UNIT), SUM(TotalIncome_ForSalaryTaxedAdj), SUM(TotalIncome_Taxable_Without_INS_Persion_family), SUM(UnpaidLeaveAmount), SUM(TotalNetIncome_Custom), SUM(GrossedUpWithoutHousing_Custom), sum(GrossedUpWithoutHousing_WithoutGrossIncome_Custom)
	FROM #tblSalDetail
	GROUP BY EmployeeID

	UPDATE #tblSal_Sal_des
	SET IsCash = b.IsCash, Notes = b.Notes
	FROM #tblSal_Sal_des sal
	INNER JOIN #tmpSalSal_Backup b ON sal.EmployeeID = b.EmployeeID AND sal.Month = @Month AND Year = @Year

	/*
TakeHome_Actual_VND

TakeHome_RequestedAmount
TakeHome_Requested_Currency
Takehome_Requested_ExchangeRate
*/
	-- kiểm tra coi có ai cần dc trả ngoại tệ không
	SELECT EmployeeID, CurrencyCode, RequestAmount, AlsoViewVNDAmount, TransferAll
	INTO #PaidInAnotherCurrency
	FROM tblSal_RequestPaidInAnotherCurrency
	WHERE @month + @year * 12 >= FromMonth + FromYear * 12 AND (ToMonth IS NULL OR @month + @year * 12 <= ToMonth + ToYear * 12) AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	--select sal.EmployeeID,sal.GrossTakeHome,p.RequestAmount,p.CurrencyCode,ex.ExchangeRate
	UPDATE sal
	SET TakeHome_RequestedAmount = p.RequestAmount, TakeHome_Requested_Currency = p.CurrencyCode, Takehome_Requested_ExchangeRate = ex.ExchangeRate, TakeHome_Actual_VND = ROUND(CASE
				WHEN sal.GrossTakeHome - (p.RequestAmount * ex.ExchangeRate) > 0
					THEN sal.GrossTakeHome - (p.RequestAmount * ex.ExchangeRate)
				ELSE 0
				END, 0)
	FROM #tblSal_Sal_des sal
	INNER JOIN #PaidInAnotherCurrency p ON sal.EmployeeID = p.EmployeeID
	INNER JOIN #EmployeeExchangeRate ex ON p.EmployeeID = ex.EmployeeID AND p.CurrencyCode = ex.CurrencyCode

	-- cập nhật Key của table
	SET ANSI_WARNINGS ON

	SELECT KU.table_name AS TABLENAME, column_name AS PRIMARYKEYCOLUMN
	INTO #tmpPRIMARYKEYCOLUMN
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC
	INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KU ON TC.CONSTRAINT_TYPE = 'PRIMARY KEY' AND TC.CONSTRAINT_NAME = KU.CONSTRAINT_NAME AND KU.table_name IN (
			SELECT PhysicTableName
			FROM #NameOfPhysicTables
			)

	UPDATE t
	SET PrimaryKeyCOlumns = tmp.PrimaryKeyCOlumns
	FROM #NameOfPhysicTables t
	INNER JOIN (
		SELECT TABLENAME, STUFF((
					SELECT ',' + CAST(tmp.PRIMARYKEYCOLUMN AS VARCHAR(MAX))
					FROM #tmpPRIMARYKEYCOLUMN tmp
					WHERE (tmp.TABLENAME = Results.TABLENAME)
					FOR XML PATH(''), TYPE
					).value('.', 'VARCHAR(MAX)'), 1, 1, '') AS PrimaryKeyCOlumns
		FROM #tmpPRIMARYKEYCOLUMN Results
		GROUP BY TABLENAME
		) tmp ON t.PhysicTableName = tmp.TABLENAME

	SET ANSI_WARNINGS OFF

	DECLARE @tempTableName NVARCHAR(500), @PhysicTableName NVARCHAR(500)

	IF @CalculateRetro = 0 -- nếu @CalculateRetro= 0 thì chẳng có trong bảng tạm cũng như bảng danh sách nhân viên đâu, nhưng mà cứ chạy cái cho nó chắc
	BEGIN
		-- delêt bảng danh sách nhân viên
		--(EmployeeID IN (SELECT EmployeeID FROM #tblEmployeeIDList))
		DELETE #tblEmployeeIDList
		FROM #tblEmployeeIDList e
		WHERE EXISTS (
				SELECT 1
				FROM tblSal_Lock sl
				WHERE e.EmployeeID = sl.EmployeeID AND sl.Month = @Month AND sl.Year = @Year
				)

		-- tạo cái base query
		-- chắc ăn hơn nữa thì xóa 1 lần trong các bảng tạm đi nào a e
		SET @Query = N'delete %temptableName% from %temptableName% tmp where tmp.EmployeeId not in(select EmployeeID from #tblEmployeeIDList)
		-- delete bảng thực cho nó gọn
		delete %PhysicTableName% from %PhysicTableName% phy where phy.Month= ' + CAST(@Month AS VARCHAR(2)) + ' and phy.Year= ' + CAST(@year AS VARCHAR(4)) + ' and isnull(phy.PeriodID,0) = ' + cast(@PeriodID AS VARCHAR(20)) + '
		and exists (select 1 from #tblEmployeeIDList tel where phy.EmployeeID = tel.EmployeeID)
		'

		DECLARE @UpdateQuery NVARCHAR(max) = ''

		IF EXISTS (
				SELECT 1
				FROM #NameOfPhysicTables
				WHERE len(ISNULL(PrimaryKeyCOlumns, '')) <= 1
				)
		BEGIN
			SELECT N'Những bảng không có key cần xem lại', *
			FROM #NameOfPhysicTables
			WHERE len(ISNULL(PrimaryKeyCOlumns, '')) <= 1 -- không có key kô cho lưu

			DELETE #NameOfPhysicTables
			WHERE len(ISNULL(PrimaryKeyCOlumns, '')) <= 1 -- không có key kô cho lưu
		END

		WHILE EXISTS (
				SELECT 1
				FROM #NameOfPhysicTables
				)
		BEGIN
			SELECT TOP 1 @tempTableName = TempTablename, @PhysicTableName = PhysicTableName
			FROM #NameOfPhysicTables

			--print @tempTableName + '-'+@PhysicTableName
			SET @UpdateQuery = REPLACE(REPLACE(@Query, '%PhysicTableName%', @PhysicTableName), '%temptableName%', @tempTableName)

			--print @UpdateQuery
			EXECUTE (@UpdateQuery)

			EXEC sp_InsertUpdateFromTempTableTOTable @TempTableName = @tempTableName, @TableName = @PhysicTableName

			DELETE #NameOfPhysicTables
			WHERE @tempTableName = TempTablename AND @PhysicTableName = PhysicTableName
		END

		IF @CalculateRetro = 0
			UPDATE sal1
			SET Attdays = sal1.Attdays - ISNULL(sal2.Attdays, 0), TotalPaidDays = sal1.TotalPaidDays - ISNULL(sal2.TotalPaidDays, 0), PaidLeaves = sal1.PaidLeaves - ISNULL(sal2.PaidLeaves, 0), UnPaidLeaves = sal1.UnPaidLeaves - ISNULL(sal2.UnPaidLeaves, 0), TotalSunDay = sal1.TotalSunDay - ISNULL(sal2.TotalSunDay, 0)
			FROM tblSal_AttDataSumary_ForReport sal1
			INNER JOIN tblSal_AttDataSumary_ForReport sal2 ON sal1.EmployeeID = sal2.EmployeeID AND sal2.Month = @Month AND sal2.Year = @Year AND sal2.PeriodID = 1
			WHERE sal1.EmployeeID IN (
					SELECT EmployeeID
					FROM #tblEmployeeIDList
					) AND sal1.Month = @Month AND sal1.Year = @Year AND sal1.PeriodID = 0
	END
	ELSE IF @CalculateRetro = 1
	BEGIN
		SELECT sal1.EmployeeID, sal1.DaysOfSalEntry - ISNULL(sal2.DaysOfSalEntry, 0) AS BalanceDays
		INTO #DiffDaysofSalEntry
		FROM (
			SELECT EmployeeID, SUM(DaysOfSalEntry) AS DaysOfSalEntry
			FROM #tblSal_Sal_Detail_des
			GROUP BY EmployeeID
			) sal1
		CROSS APPLY (
			SELECT SUM(DaysOfSalEntry) AS DaysOfSalEntry
			FROM tblSal_Sal_Detail sd
			WHERE sd.EmployeeID = sal1.EmployeeID AND sd.Month = @Month AND sd.Year = @Year AND sd.PeriodID = 0
			) sal2

		-- diff basic
		SELECT sal1.EmployeeID, sal1.ActualMonthlyBasic AS ActualMonthlyBasic_Retro, sal2.ActualMonthlyBasic, sal1.ActualMonthlyBasic - isnull(sal2.ActualMonthlyBasic, 0) AS Diff
		INTO #DiffBasic
		FROM #tblSal_Sal_des sal1
		LEFT JOIN tblSal_Sal sal2 ON sal1.EmployeeID = sal2.EmployeeID AND sal2.Month = @Month AND sal2.Year = @Year AND sal2.PeriodID = 0
		WHERE ISNULL(sal1.ActualMonthlyBasic, 0) <> ISNULL(sal2.ActualMonthlyBasic, 0)

		--diff ot
		SELECT ot1.EmployeeID, ISNULL(ot1.OTAmount, 0) - ISNULL(ot2.OTAmount, 0) AS DiffOTAmount, ISNULL(ot1.TaxableOTAmount, 0) - ISNULL(ot2.TaxableOTAmount, 0) AS DiffTaxableOTAmount, ISNULL(ot1.NoneTaxableOTAmount, 0) - ISNULL(ot2.NoneTaxableOTAmount, 0) AS DiffNoneTaxableOTAmount
		INTO #DiffOT
		FROM #tblSal_OT_des ot1
		LEFT JOIN tblSal_OT ot2 ON ot1.EmployeeID = ot2.EmployeeID AND ot2.Month = @Month AND ot2.Year = @Year AND ot2.PeriodID = 0

		-- diff allowance
		SELECT al1.EmployeeID, sum(ISNULL(al1.Amount, 0) - isnull(al2.Amount, 0)) AS DiffAmount, sum(ISNULL(al1.TaxableAmount, 0) - isnull(al2.TaxableAmount, 0)) AS DiffTaxableAmount, sum(ISNULL(al1.UntaxableAmount, 0) - isnull(al2.UntaxableAmount, 0)) AS DiffNontaxableAmount, 'AL_' + als.AllowanceCode + '_Retro' AS RetroTablecolumnName
		INTO #DiffAllowance
		FROM #tblSal_Allowance_des al1
		INNER JOIN tblAllowanceSetting als ON al1.AllowanceID = als.AllowanceID
		LEFT JOIN tblSal_Allowance al2 ON al2.Month = @Month AND al2.Year = @Year AND al1.EmployeeID = al2.EmployeeID AND al1.AllowanceID = al2.AllowanceID AND al2.PeriodID = 0
		GROUP BY al1.EmployeeID, al1.AllowanceID, 'AL_' + als.AllowanceCode + '_Retro'

		DELETE #DiffAllowance
		WHERE ISNULL(DiffAmount, 0) = 0

		-- diff Night shift -- added
		SELECT ns1.EmployeeID, ISNULL(ns1.NSAmount, 0) - isnull(ns2.NSAmount, 0) AS DiffAmount
		INTO #DiffNightShift
		FROM #tblSal_NS_des ns1
		LEFT JOIN tblSal_NS ns2 ON ns1.EmployeeID = ns2.EmployeeID AND ns2.Month = @Month AND ns2.Year = @Year AND ns2.PeriodID = 0
		WHERE ISNULL(ns1.NSAmount, 0) - isnull(ns2.NSAmount, 0) <> 0

		DELETE #tblEmployeeIDList
		WHERE EmployeeID IN (
				SELECT EmployeeID
				FROM tblSal_Lock
				WHERE Month = @nextMonth AND Year = @nextYear
				) -- xóa những thằng đã khóa lương tháng sau

		DELETE tblSal_Retro
		FROM tblSal_Retro re
		WHERE Month = @nextMonth AND Year = @nextYear AND EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				) AND NOT EXISTS (
				SELECT 1
				FROM tblSal_Lock sl
				WHERE sl.Month = @nextMonth AND sl.Year = @nextYear
				) AND EmployeeID NOT IN (
				SELECT EmployeeID
				FROM tblSal_AttendanceData_Retro r
				WHERE r.Month = @Month AND r.Year = @Year
				
				UNION
				
				SELECT c.EmployeeID
				FROM tblCustomAttendanceData c
				WHERE c.Month = @Month AND c.Year = @Year AND c.IsRetro = 1
				) AND ISNULL(IsImported, 0) = 0

		-- xóa những thằng ko phải imported, nằm trong danh sách working, mà ko nằm trong danh sách nhân viên retro
		-- ịn vào nếu chưa có
		INSERT INTO tblSal_Retro (EmployeeID, Month, Year)
		SELECT DISTINCT EmployeeID, @nextMonth, @nextYear
		FROM (
			SELECT EmployeeID
			FROM #DiffAllowance
			
			UNION
			
			SELECT EmployeeID
			FROM #DiffBasic
			
			UNION
			
			SELECT EmployeeID
			FROM #DiffOT
			) u
		WHERE u.EmployeeID NOT IN (
				SELECT EmployeeID
				FROM tblSal_Retro r
				WHERE r.Month = @nextMonth AND r.Year = @nextYear
				)

		-- update thôi
		-- basic
		UPDATE tblSal_Retro
		SET ActualMonthlyBasic_Retro_Amount = ROUND(b.Diff, 0)
		FROM tblSal_Retro re
		LEFT JOIN #DiffBasic b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		-- ot
		UPDATE tblSal_Retro
		SET OT_Retro_Amount = ROUND(b.DiffOTAmount, 0), Nontax_OT_Retro_Amount = ROUND(b.DiffNoneTaxableOTAmount, 0)
		FROM tblSal_Retro re
		LEFT JOIN #DiffOT b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		-- allowance
		SET @Query = ''

		SELECT @Query += '
	 if COL_LENGTH(''tblSal_Retro'',''' + RetroTablecolumnName + ''') is null
	 begin
		 alter table tblSal_Retro add [' + RetroTablecolumnName + '] money
		 alter table tblSal_Retro_Sumary add [' + RetroTablecolumnName + '] money
		 alter table #tblSal_Retro_tmpImport add [' + RetroTablecolumnName + '] money
	 end
	 '
		FROM (
			SELECT DISTINCT RetroTablecolumnName
			FROM #DiffAllowance
			) s

		EXEC (@Query)

		SET @Query = ''

		SELECT @Query += '
	 update tblSal_Retro set [' + RetroTablecolumnName + '] = ROUND(tmp.DiffAmount,0)
	 from tblSal_Retro  t
	 inner join #DiffAllowance tmp  on t.EmployeeID = tmp.EmployeeID and tmp.RetroTablecolumnName = ''' + RetroTablecolumnName + ''''
		FROM (
			SELECT DISTINCT RetroTablecolumnName
			FROM #DiffAllowance
			) s

		--print @Query
		EXEC (@Query)

		--select * from #DiffAllowance
		--  diff ins
		SELECT re.EmployeeID, ISNULL(re.EmployeeTotal, 0) - isnull(ins.EmployeeTotal, 0) AS DiffEMployee, ISNULL(re.CompanyTotal, 0) - ISNULL(ins.CompanyTotal, 0) AS DiffCompany
		INTO #DiffIns
		FROM tblSal_Insurance_Retro re
		LEFT JOIN tblSal_Insurance ins ON re.EmployeeID = ins.EmployeeID AND ins.Month = @Month AND ins.Year = @Year
		-- and  (ISNULL(re.EmployeeTotal,0) <> isnull(ins.EmployeeTotal,0) or ISNULL(re.CompanyTotal,0) <> ISNULL(ins.CompanyTotal,0))
		WHERE re.Month = @Month AND re.Year = @Year AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		UPDATE tblSal_Retro
		SET INS_Retro_Amount_EE = ROUND(b.DiffEMployee, 0), INS_Retro_Amount_ER = ROUND(b.DiffCompany, 0)
		FROM tblSal_Retro re
		LEFT JOIN #DiffIns b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		-- diff union
		-- do đã delete đi add lại ròi nên đừng có sợ gì cả
		SELECT u.EmployeeID, ISNULL(u.UnionFeeEmp, 0) - ISNULL(sal.EmpUnion, 0) AS DiffEmployee, ISNULL(u.UnionFeeComp, 0) - ISNULL(sal.CompUnion, 0) AS DiffCompany
		INTO #diffUnion
		FROM #tblTradeUnion u
		LEFT JOIN tblSal_Sal sal ON u.EmployeeID = sal.EmployeeID AND sal.Month = @Month AND sal.Year = @Year
		WHERE ISNULL(u.UnionFeeEmp, 0) <> ISNULL(sal.EmpUnion, 0) OR ISNULL(u.UnionFeeComp, 0) <> ISNULL(sal.CompUnion, 0)

		UPDATE tblSal_Retro
		SET Union_RETRO_EE = ROUND(b.DiffEmployee, 0), Union_RETRO_ER = ROUND(b.DiffCompany, 0)
		FROM tblSal_Retro re
		LEFT JOIN #diffUnion b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		-- diff Night Shift -- finalize
		UPDATE tblSal_Retro
		SET NightShift_RETRO = ROUND(b.DiffAmount, 0)
		FROM tblSal_Retro re
		LEFT JOIN #DiffNightShift b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		-- balance days
		UPDATE tblSal_Retro
		SET BalanceDays = b.BalanceDays
		FROM tblSal_Retro re
		LEFT JOIN #DiffDaysofSalEntry b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)
			--drop table #DiffBasic
			--drop table #DiffOT
			--drop table #DiffAllowance
			--drop table #DiffInspiut
	END

	----------------------Error in salary period-------------------------------
	INSERT INTO #tblSal_Error_des ([Month], [Year], EmployeeID, Remark, PeriodID)
	SELECT @Month, @Year, EmployeeID, Reason, @PeriodID
	FROM #TableVarSalError

	--------------------Drop temporary table--------------------------------
	DROP TABLE #tblEmployeeIDList

	DROP TABLE #tblSalDetail

	DROP TABLE #tblLvHistory
END

PRINT 'eof'
	--exec SALCAL_MAIN 7,2025,3,0,'-1',0
GO


if object_id('[dbo].[sp_processAllAllowance]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_processAllAllowance] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_processAllAllowance] (@LoginID INT = 3, @Year INT, @Month INT, @SalCal BIT = 0)
AS
BEGIN
	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	SELECT f.EmployeeID, FullName, HireDate, LastWorkingDate, CAST(0 AS INT) Prio, f.DepartmentID, f.DivisionID, f.PositionID, s.SectionID, s.SectionName, ROW_NUMBER() OVER (
			ORDER BY f.EmployeeID
			) STTView, d.DepartmentName, p.PositionNameEN PositionName, CASE
			WHEN f.ProbationEndDate > @FromDate
				THEN 1
			ELSE 0
			END AS Probationary, f.IsForeign
	INTO #tmpEmployeeList
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, '-1', @LoginId) f
	LEFT JOIN tblSection s ON s.SectionID = f.SectionID
	LEFT JOIN tblDepartment d ON d.DepartmentID = f.DepartmentID
	LEFT JOIN tblPosition p ON p.PositionID = f.PositionID

	SELECT a.*
	INTO #AttendanceSummary
	FROM tblAttendanceSummary a
	INNER JOIN #tmpEmployeeList e ON e.EmployeeID = a.EmployeeID
	WHERE Year = @Year AND Month = @Month

	IF EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE EmployeeID NOT IN (
					SELECT s.EmployeeID
					FROM tblCustomInputImportMonthly s
					INNER JOIN #tmpEmployeeList t ON t.EmployeeID = s.EmployeeID AND s.[Year] = @Year AND s.[Month] = @Month
					)
			)
	BEGIN
		INSERT INTO tblCustomInputImportMonthly (EmployeeID, [Year], [Month])
		SELECT EmployeeID, @Year, @Month
		FROM #AttendanceSummary a
		WHERE EmployeeID NOT IN (
				SELECT s.EmployeeID
				FROM tblCustomInputImportMonthly s
				INNER JOIN #tmpEmployeeList t ON t.EmployeeID = s.EmployeeID AND s.[Year] = @Year AND s.[Month] = @Month
				)
	END

	CREATE TABLE #tblAllowance (EmployeeID INT, AllowanceID INT, ReceiveAmount MONEY, TotalPaidDays FLOAT)

	--     1	Seniority allowance
	-- 2	Production bonus
	-- 3	Foreign language allowance
	-- 4	Environmental allowance
	-- 5	Shift allowance
	-- 6	Fuel allowance
	-- 7	Professional allowance
	-- 8	Attendance allowance
	-- 9	Meal allowance
	-- 10	Regional (area) allowance
	-- 11	Incentive allowance
	-- 12	Key process allowance
	-- 13	Bonus 6 month
	-- 14	Performance & Responsibility
	-- TRIPOD: Xử lý các allowance
	EXEC sp_ProcessSeniorityAllowance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @isView = 1

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 1, SeniorityAmount, WorkingDays
	FROM tblSeniorityAllowance
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND SeniorityAmount > 0

	SELECT EmployeeID, COUNT(1) CntLanguage, CAST(NULL AS FLOAT) AttDays, CAST(NULL AS MONEY) AmountAllowance, al.Parameter Min_AttDays, al.DefaultAmount
	INTO #tmpEmployeeForeignLanguage
	FROM tblEmployeeForeignLanguage
	LEFT JOIN tblAllowanceSetting AS al ON al.AllowanceID = 3
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND @FromDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31') AND @ToDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31')
	GROUP BY EmployeeID, al.Parameter, al.DefaultAmount

	DELETE
	FROM #tmpEmployeeForeignLanguage
	WHERE EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE a.EmployeeID = #tmpEmployeeForeignLanguage.EmployeeID AND a.WorkingDays_Total < #tmpEmployeeForeignLanguage.Min_AttDays
			)

	UPDATE #tmpEmployeeForeignLanguage
	SET AttDays = a.WorkingDays_Total
	FROM #tmpEmployeeForeignLanguage e
	INNER JOIN #AttendanceSummary a ON e.EmployeeID = a.EmployeeID

	UPDATE #tmpEmployeeForeignLanguage
	SET AmountAllowance = CntLanguage * DefaultAmount
	FROM #tmpEmployeeForeignLanguage

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 3, AmountAllowance, AttDays
	FROM #tmpEmployeeForeignLanguage

	--petro
	SELECT e.EmployeeID, a.WorkingDays_Total, DefaultAmount, al.AllowanceID
	INTO #PetroAllowance
	FROM #tmpEmployeeList e
	INNER JOIN #AttendanceSummary a ON a.EmployeeID = e.EmployeeID
	LEFT JOIN tblAllowanceSetting al ON al.AllowanceID = 6
	WHERE a.WorkingDays_Total > al.Parameter AND Probationary = 0 AND ISNULL(IsForeign, 0) = 0

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 6, DefaultAmount, WorkingDays_Total
	FROM #PetroAllowance

	SELECT e.EmployeeID, e.PositionID, p.PositionAllowance AmountAllowance, aL.WorkingDays_Total
	INTO #FullAttendance
	FROM #tmpEmployeeList e
	INNER JOIN tblPosition p ON p.PositionID = e.PositionID
	INNER JOIN #AttendanceSummary al ON al.EmployeeID = e.EmployeeID
	WHERE p.PositionAllowance > 0 AND Probationary = 0 AND (ISNULL(WorkingHrs_Total, 0) + ISNULL(PaidLeaveHrs_Total, 0)) = RegularWorkdays * ISNULL(Std_Hour_PerDays, 0) AND ISNULL(IsForeign, 0) = 0

	SELECT lv.*
	INTO #lvHistory
	FROM tblLvHistory lv
	INNER JOIN tblLeaveType lt ON lt.LeaveCode = lv.LeaveCode
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #FullAttendance
			) AND LeaveDate BETWEEN @FromDate AND @ToDate AND lt.CutDiligent = 1

	DELETE
	FROM #FullAttendance
	WHERE EXISTS (
			SELECT 1
			FROM #lvHistory l
			WHERE l.EmployeeID = #FullAttendance.EmployeeID
			) OR EXISTS (
			SELECT *
			FROM tblInLateOutEarly ie
			WHERE ie.EmployeeID = #FullAttendance.EmployeeID AND IODate BETWEEN @FromDate AND @ToDate AND ie.ApprovedDeduct = 1
			)

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 8, AmountAllowance, WorkingDays_Total
	FROM #FullAttendance

	-- Dynamic pivot + merge #tblAllowance -> tblCustomInputImportMonthly
	DECLARE @YearParam NVARCHAR(10) = CAST(@Year AS NVARCHAR(10));
	DECLARE @MonthParam NVARCHAR(10) = CAST(@Month AS NVARCHAR(10));
	DECLARE @cols NVARCHAR(MAX), @colsList NVARCHAR(MAX), @colsUpdate NVARCHAR(MAX), @colsInsert NVARCHAR(MAX), @colsValues NVARCHAR(MAX), @sql NVARCHAR(MAX);

	-- 1) Build quoted column list from AllowanceID values that actually exist as columns in target table
	SELECT @cols = STUFF((
				SELECT ',' + QUOTENAME(CAST(a.AllowanceID AS NVARCHAR(50)))
				FROM (
					SELECT DISTINCT AllowanceID
					FROM #tblAllowance
					) a
				INNER JOIN sys.columns c ON c.name = CAST(a.AllowanceID AS NVARCHAR(50)) AND c.object_id = OBJECT_ID(N'dbo.tblCustomInputImportMonthly')
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

	IF @cols IS NULL OR LEN(@cols) = 0
	BEGIN
		PRINT 'No matching AllowanceID columns found in tblCustomInputImportMonthly. Skipping pivot/merge.';
	END
	ELSE
	BEGIN
		-- 2) Build helper fragments (unquoted names for iteration)
		-- @cols contains something like: [1],[2],[5]
		-- Extract bare names into XML to iterate
		SELECT @colsList = REPLACE(REPLACE(REPLACE(@cols, '[', ''), ']', ''), ' ', '');

		-- Build update assignments: t.[1] = ISNULL(s.[1],0), ...
		SELECT @colsUpdate = STUFF((
					SELECT ', t.' + QUOTENAME(value) + ' = ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- Build insert columns and corresponding values list
		SELECT @colsInsert = STUFF((
					SELECT ',' + QUOTENAME(value)
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

		SELECT @colsValues = STUFF((
					SELECT ', ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- 3) Build and execute dynamic pivot + merge
		SET @sql = N'
    -- create aggregated source (sum per employee per allowance)
    SELECT CAST(AllowanceID AS NVARCHAR(50)) AS AllowanceIDStr, EmployeeID, SUM(ISNULL(ReceiveAmount,0)) AS ReceiveAmount
    INTO ##srcAllowance
    FROM #tblAllowance

    GROUP BY CAST(AllowanceID AS NVARCHAR(50)), EmployeeID;

    -- pivot into wide table
    SELECT EmployeeID, ' + @cols + N'
    INTO ##tmpAllowancePivot
    FROM (
        SELECT EmployeeID, AllowanceIDStr, ReceiveAmount FROM ##srcAllowance
    ) src
    PIVOT (
        SUM(ReceiveAmount) FOR AllowanceIDStr IN (' + @cols + N')
    ) pvt;

    -- MERGE into target
    MERGE dbo.tblCustomInputImportMonthly AS t
    USING ##tmpAllowancePivot AS s
    ON t.EmployeeID = s.EmployeeID AND t.[Year] = ' + @YearParam + N' AND t.[Month] = ' + @MonthParam + N'
    WHEN MATCHED THEN
        UPDATE SET ' + @colsUpdate + N'
    WHEN NOT MATCHED THEN
        INSERT (EmployeeID, [Year], [Month], ' + @colsInsert + N')
        VALUES (s.EmployeeID, ' + @YearParam + N', ' +
			@MonthParam + N', ' + @colsValues + N');

    DROP TABLE ##srcAllowance;
    DROP TABLE ##tmpAllowancePivot;';

		EXEC sp_executesql @sql;
	END

	UPDATE tsh
	SET SalaryHistoryID = att.SalaryHistoryID
	FROM tblCustomInputImportMonthly AS tsh
	INNER JOIN #AttendanceSummary AS att ON tsh.EmployeeID = att.EmployeeID AND tsh.[Year] = att.[Year] AND tsh.[Month] = att.[Month]
	WHERE tsh.[Year] = @Year AND tsh.[Month] = @Month AND tsh.EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			);

	EXEC sp_AllowanceMonthly @Year = @Year, @Month = @Month

	IF (@SalCal = 1)
	BEGIN
		RETURN
	END
END
GO



if object_id('[dbo].[sp_CustomInputImportMonthly]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_CustomInputImportMonthly] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_CustomInputImportMonthly] (@LoginID INT, @Month INT, @Year INT, @OptionView INT = 0)
AS
BEGIN
	DECLARE @Query NVARCHAR(max) = ''

	SELECT @Query += '[' + AllowanceCode + '] money,'
	FROM tblAllowanceSetting
	WHERE Visible = 1 AND AllowanceCode NOT IN (
			SELECT name
			FROM sys.columns
			WHERE object_id = object_id('tblCustomInputImportMonthly')
			)
	ORDER BY Ord

	IF len(@Query) > 3
	BEGIN
		SET @Query = left(@Query, len(@Query) - 1)
		SET @Query = 'alter table tblCustomInputImportMonthly add ' + @Query

		EXEC (@query)
	END

	DECLARE @ToDate DATE

	SELECT @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	SELECT EmployeeID, FullName
	INTO #tmpEmloyeeList
	FROM dbo.fn_vtblEmployeeList_Bydate(@ToDate, '-1', @LoginID)
	WHERE ISNULL(@OptionView, 0) = 0 OR (ISNULL(@OptionView, 0) = 1 AND ISNULL(IsForeign, 0) = 0) OR (ISNULL(@OptionView, 0) = 2 AND ISNULL(IsForeign, 0) = 1)

	SET @Query = ''

	IF (@OptionView = 2)
	BEGIN
		SELECT @Query += ', ci.[' + name + ']'
		FROM sys.columns
		WHERE object_id = object_id('tblCustomInputImportMonthly') AND name NOT IN ('EmployeeID', 'Month', 'Year', 'Remark') AND name IN (
				SELECT CAST(AllowanceID AS NVARCHAR(50))
				FROM tblAllowanceSetting
				WHERE ISNULL(IsGrossAllowance_InNetSal, 0) = 1
				)
		ORDER BY column_id
	END
	ELSE
	BEGIN
		SELECT @Query += ', ci.[' + name + ']'
		FROM sys.columns
		WHERE object_id = object_id('tblCustomInputImportMonthly') AND name NOT IN ('EmployeeID', 'Month', 'Year', 'Remark') AND name NOT IN (
				SELECT CAST(AllowanceID AS NVARCHAR(50))
				FROM tblAllowanceSetting
				WHERE ISNULL(IsGrossAllowance_InNetSal, 0) = 0
				)
		ORDER BY column_id
	END

	--set @Query = stuff(@Query,1,1,'')
	SET @Query = 'select te.EmployeeID, te.FullName, @Month Month, @Year Year' + @Query + ',ci.Remark, cast(case when l.EmployeeID is not null then 1 else 0 end as bit) IsReadOnlyRow
	from #tmpEmloyeeList te
	inner join tblCustomInputImportMonthly ci on te.EmployeeID = ci.EmployeeID and ci.Month = @Month and ci.YEar = @YEar
	left join tblSal_Lock l on te.EmployeeID = l.EmployeeID and l.Month = ci.Month and l.Year = ci.Year
	order by te.EmployeeID
	'

	EXEC sp_executesql @Query, N'@Month int,@Year int', @Month, @Year

	SET @Query = ''

	SELECT @Query += '[' + AllowanceCode + '],'
	FROM tblAllowanceSetting
	WHERE Visible = 1 AND AllowanceCode IN (
			SELECT name
			FROM sys.columns
			WHERE object_id = object_id('tblCustomInputImportMonthly')
			)
	ORDER BY Ord

	CREATE TABLE #tmpColumnRange (ColumnList NVARCHAR(max), ExcelRange NVARCHAR(20), WithMergeCellOntop INT)

	INSERT INTO #tmpColumnRange
	SELECT @Query, 'F6:G8', 1

	SELECT *
	FROM #tmpColumnRange

	CREATE TABLE #ExportConfig (TableIndex INT, RowIndex INT, ColumnName NVARCHAR(200), ParseType NVARCHAR(Max), Position NVARCHAR(200), SheetIndex INT, TestDescription NVARCHAR(max), WithHeader INT, WithBestFit BIT)

	INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex, WithHeader)
	SELECT 0, 'Table|ColumnRangeTableIndex=1', 'A7', 0, 1

	SELECT *
	FROM #ExportConfig
END
GO




if object_id('[dbo].[sp_processAllAllowance]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_processAllAllowance] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_processAllAllowance] (@LoginID INT = 3, @Year INT, @Month INT, @SalCal BIT = 0)
AS
BEGIN
	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	SELECT f.EmployeeID, FullName, HireDate, LastWorkingDate, CAST(0 AS INT) Prio, f.DepartmentID, f.DivisionID, f.PositionID, s.SectionID, s.SectionName, ROW_NUMBER() OVER (
			ORDER BY f.EmployeeID
			) STTView, d.DepartmentName, p.PositionNameEN PositionName, CASE
			WHEN f.ProbationEndDate > @FromDate
				THEN 1
			ELSE 0
			END AS Probationary, f.IsForeign
	INTO #tmpEmployeeList
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, '-1', @LoginId) f
	LEFT JOIN tblSection s ON s.SectionID = f.SectionID
	LEFT JOIN tblDepartment d ON d.DepartmentID = f.DepartmentID
	LEFT JOIN tblPosition p ON p.PositionID = f.PositionID

	SELECT a.*
	INTO #AttendanceSummary
	FROM tblAttendanceSummary a
	INNER JOIN #tmpEmployeeList e ON e.EmployeeID = a.EmployeeID
	WHERE Year = @Year AND Month = @Month

	IF EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE EmployeeID NOT IN (
					SELECT s.EmployeeID
					FROM tblCustomInputImportMonthly s
					INNER JOIN #tmpEmployeeList t ON t.EmployeeID = s.EmployeeID AND s.[Year] = @Year AND s.[Month] = @Month
					)
			)
	BEGIN
		INSERT INTO tblCustomInputImportMonthly (EmployeeID, [Year], [Month])
		SELECT EmployeeID, @Year, @Month
		FROM #AttendanceSummary a
		WHERE EmployeeID NOT IN (
				SELECT s.EmployeeID
				FROM tblCustomInputImportMonthly s
				INNER JOIN #tmpEmployeeList t ON t.EmployeeID = s.EmployeeID AND s.[Year] = @Year AND s.[Month] = @Month
				)
	END

	CREATE TABLE #tblAllowance (EmployeeID INT, AllowanceID INT, ReceiveAmount MONEY, TotalPaidDays FLOAT)

	--     1	Seniority allowance
	-- 2	Production bonus
	-- 3	Foreign language allowance
	-- 4	Environmental allowance
	-- 5	Shift allowance
	-- 6	Fuel allowance
	-- 7	Professional allowance
	-- 8	Attendance allowance
	-- 9	Meal allowance
	-- 10	Regional (area) allowance
	-- 11	Incentive allowance
	-- 12	Key process allowance
	-- 13	Bonus 6 month
	-- 14	Performance & Responsibility
	-- TRIPOD: Xử lý các allowance
	EXEC sp_ProcessSeniorityAllowance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @isView = 1

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 1, SeniorityAmount, WorkingDays
	FROM tblSeniorityAllowance
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND SeniorityAmount > 0

	SELECT EmployeeID, COUNT(1) CntLanguage, CAST(NULL AS FLOAT) AttDays, CAST(NULL AS MONEY) AmountAllowance, al.Parameter Min_AttDays, al.DefaultAmount
	INTO #tmpEmployeeForeignLanguage
	FROM tblEmployeeForeignLanguage
	LEFT JOIN tblAllowanceSetting AS al ON al.AllowanceID = 3
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND @FromDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31') AND @ToDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31')
	GROUP BY EmployeeID, al.Parameter, al.DefaultAmount

	DELETE
	FROM #tmpEmployeeForeignLanguage
	WHERE EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE a.EmployeeID = #tmpEmployeeForeignLanguage.EmployeeID AND a.WorkingDays_Total < #tmpEmployeeForeignLanguage.Min_AttDays
			)

	UPDATE #tmpEmployeeForeignLanguage
	SET AttDays = a.WorkingDays_Total
	FROM #tmpEmployeeForeignLanguage e
	INNER JOIN #AttendanceSummary a ON e.EmployeeID = a.EmployeeID

	UPDATE #tmpEmployeeForeignLanguage
	SET AmountAllowance = CntLanguage * DefaultAmount
	FROM #tmpEmployeeForeignLanguage

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 3, AmountAllowance, AttDays
	FROM #tmpEmployeeForeignLanguage

	--petro
	SELECT e.EmployeeID, a.WorkingDays_Total, DefaultAmount, al.AllowanceID
	INTO #PetroAllowance
	FROM #tmpEmployeeList e
	INNER JOIN #AttendanceSummary a ON a.EmployeeID = e.EmployeeID
	LEFT JOIN tblAllowanceSetting al ON al.AllowanceID = 6
	WHERE a.WorkingDays_Total > al.Parameter AND Probationary = 0 AND ISNULL(IsForeign, 0) = 0

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 6, DefaultAmount, WorkingDays_Total
	FROM #PetroAllowance

	SELECT e.EmployeeID, e.PositionID, p.PositionAllowance AmountAllowance, aL.WorkingDays_Total
	INTO #FullAttendance
	FROM #tmpEmployeeList e
	INNER JOIN tblPosition p ON p.PositionID = e.PositionID
	INNER JOIN #AttendanceSummary al ON al.EmployeeID = e.EmployeeID
	WHERE p.PositionAllowance > 0 AND Probationary = 0 AND (ISNULL(WorkingHrs_Total, 0) + ISNULL(PaidLeaveHrs_Total, 0)) = RegularWorkdays * ISNULL(Std_Hour_PerDays, 0) AND ISNULL(IsForeign, 0) = 0

	SELECT lv.*
	INTO #lvHistory
	FROM tblLvHistory lv
	INNER JOIN tblLeaveType lt ON lt.LeaveCode = lv.LeaveCode
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #FullAttendance
			) AND LeaveDate BETWEEN @FromDate AND @ToDate AND lt.CutDiligent = 1

	DELETE
	FROM #FullAttendance
	WHERE EXISTS (
			SELECT 1
			FROM #lvHistory l
			WHERE l.EmployeeID = #FullAttendance.EmployeeID
			) OR EXISTS (
			SELECT *
			FROM tblInLateOutEarly ie
			WHERE ie.EmployeeID = #FullAttendance.EmployeeID AND IODate BETWEEN @FromDate AND @ToDate AND ie.ApprovedDeduct = 1
			)

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 8, AmountAllowance, WorkingDays_Total
	FROM #FullAttendance

	-- Dynamic pivot + merge #tblAllowance -> tblCustomInputImportMonthly
	DECLARE @YearParam NVARCHAR(10) = CAST(@Year AS NVARCHAR(10));
	DECLARE @MonthParam NVARCHAR(10) = CAST(@Month AS NVARCHAR(10));
	DECLARE @cols NVARCHAR(MAX), @colsList NVARCHAR(MAX), @colsUpdate NVARCHAR(MAX), @colsInsert NVARCHAR(MAX), @colsValues NVARCHAR(MAX), @sql NVARCHAR(MAX);

	-- 1) Build quoted column list from AllowanceID values that actually exist as columns in target table
	SELECT @cols = STUFF((
				SELECT ',' + QUOTENAME(CAST(a.AllowanceID AS NVARCHAR(50)))
				FROM (
					SELECT DISTINCT AllowanceID
					FROM #tblAllowance
					) a
				INNER JOIN sys.columns c ON c.name = CAST(a.AllowanceID AS NVARCHAR(50)) AND c.object_id = OBJECT_ID(N'dbo.tblCustomInputImportMonthly')
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

	IF @cols IS NULL OR LEN(@cols) = 0
	BEGIN
		PRINT 'No matching AllowanceID columns found in tblCustomInputImportMonthly. Skipping pivot/merge.';
	END
	ELSE
	BEGIN
		-- 2) Build helper fragments (unquoted names for iteration)
		-- @cols contains something like: [1],[2],[5]
		-- Extract bare names into XML to iterate
		SELECT @colsList = REPLACE(REPLACE(REPLACE(@cols, '[', ''), ']', ''), ' ', '');

		-- Build update assignments: t.[1] = ISNULL(s.[1],0), ...
		SELECT @colsUpdate = STUFF((
					SELECT ', t.' + QUOTENAME(value) + ' = ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- Build insert columns and corresponding values list
		SELECT @colsInsert = STUFF((
					SELECT ',' + QUOTENAME(value)
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

		SELECT @colsValues = STUFF((
					SELECT ', ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- 3) Build and execute dynamic pivot + merge
		SET @sql = N'
    -- create aggregated source (sum per employee per allowance)
    SELECT CAST(AllowanceID AS NVARCHAR(50)) AS AllowanceIDStr, EmployeeID, SUM(ISNULL(ReceiveAmount,0)) AS ReceiveAmount
    INTO ##srcAllowance
    FROM #tblAllowance

    GROUP BY CAST(AllowanceID AS NVARCHAR(50)), EmployeeID;

    -- pivot into wide table
    SELECT EmployeeID, ' + @cols + N'
    INTO ##tmpAllowancePivot
    FROM (
        SELECT EmployeeID, AllowanceIDStr, ReceiveAmount FROM ##srcAllowance
    ) src
    PIVOT (
        SUM(ReceiveAmount) FOR AllowanceIDStr IN (' + @cols + N')
    ) pvt;

    -- MERGE into target
    MERGE dbo.tblCustomInputImportMonthly AS t
    USING ##tmpAllowancePivot AS s
    ON t.EmployeeID = s.EmployeeID AND t.[Year] = ' + @YearParam + N' AND t.[Month] = ' + @MonthParam + N'
    WHEN MATCHED THEN
        UPDATE SET ' + @colsUpdate + N'
    WHEN NOT MATCHED THEN
        INSERT (EmployeeID, [Year], [Month], ' + @colsInsert + N')
        VALUES (s.EmployeeID, ' + @YearParam + N', ' +
			@MonthParam + N', ' + @colsValues + N');

    DROP TABLE ##srcAllowance;
    DROP TABLE ##tmpAllowancePivot;';

		EXEC sp_executesql @sql;
	END

	UPDATE tsh
	SET SalaryHistoryID = att.SalaryHistoryID
	FROM tblCustomInputImportMonthly AS tsh
	INNER JOIN #AttendanceSummary AS att ON tsh.EmployeeID = att.EmployeeID AND tsh.[Year] = att.[Year] AND tsh.[Month] = att.[Month]
	WHERE tsh.[Year] = @Year AND tsh.[Month] = @Month AND tsh.EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			);

	EXEC sp_AllowanceMonthly @Year = @Year, @Month = @Month

	IF (@SalCal = 1)
	BEGIN
		RETURN
	END
END
GO




if object_id('[dbo].[sp_processAllAllowance]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_processAllAllowance] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_processAllAllowance] (@LoginID INT = 3, @Year INT, @Month INT, @SalCal BIT = 0)
AS
BEGIN
	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	SELECT f.EmployeeID, FullName, HireDate, LastWorkingDate, CAST(0 AS INT) Prio, f.DepartmentID, f.DivisionID, f.PositionID, s.SectionID, s.SectionName, ROW_NUMBER() OVER (
			ORDER BY f.EmployeeID
			) STTView, d.DepartmentName, p.PositionNameEN PositionName, CASE
			WHEN f.ProbationEndDate > @FromDate
				THEN 1
			ELSE 0
			END AS Probationary, f.IsForeign
	INTO #tmpEmployeeList
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, '-1', @LoginId) f
	LEFT JOIN tblSection s ON s.SectionID = f.SectionID
	LEFT JOIN tblDepartment d ON d.DepartmentID = f.DepartmentID
	LEFT JOIN tblPosition p ON p.PositionID = f.PositionID

	SELECT a.*
	INTO #AttendanceSummary
	FROM tblAttendanceSummary a
	INNER JOIN #tmpEmployeeList e ON e.EmployeeID = a.EmployeeID
	WHERE Year = @Year AND Month = @Month

	IF EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE EmployeeID NOT IN (
					SELECT s.EmployeeID
					FROM tblCustomInputImportMonthly s
					INNER JOIN #tmpEmployeeList t ON t.EmployeeID = s.EmployeeID AND s.[Year] = @Year AND s.[Month] = @Month
					)
			)
	BEGIN
		INSERT INTO tblCustomInputImportMonthly (EmployeeID, [Year], [Month])
		SELECT EmployeeID, @Year, @Month
		FROM #AttendanceSummary a
		WHERE EmployeeID NOT IN (
				SELECT s.EmployeeID
				FROM tblCustomInputImportMonthly s
				INNER JOIN #tmpEmployeeList t ON t.EmployeeID = s.EmployeeID AND s.[Year] = @Year AND s.[Month] = @Month
				) AND a.PeriodID = 0
	END

	CREATE TABLE #tblAllowance (EmployeeID INT, AllowanceID INT, ReceiveAmount MONEY, TotalPaidDays FLOAT)

	--     1	Seniority allowance
	-- 2	Production bonus
	-- 3	Foreign language allowance
	-- 4	Environmental allowance
	-- 5	Shift allowance
	-- 6	Fuel allowance
	-- 7	Professional allowance
	-- 8	Attendance allowance
	-- 9	Meal allowance
	-- 10	Regional (area) allowance
	-- 11	Incentive allowance
	-- 12	Key process allowance
	-- 13	Bonus 6 month
	-- 14	Performance & Responsibility
	-- TRIPOD: Xử lý các allowance
	EXEC sp_ProcessSeniorityAllowance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @isView = 1

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 1, SeniorityAmount, WorkingDays
	FROM tblSeniorityAllowance
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND SeniorityAmount > 0

	SELECT EmployeeID, COUNT(1) CntLanguage, CAST(NULL AS FLOAT) AttDays, CAST(NULL AS MONEY) AmountAllowance, al.Parameter Min_AttDays, al.DefaultAmount
	INTO #tmpEmployeeForeignLanguage
	FROM tblEmployeeForeignLanguage
	LEFT JOIN tblAllowanceSetting AS al ON al.AllowanceID = 3
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND @FromDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31') AND @ToDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31')
	GROUP BY EmployeeID, al.Parameter, al.DefaultAmount

	DELETE
	FROM #tmpEmployeeForeignLanguage
	WHERE EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE a.EmployeeID = #tmpEmployeeForeignLanguage.EmployeeID AND a.WorkingDays_Total < #tmpEmployeeForeignLanguage.Min_AttDays
			)

	UPDATE #tmpEmployeeForeignLanguage
	SET AttDays = a.WorkingDays_Total
	FROM #tmpEmployeeForeignLanguage e
	INNER JOIN #AttendanceSummary a ON e.EmployeeID = a.EmployeeID

	UPDATE #tmpEmployeeForeignLanguage
	SET AmountAllowance = CntLanguage * DefaultAmount
	FROM #tmpEmployeeForeignLanguage

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 3, AmountAllowance, AttDays
	FROM #tmpEmployeeForeignLanguage

	--petro
	SELECT e.EmployeeID, a.WorkingDays_Total, DefaultAmount, al.AllowanceID
	INTO #PetroAllowance
	FROM #tmpEmployeeList e
	INNER JOIN #AttendanceSummary a ON a.EmployeeID = e.EmployeeID
	LEFT JOIN tblAllowanceSetting al ON al.AllowanceID = 6
	WHERE a.WorkingDays_Total > al.Parameter AND Probationary = 0 AND ISNULL(IsForeign, 0) = 0

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 6, DefaultAmount, WorkingDays_Total
	FROM #PetroAllowance

	SELECT e.EmployeeID, e.PositionID, p.PositionAllowance AmountAllowance, aL.WorkingDays_Total
	INTO #FullAttendance
	FROM #tmpEmployeeList e
	INNER JOIN tblPosition p ON p.PositionID = e.PositionID
	INNER JOIN #AttendanceSummary al ON al.EmployeeID = e.EmployeeID
	WHERE p.PositionAllowance > 0 AND Probationary = 0 AND (ISNULL(WorkingHrs_Total, 0) + ISNULL(PaidLeaveHrs_Total, 0)) = RegularWorkdays * ISNULL(Std_Hour_PerDays, 0) AND ISNULL(IsForeign, 0) = 0

	SELECT lv.*
	INTO #lvHistory
	FROM tblLvHistory lv
	INNER JOIN tblLeaveType lt ON lt.LeaveCode = lv.LeaveCode
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #FullAttendance
			) AND LeaveDate BETWEEN @FromDate AND @ToDate AND lt.CutDiligent = 1

	DELETE
	FROM #FullAttendance
	WHERE EXISTS (
			SELECT 1
			FROM #lvHistory l
			WHERE l.EmployeeID = #FullAttendance.EmployeeID
			) OR EXISTS (
			SELECT *
			FROM tblInLateOutEarly ie
			WHERE ie.EmployeeID = #FullAttendance.EmployeeID AND IODate BETWEEN @FromDate AND @ToDate AND ie.ApprovedDeduct = 1
			)

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 8, AmountAllowance, WorkingDays_Total
	FROM #FullAttendance

	-- Dynamic pivot + merge #tblAllowance -> tblCustomInputImportMonthly
	DECLARE @YearParam NVARCHAR(10) = CAST(@Year AS NVARCHAR(10));
	DECLARE @MonthParam NVARCHAR(10) = CAST(@Month AS NVARCHAR(10));
	DECLARE @cols NVARCHAR(MAX), @colsList NVARCHAR(MAX), @colsUpdate NVARCHAR(MAX), @colsInsert NVARCHAR(MAX), @colsValues NVARCHAR(MAX), @sql NVARCHAR(MAX);

	-- 1) Build quoted column list from AllowanceID values that actually exist as columns in target table
	SELECT @cols = STUFF((
				SELECT ',' + QUOTENAME(CAST(a.AllowanceID AS NVARCHAR(50)))
				FROM (
					SELECT DISTINCT AllowanceID
					FROM #tblAllowance
					) a
				INNER JOIN sys.columns c ON c.name = CAST(a.AllowanceID AS NVARCHAR(50)) AND c.object_id = OBJECT_ID(N'dbo.tblCustomInputImportMonthly')
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

	IF @cols IS NULL OR LEN(@cols) = 0
	BEGIN
		PRINT 'No matching AllowanceID columns found in tblCustomInputImportMonthly. Skipping pivot/merge.';
	END
	ELSE
	BEGIN
		-- 2) Build helper fragments (unquoted names for iteration)
		-- @cols contains something like: [1],[2],[5]
		-- Extract bare names into XML to iterate
		SELECT @colsList = REPLACE(REPLACE(REPLACE(@cols, '[', ''), ']', ''), ' ', '');

		-- Build update assignments: t.[1] = ISNULL(s.[1],0), ...
		SELECT @colsUpdate = STUFF((
					SELECT ', t.' + QUOTENAME(value) + ' = ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- Build insert columns and corresponding values list
		SELECT @colsInsert = STUFF((
					SELECT ',' + QUOTENAME(value)
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

		SELECT @colsValues = STUFF((
					SELECT ', ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- 3) Build and execute dynamic pivot + merge
		SET @sql = N'
    -- create aggregated source (sum per employee per allowance)
    SELECT CAST(AllowanceID AS NVARCHAR(50)) AS AllowanceIDStr, EmployeeID, SUM(ISNULL(ReceiveAmount,0)) AS ReceiveAmount
    INTO ##srcAllowance
    FROM #tblAllowance

    GROUP BY CAST(AllowanceID AS NVARCHAR(50)), EmployeeID;

    -- pivot into wide table
    SELECT EmployeeID, ' + @cols + N'
    INTO ##tmpAllowancePivot
    FROM (
        SELECT EmployeeID, AllowanceIDStr, ReceiveAmount FROM ##srcAllowance
    ) src
    PIVOT (
        SUM(ReceiveAmount) FOR AllowanceIDStr IN (' + @cols + N')
    ) pvt;

    -- MERGE into target
    MERGE dbo.tblCustomInputImportMonthly AS t
    USING ##tmpAllowancePivot AS s
    ON t.EmployeeID = s.EmployeeID AND t.[Year] = ' + @YearParam + N' AND t.[Month] = ' + @MonthParam + N'
    WHEN MATCHED THEN
        UPDATE SET ' + @colsUpdate + N'
    WHEN NOT MATCHED THEN
        INSERT (EmployeeID, [Year], [Month], ' + @colsInsert + N')
        VALUES (s.EmployeeID, ' + @YearParam + N', ' +
			@MonthParam + N', ' + @colsValues + N');

    DROP TABLE ##srcAllowance;
    DROP TABLE ##tmpAllowancePivot;';

		EXEC sp_executesql @sql;
	END

	UPDATE tsh
	SET SalaryHistoryID = att.SalaryHistoryID
	FROM tblCustomInputImportMonthly AS tsh
	INNER JOIN #AttendanceSummary AS att ON tsh.EmployeeID = att.EmployeeID AND tsh.[Year] = att.[Year] AND tsh.[Month] = att.[Month]
	WHERE tsh.[Year] = @Year AND tsh.[Month] = @Month AND tsh.EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			);

	EXEC sp_AllowanceMonthly @Year = @Year, @Month = @Month

	IF (@SalCal = 1)
	BEGIN
		RETURN
	END
END
GO




IF OBJECT_ID('tempdb..#Paradise') IS NOT NULL DROP TABLE #Paradise

  create table #Paradise (
   [name] NVarChar(MAX) NULL 
 , [IsEncrypted] Bit NULL 
 , [type_desc] NVarChar(MAX) NULL 
 , [ss_ViewDependencyOBject] NVarChar(MAX) NULL 
)


 INSERT INTO #Paradise([name],[IsEncrypted],[type_desc],[ss_ViewDependencyOBject])
Select  N'sp_processAllAllowance' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'sp_CustomInputImportMonthly' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'sp_ProcessSeniorityAllowance' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'tblCustomInputImportMonthly' as [name],NULL as [IsEncrypted],N'USER_TABLE' as [type_desc],NULL as [ss_ViewDependencyOBject]
select * from #Paradise
GO

--#region tblDataSetting
IF OBJECT_ID('tempdb..#tblDataSetting') IS NOT NULL DROP TABLE #tblDataSetting
  create table #tblDataSetting (
   [TableName] NVarChar(MAX) NULL 
 , [ViewName] NVarChar(MAX) NULL 
 , [AllowAdd] Bit NULL 
 , [ReadOnlyColumns] NVarChar(MAX) NULL 
 , [ComboboxColumns] NVarChar(MAX) NULL 
 , [ColumnOrderBy] NVarChar(MAX) NULL 
 , [ColumnHide] NVarChar(MAX) NULL 
 , [ReadOnly] Bit NULL 
 , [TableEditorName] NVarChar(MAX) NULL 
 , [IsProcedure] Bit NULL 
 , [PaintColumns] NVarChar(MAX) NULL 
 , [FormatFontColumns] NVarChar(MAX) NULL 
 , [PaintRows] NVarChar(MAX) NULL 
 , [IsProcessForm] Bit NULL 
 , [IsShowLayout] Bit NULL 
 , [IsBatch] Bit NULL 
 , [LoadDataAfterShow] Bit NULL 
 , [GroupColumns] NVarChar(MAX) NULL 
 , [FixedColumns] NVarChar(MAX) NULL 
 , [ExportName] NVarChar(MAX) NULL 
 , [CheckLockAttStore] NVarChar(MAX) NULL 
 , [RptTemplate] NVarChar(MAX) NULL 
 , [spAction] NVarChar(MAX) NULL 
 , [DefaultValue] NVarChar(MAX) NULL 
 , [FilterColumn] NVarChar(MAX) NULL 
 , [IsEditForm] Bit NULL 
 , [ColumnEditSpecial] NVarChar(MAX) NULL 
 , [ColumnsFormatExtend] NVarChar(MAX) NULL 
 , [AllowDelete] Bit NULL 
 , [PaintCells] NVarChar(MAX) NULL 
 , [LayoutDataConfig] VarBinary(MAX) NULL 
 , [ColumnDataType] NVarChar(MAX) NULL 
 , [ProcBeforeSave] NVarChar(MAX) NULL 
 , [ProcAfterSave] NVarChar(MAX) NULL 
 , [IsLayoutParam] Bit NULL 
 , [ColumnSearch] NVarChar(MAX) NULL 
 , [AlwaysReloadColumn] Bit NULL 
 , [NotReloadAfterSave] Bit NULL 
 , [ColumnChangeEventProc] NVarChar(MAX) NULL 
 , [RowFontStyle] NVarChar(MAX) NULL 
 , [isWrapHeader] Bit NULL 
 , [ContextMenuIDs] NVarChar(MAX) NULL 
 , [ColumnNotLock] NVarChar(MAX) NULL 
 , [Import] NVarChar(MAX) NULL 
 , [ProcBeforeDelete] NVarChar(MAX) NULL 
 , [ProcAfterDelete] NVarChar(MAX) NULL 
 , [ConditionFormatting] VarBinary(MAX) NULL 
 , [ViewGridInShowLayout] Bit NULL 
 , [ShortcutsControl] NVarChar(MAX) NULL 
 , [LblMessage] NVarChar(MAX) NULL 
 , [MinWidthColumn] NVarChar(MAX) NULL 
 , [IsLayoutCommandButton] Bit NULL 
 , [LayoutDataConfigCrazy] VarBinary(MAX) NULL 
 , [NavigatorProcedure] NVarChar(MAX) NULL 
 , [ValidateRowConditions] NVarChar(MAX) NULL 
 , [ExecuteProcBeforeLoadData] NVarChar(MAX) NULL 
 , [LayoutDataConfigWeb] VarBinary(MAX) NULL 
 , [LayoutDataConfigMobile] VarBinary(MAX) NULL 
 , [GridBandConfig] NVarChar(MAX) NULL 
 , [ControlStateProcedure] NVarChar(MAX) NULL 
 , [ValidationProcedures] NVarChar(MAX) NULL 
 , [ReadonlyCellCondition] NVarChar(MAX) NULL 
 , [ComboboxColumn_BackupForTransfer] NVarChar(MAX) NULL 
 , [IsOpenSubForm] Bit NULL 
 , [Validation] NVarChar(MAX) NULL 
 , [ControlHiddenInShowLayout] NVarChar(MAX) NULL 
 , [IgnoreColumnOrder] Bit NULL 
 , [IgnoreLock] Bit NULL 
 , [ReadonlyCellCondition_Backup] NVarChar(MAX) NULL 
 , [SubDataSettingNames] NVarChar(MAX) NULL 
 , [IsViewReportForm] Bit NULL 
 , [ExportSeparateButton] Bit NULL 
 , [HashLayoutConfig] NVarChar(MAX) NULL 
 , [LayoutDataConfigFillter] VarBinary(MAX) NULL 
 , [LayoutParamConfig] VarBinary(MAX) NULL 
 , [OpenFormLink] NVarChar(MAX) NULL 
 , [SaveTableByBulk] NVarChar(MAX) NULL 
 , [IsNotPaintSaturday] Bit NULL 
 , [IsNotPaintSunday] Bit NULL 
 , [IsViewWeekName] Bit NULL 
 , [IgnoreCheckEECode] Bit NULL 
 , [ParadiseCommand] Int NULL 
 , [Labels] NVarChar(MAX) NULL 
 , [ColumnHideExport] NVarChar(MAX) NULL 
 , [ColumnWidthCalcData] Bit NULL 
 , [HideHeaderFilterButton] Bit NULL 
 , [HideColumnGrid] Bit NULL 
 , [TypeGrid] Int NULL 
 , [ProcBeforeAdd] NVarChar(MAX) NULL 
 , [ProcAfterAdd] NVarChar(MAX) NULL 
 , [ExecuteProcAfterLoadData] NVarChar(MAX) NULL 
 , [LayoutDataConfigColumnView] VarBinary(MAX) NULL 
 , [LayoutDataConfigCardView] VarBinary(MAX) NULL 
 , [HideFooter] Int NULL 
 , [IsFilterBox] Bit NULL 
 , [GetDefaultParamFromDB] Bit NULL 
 , [TaskTimeLine] Int NULL 
 , [HtmlCell] Int NULL 
 , [MinPageSizeGrid] Int NULL 
 , [ClickHereToAddNew] Int NULL 
 , [IgnoreQuestion] Bit NULL 
 , [FormLayoutJS] Int NULL 
 , [CheckBoxText] Int NULL 
 , [ColumnHideMobile] NVarChar(MAX) NULL 
 , [LayoutMobileLocalConfig] VarBinary(MAX) NULL 
 , [ViewMode] Int NULL 
 , [Mode] Int NULL 
 , [Template] NVarChar(MAX) NULL 
 , [NotResizeImage] Int NULL 
 , [DeleteOneRowReloadData] Int NULL 
 , [AutoHeightGrid] Bit NULL 
 , [ProcFileName] NVarChar(MAX) NULL 
 , [HeightImagePercentHeightFont] Float NULL 
 , [ColumnMinWidthPercent] NVarChar(MAX) NULL 
 , [GridViewAutoAddRow] Int NULL 
 , [GridViewNewItemRowPosition] Int NULL 
 , [LastColumnRemainingWidth] Int NULL 
 , [IsAutoSave] Bit NULL 
 , [VirtualColumn] NVarChar(MAX) NULL 
 , [GridTypeview] Int NULL 
 , [selectionMode] Int NULL 
 , [deleteMode] Int NULL 
 , [ClearDataBeforeLoadData] Int NULL 
 , [LockSort] Bit NULL 
 , [HightLightControlProc] NVarChar(MAX) NULL 
 , [ScriptInit0] NVarChar(MAX) NULL 
 , [ScriptInit1] NVarChar(MAX) NULL 
 , [ScriptInit2] NVarChar(MAX) NULL 
 , [ScriptInit3] NVarChar(MAX) NULL 
 , [ScriptInit4] NVarChar(MAX) NULL 
 , [ScriptInit5] NVarChar(MAX) NULL 
 , [ScriptInit6] NVarChar(MAX) NULL 
 , [ScriptInit7] NVarChar(MAX) NULL 
 , [ScriptInit8] NVarChar(MAX) NULL 
 , [ScriptInit9] NVarChar(MAX) NULL 
 , [FontSizeZoom0] Float NULL 
 , [FontSizeZoom1] Float NULL 
 , [FontSizeZoom2] Float NULL 
 , [FontSizeZoom3] Float NULL 
 , [FontSizeZoom4] Float NULL 
 , [FontSizeZoom5] Float NULL 
 , [FontSizeZoom6] Float NULL 
 , [FontSizeZoom7] Float NULL 
 , [FontSizeZoom8] Float NULL 
 , [FontSizeZoom9] Float NULL 
 , [NotBuildForm] Bit NULL 
 , [NotUseCancelButton] Bit NULL 
 , [GridUICompact] Float NULL 
 , [DisableFilterColumns] NVarChar(MAX) NULL 
 , [DisableFilterAll] Int NULL 
)

 INSERT INTO #tblDataSetting([TableName],[ViewName],[AllowAdd],[ReadOnlyColumns],[ComboboxColumns],[ColumnOrderBy],[ColumnHide],[ReadOnly],[TableEditorName],[IsProcedure],[PaintColumns],[FormatFontColumns],[PaintRows],[IsProcessForm],[IsShowLayout],[IsBatch],[LoadDataAfterShow],[GroupColumns],[FixedColumns],[ExportName],[CheckLockAttStore],[RptTemplate],[spAction],[DefaultValue],[FilterColumn],[IsEditForm],[ColumnEditSpecial],[ColumnsFormatExtend],[AllowDelete],[PaintCells],[LayoutDataConfig],[ColumnDataType],[ProcBeforeSave],[ProcAfterSave],[IsLayoutParam],[ColumnSearch],[AlwaysReloadColumn],[NotReloadAfterSave],[ColumnChangeEventProc],[RowFontStyle],[isWrapHeader],[ContextMenuIDs],[ColumnNotLock],[Import],[ProcBeforeDelete],[ProcAfterDelete],[ConditionFormatting],[ViewGridInShowLayout],[ShortcutsControl],[LblMessage],[MinWidthColumn],[IsLayoutCommandButton],[LayoutDataConfigCrazy],[NavigatorProcedure],[ValidateRowConditions],[ExecuteProcBeforeLoadData],[LayoutDataConfigWeb],[LayoutDataConfigMobile],[GridBandConfig],[ControlStateProcedure],[ValidationProcedures],[ReadonlyCellCondition],[ComboboxColumn_BackupForTransfer],[IsOpenSubForm],[Validation],[ControlHiddenInShowLayout],[IgnoreColumnOrder],[IgnoreLock],[ReadonlyCellCondition_Backup],[SubDataSettingNames],[IsViewReportForm],[ExportSeparateButton],[HashLayoutConfig],[LayoutDataConfigFillter],[LayoutParamConfig],[OpenFormLink],[SaveTableByBulk],[IsNotPaintSaturday],[IsNotPaintSunday],[IsViewWeekName],[IgnoreCheckEECode],[ParadiseCommand],[Labels],[ColumnHideExport],[ColumnWidthCalcData],[HideHeaderFilterButton],[HideColumnGrid],[TypeGrid],[ProcBeforeAdd],[ProcAfterAdd],[ExecuteProcAfterLoadData],[LayoutDataConfigColumnView],[LayoutDataConfigCardView],[HideFooter],[IsFilterBox],[GetDefaultParamFromDB],[TaskTimeLine],[HtmlCell],[MinPageSizeGrid],[ClickHereToAddNew],[IgnoreQuestion],[FormLayoutJS],[CheckBoxText],[ColumnHideMobile],[LayoutMobileLocalConfig],[ViewMode],[Mode],[Template],[NotResizeImage],[DeleteOneRowReloadData],[AutoHeightGrid],[ProcFileName],[HeightImagePercentHeightFont],[ColumnMinWidthPercent],[GridViewAutoAddRow],[GridViewNewItemRowPosition],[LastColumnRemainingWidth],[IsAutoSave],[VirtualColumn],[GridTypeview],[selectionMode],[deleteMode],[ClearDataBeforeLoadData],[LockSort],[HightLightControlProc],[ScriptInit0],[ScriptInit1],[ScriptInit2],[ScriptInit3],[ScriptInit4],[ScriptInit5],[ScriptInit6],[ScriptInit7],[ScriptInit8],[ScriptInit9],[FontSizeZoom0],[FontSizeZoom1],[FontSizeZoom2],[FontSizeZoom3],[FontSizeZoom4],[FontSizeZoom5],[FontSizeZoom6],[FontSizeZoom7],[FontSizeZoom8],[FontSizeZoom9],[NotBuildForm],[NotUseCancelButton],[GridUICompact],[DisableFilterColumns],[DisableFilterAll])
Select  N'sp_custominputimportmonthly' as [TableName],N'sp_custominputimportmonthly' as [ViewName],N'True' as [AllowAdd],N'' as [ReadOnlyColumns],N'' as [ComboboxColumns],N'EmployeeID&0,FullName&1,Remark&2,16&3,17&4' as [ColumnOrderBy],N'Month,Year,IsReadOnlyRow,dtftxxENGColumns' as [ColumnHide],N'False' as [ReadOnly],N'tblCustomInputImportMonthly' as [TableEditorName],N'True' as [IsProcedure],N'' as [PaintColumns],N'' as [FormatFontColumns],N'' as [PaintRows],N'False' as [IsProcessForm],N'False' as [IsShowLayout],N'False' as [IsBatch],N'True' as [LoadDataAfterShow],N'' as [GroupColumns],N'EmployeeID,FullName' as [FixedColumns],N'' as [ExportName],N'' as [CheckLockAttStore],N'' as [RptTemplate],N'' as [spAction],N'' as [DefaultValue],N'' as [FilterColumn],N'False' as [IsEditForm],N'' as [ColumnEditSpecial],N'' as [ColumnsFormatExtend],N'True' as [AllowDelete],N'' as [PaintCells],as [LayoutDataConfig],N'' as [ColumnDataType],N'' as [ProcBeforeSave],N'' as [ProcAfterSave],N'False' as [IsLayoutParam],N'' as [ColumnSearch],N'False' as [AlwaysReloadColumn],N'False' as [NotReloadAfterSave],N'' as [ColumnChangeEventProc],N'' as [RowFontStyle],N'False' as [isWrapHeader],N'' as [ContextMenuIDs],N'' as [ColumnNotLock],N'' as [Import],N'' as [ProcBeforeDelete],N'' as [ProcAfterDelete],0x1F8B08000000000004007D8FB10AC24010447BC17F38D6564CAECF052BB1B032106D97B898C34BEED8EC45E2AF59F849FE82C1602188DD30CC1B669EF7477614C682D8A2B33762D51377D6B706F42A058521385BA1BC9DD2D215F2F94CA92CB00FC432A8161B32B0D8E1E0A394130B2AF9972A2A74B4C14A3C43BED6CB833D496DF4A8B664CFB5189D251FF267CFC67383B28F8E3A50B6BBD060403812A81E5D1C03E9B4204BBEBFE52FA791B64FEF000000 as [ConditionFormatting],N'False' as [ViewGridInShowLayout],N'' as [ShortcutsControl],N'' as [LblMessage],N'' as [MinWidthColumn],N'True' as [IsLayoutCommandButton],NULL as [LayoutDataConfigCrazy],N'' as [NavigatorProcedure],N'' as [ValidateRowConditions],N'sp_processAllAllowance' as [ExecuteProcBeforeLoadData],NULL as [LayoutDataConfigWeb],NULL as [LayoutDataConfigMobile],N'' as [GridBandConfig],N'' as [ControlStateProcedure],N'' as [ValidationProcedures],N'' as [ReadonlyCellCondition],N'' as [ComboboxColumn_BackupForTransfer],N'False' as [IsOpenSubForm],N'' as [Validation],N'' as [ControlHiddenInShowLayout],N'False' as [IgnoreColumnOrder],N'False' as [IgnoreLock],N'' as [ReadonlyCellCondition_Backup],N'sp_ProcessSeniorityAllowance' as [SubDataSettingNames],N'False' as [IsViewReportForm],N'False' as [ExportSeparateButton],N'' as [HashLayoutConfig],NULL as [LayoutDataConfigFillter],NULL as [LayoutParamConfig],N'' as [OpenFormLink],N'' as [SaveTableByBulk],N'True' as [IsNotPaintSaturday],N'True' as [IsNotPaintSunday],N'False' as [IsViewWeekName],N'False' as [IgnoreCheckEECode],N'0' as [ParadiseCommand],N'' as [Labels],N'' as [ColumnHideExport],N'False' as [ColumnWidthCalcData],N'False' as [HideHeaderFilterButton],N'False' as [HideColumnGrid],N'0' as [TypeGrid],N'' as [ProcBeforeAdd],N'' as [ProcAfterAdd],N'' as [ExecuteProcAfterLoadData],NULL as [LayoutDataConfigColumnView],NULL as [LayoutDataConfigCardView],N'0' as [HideFooter],N'False' as [IsFilterBox],N'False' as [GetDefaultParamFromDB],N'0' as [TaskTimeLine],N'0' as [HtmlCell],N'0' as [MinPageSizeGrid],N'0' as [ClickHereToAddNew],N'False' as [IgnoreQuestion],N'0' as [FormLayoutJS],N'0' as [CheckBoxText],N'' as [ColumnHideMobile],NULL as [LayoutMobileLocalConfig],N'0' as [ViewMode],N'0' as [Mode],N'' as [Template],N'0' as [NotResizeImage],N'0' as [DeleteOneRowReloadData],N'False' as [AutoHeightGrid],N'' as [ProcFileName],N'0' as [HeightImagePercentHeightFont],N'' as [ColumnMinWidthPercent],N'0' as [GridViewAutoAddRow],N'0' as [GridViewNewItemRowPosition],N'0' as [LastColumnRemainingWidth],N'False' as [IsAutoSave],N'' as [VirtualColumn],N'0' as [GridTypeview],N'0' as [selectionMode],N'0' as [deleteMode],N'0' as [ClearDataBeforeLoadData],N'False' as [LockSort],N'' as [HightLightControlProc],N'' as [ScriptInit0],N'' as [ScriptInit1],N'' as [ScriptInit2],N'' as [ScriptInit3],N'' as [ScriptInit4],N'' as [ScriptInit5],N'' as [ScriptInit6],N'' as [ScriptInit7],N'' as [ScriptInit8],N'' as [ScriptInit9],N'0' as [FontSizeZoom0],N'0' as [FontSizeZoom1],N'0' as [FontSizeZoom2],N'0' as [FontSizeZoom3],N'0' as [FontSizeZoom4],N'0' as [FontSizeZoom5],N'0' as [FontSizeZoom6],N'0' as [FontSizeZoom7],N'0' as [FontSizeZoom8],N'0' as [FontSizeZoom9],N'False' as [NotBuildForm],N'False' as [NotUseCancelButton],N'0' as [GridUICompact],N'' as [DisableFilterColumns],N'0' as [DisableFilterAll]

EXEC sp_SaveData  @TableNameTmp = '#tblDataSetting' , @TableName = 'tblDataSetting' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblDataSetting') IS NOT NULL DROP TABLE #tblDataSetting
--#endregion _
GO

--#region tblDataSettingLayout
IF OBJECT_ID('tempdb..#tblDataSettingLayout') IS NOT NULL DROP TABLE #tblDataSettingLayout
  create table #tblDataSettingLayout (
   [TableName] NVarChar(MAX) NULL 
 , [Name] NVarChar(MAX) NULL 
 , [ControlName] NVarChar(MAX) NULL 
 , [NamePa] NVarChar(MAX) NULL 
 , [TabbedGroupParentName] NVarChar(MAX) NULL 
 , [Type] NVarChar(MAX) NULL 
 , [Lx] Int NULL 
 , [Ly] Int NULL 
 , [Sx] Int NULL 
 , [Sy] Int NULL 
 , [ShowCaption] Int NULL 
 , [Padding] Int NULL 
 , [TextLocation] NVarChar(MAX) NULL 
 , [GroupBordersVisible] Int NULL 
 , [TypeLayout] NVarChar(MAX) NULL 
 , [Spacing] Int NULL 
 , [BackColor] NVarChar(MAX) NULL 
 , [ControlType] NVarChar(MAX) NULL 
 , [ColumnSpan] Int NULL 
 , [RowSpan] Int NULL 
 , [CaptionHorizontalAlign] NVarChar(MAX) NULL 
 , [CaptionVerticalAlign] NVarChar(MAX) NULL 
 , [WidthPercentage] Int NULL 
 , [FixMinSize] Bit NULL 
 , [AlignContent] NVarChar(MAX) NULL 
 , [BorderBottomColor] NVarChar(MAX) NULL 
 , [BorderBottomSize] NVarChar(MAX) NULL 
 , [BorderColor] NVarChar(MAX) NULL 
 , [BorderLeftColor] NVarChar(MAX) NULL 
 , [BorderLeftSize] NVarChar(MAX) NULL 
 , [BorderRightColor] NVarChar(MAX) NULL 
 , [BorderRightSize] NVarChar(MAX) NULL 
 , [BorderSize] NVarChar(MAX) NULL 
 , [BorderTopColor] NVarChar(MAX) NULL 
 , [BorderTopSize] NVarChar(MAX) NULL 
 , [BorderVisible] Bit NULL 
 , [ControlBackColor] NVarChar(MAX) NULL 
 , [ControlBorderBottomColor] NVarChar(MAX) NULL 
 , [ControlBorderBottomSize] NVarChar(MAX) NULL 
 , [ControlBorderColor] NVarChar(MAX) NULL 
 , [ControlBorderLeftColor] NVarChar(MAX) NULL 
 , [ControlBorderLeftSize] NVarChar(MAX) NULL 
 , [ControlBorderRightColor] NVarChar(MAX) NULL 
 , [ControlBorderRightSize] NVarChar(MAX) NULL 
 , [ControlBorderSize] NVarChar(MAX) NULL 
 , [ControlBorderTopColor] NVarChar(MAX) NULL 
 , [ControlBorderTopSize] NVarChar(MAX) NULL 
 , [ControlForeColor] NVarChar(MAX) NULL 
 , [ControlHorizontalAlign] NVarChar(MAX) NULL 
 , [ControlPadding] Int NULL 
 , [ControlVerticalAlign] NVarChar(MAX) NULL 
 , [FontSize] NVarChar(MAX) NULL 
 , [IconName] NVarChar(MAX) NULL 
 , [ItemBackColor] NVarChar(MAX) NULL 
 , [ItemBorderBottomColor] NVarChar(MAX) NULL 
 , [ItemBorderBottomSize] NVarChar(MAX) NULL 
 , [ItemBorderColor] NVarChar(MAX) NULL 
 , [ItemBorderLeftColor] NVarChar(MAX) NULL 
 , [ItemBorderLeftSize] NVarChar(MAX) NULL 
 , [ItemBorderRightColor] NVarChar(MAX) NULL 
 , [ItemBorderRightSize] NVarChar(MAX) NULL 
 , [ItemBorderSize] NVarChar(MAX) NULL 
 , [ItemBorderTopColor] NVarChar(MAX) NULL 
 , [ItemBorderTopSize] NVarChar(MAX) NULL 
 , [ItemForeColor] NVarChar(MAX) NULL 
 , [ItemPadding] Int NULL 
 , [MinGridPageSize] Int NULL 
 , [NotClientVisible] Bit NULL 
 , [NullTextMessageID] NVarChar(MAX) NULL 
 , [FullPageEmpty] Bit NULL 
 , [PaddingTop] Int NULL 
 , [PaddingLeft] Int NULL 
 , [PaddingBottom] Int NULL 
 , [PaddingRight] Int NULL 
 , [ControlCellPadding] Int NULL 
 , [MaxWidth] Float NULL 
 , [MinWidth] Float NULL 
 , [TabPageOrder] Int NULL 
 , [SelectedTabPageIndex] Int NULL 
 , [FixWidthClient] Int NULL 
 , [ErrorMessage] NVarChar(MAX) NULL 
 , [borderRadius] NVarChar(MAX) NULL 
 , [boxShadow] NVarChar(MAX) NULL 
 , [IsValidation] Bit NULL 
 , [HorizontalAlign] NVarChar(MAX) NULL 
 , [maxHeight] Int NULL 
 , [TextAlignMode] Int NULL 
 , [minHeight] Int NULL 
 , [HeightPercentageClient] Float NULL 
 , [ControlBorderRadius] NVarChar(MAX) NULL 
 , [ControlBoxShadow] NVarChar(MAX) NULL 
 , [ControlPaddingBottom] Float NULL 
 , [ControlPaddingLeft] Float NULL 
 , [ControlPaddingRight] Float NULL 
 , [ControlPaddingTop] Float NULL 
 , [ForeColor] NVarChar(MAX) NULL 
 , [CaptionWrap] Int NULL 
 , [LocationID] Int NULL 
 , [ContainerType] Int NULL 
 , [ControlNoBorder] Bit NULL 
 , [BackgroundImage] VarBinary(MAX) NULL 
 , [labelMode] Int NULL 
 , [selectionMode] Int NULL 
 , [deleteMode] Int NULL 
)

 INSERT INTO #tblDataSettingLayout([TableName],[Name],[ControlName],[NamePa],[TabbedGroupParentName],[Type],[Lx],[Ly],[Sx],[Sy],[ShowCaption],[Padding],[TextLocation],[GroupBordersVisible],[TypeLayout],[Spacing],[BackColor],[ControlType],[ColumnSpan],[RowSpan],[CaptionHorizontalAlign],[CaptionVerticalAlign],[WidthPercentage],[FixMinSize],[AlignContent],[BorderBottomColor],[BorderBottomSize],[BorderColor],[BorderLeftColor],[BorderLeftSize],[BorderRightColor],[BorderRightSize],[BorderSize],[BorderTopColor],[BorderTopSize],[BorderVisible],[ControlBackColor],[ControlBorderBottomColor],[ControlBorderBottomSize],[ControlBorderColor],[ControlBorderLeftColor],[ControlBorderLeftSize],[ControlBorderRightColor],[ControlBorderRightSize],[ControlBorderSize],[ControlBorderTopColor],[ControlBorderTopSize],[ControlForeColor],[ControlHorizontalAlign],[ControlPadding],[ControlVerticalAlign],[FontSize],[IconName],[ItemBackColor],[ItemBorderBottomColor],[ItemBorderBottomSize],[ItemBorderColor],[ItemBorderLeftColor],[ItemBorderLeftSize],[ItemBorderRightColor],[ItemBorderRightSize],[ItemBorderSize],[ItemBorderTopColor],[ItemBorderTopSize],[ItemForeColor],[ItemPadding],[MinGridPageSize],[NotClientVisible],[NullTextMessageID],[FullPageEmpty],[PaddingTop],[PaddingLeft],[PaddingBottom],[PaddingRight],[ControlCellPadding],[MaxWidth],[MinWidth],[TabPageOrder],[SelectedTabPageIndex],[FixWidthClient],[ErrorMessage],[borderRadius],[boxShadow],[IsValidation],[HorizontalAlign],[maxHeight],[TextAlignMode],[minHeight],[HeightPercentageClient],[ControlBorderRadius],[ControlBoxShadow],[ControlPaddingBottom],[ControlPaddingLeft],[ControlPaddingRight],[ControlPaddingTop],[ForeColor],[CaptionWrap],[LocationID],[ContainerType],[ControlNoBorder],[BackgroundImage],[labelMode],[selectionMode],[deleteMode])
Select  N'sp_custominputimportmonthly' as [TableName],N'btnexport' as [Name],N'btnexport' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'803' as [Lx],N'774' as [Ly],N'99' as [Sx],N'33' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'7' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'Export' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'btnfwadd' as [Name],N'btnfwadd' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'395' as [Lx],N'774' as [Ly],N'123' as [Sx],N'33' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'8' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'-13395661' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'-1' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'AddNew' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'btnfwdelete' as [Name],N'btnfwdelete' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'774' as [Ly],N'109' as [Sx],N'33' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleButton_FWDelete' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'7' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'-1490379' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'-1' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'Delete' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'btnfwreset' as [Name],N'btnfwreset' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'109' as [Lx],N'774' as [Ly],N'118' as [Sx],N'33' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'8' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'-16384' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'-1' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'refresh' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'btnfwsave' as [Name],N'btnfwsave' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'518' as [Lx],N'774' as [Ly],N'285' as [Sx],N'33' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'20' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'-14344098' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'-1' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'Save' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'item0' as [Name],N'' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'' as [Type],N'902' as [Lx],N'774' as [Ly],N'476' as [Sx],N'33' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'38' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'item1' as [Name],N'' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'' as [Type],N'227' as [Lx],N'774' as [Ly],N'168' as [Sx],N'33' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'12' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'lbl@month' as [Name],N'cbx@month' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'209' as [Lx],N'0' as [Ly],N'198' as [Sx],N'27' as [Sy],N'1' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'14' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'lbl@optionview' as [Name],N'cbx@optionview' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'617' as [Lx],N'0' as [Ly],N'256' as [Sx],N'27' as [Sy],N'1' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'18' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],NULL as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],NULL as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],NULL as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],N'0' as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'lbl@year' as [Name],N'cbx@year' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'0' as [Ly],N'209' as [Sx],N'27' as [Sy],N'1' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'15' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'lblfilter' as [Name],N'txtfilter' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'873' as [Lx],N'0' as [Ly],N'505' as [Sx],N'27' as [Sy],N'1' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'PopupContainerEdit' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'38' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'lblreload' as [Name],N'btnreload' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'407' as [Lx],N'0' as [Ly],N'210' as [Sx],N'27' as [Sy],N'0' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'ParadiseSimpleButtonBase' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'15' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'-13395661' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'-1' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'lbltableeditor' as [Name],N'grdtableeditor' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'27' as [Ly],N'1378' as [Sx],N'747' as [Sy],N'0' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'GridControl' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_custominputimportmonthly' as [TableName],N'root' as [Name],N'' as [ControlName],N'' as [NamePa],N'' as [TabbedGroupParentName],N'g' as [Type],N'0' as [Lx],N'0' as [Ly],N'1378' as [Sx],N'807' as [Sy],N'0' as [ShowCaption],N'0' as [Padding],N'Top' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'0' as [PaddingTop],N'0' as [PaddingLeft],N'0' as [PaddingBottom],N'0' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'-1' as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],NULL as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode]

DECLARE @sql VARCHAR(MAX) = 'TableName'+char(10)+'TypeLayout'
EXEC sp_SaveData  @TableNameTmp = '#tblDataSettingLayout' , @TableName = 'tblDataSettingLayout' , @Command = 'DeleteNot',@ColumnDeleteNot=@sql , @IsDropTableTmp =0,@IsPrint=0
EXEC sp_SaveData  @TableNameTmp = '#tblDataSettingLayout' , @TableName = 'tblDataSettingLayout' , @Command = 'insert,update', @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblDataSettingLayout') IS NOT NULL DROP TABLE #tblDataSettingLayout
--#endregion _
GO

--#region tblMD_Message
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message 
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
  create table #tblMD_Message (
   [MessageID] NVarChar(MAX) NULL 
 , [Language] NVarChar(MAX) NULL 
 , [Content] NVarChar(MAX) NULL 
 , [Frequency] BigInt NULL 
 , [IgnorePending] Bit NULL 
)

 INSERT INTO #tblMD_Message([MessageID],[Language],[Content],[Frequency],[IgnorePending])
Select  N'sp_custominputimportmonthly.cbx@Month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.cbx@OptionView' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.cbx@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.item0' as [MessageID],N'VN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.item1' as [MessageID],N'VN' as [Language],N'item1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.lbl@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.lbl@optionview' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.lbl@year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],NULL as [Frequency],NULL as [IgnorePending]
EXEC sp_SaveData  @TableNameTmp = '#tblMD_Message' , @TableName = 'tblMD_Message' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
--#endregion _
GO

--#region tblMD_Message
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message 
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
  create table #tblMD_Message (
   [MessageID] NVarChar(MAX) NULL 
 , [Language] NVarChar(MAX) NULL 
 , [Content] NVarChar(MAX) NULL 
 , [Frequency] BigInt NULL 
 , [IgnorePending] Bit NULL 
)

 INSERT INTO #tblMD_Message([MessageID],[Language],[Content],[Frequency],[IgnorePending])
Select  N'0' as [MessageID],N'CN' as [Language],N'零' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0' as [MessageID],N'En' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0' as [MessageID],N'KR' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0' as [MessageID],N'vn' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0.vldt' as [MessageID],N'En' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0.vldt' as [MessageID],N'KR' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0.vldt' as [MessageID],N'vn' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'1' as [MessageID],N'EN' as [Language],N'Seniority allowance (long term)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'1' as [MessageID],N'VN' as [Language],N'Seniority allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'1.vldt' as [MessageID],N'EN' as [Language],N'1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'1.vldt' as [MessageID],N'KR' as [Language],N'1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'1.vldt' as [MessageID],N'VN' as [Language],N'1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16' as [MessageID],N'EN' as [Language],N'[Foreign] Meal allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16' as [MessageID],N'VN' as [Language],N'[Foreign] Meal allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16.vldt' as [MessageID],N'EN' as [Language],N'16' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16.vldt' as [MessageID],N'KR' as [Language],N'16' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16.vldt' as [MessageID],N'VN' as [Language],N'16' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17' as [MessageID],N'EN' as [Language],N'[Foreign] House allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17' as [MessageID],N'VN' as [Language],N'[Foreign] House allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17.vldt' as [MessageID],N'EN' as [Language],N'17' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17.vldt' as [MessageID],N'KR' as [Language],N'17' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17.vldt' as [MessageID],N'VN' as [Language],N'17' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'2' as [MessageID],N'EN' as [Language],N'Production bonus' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'2' as [MessageID],N'VN' as [Language],N'Production bonus' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'2.vldt' as [MessageID],N'EN' as [Language],N'2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'2.vldt' as [MessageID],N'KR' as [Language],N'2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'2.vldt' as [MessageID],N'VN' as [Language],N'2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'3' as [MessageID],N'EN' as [Language],N'Foreign language allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'3' as [MessageID],N'VN' as [Language],N'Foreign language allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'3.vldt' as [MessageID],N'EN' as [Language],N'3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'3.vldt' as [MessageID],N'KR' as [Language],N'3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'3.vldt' as [MessageID],N'VN' as [Language],N'3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'4' as [MessageID],N'EN' as [Language],N'Environmental allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'4' as [MessageID],N'VN' as [Language],N'Environmental allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'4.vldt' as [MessageID],N'EN' as [Language],N'4' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'4.vldt' as [MessageID],N'KR' as [Language],N'4' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'4.vldt' as [MessageID],N'VN' as [Language],N'4' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'CN' as [Language],N'导出到Excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'EN' as [Language],N'Export to excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'JP' as [Language],N'リセット' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'KO' as [Language],N'엑셀로 내보내기' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'KR' as [Language],N'Export to excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'VN' as [Language],N'Xuất excel' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWAdd' as [MessageID],N'CN' as [Language],N'新增' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWAdd' as [MessageID],N'EN' as [Language],N'Add new' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWAdd' as [MessageID],N'JP' as [Language],N'追加' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWAdd' as [MessageID],N'KO' as [Language],N'새로 추가' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWAdd' as [MessageID],N'KR' as [Language],N'Add new' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWAdd' as [MessageID],N'VN' as [Language],N'Thêm mới' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWDelete' as [MessageID],N'CN' as [Language],N'删掉' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWDelete' as [MessageID],N'EN' as [Language],N'Delete' as [Content],N'36' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWDelete' as [MessageID],N'JP' as [Language],N'削除' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWDelete' as [MessageID],N'KO' as [Language],N'삭제' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWDelete' as [MessageID],N'KR' as [Language],N'Delete' as [Content],N'36' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWDelete' as [MessageID],N'VN' as [Language],N'Xóa bỏ' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'CN' as [Language],N'重做' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'EN' as [Language],N'Reset' as [Content],N'34' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'JP' as [Language],N'リセット' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'KO' as [Language],N'재실행' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'KR' as [Language],N'Reset' as [Content],N'34' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'VN' as [Language],N'Làm lại' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'CN' as [Language],N'保存数据' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'EN' as [Language],N'Save' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'JP' as [Language],N'保存' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'KO' as [Language],N'저장' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'BtnfwSave' as [MessageID],N'KR' as [Language],N'저장' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'VN' as [Language],N'Lưu' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'CN' as [Language],N'重新載入資料' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'EN' as [Language],N'Refresh' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'KO' as [Language],N'새로 고침' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'BtnReload' as [MessageID],N'KR' as [Language],N'새로 만들기' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'VN' as [Language],N'Làm Mới' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'CN' as [Language],N'月份' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'KO' as [Language],N'달' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@OptionView' as [MessageID],N'EN' as [Language],N'Option' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@OptionView' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'CN' as [Language],N'年' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'KO' as [Language],N'년' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'CN' as [Language],N'员工编号' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'EN' as [Language],N'Employee ID' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID' as [MessageID],N'JP' as [Language],N'従業員コード' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'KO' as [Language],N'직원 코드' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID' as [MessageID],N'KR' as [Language],N'사원 번호' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'VN' as [Language],N'Mã nhân viên' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid.vldt' as [MessageID],N'EN' as [Language],N'Employee code' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID.vldt' as [MessageID],N'JP' as [Language],N'従業員コード' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID.vldt' as [MessageID],N'KR' as [Language],N'사원 번호' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid.vldt' as [MessageID],N'VN' as [Language],N'Mã nhân viên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'CN' as [Language],N'姓名' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'EN' as [Language],N'Full name' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'JP' as [Language],N'フルネーム' as [Content],N'400' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'KO' as [Language],N'직원 이름' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'KR' as [Language],N'날짜' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'VN' as [Language],N'Tên nhân viên' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'EN' as [Language],N'Staff''s name' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'JP' as [Language],N'フルネーム' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'KR' as [Language],N'날짜' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'VN' as [Language],N'Tên nhân viên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'EN' as [Language],N'Training course list' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'KR' as [Language],N'Training course list' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'VN' as [Language],N'Danh sách đơn chờ duyệt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'CN' as [Language],N'修改密码' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'EN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'KO' as [Language],N'월페이퍼' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'KR' as [Language],N'승인 정보' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'VN' as [Language],N'Hình nền' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'CN' as [Language],N'年假' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'EN' as [Language],N'annual leave' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'KO' as [Language],N'연차' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'KR' as [Language],N'신청 명단' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item1' as [MessageID],N'VN' as [Language],N'Nghỉ phép năm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'CN' as [Language],N'月份' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'KO' as [Language],N'달' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@optionview' as [MessageID],N'CN' as [Language],N'选配' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@optionview' as [MessageID],N'EN' as [Language],N'Option' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@optionview' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'CN' as [Language],N'年' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'KO' as [Language],N'년' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'CN' as [Language],N'搜索' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'EN' as [Language],N'Search' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'KO' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'KR' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'VN' as [Language],N'Tìm kiếm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'CN' as [Language],N'影片播放清单' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'EN' as [Language],N'Resident address' as [Content],N'2' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'KO' as [Language],N'코드' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'KR' as [Language],N'Resident address' as [Content],N'2' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'VN' as [Language],N'Làm Mới' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'CN' as [Language],N'<color = crimson>如果更改标题，请单击新行以添加。生效日期无法更正，因此，如果生效日期不正确，请删除错误的行，然后添加一个新行以进行更正。</ color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'EN' as [Language],N'<color = crimson> If you change the title, click on a new line to add it. The effective date cannot be edited, so if the effective date is wrong, delete the wrong line, then add a new line to correct. </color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'KO' as [Language],N'<color = crimson> 제목을 변경하는 경우 추가 할 새 줄을 클릭하십시오. 유효 날짜를 편집 할 수 없으므로 유효 날짜가 틀린 경우 잘못된 줄을 삭제 한 다음 올바른 새 줄을 추가하십시오. </ color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'KR' as [Language],N'<color = crimson> If you change the title, click on a new line to add it. The effective date cannot be edited, so if the effective date is wrong, delete the wrong line, then add a new line to correct. </color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'VN' as [Language],N'<color=crimson>Nếu thay đổi chức danh thì bấm vào dòng mới để thêm.Ngày hiệu lực không sửa được nên nếu ngày hiệu lực sai thì xóa dòng sai đi, sau đó thêm 1 dòng mới cho đúng.</color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL104' as [MessageID],N'CN' as [Language],N'每月自定义数据导入' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL104' as [MessageID],N'en' as [Language],N'Custom input import monthly' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL104' as [MessageID],N'VN' as [Language],N'Monthly allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Remark' as [MessageID],N'CN' as [Language],N'注意' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Remark' as [MessageID],N'EN' as [Language],N'Remarks' as [Content],N'7' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Remark' as [MessageID],N'KR' as [Language],N'Remarks' as [Content],N'7' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Remark' as [MessageID],N'VN' as [Language],N'Ghi chú' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Remark.vldt' as [MessageID],N'CN' as [Language],N'注意' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Remark.vldt' as [MessageID],N'EN' as [Language],N'Remarks' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Remark.vldt' as [MessageID],N'KR' as [Language],N'Remarks' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Remark.vldt' as [MessageID],N'VN' as [Language],N'Ghi chú' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'CN' as [Language],N'根目錄' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'EN' as [Language],N'Root' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'KR' as [Language],N'Resident address' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'VN' as [Language],N'1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.cbx@Month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.cbx@OptionView' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.cbx@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.item0' as [MessageID],N'VN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.item1' as [MessageID],N'VN' as [Language],N'item1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.item2' as [MessageID],N'VN' as [Language],N'item2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.item3' as [MessageID],N'VN' as [Language],N'item3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.lbl@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.lbl@optionview' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_custominputimportmonthly.lbl@year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'CN' as [Language],N'筛选条件' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'EN' as [Language],N'Filter' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'KR' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'VN' as [Language],N'Tìm kiếm' as [Content],NULL as [Frequency],NULL as [IgnorePending]
EXEC sp_SaveData  @TableNameTmp = '#tblMD_Message' , @TableName = 'tblMD_Message' , @Command = 'insert' , @IsDropTableTmp =0,@IsPrint=0IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
--#endregion _
GO

--#region tblDataSetting
IF OBJECT_ID('tempdb..#tblDataSetting') IS NOT NULL DROP TABLE #tblDataSetting
  create table #tblDataSetting (
   [TableName] NVarChar(MAX) NULL 
 , [ViewName] NVarChar(MAX) NULL 
 , [AllowAdd] Bit NULL 
 , [ReadOnlyColumns] NVarChar(MAX) NULL 
 , [ComboboxColumns] NVarChar(MAX) NULL 
 , [ColumnOrderBy] NVarChar(MAX) NULL 
 , [ColumnHide] NVarChar(MAX) NULL 
 , [ReadOnly] Bit NULL 
 , [TableEditorName] NVarChar(MAX) NULL 
 , [IsProcedure] Bit NULL 
 , [PaintColumns] NVarChar(MAX) NULL 
 , [FormatFontColumns] NVarChar(MAX) NULL 
 , [PaintRows] NVarChar(MAX) NULL 
 , [IsProcessForm] Bit NULL 
 , [IsShowLayout] Bit NULL 
 , [IsBatch] Bit NULL 
 , [LoadDataAfterShow] Bit NULL 
 , [GroupColumns] NVarChar(MAX) NULL 
 , [FixedColumns] NVarChar(MAX) NULL 
 , [ExportName] NVarChar(MAX) NULL 
 , [CheckLockAttStore] NVarChar(MAX) NULL 
 , [RptTemplate] NVarChar(MAX) NULL 
 , [spAction] NVarChar(MAX) NULL 
 , [DefaultValue] NVarChar(MAX) NULL 
 , [FilterColumn] NVarChar(MAX) NULL 
 , [IsEditForm] Bit NULL 
 , [ColumnEditSpecial] NVarChar(MAX) NULL 
 , [ColumnsFormatExtend] NVarChar(MAX) NULL 
 , [AllowDelete] Bit NULL 
 , [PaintCells] NVarChar(MAX) NULL 
 , [LayoutDataConfig] VarBinary(MAX) NULL 
 , [ColumnDataType] NVarChar(MAX) NULL 
 , [ProcBeforeSave] NVarChar(MAX) NULL 
 , [ProcAfterSave] NVarChar(MAX) NULL 
 , [IsLayoutParam] Bit NULL 
 , [ColumnSearch] NVarChar(MAX) NULL 
 , [AlwaysReloadColumn] Bit NULL 
 , [NotReloadAfterSave] Bit NULL 
 , [ColumnChangeEventProc] NVarChar(MAX) NULL 
 , [RowFontStyle] NVarChar(MAX) NULL 
 , [isWrapHeader] Bit NULL 
 , [ContextMenuIDs] NVarChar(MAX) NULL 
 , [ColumnNotLock] NVarChar(MAX) NULL 
 , [Import] NVarChar(MAX) NULL 
 , [ProcBeforeDelete] NVarChar(MAX) NULL 
 , [ProcAfterDelete] NVarChar(MAX) NULL 
 , [ConditionFormatting] VarBinary(MAX) NULL 
 , [ViewGridInShowLayout] Bit NULL 
 , [ShortcutsControl] NVarChar(MAX) NULL 
 , [LblMessage] NVarChar(MAX) NULL 
 , [MinWidthColumn] NVarChar(MAX) NULL 
 , [IsLayoutCommandButton] Bit NULL 
 , [LayoutDataConfigCrazy] VarBinary(MAX) NULL 
 , [NavigatorProcedure] NVarChar(MAX) NULL 
 , [ValidateRowConditions] NVarChar(MAX) NULL 
 , [ExecuteProcBeforeLoadData] NVarChar(MAX) NULL 
 , [LayoutDataConfigWeb] VarBinary(MAX) NULL 
 , [LayoutDataConfigMobile] VarBinary(MAX) NULL 
 , [GridBandConfig] NVarChar(MAX) NULL 
 , [ControlStateProcedure] NVarChar(MAX) NULL 
 , [ValidationProcedures] NVarChar(MAX) NULL 
 , [ReadonlyCellCondition] NVarChar(MAX) NULL 
 , [ComboboxColumn_BackupForTransfer] NVarChar(MAX) NULL 
 , [IsOpenSubForm] Bit NULL 
 , [Validation] NVarChar(MAX) NULL 
 , [ControlHiddenInShowLayout] NVarChar(MAX) NULL 
 , [IgnoreColumnOrder] Bit NULL 
 , [IgnoreLock] Bit NULL 
 , [ReadonlyCellCondition_Backup] NVarChar(MAX) NULL 
 , [SubDataSettingNames] NVarChar(MAX) NULL 
 , [IsViewReportForm] Bit NULL 
 , [ExportSeparateButton] Bit NULL 
 , [HashLayoutConfig] NVarChar(MAX) NULL 
 , [LayoutDataConfigFillter] VarBinary(MAX) NULL 
 , [LayoutParamConfig] VarBinary(MAX) NULL 
 , [OpenFormLink] NVarChar(MAX) NULL 
 , [SaveTableByBulk] NVarChar(MAX) NULL 
 , [IsNotPaintSaturday] Bit NULL 
 , [IsNotPaintSunday] Bit NULL 
 , [IsViewWeekName] Bit NULL 
 , [IgnoreCheckEECode] Bit NULL 
 , [ParadiseCommand] Int NULL 
 , [Labels] NVarChar(MAX) NULL 
 , [ColumnHideExport] NVarChar(MAX) NULL 
 , [ColumnWidthCalcData] Bit NULL 
 , [HideHeaderFilterButton] Bit NULL 
 , [HideColumnGrid] Bit NULL 
 , [TypeGrid] Int NULL 
 , [ProcBeforeAdd] NVarChar(MAX) NULL 
 , [ProcAfterAdd] NVarChar(MAX) NULL 
 , [ExecuteProcAfterLoadData] NVarChar(MAX) NULL 
 , [LayoutDataConfigColumnView] VarBinary(MAX) NULL 
 , [LayoutDataConfigCardView] VarBinary(MAX) NULL 
 , [HideFooter] Int NULL 
 , [IsFilterBox] Bit NULL 
 , [GetDefaultParamFromDB] Bit NULL 
 , [TaskTimeLine] Int NULL 
 , [HtmlCell] Int NULL 
 , [MinPageSizeGrid] Int NULL 
 , [ClickHereToAddNew] Int NULL 
 , [IgnoreQuestion] Bit NULL 
 , [FormLayoutJS] Int NULL 
 , [CheckBoxText] Int NULL 
 , [ColumnHideMobile] NVarChar(MAX) NULL 
 , [LayoutMobileLocalConfig] VarBinary(MAX) NULL 
 , [ViewMode] Int NULL 
 , [Mode] Int NULL 
 , [Template] NVarChar(MAX) NULL 
 , [NotResizeImage] Int NULL 
 , [DeleteOneRowReloadData] Int NULL 
 , [AutoHeightGrid] Bit NULL 
 , [ProcFileName] NVarChar(MAX) NULL 
 , [HeightImagePercentHeightFont] Float NULL 
 , [ColumnMinWidthPercent] NVarChar(MAX) NULL 
 , [GridViewAutoAddRow] Int NULL 
 , [GridViewNewItemRowPosition] Int NULL 
 , [LastColumnRemainingWidth] Int NULL 
 , [IsAutoSave] Bit NULL 
 , [VirtualColumn] NVarChar(MAX) NULL 
 , [GridTypeview] Int NULL 
 , [selectionMode] Int NULL 
 , [deleteMode] Int NULL 
 , [ClearDataBeforeLoadData] Int NULL 
 , [LockSort] Bit NULL 
 , [HightLightControlProc] NVarChar(MAX) NULL 
 , [ScriptInit0] NVarChar(MAX) NULL 
 , [ScriptInit1] NVarChar(MAX) NULL 
 , [ScriptInit2] NVarChar(MAX) NULL 
 , [ScriptInit3] NVarChar(MAX) NULL 
 , [ScriptInit4] NVarChar(MAX) NULL 
 , [ScriptInit5] NVarChar(MAX) NULL 
 , [ScriptInit6] NVarChar(MAX) NULL 
 , [ScriptInit7] NVarChar(MAX) NULL 
 , [ScriptInit8] NVarChar(MAX) NULL 
 , [ScriptInit9] NVarChar(MAX) NULL 
 , [FontSizeZoom0] Float NULL 
 , [FontSizeZoom1] Float NULL 
 , [FontSizeZoom2] Float NULL 
 , [FontSizeZoom3] Float NULL 
 , [FontSizeZoom4] Float NULL 
 , [FontSizeZoom5] Float NULL 
 , [FontSizeZoom6] Float NULL 
 , [FontSizeZoom7] Float NULL 
 , [FontSizeZoom8] Float NULL 
 , [FontSizeZoom9] Float NULL 
 , [NotBuildForm] Bit NULL 
 , [NotUseCancelButton] Bit NULL 
 , [GridUICompact] Float NULL 
 , [DisableFilterColumns] NVarChar(MAX) NULL 
 , [DisableFilterAll] Int NULL 
)

 INSERT INTO #tblDataSetting([TableName],[ViewName],[AllowAdd],[ReadOnlyColumns],[ComboboxColumns],[ColumnOrderBy],[ColumnHide],[ReadOnly],[TableEditorName],[IsProcedure],[PaintColumns],[FormatFontColumns],[PaintRows],[IsProcessForm],[IsShowLayout],[IsBatch],[LoadDataAfterShow],[GroupColumns],[FixedColumns],[ExportName],[CheckLockAttStore],[RptTemplate],[spAction],[DefaultValue],[FilterColumn],[IsEditForm],[ColumnEditSpecial],[ColumnsFormatExtend],[AllowDelete],[PaintCells],[LayoutDataConfig],[ColumnDataType],[ProcBeforeSave],[ProcAfterSave],[IsLayoutParam],[ColumnSearch],[AlwaysReloadColumn],[NotReloadAfterSave],[ColumnChangeEventProc],[RowFontStyle],[isWrapHeader],[ContextMenuIDs],[ColumnNotLock],[Import],[ProcBeforeDelete],[ProcAfterDelete],[ConditionFormatting],[ViewGridInShowLayout],[ShortcutsControl],[LblMessage],[MinWidthColumn],[IsLayoutCommandButton],[LayoutDataConfigCrazy],[NavigatorProcedure],[ValidateRowConditions],[ExecuteProcBeforeLoadData],[LayoutDataConfigWeb],[LayoutDataConfigMobile],[GridBandConfig],[ControlStateProcedure],[ValidationProcedures],[ReadonlyCellCondition],[ComboboxColumn_BackupForTransfer],[IsOpenSubForm],[Validation],[ControlHiddenInShowLayout],[IgnoreColumnOrder],[IgnoreLock],[ReadonlyCellCondition_Backup],[SubDataSettingNames],[IsViewReportForm],[ExportSeparateButton],[HashLayoutConfig],[LayoutDataConfigFillter],[LayoutParamConfig],[OpenFormLink],[SaveTableByBulk],[IsNotPaintSaturday],[IsNotPaintSunday],[IsViewWeekName],[IgnoreCheckEECode],[ParadiseCommand],[Labels],[ColumnHideExport],[ColumnWidthCalcData],[HideHeaderFilterButton],[HideColumnGrid],[TypeGrid],[ProcBeforeAdd],[ProcAfterAdd],[ExecuteProcAfterLoadData],[LayoutDataConfigColumnView],[LayoutDataConfigCardView],[HideFooter],[IsFilterBox],[GetDefaultParamFromDB],[TaskTimeLine],[HtmlCell],[MinPageSizeGrid],[ClickHereToAddNew],[IgnoreQuestion],[FormLayoutJS],[CheckBoxText],[ColumnHideMobile],[LayoutMobileLocalConfig],[ViewMode],[Mode],[Template],[NotResizeImage],[DeleteOneRowReloadData],[AutoHeightGrid],[ProcFileName],[HeightImagePercentHeightFont],[ColumnMinWidthPercent],[GridViewAutoAddRow],[GridViewNewItemRowPosition],[LastColumnRemainingWidth],[IsAutoSave],[VirtualColumn],[GridTypeview],[selectionMode],[deleteMode],[ClearDataBeforeLoadData],[LockSort],[HightLightControlProc],[ScriptInit0],[ScriptInit1],[ScriptInit2],[ScriptInit3],[ScriptInit4],[ScriptInit5],[ScriptInit6],[ScriptInit7],[ScriptInit8],[ScriptInit9],[FontSizeZoom0],[FontSizeZoom1],[FontSizeZoom2],[FontSizeZoom3],[FontSizeZoom4],[FontSizeZoom5],[FontSizeZoom6],[FontSizeZoom7],[FontSizeZoom8],[FontSizeZoom9],[NotBuildForm],[NotUseCancelButton],[GridUICompact],[DisableFilterColumns],[DisableFilterAll])
Select  N'sp_ProcessSeniorityAllowance' as [TableName],N'sp_ProcessSeniorityAllowance' as [ViewName],N'False' as [AllowAdd],N'' as [ReadOnlyColumns],N'' as [ComboboxColumns],N'EmployeeID&0,EmployeeName&1,HireDate&2,YearsOfService&3,WorkingDays&4,SeniorityAmount&5,SeniorityLevel&6,ProcessedDate&7' as [ColumnOrderBy],N'isReadOnlyRow,dtftxxENGColumns' as [ColumnHide],N'False' as [ReadOnly],N'' as [TableEditorName],N'True' as [IsProcedure],N'' as [PaintColumns],N'' as [FormatFontColumns],N'' as [PaintRows],N'False' as [IsProcessForm],N'False' as [IsShowLayout],N'False' as [IsBatch],N'True' as [LoadDataAfterShow],N'' as [GroupColumns],N'EmployeeID' as [FixedColumns],N'' as [ExportName],N'' as [CheckLockAttStore],N'' as [RptTemplate],N'' as [spAction],N'' as [DefaultValue],N'' as [FilterColumn],N'False' as [IsEditForm],N'' as [ColumnEditSpecial],N'' as [ColumnsFormatExtend],N'False' as [AllowDelete],N'' as [PaintCells],0xas [LayoutDataConfig],N'' as [ColumnDataType],N'' as [ProcBeforeSave],N'' as [ProcAfterSave],N'False' as [IsLayoutParam],N'' as [ColumnSearch],N'False' as [AlwaysReloadColumn],N'False' as [NotReloadAfterSave],N'' as [ColumnChangeEventProc],N'' as [RowFontStyle],N'False' as [isWrapHeader],N'' as [ContextMenuIDs],N'' as [ColumnNotLock],N'' as [Import],N'' as [ProcBeforeDelete],N'' as [ProcAfterDelete],0x1F8B08000000000004007D8FB10AC24010447BC17F38D6564CAECF052BB1B032106D97B898C34BEED8EC45E2AF59F849FE82C1602188DD30CC1B669EF7477614C682D8A2B33762D51377D6B706F42A058521385BA1BC9DD2D215F2F94CA92CB00FC432A8161B32B0D8E1E0A394130B2AF9972A2A74B4C14A3C43BED6CB833D496DF4A8B664CFB5189D251FF267CFC67383B28F8E3A50B6BBD060403812A81E5D1C03E9B4204BBEBFE52FA791B64FEF000000 as [ConditionFormatting],N'False' as [ViewGridInShowLayout],N'' as [ShortcutsControl],N'' as [LblMessage],N'ProcessedDateFIX&126,SeniorityLevelFIX&125' as [MinWidthColumn],N'True' as [IsLayoutCommandButton],NULL as [LayoutDataConfigCrazy],N'' as [NavigatorProcedure],N'' as [ValidateRowConditions],N'' as [ExecuteProcBeforeLoadData],NULL as [LayoutDataConfigWeb],NULL as [LayoutDataConfigMobile],N'' as [GridBandConfig],N'' as [ControlStateProcedure],N'' as [ValidationProcedures],N'' as [ReadonlyCellCondition],N'' as [ComboboxColumn_BackupForTransfer],N'False' as [IsOpenSubForm],N'' as [Validation],N'btnFWSave,btnFWDelete,btnFWReset,btnFWAdd,ckb@isView' as [ControlHiddenInShowLayout],N'False' as [IgnoreColumnOrder],N'False' as [IgnoreLock],N'' as [ReadonlyCellCondition_Backup],N'' as [SubDataSettingNames],N'False' as [IsViewReportForm],N'False' as [ExportSeparateButton],N'' as [HashLayoutConfig],NULL as [LayoutDataConfigFillter],NULL as [LayoutParamConfig],N'' as [OpenFormLink],N'' as [SaveTableByBulk],N'False' as [IsNotPaintSaturday],N'False' as [IsNotPaintSunday],N'False' as [IsViewWeekName],N'False' as [IgnoreCheckEECode],N'0' as [ParadiseCommand],N'' as [Labels],N'' as [ColumnHideExport],N'False' as [ColumnWidthCalcData],N'False' as [HideHeaderFilterButton],N'False' as [HideColumnGrid],N'0' as [TypeGrid],N'' as [ProcBeforeAdd],N'' as [ProcAfterAdd],N'' as [ExecuteProcAfterLoadData],NULL as [LayoutDataConfigColumnView],NULL as [LayoutDataConfigCardView],N'0' as [HideFooter],N'False' as [IsFilterBox],N'False' as [GetDefaultParamFromDB],N'0' as [TaskTimeLine],N'0' as [HtmlCell],N'0' as [MinPageSizeGrid],N'0' as [ClickHereToAddNew],N'False' as [IgnoreQuestion],N'0' as [FormLayoutJS],N'0' as [CheckBoxText],N'' as [ColumnHideMobile],NULL as [LayoutMobileLocalConfig],N'0' as [ViewMode],N'0' as [Mode],N'' as [Template],N'0' as [NotResizeImage],N'0' as [DeleteOneRowReloadData],N'False' as [AutoHeightGrid],N'' as [ProcFileName],N'0' as [HeightImagePercentHeightFont],N'' as [ColumnMinWidthPercent],N'0' as [GridViewAutoAddRow],N'0' as [GridViewNewItemRowPosition],N'0' as [LastColumnRemainingWidth],N'False' as [IsAutoSave],N'' as [VirtualColumn],N'0' as [GridTypeview],N'0' as [selectionMode],N'0' as [deleteMode],N'0' as [ClearDataBeforeLoadData],N'False' as [LockSort],N'' as [HightLightControlProc],N'' as [ScriptInit0],N'' as [ScriptInit1],N'' as [ScriptInit2],N'' as [ScriptInit3],N'' as [ScriptInit4],N'' as [ScriptInit5],N'' as [ScriptInit6],N'' as [ScriptInit7],N'' as [ScriptInit8],N'' as [ScriptInit9],N'0' as [FontSizeZoom0],N'0' as [FontSizeZoom1],N'0' as [FontSizeZoom2],N'0' as [FontSizeZoom3],N'0' as [FontSizeZoom4],N'0' as [FontSizeZoom5],N'0' as [FontSizeZoom6],N'0' as [FontSizeZoom7],N'0' as [FontSizeZoom8],N'0' as [FontSizeZoom9],N'False' as [NotBuildForm],N'False' as [NotUseCancelButton],N'0' as [GridUICompact],N'' as [DisableFilterColumns],N'0' as [DisableFilterAll]

EXEC sp_SaveData  @TableNameTmp = '#tblDataSetting' , @TableName = 'tblDataSetting' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblDataSetting') IS NOT NULL DROP TABLE #tblDataSetting
--#endregion _
GO

--#region tblDataSettingLayout
IF OBJECT_ID('tempdb..#tblDataSettingLayout') IS NOT NULL DROP TABLE #tblDataSettingLayout
  create table #tblDataSettingLayout (
   [TableName] NVarChar(MAX) NULL 
 , [Name] NVarChar(MAX) NULL 
 , [ControlName] NVarChar(MAX) NULL 
 , [NamePa] NVarChar(MAX) NULL 
 , [TabbedGroupParentName] NVarChar(MAX) NULL 
 , [Type] NVarChar(MAX) NULL 
 , [Lx] Int NULL 
 , [Ly] Int NULL 
 , [Sx] Int NULL 
 , [Sy] Int NULL 
 , [ShowCaption] Int NULL 
 , [Padding] Int NULL 
 , [TextLocation] NVarChar(MAX) NULL 
 , [GroupBordersVisible] Int NULL 
 , [TypeLayout] NVarChar(MAX) NULL 
 , [Spacing] Int NULL 
 , [BackColor] NVarChar(MAX) NULL 
 , [ControlType] NVarChar(MAX) NULL 
 , [ColumnSpan] Int NULL 
 , [RowSpan] Int NULL 
 , [CaptionHorizontalAlign] NVarChar(MAX) NULL 
 , [CaptionVerticalAlign] NVarChar(MAX) NULL 
 , [WidthPercentage] Int NULL 
 , [FixMinSize] Bit NULL 
 , [AlignContent] NVarChar(MAX) NULL 
 , [BorderBottomColor] NVarChar(MAX) NULL 
 , [BorderBottomSize] NVarChar(MAX) NULL 
 , [BorderColor] NVarChar(MAX) NULL 
 , [BorderLeftColor] NVarChar(MAX) NULL 
 , [BorderLeftSize] NVarChar(MAX) NULL 
 , [BorderRightColor] NVarChar(MAX) NULL 
 , [BorderRightSize] NVarChar(MAX) NULL 
 , [BorderSize] NVarChar(MAX) NULL 
 , [BorderTopColor] NVarChar(MAX) NULL 
 , [BorderTopSize] NVarChar(MAX) NULL 
 , [BorderVisible] Bit NULL 
 , [ControlBackColor] NVarChar(MAX) NULL 
 , [ControlBorderBottomColor] NVarChar(MAX) NULL 
 , [ControlBorderBottomSize] NVarChar(MAX) NULL 
 , [ControlBorderColor] NVarChar(MAX) NULL 
 , [ControlBorderLeftColor] NVarChar(MAX) NULL 
 , [ControlBorderLeftSize] NVarChar(MAX) NULL 
 , [ControlBorderRightColor] NVarChar(MAX) NULL 
 , [ControlBorderRightSize] NVarChar(MAX) NULL 
 , [ControlBorderSize] NVarChar(MAX) NULL 
 , [ControlBorderTopColor] NVarChar(MAX) NULL 
 , [ControlBorderTopSize] NVarChar(MAX) NULL 
 , [ControlForeColor] NVarChar(MAX) NULL 
 , [ControlHorizontalAlign] NVarChar(MAX) NULL 
 , [ControlPadding] Int NULL 
 , [ControlVerticalAlign] NVarChar(MAX) NULL 
 , [FontSize] NVarChar(MAX) NULL 
 , [IconName] NVarChar(MAX) NULL 
 , [ItemBackColor] NVarChar(MAX) NULL 
 , [ItemBorderBottomColor] NVarChar(MAX) NULL 
 , [ItemBorderBottomSize] NVarChar(MAX) NULL 
 , [ItemBorderColor] NVarChar(MAX) NULL 
 , [ItemBorderLeftColor] NVarChar(MAX) NULL 
 , [ItemBorderLeftSize] NVarChar(MAX) NULL 
 , [ItemBorderRightColor] NVarChar(MAX) NULL 
 , [ItemBorderRightSize] NVarChar(MAX) NULL 
 , [ItemBorderSize] NVarChar(MAX) NULL 
 , [ItemBorderTopColor] NVarChar(MAX) NULL 
 , [ItemBorderTopSize] NVarChar(MAX) NULL 
 , [ItemForeColor] NVarChar(MAX) NULL 
 , [ItemPadding] Int NULL 
 , [MinGridPageSize] Int NULL 
 , [NotClientVisible] Bit NULL 
 , [NullTextMessageID] NVarChar(MAX) NULL 
 , [FullPageEmpty] Bit NULL 
 , [PaddingTop] Int NULL 
 , [PaddingLeft] Int NULL 
 , [PaddingBottom] Int NULL 
 , [PaddingRight] Int NULL 
 , [ControlCellPadding] Int NULL 
 , [MaxWidth] Float NULL 
 , [MinWidth] Float NULL 
 , [TabPageOrder] Int NULL 
 , [SelectedTabPageIndex] Int NULL 
 , [FixWidthClient] Int NULL 
 , [ErrorMessage] NVarChar(MAX) NULL 
 , [borderRadius] NVarChar(MAX) NULL 
 , [boxShadow] NVarChar(MAX) NULL 
 , [IsValidation] Bit NULL 
 , [HorizontalAlign] NVarChar(MAX) NULL 
 , [maxHeight] Int NULL 
 , [TextAlignMode] Int NULL 
 , [minHeight] Int NULL 
 , [HeightPercentageClient] Float NULL 
 , [ControlBorderRadius] NVarChar(MAX) NULL 
 , [ControlBoxShadow] NVarChar(MAX) NULL 
 , [ControlPaddingBottom] Float NULL 
 , [ControlPaddingLeft] Float NULL 
 , [ControlPaddingRight] Float NULL 
 , [ControlPaddingTop] Float NULL 
 , [ForeColor] NVarChar(MAX) NULL 
 , [CaptionWrap] Int NULL 
 , [LocationID] Int NULL 
 , [ContainerType] Int NULL 
 , [ControlNoBorder] Bit NULL 
 , [BackgroundImage] VarBinary(MAX) NULL 
 , [labelMode] Int NULL 
 , [selectionMode] Int NULL 
 , [deleteMode] Int NULL 
)

 INSERT INTO #tblDataSettingLayout([TableName],[Name],[ControlName],[NamePa],[TabbedGroupParentName],[Type],[Lx],[Ly],[Sx],[Sy],[ShowCaption],[Padding],[TextLocation],[GroupBordersVisible],[TypeLayout],[Spacing],[BackColor],[ControlType],[ColumnSpan],[RowSpan],[CaptionHorizontalAlign],[CaptionVerticalAlign],[WidthPercentage],[FixMinSize],[AlignContent],[BorderBottomColor],[BorderBottomSize],[BorderColor],[BorderLeftColor],[BorderLeftSize],[BorderRightColor],[BorderRightSize],[BorderSize],[BorderTopColor],[BorderTopSize],[BorderVisible],[ControlBackColor],[ControlBorderBottomColor],[ControlBorderBottomSize],[ControlBorderColor],[ControlBorderLeftColor],[ControlBorderLeftSize],[ControlBorderRightColor],[ControlBorderRightSize],[ControlBorderSize],[ControlBorderTopColor],[ControlBorderTopSize],[ControlForeColor],[ControlHorizontalAlign],[ControlPadding],[ControlVerticalAlign],[FontSize],[IconName],[ItemBackColor],[ItemBorderBottomColor],[ItemBorderBottomSize],[ItemBorderColor],[ItemBorderLeftColor],[ItemBorderLeftSize],[ItemBorderRightColor],[ItemBorderRightSize],[ItemBorderSize],[ItemBorderTopColor],[ItemBorderTopSize],[ItemForeColor],[ItemPadding],[MinGridPageSize],[NotClientVisible],[NullTextMessageID],[FullPageEmpty],[PaddingTop],[PaddingLeft],[PaddingBottom],[PaddingRight],[ControlCellPadding],[MaxWidth],[MinWidth],[TabPageOrder],[SelectedTabPageIndex],[FixWidthClient],[ErrorMessage],[borderRadius],[boxShadow],[IsValidation],[HorizontalAlign],[maxHeight],[TextAlignMode],[minHeight],[HeightPercentageClient],[ControlBorderRadius],[ControlBoxShadow],[ControlPaddingBottom],[ControlPaddingLeft],[ControlPaddingRight],[ControlPaddingTop],[ForeColor],[CaptionWrap],[LocationID],[ContainerType],[ControlNoBorder],[BackgroundImage],[labelMode],[selectionMode],[deleteMode])
Select  N'sp_processseniorityallowance' as [TableName],N'btnexport' as [Name],N'btnexport' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'879' as [Ly],N'276' as [Sx],N'33' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'17' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'-13408717' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'-1' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'Export' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_processseniorityallowance' as [TableName],N'item0' as [Name],N'' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'' as [Type],N'276' as [Lx],N'879' as [Ly],N'1342' as [Sx],N'33' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'83' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_processseniorityallowance' as [TableName],N'lbl@month' as [Name],N'cbx@month' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'207' as [Lx],N'0' as [Ly],N'325' as [Sx],N'27' as [Sy],N'1' as [ShowCaption],N'1' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'20' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_processseniorityallowance' as [TableName],N'lbl@year' as [Name],N'cbx@year' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'0' as [Ly],N'207' as [Sx],N'27' as [Sy],N'1' as [ShowCaption],N'1' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'12' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_processseniorityallowance' as [TableName],N'lblfilter' as [Name],N'txtfilter' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'807' as [Lx],N'0' as [Ly],N'811' as [Sx],N'27' as [Sy],N'1' as [ShowCaption],N'1' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'PopupContainerEdit' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'52' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_processseniorityallowance' as [TableName],N'lblreload' as [Name],N'btnreload' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'532' as [Lx],N'0' as [Ly],N'275' as [Sx],N'27' as [Sy],N'0' as [ShowCaption],N'1' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'ParadiseSimpleButtonBase' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'16' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'-13395661' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'-1' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_processseniorityallowance' as [TableName],N'lbltableeditor' as [Name],N'grdtableeditor' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'27' as [Ly],N'1618' as [Sx],N'852' as [Sy],N'0' as [ShowCaption],N'1' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'GridControl' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'sp_processseniorityallowance' as [TableName],N'root' as [Name],N'' as [ControlName],N'' as [NamePa],N'' as [TabbedGroupParentName],N'g' as [Type],N'0' as [Lx],N'0' as [Ly],N'1618' as [Sx],N'912' as [Sy],N'0' as [ShowCaption],N'0' as [Padding],N'top' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'0' as [PaddingTop],N'0' as [PaddingLeft],N'0' as [PaddingBottom],N'0' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'-1' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode]

DECLARE @sql VARCHAR(MAX) = 'TableName'+char(10)+'TypeLayout'
EXEC sp_SaveData  @TableNameTmp = '#tblDataSettingLayout' , @TableName = 'tblDataSettingLayout' , @Command = 'DeleteNot',@ColumnDeleteNot=@sql , @IsDropTableTmp =0,@IsPrint=0
EXEC sp_SaveData  @TableNameTmp = '#tblDataSettingLayout' , @TableName = 'tblDataSettingLayout' , @Command = 'insert,update', @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblDataSettingLayout') IS NOT NULL DROP TABLE #tblDataSettingLayout
--#endregion _
GO

--#region tblMD_Message
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message 
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
  create table #tblMD_Message (
   [MessageID] NVarChar(MAX) NULL 
 , [Language] NVarChar(MAX) NULL 
 , [Content] NVarChar(MAX) NULL 
 , [Frequency] BigInt NULL 
 , [IgnorePending] Bit NULL 
)

 INSERT INTO #tblMD_Message([MessageID],[Language],[Content],[Frequency],[IgnorePending])
Select  N'sp_processseniorityallowance.YearsOfService' as [MessageID],N'CN' as [Language],N'年资' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.SeniorityAmount' as [MessageID],N'EN' as [Language],N'Seniority Amount' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.SeniorityLevel' as [MessageID],N'EN' as [Language],N'Seniority Level' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.WorkingDays' as [MessageID],N'EN' as [Language],N'Workingdays' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.YearsOfService' as [MessageID],N'EN' as [Language],N'Years Of Service' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.btnReload' as [MessageID],N'VN' as [Language],N'Làm mới' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.cbx@Month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.cbx@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.EmployeeName' as [MessageID],N'VN' as [Language],N'Họ và tên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.item0' as [MessageID],N'VN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.lbl@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.lbl@year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.lblReload' as [MessageID],N'VN' as [Language],N'Làm mới' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.ProcessedDate' as [MessageID],N'VN' as [Language],N'Ngày tính toán' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.SeniorityAmount' as [MessageID],N'VN' as [Language],N'Tiền phụ cấp' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.SeniorityLevel' as [MessageID],N'VN' as [Language],N'Phân loại thâm niên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.YearsOfService' as [MessageID],N'VN' as [Language],N'Thâm niên' as [Content],NULL as [Frequency],NULL as [IgnorePending]
EXEC sp_SaveData  @TableNameTmp = '#tblMD_Message' , @TableName = 'tblMD_Message' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
--#endregion _
GO

--#region tblMD_Message
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message 
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
  create table #tblMD_Message (
   [MessageID] NVarChar(MAX) NULL 
 , [Language] NVarChar(MAX) NULL 
 , [Content] NVarChar(MAX) NULL 
 , [Frequency] BigInt NULL 
 , [IgnorePending] Bit NULL 
)

 INSERT INTO #tblMD_Message([MessageID],[Language],[Content],[Frequency],[IgnorePending])
Select  N'0' as [MessageID],N'CN' as [Language],N'零' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0' as [MessageID],N'En' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0' as [MessageID],N'KR' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0' as [MessageID],N'vn' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0.vldt' as [MessageID],N'En' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0.vldt' as [MessageID],N'KR' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'0.vldt' as [MessageID],N'vn' as [Language],N'Không đi làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'1' as [MessageID],N'EN' as [Language],N'Seniority allowance (long term)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'1' as [MessageID],N'VN' as [Language],N'Seniority allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'1.vldt' as [MessageID],N'EN' as [Language],N'1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'1.vldt' as [MessageID],N'KR' as [Language],N'1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'1.vldt' as [MessageID],N'VN' as [Language],N'1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'2' as [MessageID],N'EN' as [Language],N'Production bonus' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'2' as [MessageID],N'VN' as [Language],N'Production bonus' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'2.vldt' as [MessageID],N'EN' as [Language],N'2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'2.vldt' as [MessageID],N'KR' as [Language],N'2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'2.vldt' as [MessageID],N'VN' as [Language],N'2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'3' as [MessageID],N'EN' as [Language],N'Foreign language allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'3' as [MessageID],N'VN' as [Language],N'Foreign language allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'3.vldt' as [MessageID],N'EN' as [Language],N'3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'3.vldt' as [MessageID],N'KR' as [Language],N'3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'3.vldt' as [MessageID],N'VN' as [Language],N'3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'4' as [MessageID],N'EN' as [Language],N'Environmental allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'4' as [MessageID],N'VN' as [Language],N'Environmental allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'4.vldt' as [MessageID],N'EN' as [Language],N'4' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'4.vldt' as [MessageID],N'KR' as [Language],N'4' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'4.vldt' as [MessageID],N'VN' as [Language],N'4' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'5' as [MessageID],N'EN' as [Language],N'Shift allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'5' as [MessageID],N'VN' as [Language],N'Shift allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'5.vldt' as [MessageID],N'EN' as [Language],N'5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'5.vldt' as [MessageID],N'KR' as [Language],N'5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'5.vldt' as [MessageID],N'VN' as [Language],N'5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'6' as [MessageID],N'EN' as [Language],N'Fuel allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'6' as [MessageID],N'VN' as [Language],N'Fuel allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'6.vldt' as [MessageID],N'EN' as [Language],N'5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'6.vldt' as [MessageID],N'KR' as [Language],N'5' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'6.vldt' as [MessageID],N'VN' as [Language],N'6' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'7' as [MessageID],N'EN' as [Language],N'Professional allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'7' as [MessageID],N'VN' as [Language],N'Professional allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'7.vldt' as [MessageID],N'EN' as [Language],N'7' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'7.vldt' as [MessageID],N'KR' as [Language],N'7' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'7.vldt' as [MessageID],N'VN' as [Language],N'7' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'CN' as [Language],N'导出到Excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'EN' as [Language],N'Export to excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'JP' as [Language],N'リセット' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'KO' as [Language],N'엑셀로 내보내기' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'KR' as [Language],N'Export to excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'VN' as [Language],N'Xuất excel' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'CN' as [Language],N'重新載入資料' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'EN' as [Language],N'Refresh' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'KO' as [Language],N'새로 고침' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'BtnReload' as [MessageID],N'KR' as [Language],N'새로 만들기' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'VN' as [Language],N'Làm Mới' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'CN' as [Language],N'月份' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'KO' as [Language],N'달' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'CN' as [Language],N'年' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'KO' as [Language],N'년' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'CN' as [Language],N'员工编号' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'EN' as [Language],N'Employee ID' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID' as [MessageID],N'JP' as [Language],N'従業員コード' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'KO' as [Language],N'직원 코드' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID' as [MessageID],N'KR' as [Language],N'사원 번호' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'VN' as [Language],N'Mã nhân viên' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid.vldt' as [MessageID],N'EN' as [Language],N'Employee code' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID.vldt' as [MessageID],N'JP' as [Language],N'従業員コード' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID.vldt' as [MessageID],N'KR' as [Language],N'사원 번호' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid.vldt' as [MessageID],N'VN' as [Language],N'Mã nhân viên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeName' as [MessageID],N'CN' as [Language],N'全名' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeName' as [MessageID],N'EN' as [Language],N'Employee''s Name' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeName' as [MessageID],N'VN' as [Language],N'Họ và Tên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'EN' as [Language],N'Training course list' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'KR' as [Language],N'Training course list' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'VN' as [Language],N'Danh sách đơn chờ duyệt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate' as [MessageID],N'CN' as [Language],N'入职日期' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate' as [MessageID],N'EN' as [Language],N'Hire date' as [Content],N'23' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate' as [MessageID],N'KO' as [Language],N'하루는 일을 시작합니다' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate' as [MessageID],N'KR' as [Language],N'Join date' as [Content],N'23' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate' as [MessageID],N'VN' as [Language],N'Ngày bắt đầu vào làm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate.vldt' as [MessageID],N'EN' as [Language],N'Join date' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate.vldt' as [MessageID],N'KR' as [Language],N'Join date' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'HireDate.vldt' as [MessageID],N'VN' as [Language],N'Ngày bắt đầu vào làm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'CN' as [Language],N'修改密码' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'EN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'KO' as [Language],N'월페이퍼' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'KR' as [Language],N'승인 정보' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item0' as [MessageID],N'VN' as [Language],N'Hình nền' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'CN' as [Language],N'月份' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'KO' as [Language],N'달' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'CN' as [Language],N'年' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'KO' as [Language],N'년' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'CN' as [Language],N'搜索' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'EN' as [Language],N'Search' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'KO' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'KR' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'VN' as [Language],N'Tìm kiếm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'CN' as [Language],N'影片播放清单' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'EN' as [Language],N'Resident address' as [Content],N'2' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'KO' as [Language],N'코드' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'KR' as [Language],N'Resident address' as [Content],N'2' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'VN' as [Language],N'Làm Mới' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'CN' as [Language],N'<color = crimson>如果更改标题，请单击新行以添加。生效日期无法更正，因此，如果生效日期不正确，请删除错误的行，然后添加一个新行以进行更正。</ color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'EN' as [Language],N'<color = crimson> If you change the title, click on a new line to add it. The effective date cannot be edited, so if the effective date is wrong, delete the wrong line, then add a new line to correct. </color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'KO' as [Language],N'<color = crimson> 제목을 변경하는 경우 추가 할 새 줄을 클릭하십시오. 유효 날짜를 편집 할 수 없으므로 유효 날짜가 틀린 경우 잘못된 줄을 삭제 한 다음 올바른 새 줄을 추가하십시오. </ color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'KR' as [Language],N'<color = crimson> If you change the title, click on a new line to add it. The effective date cannot be edited, so if the effective date is wrong, delete the wrong line, then add a new line to correct. </color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'VN' as [Language],N'<color=crimson>Nếu thay đổi chức danh thì bấm vào dòng mới để thêm.Ngày hiệu lực không sửa được nên nếu ngày hiệu lực sai thì xóa dòng sai đi, sau đó thêm 1 dòng mới cho đúng.</color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL444' as [MessageID],N'CN' as [Language],N'工龄津贴处理' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL444' as [MessageID],N'EN' as [Language],N'Process seniority allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL444' as [MessageID],N'VN' as [Language],N'Seniority Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'ProcessedDate' as [MessageID],N'EN' as [Language],N'Processed Date' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'ProcessedDate' as [MessageID],N'VN' as [Language],N'Ngày tính toán' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'CN' as [Language],N'根目錄' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'EN' as [Language],N'Root' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'KR' as [Language],N'Resident address' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'VN' as [Language],N'1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SeniorityAmount' as [MessageID],N'EN' as [Language],N'Seniority Amount' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SeniorityAmount' as [MessageID],N'VN' as [Language],N'Tiền phụ cấp' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SeniorityLevel' as [MessageID],N'EN' as [Language],N'Seniority Level' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SeniorityLevel' as [MessageID],N'VN' as [Language],N'Phân loại thâm niên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.btnReload' as [MessageID],N'VN' as [Language],N'Làm mới' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.cbx@Month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.cbx@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.EmployeeName' as [MessageID],N'VN' as [Language],N'Họ và tên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.item0' as [MessageID],N'VN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.lbl@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.lbl@year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.lblReload' as [MessageID],N'VN' as [Language],N'Làm mới' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.ProcessedDate' as [MessageID],N'VN' as [Language],N'Ngày tính toán' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.SeniorityAmount' as [MessageID],N'EN' as [Language],N'Seniority Amount' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.SeniorityAmount' as [MessageID],N'VN' as [Language],N'Tiền phụ cấp' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.SeniorityLevel' as [MessageID],N'EN' as [Language],N'Seniority Level' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.SeniorityLevel' as [MessageID],N'VN' as [Language],N'Phân loại thâm niên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.WorkingDays' as [MessageID],N'EN' as [Language],N'Workingdays' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.YearsOfService' as [MessageID],N'CN' as [Language],N'年资' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.YearsOfService' as [MessageID],N'EN' as [Language],N'Years Of Service' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'sp_processseniorityallowance.YearsOfService' as [MessageID],N'VN' as [Language],N'Thâm niên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'CN' as [Language],N'筛选条件' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'EN' as [Language],N'Filter' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'KR' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'VN' as [Language],N'Tìm kiếm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'WorkingDays' as [MessageID],N'CN' as [Language],N'工作天' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'WorkingDays' as [MessageID],N'EN' as [Language],N'Workday' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'WorkingDays' as [MessageID],N'VN' as [Language],N'Ngày công' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'YearsOfService' as [MessageID],N'CN' as [Language],N'年资' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'YearsOfService' as [MessageID],N'EN' as [Language],N'Years Of Service' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'YearsOfService' as [MessageID],N'VN' as [Language],N'Thâm niên' as [Content],NULL as [Frequency],NULL as [IgnorePending]
EXEC sp_SaveData  @TableNameTmp = '#tblMD_Message' , @TableName = 'tblMD_Message' , @Command = 'insert' , @IsDropTableTmp =0,@IsPrint=0IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
--#endregion _


if object_id('[dbo].[sp_processAllAllowance]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_processAllAllowance] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_processAllAllowance] (@LoginID INT = 3, @Year INT, @Month INT, @SalCal BIT = 0)
AS
BEGIN
	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	SELECT f.EmployeeID, FullName, HireDate, LastWorkingDate, CAST(0 AS INT) Prio, f.DepartmentID, f.DivisionID, f.PositionID, s.SectionID, s.SectionName, ROW_NUMBER() OVER (
			ORDER BY f.EmployeeID
			) STTView, d.DepartmentName, p.PositionNameEN PositionName, CASE
			WHEN f.ProbationEndDate > @FromDate
				THEN 1
			ELSE 0
			END AS Probationary, f.IsForeign
	INTO #tmpEmployeeList
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, '-1', @LoginId) f
	LEFT JOIN tblSection s ON s.SectionID = f.SectionID
	LEFT JOIN tblDepartment d ON d.DepartmentID = f.DepartmentID
	LEFT JOIN tblPosition p ON p.PositionID = f.PositionID

	SELECT a.*
	INTO #AttendanceSummary
	FROM tblAttendanceSummary a
	INNER JOIN #tmpEmployeeList e ON e.EmployeeID = a.EmployeeID
	WHERE Year = @Year AND Month = @Month

	IF EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE EmployeeID NOT IN (
					SELECT s.EmployeeID
					FROM tblCustomInputImportMonthly s
					WHERE s.[Year] = @Year AND s.[Month] = @Month
					)
			)
	BEGIN
		INSERT INTO tblCustomInputImportMonthly (EmployeeID, [Year], [Month])
		SELECT EmployeeID, @Year, @Month
		FROM #AttendanceSummary a
		WHERE EmployeeID NOT IN (
				SELECT s.EmployeeID
				FROM tblCustomInputImportMonthly s
				INNER JOIN #tmpEmployeeList t ON t.EmployeeID = s.EmployeeID AND s.[Year] = @Year AND s.[Month] = @Month
				) AND a.PeriodID = 0
	END

	CREATE TABLE #tblAllowance (EmployeeID INT, AllowanceID INT, ReceiveAmount MONEY, TotalPaidDays FLOAT)

	--     1	Seniority allowance
	-- 2	Production bonus
	-- 3	Foreign language allowance
	-- 4	Environmental allowance
	-- 5	Shift allowance
	-- 6	Fuel allowance
	-- 7	Professional allowance
	-- 8	Attendance allowance
	-- 9	Meal allowance
	-- 10	Regional (area) allowance
	-- 11	Incentive allowance
	-- 12	Key process allowance
	-- 13	Bonus 6 month
	-- 14	Performance & Responsibility
	-- TRIPOD: Xử lý các allowance
	EXEC sp_ProcessSeniorityAllowance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @isView = 1

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 1, SeniorityAmount, WorkingDays
	FROM tblSeniorityAllowance
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND SeniorityAmount > 0

	SELECT EmployeeID, COUNT(1) CntLanguage, CAST(NULL AS FLOAT) AttDays, CAST(NULL AS MONEY) AmountAllowance, al.Parameter Min_AttDays, al.DefaultAmount
	INTO #tmpEmployeeForeignLanguage
	FROM tblEmployeeForeignLanguage
	LEFT JOIN tblAllowanceSetting AS al ON al.AllowanceID = 3
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND @FromDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31') AND @ToDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31')
	GROUP BY EmployeeID, al.Parameter, al.DefaultAmount

	DELETE
	FROM #tmpEmployeeForeignLanguage
	WHERE EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE a.EmployeeID = #tmpEmployeeForeignLanguage.EmployeeID AND a.WorkingDays_Total < #tmpEmployeeForeignLanguage.Min_AttDays
			)

	UPDATE #tmpEmployeeForeignLanguage
	SET AttDays = a.WorkingDays_Total
	FROM #tmpEmployeeForeignLanguage e
	INNER JOIN #AttendanceSummary a ON e.EmployeeID = a.EmployeeID

	UPDATE #tmpEmployeeForeignLanguage
	SET AmountAllowance = CntLanguage * DefaultAmount
	FROM #tmpEmployeeForeignLanguage

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 3, AmountAllowance, AttDays
	FROM #tmpEmployeeForeignLanguage

	--petro
	SELECT e.EmployeeID, a.WorkingDays_Total, DefaultAmount, al.AllowanceID
	INTO #PetroAllowance
	FROM #tmpEmployeeList e
	INNER JOIN #AttendanceSummary a ON a.EmployeeID = e.EmployeeID
	LEFT JOIN tblAllowanceSetting al ON al.AllowanceID = 6
	WHERE a.WorkingDays_Total > al.Parameter AND Probationary = 0 AND ISNULL(IsForeign, 0) = 0

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 6, DefaultAmount, WorkingDays_Total
	FROM #PetroAllowance

	SELECT e.EmployeeID, e.PositionID, p.PositionAllowance AmountAllowance, aL.WorkingDays_Total
	INTO #FullAttendance
	FROM #tmpEmployeeList e
	INNER JOIN tblPosition p ON p.PositionID = e.PositionID
	INNER JOIN #AttendanceSummary al ON al.EmployeeID = e.EmployeeID
	WHERE p.PositionAllowance > 0 AND Probationary = 0 AND (ISNULL(WorkingHrs_Total, 0) + ISNULL(PaidLeaveHrs_Total, 0)) = RegularWorkdays * ISNULL(Std_Hour_PerDays, 0) AND ISNULL(IsForeign, 0) = 0

	SELECT lv.*
	INTO #lvHistory
	FROM tblLvHistory lv
	INNER JOIN tblLeaveType lt ON lt.LeaveCode = lv.LeaveCode
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #FullAttendance
			) AND LeaveDate BETWEEN @FromDate AND @ToDate AND lt.CutDiligent = 1

	DELETE
	FROM #FullAttendance
	WHERE EXISTS (
			SELECT 1
			FROM #lvHistory l
			WHERE l.EmployeeID = #FullAttendance.EmployeeID
			) OR EXISTS (
			SELECT *
			FROM tblInLateOutEarly ie
			WHERE ie.EmployeeID = #FullAttendance.EmployeeID AND IODate BETWEEN @FromDate AND @ToDate AND ie.ApprovedDeduct = 1
			)

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 8, AmountAllowance, WorkingDays_Total
	FROM #FullAttendance

	-- Dynamic pivot + merge #tblAllowance -> tblCustomInputImportMonthly
	DECLARE @YearParam NVARCHAR(10) = CAST(@Year AS NVARCHAR(10));
	DECLARE @MonthParam NVARCHAR(10) = CAST(@Month AS NVARCHAR(10));
	DECLARE @cols NVARCHAR(MAX), @colsList NVARCHAR(MAX), @colsUpdate NVARCHAR(MAX), @colsInsert NVARCHAR(MAX), @colsValues NVARCHAR(MAX), @sql NVARCHAR(MAX);

	-- 1) Build quoted column list from AllowanceID values that actually exist as columns in target table
	SELECT @cols = STUFF((
				SELECT ',' + QUOTENAME(CAST(a.AllowanceID AS NVARCHAR(50)))
				FROM (
					SELECT DISTINCT AllowanceID
					FROM #tblAllowance
					) a
				INNER JOIN sys.columns c ON c.name = CAST(a.AllowanceID AS NVARCHAR(50)) AND c.object_id = OBJECT_ID(N'dbo.tblCustomInputImportMonthly')
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

	IF @cols IS NULL OR LEN(@cols) = 0
	BEGIN
		PRINT 'No matching AllowanceID columns found in tblCustomInputImportMonthly. Skipping pivot/merge.';
	END
	ELSE
	BEGIN
		-- 2) Build helper fragments (unquoted names for iteration)
		-- @cols contains something like: [1],[2],[5]
		-- Extract bare names into XML to iterate
		SELECT @colsList = REPLACE(REPLACE(REPLACE(@cols, '[', ''), ']', ''), ' ', '');

		-- Build update assignments: t.[1] = ISNULL(s.[1],0), ...
		SELECT @colsUpdate = STUFF((
					SELECT ', t.' + QUOTENAME(value) + ' = ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- Build insert columns and corresponding values list
		SELECT @colsInsert = STUFF((
					SELECT ',' + QUOTENAME(value)
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

		SELECT @colsValues = STUFF((
					SELECT ', ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- 3) Build and execute dynamic pivot + merge
		SET @sql = N'
    -- create aggregated source (sum per employee per allowance)
    SELECT CAST(AllowanceID AS NVARCHAR(50)) AS AllowanceIDStr, EmployeeID, SUM(ISNULL(ReceiveAmount,0)) AS ReceiveAmount
    INTO ##srcAllowance
    FROM #tblAllowance

    GROUP BY CAST(AllowanceID AS NVARCHAR(50)), EmployeeID;

    -- pivot into wide table
    SELECT EmployeeID, ' + @cols + N'
    INTO ##tmpAllowancePivot
    FROM (
        SELECT EmployeeID, AllowanceIDStr, ReceiveAmount FROM ##srcAllowance
    ) src
    PIVOT (
        SUM(ReceiveAmount) FOR AllowanceIDStr IN (' + @cols + N')
    ) pvt;

    -- MERGE into target
    MERGE dbo.tblCustomInputImportMonthly AS t
    USING ##tmpAllowancePivot AS s
    ON t.EmployeeID = s.EmployeeID AND t.[Year] = ' + @YearParam + N' AND t.[Month] = ' + @MonthParam + N'
    WHEN MATCHED THEN
        UPDATE SET ' + @colsUpdate + N'
    WHEN NOT MATCHED THEN
        INSERT (EmployeeID, [Year], [Month], ' + @colsInsert + N')
        VALUES (s.EmployeeID, ' + @YearParam + N', ' +
			@MonthParam + N', ' + @colsValues + N');

    DROP TABLE ##srcAllowance;
    DROP TABLE ##tmpAllowancePivot;';

		EXEC sp_executesql @sql;
	END

	UPDATE tsh
	SET SalaryHistoryID = att.SalaryHistoryID
	FROM tblCustomInputImportMonthly AS tsh
	INNER JOIN #AttendanceSummary AS att ON tsh.EmployeeID = att.EmployeeID AND tsh.[Year] = att.[Year] AND tsh.[Month] = att.[Month]
	WHERE tsh.[Year] = @Year AND tsh.[Month] = @Month AND tsh.EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			);

	EXEC sp_AllowanceMonthly @Year = @Year, @Month = @Month

	IF (@SalCal = 1)
	BEGIN
		RETURN
	END
END
GO

DELETE FROM tblCustomInputImportMonthly WHERE Year=2025 AND Month=7 AND EmployeeID IN ('62250007','62250010','62250012','62250029','62250030','62250031')

insert into tblCustomInputImportMonthly(EmployeeID,Month,YEar,Remark,[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],SalaryHistoryID,[15],[16],[17])select EmployeeID,Month,YEar,Remark,[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],SalaryHistoryID,[15],[16],[17] from (	select CAST(N'62250007' as varchar(20)) EmployeeID,CAST(7 as int) Month,CAST(2025 as int) YEar,CAST(NULL as nvarchar(1000)) Remark,CAST(NULL as money) [1],CAST(NULL as money) [2],CAST(NULL as money) [3],CAST(NULL as money) [4],CAST(NULL as money) [5],CAST(NULL as money) [6],CAST(NULL as money) [7],CAST(NULL as money) [8],CAST(NULL as money) [9],CAST(NULL as money) [10],CAST(NULL as money) [11],CAST(NULL as money) [12],CAST(NULL as money) [13],CAST(NULL as money) [14],CAST(1746 as int) SalaryHistoryID,CAST(NULL as money) [15],CAST(1100000 as money) [16],CAST(NULL as money) [17]	union all select N'62250010',7,2025,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1749,NULL,500000,NULL	union all select N'62250012',7,2025,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1751,NULL,1350000,NULL	union all select N'62250029',7,2025,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1766,NULL,1100000,NULL	union all select N'62250030',7,2025,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1767,NULL,1100000,NULL	union all select N'62250031',7,2025,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1768,NULL,1100000,NULL) tmpData


DELETE FROM tblCurrencySetting WHERE CurrencyCode='USD' AND DateEffect='2025-07-01'

insert into tblCurrencySetting(CurrencyCode,DateEffect,ExchangeRate,Note)
select CurrencyCode,DateEffect,ExchangeRate,Note from (	select CAST(N'USD' as nvarchar(10)) CurrencyCode,CAST(N'2025-07-01' as date) DateEffect,CAST(26210 as money) ExchangeRate,CAST(NULL as nvarchar(100)) Note) tmpData


if object_id('[dbo].[sp_foreignSalarySummary]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_foreignSalarySummary] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_foreignSalarySummary] @LoginID INT = 3, @Month INT, @Year INT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	SELECT f.EmployeeID, FullName, HireDate, LastWorkingDate, CAST(0 AS INT) Prio, f.DepartmentID, f.DivisionID, f.PositionID, s.SectionID, s.SectionName, ROW_NUMBER() OVER (
			ORDER BY f.EmployeeID
			) STTView, d.DepartmentName, p.PositionNameEN PositionName, f.CostCenter, cc.CostCenterName, CASE
			WHEN ISNULL(f.NationID, 234) = 234
				THEN 'Domestic'
			ELSE 'Foreign'
			END AS EmployeeClass, CASE
			WHEN et.isLocalStaff = 1
				THEN N'Indirect Labor'
			ELSE N'Direct Labor'
			END AS EmployeeType
	INTO #tmpEmployeeList
	FROM dbo.fn_vtblEmployeeList_ByDate(@ToDate, '-1', @LoginId) f
	LEFT JOIN tblSection s ON s.SectionID = f.SectionID
	LEFT JOIN tblDepartment d ON d.DepartmentID = f.DepartmentID
	LEFT JOIN tblPosition p ON p.PositionID = f.PositionID
	LEFT JOIN tblCostCenter cc ON cc.CostCenter = f.CostCenter
	LEFT JOIN tblEmployeeType et ON et.EmployeeTypeID = f.EmployeeTypeID

	SELECT s.*, sh.ExchangeRate_Contract
	INTO #Sal_Sal_Detail
	FROM tblSal_Sal_Detail s
	INNER JOIN #tmpEmployeeList te ON s.EmployeeID = te.EmployeeID
	LEFT JOIN tblSalaryHistory sh ON sh.SalaryHistoryID = s.SalaryHistoryID
	WHERE s.Year = @Year AND s.Month = @Month AND ISNULL(s.IsNet, 0) = 1

	DELETE
	FROM #tmpEmployeeList
	WHERE EmployeeID NOT IN (
			SELECT EmployeeID
			FROM tblSal_Sal_Detail s
			WHERE s.Year = @Year AND s.Month = @Month --AND ISNULL(isNET, 0) = 1
			)

	SELECT al.EmployeeID, al.AllowanceID, SUM(ROUND(al.Amount, 0)) Amount, SUM(al.DefaultAmount) DefaultAmount
	INTO #Allowance
	FROM tblSal_Allowance_Detail al
	INNER JOIN #tmpEmployeeList te ON al.EmployeeID = te.EmployeeID
	WHERE al.Year = @Year AND al.Month = @Month
	GROUP BY al.EmployeeID, al.AllowanceID

	--SELECT * FROM tblAllowanceSetting
	SELECT s.*
	INTO #AttendanceSummary
	FROM tblAttendanceSummary s
	INNER JOIN #tmpEmployeeList te ON s.EmployeeID = te.EmployeeID
	WHERE s.Year = @Year AND s.Month = @Month

	SELECT s.*
	INTO #tblSal_Insurance
	FROM tblSal_Insurance s
	INNER JOIN #tmpEmployeeList t ON s.EmployeeID = t.EmployeeID
	WHERE Year = @Year AND Month = @Month

	SELECT st.*
	INTO #tblSal_Tax
	FROM tblSal_Tax st
	INNER JOIN #tmpEmployeeList te ON st.EmployeeID = te.EmployeeID
	WHERE st.Year = @Year AND st.Month = @Month

	SELECT ROW_NUMBER() OVER (
			ORDER BY Raw_BasicSalary DESC, HireDate
			) AS STT, s.EmployeeID, s.FullName, s.DepartmentName, sal.Raw_BasicSalary, sal.Raw_BasicSalary * sal.ExchangeRate_Contract AS SalaryContract, ats.WorkingHrs_Total, RegularAmt / Raw_ExchangeRate AS Net_RegularAmt, RegularAmt, CAST(NULL AS MONEY) AS percent15HouseRent, house.Amount AS House, house.Amount AS HouseCalcTax, meal.Amount AS MealCalcTax, ins.EmployeeUI, ins.EmployeeSI, ins.EmployeeHI, ins.EmployeeSI, ins.CompanySI, ins.CompanyHI, tax.EmployeeExemption, tax.FamilyExemption, tax.IncomeTaxable, tax.TaxAmt, tax.TaxableIncome_SalaryOnly, tax.TaxAmt_SalaryOnly, ISNULL(tax.TaxAmt, 0) - ISNULL(tax.TaxAmt_SalaryOnly, 0) AS CompanyPay, sal.GrossTakeHome, sal.GrossTakeHome / Raw_ExchangeRate AS Net_GrossTakeHome
	FROM #tmpEmployeeList s
	INNER JOIN #Sal_Sal_Detail sal ON s.EmployeeID = sal.EmployeeID
	LEFT JOIN #AttendanceSummary ats ON s.EmployeeID = ats.EmployeeID
	LEFT JOIN #Allowance house ON s.EmployeeID = house.EmployeeID AND house.AllowanceID = 17
	LEFT JOIN #Allowance meal ON s.EmployeeID = meal.EmployeeID AND meal.AllowanceID = 16
	LEFT JOIN #tblSal_Insurance ins ON s.EmployeeID = ins.EmployeeID
	LEFT JOIN #tblSal_Tax tax ON s.EmployeeID = tax.EmployeeID
	ORDER BY Raw_BasicSalary DESC, HireDate

	SELECT CONCAT (@Year, ' ', FORMAT(DATEFROMPARTS(@Year, @Month, 1), 'MMMM', 'en-US')) AS MonthYear

	SELECT WorkingDays_Std * 8 AS STD_WorkingDays
	FROM tblWorkingDaySetting
	WHERE Year = @Year AND Month = @Month AND EmployeeTypeID = 0

	CREATE TABLE #ExportConfig (ORD INT identity PRIMARY KEY, TableIndex VARCHAR(max), RowIndex INT, ColumnName NVARCHAR(200), ParseType NVARCHAR(max), Position NVARCHAR(200), SheetIndex INT, TestDescription NVARCHAR(max), WithHeader INT, WithBestFit BIT, ColumnList_formatCell VARCHAR(200), formatCell VARCHAR(200))

    INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex, WithHeader)
	VALUES (2, 'Table_NonInsert', 'E16', 0, 0)

	INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex)
	SELECT 0, 'Table|ZeroMeanNull=1 ', 'B11', 0

	INSERT INTO #ExportConfig (TableIndex, ParseType, Position, SheetIndex, WithHeader)
	VALUES (1, 'Table_NonInsert', 'B3', 0, 0)

	SELECT *
	FROM #ExportConfig
END
	--exec sp_foreignSalarySummary 3,7,2025
GO


if object_id('[dbo].[sp_processSummaryAttendance]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_processSummaryAttendance] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_processSummaryAttendance] (@LoginID INT, @Year INT, @Month INT, @ViewType INT = 0, @Payroll BIT = 0)
AS
BEGIN
	--View Type: 0: 0 view chỉ process, 1: view summary, 2: view in-out chi tiết
	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	--LeaveType
	DECLARE @Query NVARCHAR(MAX) = ''

	SELECT @Query += N'IF COL_LENGTH(''tblAttendanceSummary'',''' + LeaveCode + N''') is null
                        ALTER TABLE tblAttendanceSummary ADD [' + LeaveCode + N'] FLOAT;'
	FROM tblLeaveType
	WHERE IsVisible = 1

	EXEC (@Query)

	--Tạo bảng tạm để lưu trữ dữ liệu
	SELECT *, CAST(NULL AS DATETIME) TerminateDate, CAST(NULL AS DATETIME) HireDate, CAST(NULL AS FLOAT) PercentProbation, CAST(NULL AS DATETIME) ProbationEndDate, CAST(NULL AS INT) isForeign
	INTO #tblAttendanceSummary
	FROM tblAttendanceSummary
	WHERE 1 = 0

	SELECT te.EmployeeID, te.DivisionID, te.DepartmentID, te.SectionID, te.GroupID, te.EmployeeTypeID, te.PositionID, te.EmployeeStatusID, te.Sex, CASE
			WHEN te.HireDate > @fromDate
				THEN cast(1 AS BIT)
			ELSE 0
			END AS NewStaff, CAST(0 AS BIT) AS TerminatedStaff, HireDate, CAST(NULL AS DATETIME) TerminateDate, ProbationEndDate, te.LastWorkingDate, CAST(0 AS BIT) hasTwoPeriods, et.isLocalStaff, te.isForeign
	INTO #EmployeeList
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, '-1', @LoginID) te
	INNER JOIN tblDivision div ON te.DivisionID = div.DivisionID
	LEFT JOIN tblEmployeeType et ON te.EmployeeTypeID = et.EmployeeTypeID

	-- WHERE NOT EXISTS (
	-- 		SELECT 1
	-- 		FROM tblSal_Lock l
	-- 		WHERE te.EmployeeID = l.EmployeeID AND l.Month = @Month AND l.Year = @Year
	-- 		)
	IF EXISTS (
			SELECT a.EmployeeID
			FROM tblAtt_LockMonth a
			INNER JOIN #EmployeeList e ON a.EmployeeID = e.EmployeeID
			WHERE a.Month = @Month AND a.Year = @Year
			)
	BEGIN
		DELETE
		FROM #EmployeeList
		WHERE EmployeeID IN (
				SELECT DISTINCT a.EmployeeID
				FROM tblAtt_LockMonth a
				INNER JOIN #EmployeeList e ON a.EmployeeID = e.EmployeeID
				WHERE a.Month = @Month AND a.Year = @Year
				)
	END

	-- khoa roi thi khong tinh luong nua
	SELECT *
	INTO #fn_EmployeeStatus_ByDate
	FROM dbo.fn_EmployeeStatus_ByDate(@ToDate)

	SELECT *
	INTO #fn_EmployeeStatus_ByDate_FirstLastMonth
	FROM dbo.fn_EmployeeStatus_ByDate(dateadd(dd, 1, @ToDate))

	SELECT l.*
	INTO #tblLvHistory
	FROM tblLvHistory l
	INNER JOIN #EmployeeList e ON l.EmployeeID = e.EmployeeID
	WHERE LeaveDate BETWEEN @FromDate AND @ToDate

	--lay trang thai ben bang history cho chinh xac
	UPDATE #EmployeeList
	SET EmployeeStatusID = stt.EmployeeStatusID
	FROM #EmployeeList te
	INNER JOIN #fn_EmployeeStatus_ByDate stt ON te.EmployeeID = stt.EmployeeID

	UPDATE #EmployeeList
	SET EmployeeStatusID = stt.EmployeeStatusID, TerminateDate = stt.ChangedDate, LastWorkingDate = dateadd(dd, - 1, stt.ChangedDate)
	FROM #EmployeeList te
	INNER JOIN #fn_EmployeeStatus_ByDate_FirstLastMonth stt ON te.EmployeeID = stt.EmployeeID
	WHERE stt.EmployeeStatusID = 20

	UPDATE #EmployeeList
	SET TerminatedStaff = 1
	WHERE TerminateDate IS NOT NULL

	SELECT *
	INTO #CurrentSalary
	FROM dbo.fn_CurrentSalaryHistoryIDByDate(@ToDate)

	--Những người có 2 dòng công = 2 dòng lương
	INSERT INTO #tblAttendanceSummary (Year, Month, EmployeeID, HireDate, TerminateDate, ProbationEndDate, PeriodID, SalaryHistoryID, FromDate, ToDate, isForeign)
	SELECT @Year, @Month, sh.EmployeeID, HireDate, TerminateDate, ProbationEndDate, 0, sh.SalaryHistoryID, CASE
			WHEN sh.DATE < @FromDate
				THEN @FromDate
			ELSE sh.DATE
			END, @ToDate, te.isForeign
	FROM #EmployeeList te
	INNER JOIN #CurrentSalary s ON te.EmployeeID = s.EmployeeID
	INNER JOIN tblSalaryHistory sh ON s.SalaryHistoryID = sh.SalaryHistoryID
	WHERE sh.DATE >= te.HireDate

	INSERT INTO #tblAttendanceSummary (Year, Month, EmployeeID, HireDate, TerminateDate, ProbationEndDate, PeriodID, SalaryHistoryID, FromDate, ToDate, isForeign)
	SELECT @Year, @Month, sh.EmployeeID, HireDate, TerminateDate, ProbationEndDate, 1, sh.SalaryHistoryID, CASE
			WHEN sh.DATE < @FromDate
				THEN @FromDate
			ELSE sh.DATE
			END, @ToDate, te.isForeign
	FROM #EmployeeList te
	INNER JOIN tblSalaryHistory sh ON te.EmployeeID = sh.EmployeeID
	WHERE sh.SalaryHistoryID NOT IN (
			SELECT SalaryHistoryID
			FROM #CurrentSalary
			) AND [Date] > @FromDate AND NOT EXISTS (
			SELECT 1
			FROM #tblAttendanceSummary s
			WHERE sh.SalaryHistoryID = s.SalaryHistoryID
			) AND sh.DATE <= @ToDate AND ISNULL(te.isForeign, 0) = 0

	UPDATE #tblAttendanceSummary
	SET PeriodID = 0
	WHERE ToDate < @ToDate

	UPDATE #tblAttendanceSummary
	SET PeriodID = 0
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tblAttendanceSummary s
			GROUP BY EmployeeID
			HAVING COUNT(1) = 1
			)

	--Thử việc
	IF EXISTS (
			SELECT 1
			FROM #tblAttendanceSummary sh
			WHERE ProbationEndDate BETWEEN @FromDate AND @ToDate AND HireDate <> ProbationEndDate
			)
	BEGIN
		UPDATE #tblAttendanceSummary
		SET PercentProbation = ISNULL(CASE
					WHEN ISNULL(tsh.PercentProbation, 0) = 0
						THEN NULL
					ELSE tsh.PercentProbation
					END, et.PercentProbation)
		FROM #tblAttendanceSummary sh
		LEFT JOIN tblSalaryHistory tsh ON sh.SalaryHistoryID = tsh.SalaryHistoryID
		LEFT JOIN #EmployeeList te ON sh.EmployeeID = te.EmployeeID
		LEFT JOIN tblEmployeeType et ON et.EmployeeTypeID = te.EmployeeTypeID
		WHERE sh.ProbationEndDate BETWEEN @FromDate AND @ToDate AND sh.HireDate <> sh.ProbationEndDate

		--het thu viec trong thang nay
		UPDATE #tblAttendanceSummary
		SET FromDate = DATEADD(day, 1, ProbationEndDate), PeriodID = 1
		FROM #tblAttendanceSummary sh
		WHERE ISNULL(PercentProbation, 0) > 0 AND ProbationEndDate BETWEEN @FromDate AND @ToDate AND sh.HireDate <> sh.ProbationEndDate AND FromDate <= ProbationEndDate AND ToDate >= ProbationEndDate

		DECLARE @MaxSalaryHistoryId BIGINT

		SET @MaxSalaryHistoryId = (
				SELECT MAX(SalaryHistoryID)
				FROM #tblAttendanceSummary
				) + 7121997

		INSERT INTO #tblAttendanceSummary (Year, Month, EmployeeID, HireDate, TerminateDate, PeriodID, SalaryHistoryID, FromDate, ToDate)
		SELECT @Year, @Month, sh.EmployeeID, sh.HireDate, sh.TerminateDate, 0, sh.SalaryHistoryID, CASE
				WHEN @FromDate < HireDate
					THEN HireDate
				ELSE @FromDate
				END, ProbationEndDate
		FROM #tblAttendanceSummary sh
		WHERE sh.ProbationEndDate BETWEEN @FromDate AND @ToDate AND sh.HireDate <> sh.ProbationEndDate
	END

	SELECT ot.EmployeeID, ot.OTDate, ot.ApprovedHours, ot.OTKind
	INTO #tblOTList
	FROM tblOTList ot
	WHERE ot.OTDate BETWEEN @FromDate AND @ToDate AND ot.Approved = 1 AND ApprovedHours <> 0 AND ot.EmployeeID IN (
			SELECT te.EmployeeID
			FROM #EmployeeList te
			)

	IF (@Payroll = 0)
	BEGIN
		-- ko nằm trong danh sách thì ko tính lương nha
		CREATE TABLE #Tadata (EmployeeID VARCHAR(20), Attdate DATE, HireDate DATE, EmployeeStatusID INT, HolidayStatus INT, WorkingTime FLOAT(53), Std_Hour_PerDays FLOAT(53), Lvamount FLOAT(53), PaidAmount_Des FLOAT(53), UnpaidAmount_Des FLOAT(53), SalaryHistoryID INT, CutSI BIT, EmployeeTypeID INT)

		SET ANSI_NULLS ON;
		SET ANSI_PADDING ON;
		SET ANSI_WARNINGS ON;
		SET ARITHABORT ON;
		SET CONCAT_NULL_YIELDS_NULL ON;
		SET QUOTED_IDENTIFIER ON;
		SET NUMERIC_ROUNDABORT OFF;

		EXEC sp_WorkingTimeProvider @Month = @Month, @Year = @Year, @fromdate = @FromDate, @todate = @ToDate, @loginId = @LoginID
	END

	DECLARE @ROUND_TOTAL_WORKINGDAYS INT

	SET @ROUND_TOTAL_WORKINGDAYS = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_TOTAL_WORKINGDAYS'
			)
	SET @ROUND_TOTAL_WORKINGDAYS = ISNULL(@ROUND_TOTAL_WORKINGDAYS, 2)

	DELETE
	FROM #Tadata
	WHERE Attdate < HireDate

	--Người nước ngoài mặc định full công - trường hợp vào làm/nghỉ làm giữa tháng
	UPDATE att
	SET WorkingTime = 8, Std_Hour_PerDays = 8
	FROM #Tadata att
	INNER JOIN #EmployeeList e ON att.EmployeeID = e.EmployeeID
	WHERE ISNULL(e.IsForeign, 0) = 1 AND (e.HireDate BETWEEN @FromDate AND @ToDate OR e.TerminateDate BETWEEN @FromDate AND @ToDate)

	SELECT ta.EmployeeID, ta.SalaryHistoryID, SUM(CASE
				WHEN ISNULL(HolidayStatus, 0) <> 1
					THEN 1
				ELSE 0
				END) AS STD_PerHistoryID, ROUND(SUM(CASE
					WHEN ISNULL(HolidayStatus, 0) = 0
						THEN ta.WorkingTime / isnull(ta.Std_Hour_PerDays, 8)
					ELSE 0
					END), @ROUND_TOTAL_WORKINGDAYS) AS AttDays, ROUND(SUM(CASE
					WHEN ISNULL(HolidayStatus, 0) = 0
						THEN ta.WorkingTime
					ELSE 0
					END), @ROUND_TOTAL_WORKINGDAYS) AS AttHrs, SUM(ta.PaidAmount_Des) AS PaidLeaveHrs, SUM(ta.PaidAmount_Des / isnull(ta.Std_Hour_PerDays, 8)) AS PaidLeaveDays, SUM(ta.UnpaidAmount_Des) AS UnpaidLeaveHrs, SUM(ta.UnpaidAmount_Des / isnull(ta.Std_Hour_PerDays, 8)) AS UnpaidLeaveDays, SUM(CASE
				WHEN HolidayStatus = 1
					THEN 1
				ELSE 0
				END) AS TotalSunDay, SUM(CASE
				WHEN CutSI = 1 AND HolidayStatus <> 1
					THEN 1
				ELSE 0
				END) TotalNonWorkingDays, ta.Std_Hour_PerDays, s.PeriodID
	INTO #tblSal_AttendanceData
	FROM #Tadata ta
	INNER JOIN #tblAttendanceSummary s ON ta.EmployeeID = s.EmployeeID AND ta.AttDate BETWEEN s.FromDate AND s.ToDate
	GROUP BY ta.EmployeeID, ta.SalaryHistoryID, ta.Std_Hour_PerDays, s.PeriodID

	SELECT EmployeeID, SaturdayDate AS SatDate
	INTO #SatWorkList
	FROM dbo.fn_GetEmployeeSatWork(@LoginID, @Month, @Year)
	--WHERE SaturdayDate BETWEEN @FromDate AND @ToDate
	
	UNION
	
	SELECT EmployeeID, SaturdayDate_2nd AS SatDate
	FROM dbo.fn_GetEmployeeSatWork(@LoginID, @Month, @Year)

	-- Đếm số ngày thứ 7 cho từng nhân viên theo HireDate và TerminateDate
	UPDATE s
	SET AttHrs = ISNULL(s.AttHrs, 0) + (ISNULL(s.Std_Hour_PerDays, 8) * SatCount), AttDays = ISNULL(s.AttDays, 0) + SatCount
	FROM #tblSal_AttendanceData s
	INNER JOIN #EmployeeList e ON s.EmployeeID = e.EmployeeID
	INNER JOIN #tblAttendanceSummary ta ON ta.EmployeeID = s.EmployeeID AND s.PeriodID = ta.PeriodID
	CROSS APPLY (
		SELECT COUNT(*) AS SatCount
		FROM (
			SELECT TOP (
					DATEDIFF(DAY, CASE
							WHEN e.HireDate > FromDate
								THEN e.HireDate
							ELSE FromDate
							END, CASE
							WHEN e.TerminateDate IS NOT NULL AND e.TerminateDate < ToDate
								THEN e.TerminateDate
							ELSE ToDate
							END) + 1
					) DATEADD(DAY, ROW_NUMBER() OVER (
						ORDER BY (
								SELECT NULL
								)
						) - 1, CASE
						WHEN e.HireDate > FromDate
							THEN e.HireDate
						ELSE FromDate
						END) AS TheDate
			FROM sys.all_objects
			) AS Dates
		WHERE DATENAME(WEEKDAY, TheDate) = 'Saturday' AND TheDate NOT IN (
				SELECT SatDate
				FROM #SatWorkList sat
				WHERE sat.EmployeeID = e.EmployeeID
				)
		) Sat
	WHERE e.isLocalStaff = 1 AND e.HireDate <= @ToDate AND (e.TerminateDate IS NULL OR e.TerminateDate >= @FromDate)

	UPDATE #tblAttendanceSummary
	SET WorkingHrs_Total = ISNULL(ta.AttHrs, 0), WorkingDays_Total = ISNULL(ta.AttDays, 0) + ISNULL(ta.PaidLeaveDays, 0), PaidLeaveDays_Total = ta.PaidLeaveDays, Std_Hour_PerDays = ta.Std_Hour_PerDays, PaidLeaveHrs_Total = ta.PaidLeaveHrs, UnpaidLeaveDays = ta.UnpaidLeaveDays, UnpaidLeaveHrs = ta.UnpaidLeaveHrs
	FROM #tblAttendanceSummary att
	INNER JOIN #tblSal_AttendanceData ta ON att.EmployeeID = ta.EmployeeID AND att.PeriodID = ta.PeriodID

	UPDATE #tblAttendanceSummary
	SET STD_WorkingDays = wds.WorkingDays_Std
	FROM #tblAttendanceSummary att
	INNER JOIN #EmployeeList te ON att.EmployeeID = te.EmployeeID
	LEFT JOIN tblWorkingDaySetting wds ON wds.EmployeeTypeID = te.EmployeeTypeID AND wds.Year = @Year AND wds.Month = @Month

	UPDATE #tblAttendanceSummary
	SET RegularWorkdays = ISNULL(wds.WorkingDays_Std, 26)
	FROM #tblAttendanceSummary att
	LEFT JOIN tblWorkingDaySetting wds ON wds.EmployeeTypeID = 0 AND wds.Year = @Year AND wds.Month = @Month

	--Người nước ngoài mặc định full công - trường hợp vào làm/nghỉ làm giữa tháng
	UPDATE att
	SET RegularWorkdays = ISNULL(RegularWorkdays, 0), WorkingHrs_Total = (RegularWorkdays * 8)
	FROM #tblAttendanceSummary att
	WHERE ISNULL(att.IsForeign, 0) = 1 AND (HireDate <= @FromDate AND (TerminateDate IS NULL OR TerminateDate >= @ToDate))

	-- UPDATE #tblAttendanceSummary
	-- SET WorkingHrs_Total = WorkingHrs_Total + ((RegularWorkdays * Std_Hour_PerDays) - (STD_WorkingDays * Std_Hour_PerDays))
	-- FROM #tblAttendanceSummary att
	-- WHERE STD_WorkingDays <> RegularWorkdays AND RegularWorkdays * ISNULL(Std_Hour_PerDays, 0) <> ISNULL(WorkingHrs_Total, 0) + ISNULL(PaidLeaveHrs_Total, 0) + ISNULL(UnpaidLeaveHrs, 0)
	-- Dynamic set-based update: pivot LvAmount from #tblLvHistory per LeaveCode and update #tblAttendanceSummary
	-- Aggregates by EmployeeID and SalaryHistoryID to match multiple salary periods per employee
	DECLARE @cols NVARCHAR(MAX), @assign NVARCHAR(MAX), @sql NVARCHAR(MAX)

	-- build column list and assignments from visible LeaveCode
	SELECT @cols = STUFF((
				SELECT ',' + QUOTENAME(LeaveCode)
				FROM tblLeaveType
				WHERE IsVisible = 1
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '')

	SELECT @assign = STUFF((
				SELECT ',s.' + QUOTENAME(LeaveCode) + ' = ISNULL(p.' + QUOTENAME(LeaveCode) + ',0)'
				FROM tblLeaveType
				WHERE IsVisible = 1
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '')

	IF @cols IS NOT NULL AND LEN(@cols) > 0
	BEGIN
		SET @sql = N'
		;WITH lv AS (
			SELECT EmployeeID, LeaveCode, SUM(ISNULL(LvAmount,0)) AS LvAmount
			FROM #tblLvHistory
			GROUP BY EmployeeID, LeaveCode
		)
		SELECT * INTO #tmpLvPivot FROM (
			SELECT EmployeeID, LeaveCode, LvAmount FROM lv
		) src
		PIVOT (SUM(LvAmount) FOR LeaveCode IN (' + @cols + N')) AS pvt;

		UPDATE s
		SET ' + @assign + N'
		FROM #tblAttendanceSummary s
		LEFT JOIN #tmpLvPivot p ON s.EmployeeID = p.EmployeeID;

		DROP TABLE #tmpLvPivot;'

		EXEC sp_executesql @sql
	END

	DELETE t
	FROM tblAttendanceSummary t
	WHERE EXISTS (
			SELECT 1
			FROM #tblAttendanceSummary s
			WHERE t.EmployeeID = s.EmployeeID AND t.Year = s.Year AND t.Month = s.Month
			)

	-- Insert processed summary rows from temp table into permanent table
	INSERT INTO tblAttendanceSummary (Year, Month, EmployeeID, PeriodID, SalaryHistoryID, FromDate, ToDate, WorkingHrs_Total, WorkingDays_Total, PaidLeaveDays_Total, UnpaidLeaveDays, PaidLeaveHrs_Total, UnpaidLeaveHrs, STD_WorkingDays, Std_Hour_PerDays, RegularWorkdays)
	SELECT Year, Month, EmployeeID, ISNULL(PeriodID, 0), SalaryHistoryID, FromDate, ToDate, WorkingHrs_Total, WorkingDays_Total, PaidLeaveDays_Total, UnpaidLeaveDays, PaidLeaveHrs_Total, UnpaidLeaveHrs, STD_WorkingDays, Std_Hour_PerDays, RegularWorkdays
	FROM #tblAttendanceSummary;

	SET @sql = '
    UPDATE s SET ' + @assign + N'
		FROM tblAttendanceSummary s
		INNER JOIN #tblAttendanceSummary p ON s.EmployeeID = p.EmployeeID AND s.Year = p.Year AND s.Month = p.Month
    '

	EXEC sp_executesql @sql

	EXEC sp_accumulatedOT @LoginID = @LoginID, @Month = @Month, @Year = @Year, @MaxOT = 40, @isView = 1

	IF (ISNULL(@ViewType, 0) = 1)
		SELECT *
		FROM tblAttendanceSummary t
		WHERE EXISTS (
				SELECT 1
				FROM #tblAttendanceSummary s
				WHERE t.EmployeeID = s.EmployeeID AND t.Year = s.Year AND t.Month = s.Month
				)
			--exec sp_processSummaryAttendance 3,2025,7
END
GO


if object_id('[dbo].[SALCAL_MAIN]') is null
	EXEC ('CREATE PROCEDURE [dbo].[SALCAL_MAIN] as select 1')
GO

--exec SALCAL_MAIN 7,2021,3,0,'-1',0
ALTER PROCEDURE [dbo].[SALCAL_MAIN] (@Month INT, @Year INT, @LoginID INT, @PeriodID INT = 0, @EmployeeID NVARCHAR(20) = '-1', @CalculateRetro INT = 0)
AS
BEGIN
	IF @CalculateRetro IS NULL
		SET @CalculateRetro = 0

	DECLARE @nextMonth INT = @month + 1, @nextYear INT = @Year

	IF (@nextMonth = 13)
	BEGIN
		SET @nextMonth = 1
		SET @nextYear += 1
	END

	IF ISNULL(@PeriodID, - 1) < 0
		SET @PeriodID = 0

	IF isnull(@EmployeeID, '') = ''
		SET @EmployeeID = '-1'

	DECLARE @Query NVARCHAR(max), @StopUPDATE BIT = 0

	SET NOCOUNT ON;
	SET ANSI_WARNINGS OFF;

	TRUNCATE TABLE tblProcessErrorMessage

	/*	Danh mục tính lương
	-- lấy 1 bảng bao gồm ngày công ,nghỉ
	- Phát sinh 2,3 mức lương trong tháng: muc luong phat sinh moi trong thang
	- Tính công chuẩn: standard working day
	- Tạo lvHistory để tính chuyên cần: tao nghi viec neu de tinh chuyen can, tru thieu cong
	- Xóa dữ liệu tính lương lần trước: Delete old data
	- Tính lương 1 ngày: Calculate salary per day
	- Tính lương 1 giờ: Calculate salary per hour
	- Tính nghỉ trả lương, trừ lương: Leave Amount
	- Tính lương cơ bản: Calculate Actual salary
	- Tính lương tăng ca: Calculate OT
	- Tính điều chỉnh trong tháng: Calculate Adjustment
	- Tính phụ cấp: Calculate Allowance
	- Tính phụ cấp thâm niên: thâm niên
	- Tính phụ cấp chuyên cần: chuyên cần, chuyen can chuyencan
	- Tính phụ cấp đồng phục, nhà ở: phụ cấp trang phục
	- Tính tiền bảo hiểm: Calculate Employee insurance
	- Phí công đoàn: Calculate Trade Union fee
	- Trừ tiền đi trễ về sớm: Calculate IO
	- Tổng lương thực lãnh lần 1: Payroll sumaried items
	- Tính thuế TNCN: Calculate tax
	- Cập nhật lại lương thực lãnh: UPDATE other sumaried items of Sumary Table
	- Cập nhật lương detail, bảng lương tổng: UPDATE salary detail records
*/
	EXEC sp_getMonthlyPayrollCheckList @Month = @Month, @Year = @Year, @LoginID = @LoginID, @NotSelect = 1

	--exec sp_UnionMembershipList @LoginID = @LoginID, @NotSelect = 1
	CREATE TABLE #NameOfPhysicTables (TempTablename NVARCHAR(500), PhysicTableName NVARCHAR(500), ColumnNeedToBeDeduct VARCHAR(max), PrimaryKeyCOlumns VARCHAR(max))

	SELECT *
	INTO #tblSal_Adjustment_des
	FROM tblSal_Adjustment
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Adjustment_des', 'tblSal_Adjustment', 'Amount,TaxableAmount,UntaxableAmount'

	SELECT *
	INTO #tblSal_Allowance_des
	FROM tblSal_Allowance
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Allowance_des', 'tblSal_Allowance', 'Amount,AmountLastMonth,UntaxableAmount,TaxableAmount,RetroAmount,RetroAmountNonTax,MonthlyCustomAmount'

	SELECT *
	INTO #tblSal_IO_des
	FROM tblSal_IO
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_IO_des', 'tblSal_IO', ''

	SELECT *
	INTO #tblSal_NS_des
	FROM tblSal_NS
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_NS_des', 'tblSal_NS', 'NSHours,NSAmount'

	SELECT *
	INTO #tblSal_OT_des
	FROM tblSal_OT
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_OT_des', 'tblSal_OT', 'OTAmount,TaxableOTAmount,NoneTaxableOTAmount,NightShiftAmount'

	SELECT *
	INTO #tblSal_PaidLeave_des
	FROM tblSal_PaidLeave
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_PaidLeave_des', 'tblSal_PaidLeave', 'LeaveDays,LeaveHour,AmountDeduct,AmountPaid'

	----from detail table
	SELECT *
	INTO #tblSal_Allowance_Detail_des
	FROM tblSal_Allowance_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Allowance_Detail_des', 'tblSal_Allowance_Detail', 'Amount,AmountLastMonth,TaxableAmount,UntaxableAmount,Raw_DefaultAmount,Raw_ExchangeRate,RetroAmount,RetroAmountNonTax,MonthlyCustomAmount'

	SELECT *
	INTO #tblSal_IO_Detail_des
	FROM tblSal_IO_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_IO_Detail_des', 'tblSal_IO_Detail', ''

	SELECT *
	INTO #tblSal_NS_Detail_des
	FROM tblSal_NS_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_NS_Detail_des', 'tblSal_NS_Detail', 'NSHours,NSAmount'

	SELECT *
	INTO #tblSal_OT_Detail_des
	FROM tblSal_OT_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_OT_Detail_des', 'tblSal_OT_Detail', 'OTHour,OTAmount,NightShiftAmount'

	SELECT *
	INTO #tblSal_PaidLeave_Detail_des
	FROM tblSal_PaidLeave_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_PaidLeave_Detail_des', 'tblSal_PaidLeave_Detail', 'LeaveDays,LeaveHour,AmountDeduct,AmountPaid'

	----other sal table
	SELECT *
	INTO #tblSal_Error_des
	FROM tblSal_Error
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName)
	SELECT '#tblSal_Error_des', 'tblSal_Error'

	SELECT *
	INTO #tblSal_Adjustment_ForAllowance_Des
	FROM tblSal_Adjustment_ForAllowance
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName)
	SELECT '#tblSal_Adjustment_ForAllowance_Des', 'tblSal_Adjustment_ForAllowance'

	SELECT *
	INTO #tblSal_Abroad_ForTaxPurpose_des
	FROM tblSal_Abroad_ForTaxPurpose
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Abroad_ForTaxPurpose_des', 'tblSal_Abroad_ForTaxPurpose', 'NetAmountVND,Raw_NetAmount,GrossAmountVND,Raw_GrossAmount'

	SELECT *
	INTO #tblSal_tax_des
	FROM tblSal_tax
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_tax_des', 'tblSal_tax', 'IncomeTaxable,TaxAmt,OTDeduction,Salary13Amount,TaxableIncome_EROnly_ForNETOnly,PITAmt_ER,TaxRetroImported'

	SELECT *
	INTO #tblSal_Sal_des
	FROM tblSal_Sal
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Sal_des', 'tblSal_Sal', 'ActualMonthlyBasic,TaxableAllowance,NontaxableAllowance,TaxableAdjustment,NontaxableAdj,TotalIncome,IOAmt,EmpUnion,CompUnion,TaxableIncomeBeforeDeduction,IncomeAfterPIT,GrossTakeHome,TotalEarn,RemainAL,TaxableAdjustmentTotal_ForSalary,TaxableAdjustmentTotal_NotForSalary,TotalIncome_Taxable_Without_INS_Persion_family,TotalIncome_ForSalaryTaxedAdj,TotalCostComPaid,TotalPayrollFund,TotalDeduction,UnpaidLeaveAmount,EmpUnion_RETRO,CompUnion_RETRO,TotalNetIncome_Custom,GrossedUpWithoutHousing_Custom,GrossedUpWithoutHousing_WithoutGrossIncome_Custom'

	SELECT *
	INTO #tblSal_Sal_Detail_des
	FROM tblSal_Sal_Detail
	WHERE 1 = 0

	INSERT INTO #NameOfPhysicTables (TempTablename, PhysicTableName, ColumnNeedToBeDeduct)
	SELECT '#tblSal_Sal_Detail_des', 'tblSal_Sal_Detail', 'ATTHours,WorkingHours,ActualMonthlyBasic,TaxableAllowance,NontaxableAllowance,TaxableAdjustment,NontaxableAdj,TotalIncome,IOAmt,EmpUnion,CompUnion,TaxableIncomeBeforeDeduction,IncomeAfterPIT,GrossTakeHome,TotalEarn,DaysOfSalEntry,TaxableAdjustmentTotal_ForSalary,TaxableAdjustmentTotal_NotForSalary,UnpaidLeaveAmount,TotalNetIncome_Custom,GrossedUpWithoutHousing_Custom,GrossedUpWithoutHousing_WithoutGrossIncome_Custom'

	DECLARE @FromDate DATETIME, @ToDate DATETIME, @ToDateTruncate DATE, @CAL_SALTAX_PROGRESSIVE_ALLEMPS INT, @FIXEDWORKINGDAY FLOAT = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'FIXEDWORKINGDAY'
			), @ROUND_TAKE INT, @ROUND_NET INT, @ROUND_SALARY_UNIT INT, @PROBATION_PERECNT FLOAT, @ROUND_OT_NS_Detail_UNIT INT, @ROUND_TOTAL_WORKINGDAYS INT, @ROUND_ATTDAYS INT

	SET @ROUND_TAKE = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_TAKE'
			)
	SET @ROUND_TAKE = ISNULL(@ROUND_TAKE, - 3)
	SET @ROUND_ATTDAYS = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_ATTDAYS'
			)
	SET @ROUND_ATTDAYS = ISNULL(@ROUND_ATTDAYS, 4)
	SET @ROUND_NET = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_NET'
			)
	SET @ROUND_NET = ISNULL(@ROUND_NET, - 3)
	SET @ROUND_SALARY_UNIT = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_SALARY_UNIT'
			)
	SET @ROUND_SALARY_UNIT = ISNULL(@ROUND_SALARY_UNIT, 4)
	SET @ROUND_OT_NS_Detail_UNIT = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_OT_NS_Detail_UNIT'
			)
	SET @ROUND_OT_NS_Detail_UNIT = ISNULL(@ROUND_OT_NS_Detail_UNIT, 4)
	SET @ROUND_TOTAL_WORKINGDAYS = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_TOTAL_WORKINGDAYS'
			)
	SET @ROUND_TOTAL_WORKINGDAYS = ISNULL(@ROUND_TOTAL_WORKINGDAYS, 2)
	SET @FIXEDWORKINGDAY = ISNULL(@FIXEDWORKINGDAY, 26.0)
	SET @CAL_SALTAX_PROGRESSIVE_ALLEMPS = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'CAL_SALTAX_PROGRESSIVE_ALLEMPS'
			)

	IF (@CAL_SALTAX_PROGRESSIVE_ALLEMPS IS NULL)
		SET @CAL_SALTAX_PROGRESSIVE_ALLEMPS = 0
	SET @PROBATION_PERECNT = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'PROBATION_PERECNT'
			)
	SET @PROBATION_PERECNT = ISNULL(@PROBATION_PERECNT, 100)

	SELECT @FromDate = FromDate, @ToDate = ToDate, @ToDateTruncate = ToDate
	FROM dbo.fn_Get_SalaryPeriod_Term(@Month, @Year, @PeriodID)

	CREATE TABLE #tblSalDetail (
		EmployeeID VARCHAR(20), BasicSalary FLOAT(53), BasicSalaryOrg FLOAT(53), GrossSalary FLOAT(53), TotalSalary FLOAT(53), STD_WD FLOAT, STD_WD_Schedule FLOAT, OTSalary FLOAT(53), SalaryPerDay FLOAT(53), RegularAmt FLOAT(53), PaidLeaveAmt FLOAT(53), SalaryPerHour FLOAT(53), SalaryPerDayOT FLOAT(53), SalaryPerHourOT FLOAT(53), WorkingHoursPerDay FLOAT(53), DaysOfSalEntry FLOAT, ActualMonthlyBasic FLOAT(53), UnpaidLeaveAmount FLOAT(53), TaxableOTTotal FLOAT(53), NoneTaxableOTTotal FLOAT(53), TotalOTAmount FLOAT(53) --dung de round
		, TotalNSAmt FLOAT(53), NightShiftAmount FLOAT(53), NoneTaxableNSAmt FLOAT(53), TaxableAllowanceTotal FLOAT(53), NoneTaxableAllowanceTotal FLOAT(53), TotalAllowanceForSalary FLOAT(53), TaxableAdjustmentTotal FLOAT(53), TaxableAdjustmentTotal_ForSalary FLOAT(53), TaxableAdjustmentTotal_NotForSalary FLOAT(53), NoneTaxableAdjustmentTotal FLOAT(53), TotalAdjustmentForSalary FLOAT(53), TotalAdjustment_WithoutForce FLOAT(53), TotalEarn FLOAT(53) -- Tổng thu nhập gồm toàn những khoản cộng
		, TotalIncome FLOAT(53) -- Tổng thu nhập\	
		, TotalIncome_ForSalaryTaxedAdj FLOAT(53) -- Tổng thu nhập + allowance + adjustment trong lương chịu thuế
		, TotalIncome_Taxable_Without_INS_Persion_family FLOAT(53) -- Tổng thu nhập + allowance + adjustment trong lương chịu thuế
		, TaxableIncomeBeforeDeduction FLOAT(53), TaxableIncomeBeforeDeduction_EROnly_ForNETOnly FLOAT(53), OwnerDeduction FLOAT(53), DependentDeduction FLOAT(53), TaxableIncome FLOAT(53), TaxableIncome_EROnly_ForNETOnly FLOAT(53), PITAmt FLOAT(53), PITAmt_ER FLOAT(53), EmpUnion_RETRO FLOAT(53), EmpUnion FLOAT(53), CompUnion_RETRO FLOAT(53), CompUnion FLOAT(53), InsAmt FLOAT(53) --10.5% cua nhan vien dong
		, InsAmtComp FLOAT(53), PITReturn FLOAT(53) -- điều chỉnh sau lương
		, IncomeAfterPIT FLOAT(53), OtherDeductionAfterPIT FLOAT(53) -- mục đích thể hiện số tiền bị trừ sau thuế, giống cột tạm ứng
		, AdvanceAmt FLOAT(53), TotalCostComPaid FLOAT(53), TotalPayrollFund FLOAT(53), Salary13thProvision FLOAT(53), FromDate DATETIME, ToDate DATETIME, SalaryHistoryID BIGINT, BaseSalRegionalID INT, isTwoSalLevel BIT, SalCalRuleID INT, LatestSalEntry BIT, IOAmt FLOAT(53) -- đi trễ về sớm
		, TotalDeduct FLOAT(53) -- tổng các khoản khấu trừ, cong đoàn, bảo hiểm,thuế, trừ khác
		, GrossTakeHome FLOAT(53), AverageSalary FLOAT(53) -- luong binh quan khi co nhieu muc luong trong thang
		, CurrencyCode NVARCHAR(20), ExchangeRate FLOAT(53), IsNet BIT, TotalNetIncome_Custom FLOAT(53), GrossedUpWithoutHousing_Custom FLOAT(53), GrossedUpWithoutHousing_WithoutGrossIncome_Custom FLOAT(53)
		--,SalaryCalculationDAte date
		, STDPerSalaryHistoryId FLOAT(53), PayrollTypeCode VARCHAR(50), ProbationSalaryHistoryID BIGINT, PercentProbation FLOAT, AnnualBonus_Total FLOAT(53), AnnualBonus_EvMonth FLOAT(53), Bonus6Month_Total FLOAT(53), Bonus6M_EveryMonth FLOAT(53), NETSalary FLOAT(53) --TRIPOD
		)

	IF (OBJECT_ID('SALCAL_ADD_COLUMN_INTO_TMP_TABLE') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ADD_COLUMN_INTO_TMP_TABLE
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ADD_COLUMN_INTO_TMP_TABLE @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	--TRIPOD: STD
	SELECT EmployeeID, isSalCal, isLowTaxableInCome, PayrollCutOffDate, Number6DayMonth, Number6DayMonth_Actual, NumberDayOfYear, NumberDayOfYear_Actual, STD_WorkingHours, ActualMonthInYear, Bonus6MonthAllowance, RatioBonus6Month
	INTO #tmpMonthlyPayrollCheckList
	FROM tblMonthlyPayrollCheckList
	WHERE Month = @Month AND Year = @Year

	IF @PeriodID = 1
		DELETE #tmpMonthlyPayrollCheckList
		WHERE ISNULL(PayrollCutOffDate, DATEADD(day, 1, @todate)) NOT BETWEEN @FromDate AND @ToDate

	SELECT te.EmployeeID, te.DivisionID, te.DepartmentID, te.SectionID, te.GroupID, te.EmployeeTypeID, te.PositionID, te.EmployeeStatusID, te.Sex, CASE
			WHEN te.HireDate > @fromDate
				THEN cast(1 AS BIT)
			ELSE 0
			END AS NewStaff, CAST(0 AS BIT) AS TerminatedStaff, HireDate, CAST(NULL AS DATETIME) TerminateDate, ProbationEndDate, te.LastWorkingDate
	INTO #tblEmployeeIDList
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDateTruncate, @EmployeeID, @LoginID) te
	INNER JOIN tblDivision div ON te.DivisionID = div.DivisionID
	WHERE NOT EXISTS (
			SELECT 1
			FROM tblSal_Lock l
			WHERE te.EmployeeID = l.EmployeeID AND @CalculateRetro = 0 AND l.Month = @Month AND l.Year = @Year
			)

	-- khoa roi thi khong tinh luong nua
	SELECT *
	INTO #fn_EmployeeStatus_ByDate
	FROM dbo.fn_EmployeeStatus_ByDate(@ToDate)

	SELECT *
	INTO #fn_EmployeeStatus_ByDate_FirstLastMonth
	FROM dbo.fn_EmployeeStatus_ByDate(dateadd(dd, 1, @ToDate))

	--lay trang thai ben bang history cho chinh xac
	UPDATE #tblEmployeeIDList
	SET EmployeeStatusID = stt.EmployeeStatusID
	FROM #tblEmployeeIDList te
	INNER JOIN #fn_EmployeeStatus_ByDate stt ON te.EmployeeID = stt.EmployeeID

	UPDATE #tblEmployeeIDList
	SET EmployeeStatusID = stt.EmployeeStatusID, TerminateDate = stt.ChangedDate, LastWorkingDate = dateadd(dd, - 1, stt.ChangedDate)
	FROM #tblEmployeeIDList te
	INNER JOIN #fn_EmployeeStatus_ByDate_FirstLastMonth stt ON te.EmployeeID = stt.EmployeeID
	WHERE stt.EmployeeStatusID = 20

	UPDATE #tblEmployeeIDList
	SET TerminatedStaff = 1
	WHERE TerminateDate IS NOT NULL

	SELECT *
	INTO #tblEmployeeIDList_Needdelete
	FROM #tblEmployeeIDList
	WHERE 1 = 0

	-- ko nằm trong danh sách thì ko tính lương nha
	INSERT INTO #tblEmployeeIDList_Needdelete
	SELECT *
	FROM (
		DELETE #tblEmployeeIDList
		OUTPUT deleted.*
		FROM #tblEmployeeIDList te
		WHERE te.EmployeeID NOT IN (
				SELECT EmployeeID
				FROM #tmpMonthlyPayrollCheckList
				WHERE isSalCal = 1
				)
		) de

	IF @@ROWCOUNT > 0
	BEGIN
		-- delete các bảng thực
		SELECT EmployeeID, @Month AS Month, @year AS Year, @PeriodID AS PeriodID
		INTO #delete_data
		FROM #tblEmployeeIDList_Needdelete

		DELETE #delete_data
		FROM #delete_data de
		INNER JOIN tblSal_lock s ON de.EmployeeID = s.EmployeeId AND s.Month = @Month AND s.Year = @Year

		DECLARE @deleteQuery_Phy VARCHAR(max) = ''

		SELECT @deleteQuery_Phy += '
		delete ' + PhysictableName + ' from ' + physictablename + ' p inner join #delete_data d on p.employeeId = d.EmployeeID and p.Month = d.Month and p.Year = d.Year and p.PeriodID = d.PeriodID'
		FROM #NameOfPhysicTables

		EXEC (@deleteQuery_Phy)

		DROP TABLE #delete_data
	END

	IF NOT EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList
			)
		RETURN;

	-- những ai chưa khóa công thì ko cho tính lương
	INSERT INTO tblProcessErrorMessage (ErrorType, ErrorDetail, LoginID)
	SELECT N'Khóa công!', '[' + de.EmployeeID + N']	-- Bạn chưa khóa công!', @LoginID
	FROM (
		DELETE #tblEmployeeIDList
		OUTPUT deleted.EmployeeID
		FROM #tblEmployeeIDList e
		WHERE NOT EXISTS (
				SELECT 1
				FROM tblAtt_LockMonth f
				WHERE e.EmployeeID = f.EmployeeID AND f.Month = @Month AND f.Year = @Year
				)
		) de

	DELETE c
	FROM #tmpMonthlyPayrollCheckList c
	WHERE employeeID NOT IN (
			SELECT employeeID
			FROM #tblEmployeeIDList
			)

	SELECT *
	INTO #EmployeeExchangeRate
	FROM dbo.fn_GetExchangeRateInSalaryPeriod(@loginid, @FromDate, @ToDate) c
	WHERE c.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	IF EXISTS (
			SELECT 1
			FROM #EmployeeExchangeRate
			GROUP BY EmployeeId, CurrencyCode
			HAVING count(1) > 1
			)
	BEGIN
		RAISERROR ('MultiplecurrencyCode,Please Contact VietTinSoft to fix it!', 16, 1)

		RETURN;
	END

	IF (
			SELECT COUNT(1)
			FROM #tblEmployeeIDList
			) = 0
		RETURN

	-- move SAlretro here to query on sal OT, sal NS
	SELECT *
	INTO #tblSal_Retro
	FROM tblSal_Retro
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	SELECT DISTINCT EmployeeID, Month, Year
	INTO #tblsal_retro_Final
	FROM #tblSal_Retro

	DECLARE @querytblSAl_Retro VARCHAR(max) = ''
	DECLARE @querytblSAl_Retro_update VARCHAR(max) = ''
	DECLARE @querytblSAl_Retro_sumQue VARCHAR(max) = ''

	SELECT @querytblSAl_Retro += ',' + c.name + ' money', @querytblSAl_Retro_update += ', [' + c.name + '] = [S_' + c.name + ']', @querytblSAl_Retro_sumQue += ', sum([' + c.name + ']) as S_' + c.name + ''
	FROM tempdb.sys.columns c
	INNER JOIN sys.types t ON c.user_type_id = t.user_type_id AND t.name = 'money'
	WHERE c.object_id = object_id('tempdb..#tblSal_Retro')

	SET @querytblSAl_Retro = 'alter table #tblsal_retro_Final add BalanceDays float ,' + SUBSTRING(@querytblSAl_Retro, 2, 99999)

	EXEC (@querytblSAl_Retro)

	SET @querytblSAl_Retro_update = 'update #tblsal_retro_Final set BalanceDays= S_BalanceDays,' + SUBSTRING(@querytblSAl_Retro_update, 2, 99999) + '
	from #tblsal_retro_Final r
	inner join (select EmployeeID,Max(case when BalanceDays = 0 then -9999 else BalanceDays end) as S_BalanceDays' + @querytblSAl_Retro_sumQue + '
	from #tblsal_retro group by EmployeeID) sal on r.EmployeeId = sal.EmployeeID '

	EXEC (@querytblSAl_Retro_update)

	EXEC sp_InsertUpdateFromTempTableTOTable @TempTableName = N'#tblsal_retro_Final', @TableName = tblSal_Retro_Sumary

	DELETE tblSal_Retro_Sumary
	FROM tblSal_Retro_Sumary re
	WHERE month = @month AND year = @year AND NOT EXISTS (
			SELECT 1
			FROM tblSal_lock sl
			WHERE sl.EmployeeID = re.EmployeeID AND sl.Month = @Month AND sl.Year = @Year
			) AND NOT EXISTS (
			SELECT 1
			FROM tblSal_Retro re1
			WHERE re.EmployeeID = re1.EmployeeID AND re1.Month = @Month AND re1.Year = @Year
			) AND ISNULL(re.IsImported, 0) = 0

	DROP TABLE #tblSal_Retro

	SELECT EmployeeID
	INTO #EmployeeWorkingOn
	FROM tmpEmployeeTree
	WHERE LoginID = @LoginID

	--SET @LoginID = @LoginID + 1000
	--delete tmpEmployeeTree where LoginID = @LoginID
	--insert into tmpEmployeeTree(EmployeeID,LoginID)
	--select EmployeeID,@LoginID from #tblEmployeeIDList
	DECLARE @SIDate DATETIME

	SELECT @SIDate = cast(cast(Year(@ToDate) AS NVARCHAR(20)) + '-' + cast(Month(@ToDate) AS NVARCHAR(20)) + '-15' AS DATE)

	-- nhan vien dong thue thoi vu
	-- dùng để tính thuế cho thời vụ, thử việc không có cam kết thu nhập thấp hoặc nhân viên không có hợp đồng
	SELECT e.EmployeeID, cast(isnull(pit.FixedPercents, 10) / 100 AS FLOAT) TaxPercentage, isnull(lb.isLowSalary, 0) isLowSalary, ISNULL(pit.PITStatus, 1) AS PITStatus, DivisionID
	INTO #tblTemporaryContractTax
	FROM #tblEmployeeIDList e
	INNER JOIN (
		SELECT EmployeeID, ContractID
		FROM dbo.fn_CurrentContractListByDate(@SIDate) c
		WHERE c.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)
		
		UNION
		
		SELECT EmployeeID, ContractID
		FROM dbo.fn_CurrentContractListByDate(@ToDate) c
		WHERE c.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList ee
				WHERE ee.HireDate > @SIDate
				)
		) c ON e.EmployeeID = c.EmployeeID
	INNER JOIN tblLabourContract lb ON c.ContractID = lb.ContractID
	INNER JOIN tblMST_ContractType mst ON lb.ContractCode = mst.ContractCode
	LEFT JOIN tblContract_PIT_Status pit ON lb.PITStatus = pit.PITStatus
	WHERE ((isnull(pit.FollowLabourContract, 0) = 1 AND ISNULL(mst.ShortTermTax, 0) = 1) OR (isnull(pit.Progressive, 0) = 0)) AND @CAL_SALTAX_PROGRESSIVE_ALLEMPS = 0 AND EXISTS (
			SELECT 1
			FROM tblParameter
			WHERE Code = 'DEDUCT_TAX_FOR_SHORT_TERM' AND Value = '1'
			)

	INSERT INTO #tblTemporaryContractTax (EmployeeID, TaxPercentage, isLowSalary, PITStatus, DivisionID)
	SELECT EmployeeID, 0.1, 0, 2, DivisionID
	FROM #tblEmployeeIDList
	WHERE TerminateDate <= @FromDate AND EmployeeID NOT IN (
			SELECT EmployeeID
			FROM #tblTemporaryContractTax
			)

	--and DivisionId in(Select DivisionID from tblDivision where Terminate_Mean_10PercentTax = 1)
	--tripod
	DELETE
	FROM #tblTemporaryContractTax

	--UPDATE $ set isLowSalary = 1 where EmployeeID in (
	--	select EmployeeID from dbo.fn_CurrentContractListByDate(@ToDate) where  = 1
	--)
	--if @PROBATION_PERECNT >= 100.0
	BEGIN
		-- mức lương cũ
		INSERT INTO #tblSalDetail (EmployeeID, SalaryHistoryID, FromDate, ToDate, BasicSalary, BasicSalaryOrg, SalCalRuleID, LatestSalEntry, BaseSalRegionalID, CurrencyCode, IsNet, PayrollTypeCode, WorkingHoursPerDay, NETSalary)
		SELECT sh.EmployeeID, sh.SalaryHistoryID, CASE
				WHEN sh.DATE < @FromDate
					THEN @FromDate
				ELSE sh.DATE
				END, @ToDate, ISNULL(sh.Salary, 0) + ISNULL([14], 0), ISNULL(sh.Salary, 0) + ISNULL([14], 0), sh.SalCalRuleID, 1, sh.BaseSalRegionalID, sh.CurrencyCode, sh.IsNet, sh.PayrollTypeCode, ISNULL(nullif(sh.WorkingHoursPerDay, 0), 8), ISNULL(sh.NETSalary, 0)
		FROM dbo.fn_CurrentSalaryHistoryIDByDate(@FromDate) s
		INNER JOIN tblSalaryHistory sh ON s.SalaryHistoryID = sh.SalaryHistoryID
		WHERE EXISTS (
				SELECT 1
				FROM #tblEmployeeIDList te
				WHERE sh.EmployeeID = te.EmployeeID AND sh.DATE >= te.HireDate
				)
	END

	-- muc luong phat sinh moi trong thang
	INSERT INTO #tblSalDetail (EmployeeID, SalaryHistoryID, FromDate, ToDate, BasicSalary, BasicSalaryOrg, SalCalRuleID, LatestSalEntry, BaseSalRegionalID, CurrencyCode, IsNet, PayrollTypeCode, WorkingHoursPerDay, NETSalary)
	SELECT sh.EmployeeID, sh.SalaryHistoryID, CASE
			WHEN sh.DATE < @FromDate
				THEN @FromDate
			ELSE sh.DATE
			END, @ToDate, ISNULL(sh.Salary, 0) + ISNULL([14], 0), ISNULL(sh.Salary, 0) + ISNULL([14], 0), sh.SalCalRuleID, 1, sh.BaseSalRegionalID, sh.CurrencyCode, sh.IsNet, sh.PayrollTypeCode, ISNULL(nullif(sh.WorkingHoursPerDay, 0), 8), ISNULL(sh.NETSalary, 0)
	FROM tblSalaryHistory sh
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList te
			WHERE sh.EmployeeID = te.EmployeeID AND sh.DATE >= te.HireDate
			) AND [Date] > @FromDate AND NOT EXISTS (
			SELECT 1
			FROM #tblSalDetail s
			WHERE sh.SalaryHistoryID = s.SalaryHistoryID
			) AND sh.DATE <= @ToDate

	-- lấy dữ liệu bảng custom attendance ra
	SELECT *
	INTO #tblCustomAttendanceData
	FROM tblCustomAttendanceData c
	WHERE Month = @Month AND Year = @Year AND Approved = 1 AND c.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			) AND IsRetro = @CalculateRetro -- nhớ where vụ retro nhé

	ALTER TABLE #tblCustomAttendanceData ADD PaidLeaves FLOAT(53), UnPaidLeaves FLOAT(53), TotalNonWorkingDays FLOAT(53)

	DECLARE @CustomAttendanceQuery VARCHAR(max) = ''

	SELECT @CustomAttendanceQuery += '+isnull(' + LeaveCode + ',0)*' + CAST(lt.PaidRate AS VARCHAR(10)) + '/100'
	FROM tblLeaveType lt
	WHERE lt.PaidRate > 0 AND lt.LeaveCode IN (
			SELECT Column_Name
			FROM INFORMATION_SCHEMA.COLUMNS
			WHERE TABLE_NAME = 'tblCustomAttendanceData'
			)

	DECLARE @customAttendanceQuery_Unpaid VARCHAR(max) = ''

	SELECT @customAttendanceQuery_Unpaid += '+isnull(' + LeaveCode + ',0)'
	FROM tblLeaveType lt
	WHERE ISNULL(lt.PaidRate, 0) = 0 AND lt.LeaveCode IN (
			SELECT Column_Name
			FROM INFORMATION_SCHEMA.COLUMNS
			WHERE TABLE_NAME = 'tblCustomAttendanceData'
			)

	SET @CustomAttendanceQuery = 'update #tblCustomAttendanceData set PaidLeaves = 0' + @CustomAttendanceQuery + ',UnpaidLeaves = 0' + @customAttendanceQuery_Unpaid

	-- update các giá chị cần thiết match up mới bảng truyền thống trrc giờ
	EXEC (@CustomAttendanceQuery)

	SELECT ot.EmployeeID, ot.OTDate, ot.ApprovedHours, ot.OTKind
	INTO #tblOTList
	FROM tblOTList ot
	WHERE ot.OTDate BETWEEN @FromDate AND @ToDate AND ot.Approved = 1 AND ApprovedHours <> 0 AND ot.EmployeeID IN (
			SELECT te.EmployeeID
			FROM #tblEmployeeIDList te
			
			EXCEPT
			
			SELECT c.EmployeeID
			FROM #tblCustomAttendanceData c
			)

	DECLARE @CustomOTInsert VARCHAR(max) = ''

	CREATE TABLE #tempDataForOT (EmployeeID VARCHAR(20), OTKindID INT, OTAmountHours FLOAT(53))

	SELECT @CustomOTInsert += '
	insert into #tempDataForOT(EmployeeID,OTKindID,OTAmountHours)
	select EmployeeID,''' + CAST(OTKind AS VARCHAR(10)) + ''',' + ColumnNameOn_CustomAttendanceTable + ' as LvAmountDays
	from #tblCustomAttendanceData where ' + ColumnNameOn_CustomAttendanceTable + ' <>0'
	FROM tblOvertimeSetting ov
	WHERE ov.ColumnNameOn_CustomAttendanceTable IN (
			SELECT COLUMN_NAME
			FROM INFORMATION_SCHEMA.COLUMNS c
			WHERE c.TABLE_NAME = 'tblCustomAttendanceData'
			)

	EXEC (@CustomOTInsert)

	INSERT INTO #tblOTList (EmployeeID, OTDate, ApprovedHours, OTKind)
	SELECT EmployeeID, @ToDateTruncate AS OTDate, OTAmountHours AS ApprovedHours, OTKindID AS OTKind
	FROM #tempDataForOT

	DROP TABLE #tempDataForOT

	DELETE #tblOTList
	FROM #tblOTList ot
	WHERE NOT EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList te
			WHERE ot.EmployeeID = te.EmployeeID AND ot.OTDate BETWEEN te.HireDate AND te.LastWorkingDate
			)

	--TRIPOD-Foreign Currency
	UPDATE sd
	SET sd.ExchangeRate = er.ExchangeRate
	FROM #tblSalDetail sd
	INNER JOIN #EmployeeExchangeRate er ON sd.EmployeeID = er.EmployeeID
	WHERE isNET = 1

	--TRIPOD-foreign: mặc định cột Salary = NetSalaryy, khách muốn nhập cột nào cx đc
	UPDATE sal
	SET sal.BasicSalary = sal.NetSalary, sal.BasicSalaryOrg = sal.NetSalary
	FROM #tblSalDetail sal
	WHERE ISNULL(sal.BasicSalary, 0) = 0 AND ISNULL(sal.NetSalary, 0) > 0

	-- update lại theo tỷ giá nếu có
	UPDATE sal
	SET sal.BasicSalary = sal.BasicSalary * ISNULL(cs.[ExchangeRate], 1)
	FROM #tblSalDetail sal
	INNER JOIN #EmployeeExchangeRate cs ON sal.EmployeeID = cs.EmployeeID AND cs.CurrencyCode = sal.CurrencyCode

	-- nếu có thông tin lương có currencyCode <>'VND' mà chưa thiết lập tỷ giá tháng này thì phải thiết lập tỷ giá trước khi tính lương
	IF EXISTS (
			SELECT 1
			FROM #tblSalDetail
			WHERE isnull(CurrencyCode, 'VND') <> 'VND' AND ExchangeRate IS NULL
			)
	BEGIN
		INSERT INTO tblProcessErrorMessage (ErrorType, ErrorDetail, LoginID) --,ResolveLink)
		SELECT 'Exchange Rate not seted!', 'Exchange rate for "' + CurrencyCode + '" is not seted!, Please access Function "Currency Setting" first!', @loginID - 1000
		--,N'Object=MnuMDT150|Params=txtFilter=&cbx@Month='+cast(@Month as varchar(2))+'&cbx@Year='+cast(@year as varchar(4))+'|Text=Currency Setting'
		FROM #tblSalDetail
		WHERE isnull(CurrencyCode, 'VND') <> 'VND' AND ExchangeRate IS NULL

		RETURN;
	END

	--TRIPOD: PercentProbation in tblEmployeeType
	IF EXISTS (
			SELECT 1
			FROM #tblSalDetail sh
			INNER JOIN #tblEmployeeIDList te ON sh.EmployeeID = te.EmployeeID
			WHERE (ProbationEndDate BETWEEN @FromDate AND @ToDateTruncate OR ProbationEndDate > @ToDateTruncate) AND te.HireDate <> te.ProbationEndDate
			)
		--IF @PROBATION_PERECNT < 100.0
	BEGIN
		UPDATE #tblSalDetail
		SET PercentProbation = ISNULL(tsh.PercentProbation, et.PercentProbation)
		FROM #tblSalDetail sh
		INNER JOIN #tblEmployeeIDList te ON sh.EmployeeID = te.EmployeeID
		LEFT JOIN tblSalaryHistory tsh ON sh.SalaryHistoryID = tsh.SalaryHistoryID
		LEFT JOIN tblEmployeeType et ON te.EmployeeTypeID = et.EmployeeTypeID
		WHERE (ProbationEndDate BETWEEN @FromDate AND @ToDateTruncate OR ProbationEndDate > @ToDateTruncate) AND te.HireDate <> te.ProbationEndDate

		--cuoi thang hoac thang sau het thu viec
		-- UPDATE #tblSalDetail
		-- SET BasicSalaryOrg = BasicSalary, BasicSalary = BasicSalary * sh.PercentProbation / 100.0
		-- FROM #tblSalDetail sh
		-- INNER JOIN #tblEmployeeIDList te ON sh.EmployeeID = te.EmployeeID
		-- WHERE (ProbationEndDate BETWEEN @FromDate AND @ToDateTruncate OR ProbationEndDate > @ToDateTruncate) AND te.HireDate <> te.ProbationEndDate
		--het thu viec trong thang nay
		UPDATE #tblSalDetail
		SET FromDate = DATEADD(day, 1, ProbationEndDate)
		FROM #tblSalDetail sh
		INNER JOIN #tblEmployeeIDList te ON sh.EmployeeID = te.EmployeeID
		WHERE ISNULL(sh.PercentProbation, 0) > 0 AND ProbationEndDate BETWEEN @FromDate AND @ToDateTruncate AND te.HireDate <> te.ProbationEndDate

		DECLARE @MaxSalaryHistoryId BIGINT

		SET @MaxSalaryHistoryId = (
				SELECT MAX(SalaryHistoryID)
				FROM #tblSalDetail
				) + 7121997 --TN:fake id cao lên để tránh trùng lắp với ID real

		INSERT INTO #tblSalDetail (EmployeeID, SalaryHistoryID, ProbationSalaryHistoryID, FromDate, ToDate, BasicSalaryOrg, BasicSalary, SalCalRuleID, LatestSalEntry, BaseSalRegionalID, IsNet, PayrollTypeCode, WorkingHoursPerDay, CurrencyCode)
		SELECT sh.EmployeeID, SalaryHistoryID, SalaryHistoryID + @MaxSalaryHistoryId, CASE
				WHEN @FromDate < te.HireDate
					THEN te.HireDate
				ELSE @FromDate
				END, te.ProbationEndDate, sh.BasicSalary, sh.BasicSalary * @PROBATION_PERECNT / 100.0, sh.SalCalRuleID, 1, sh.BaseSalRegionalID, IsNet, PayrollTypeCode, sh.WorkingHoursPerDay, sh.CurrencyCode
		FROM #tblSalDetail sh
		INNER JOIN #tblEmployeeIDList te ON sh.EmployeeID = te.EmployeeID
		WHERE te.ProbationEndDate BETWEEN @FromDate AND @ToDateTruncate AND te.HireDate <> te.ProbationEndDate AND ISNULL(sh.isNET, 0) = 0
	END

	-- bao loi sai ngay hieu luc luong, hoac chua nhap thong tin luong
	INSERT INTO tblProcessErrorMessage (ErrorType, ErrorDetail, LoginID, ResolveLink)
	SELECT 'Wrong salary info', N'Bạn chưa nhập thông tin lương hoặc ngày hiệu lực lương lớn hơn kỳ tính lương', @LoginID, 'Object=MnuHRS145'
	FROM #tblEmployeeIDList e
	WHERE NOT EXISTS (
			SELECT 1
			FROM #tblSalDetail s
			WHERE e.employeeID = s.employeeID
			)

	UPDATE s1
	SET ToDate = dateadd(second, - 1, s2.FromDate)
	FROM #tblSalDetail s1
	CROSS APPLY (
		SELECT MIN(FromDate) FromDate
		FROM #tblSalDetail s2
		WHERE s1.EmployeeID = s2.EmployeeID AND s1.FromDate < s2.FromDate
		) s2
	WHERE s2.FromDate IS NOT NULL

	UPDATE #tblSalDetail
	SET isTwoSalLevel = 0

	UPDATE #tblSalDetail
	SET LatestSalEntry = 0
	WHERE ToDate < @ToDate

	UPDATE #tblSalDetail
	SET isTwoSalLevel = 1
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tblSalDetail s
			GROUP BY EmployeeID
			HAVING COUNT(1) > 1
			)

	--dong luong moi, nhung đã nghỉ việc
	SELECT sal.EmployeeID, sal.SalaryHistoryID
	INTO #NewSalaryButTerminated
	FROM #tblSalDetail sal
	INNER JOIN #tblEmployeeIDList te ON sal.EmployeeID = te.EmployeeID AND sal.FromDate > te.LastWorkingDate
	WHERE sal.isTwoSalLevel = 1 AND sal.LatestSalEntry = 1

	DELETE sal
	FROM #tblSalDetail sal
	WHERE sal.LatestSalEntry = 1 AND EXISTS (
			SELECT 1
			FROM #NewSalaryButTerminated n
			WHERE sal.EmployeeID = n.EmployeeID
			)

	UPDATE sal
	SET ProbationSalaryHistoryID = NULL, LatestSalEntry = 1
	FROM #tblSalDetail sal
	WHERE sal.LatestSalEntry = 0 AND EXISTS (
			SELECT 1
			FROM #NewSalaryButTerminated n
			WHERE sal.EmployeeID = n.EmployeeID
			)

	UPDATE #tblSalDetail
	SET isTwoSalLevel = 0
	FROM #tblSalDetail sal
	WHERE EXISTS (
			SELECT 1
			FROM #NewSalaryButTerminated n
			WHERE sal.EmployeeID = n.EmployeeID
			)

	-- standard working day
	-- ngày công chuẩn -- người vận chuyển lên đây để chạy dc cho những thằng import custom attendance data
	IF NOT EXISTS (
			SELECT 1
			FROM tblWorkingDaySetting s
			WHERE Month = @Month AND YEAR = @Year AND (
					EXISTS (
						SELECT 1
						FROM #tblEmployeeIDList e
						WHERE s.EmployeeTypeID = e.EmployeeTypeID
						) OR s.EmployeeTypeID = - 1
					)
			)
		EXEC sp_WorkingDaySetting @Month = @Month, @Year = @Year, @LoginID = @LoginID

	--tung nhan vien
	UPDATE s
	SET STD_WD = ee.WorkingDays_Std, STD_WD_Schedule = ee.WorkingDays_Std
	FROM #tblSalDetail s
	INNER JOIN tblWorkingDaySettingPerEE ee ON s.EmployeeID = ee.EMployeeID AND ee.Month = @Month AND ee.Year = @Year

	-- -- tung loai nhan vien
	-- UPDATE s set STD_WD = std.WorkingDays_Std, STD_WD_Schedule = std.WorkingDays_Std from #tblSalDetail s
	-- inner join #tblEmployeeIDList e on s.EmployeeID = e.EmployeeID
	-- inner join tblWorkingDaySetting std on e.EmployeeTypeID = std.EmployeeTypeID and std.Month = @Month and std.Year = @Year
	--TRIPOD:
	UPDATE s
	SET STD_WD = std.WorkingDays_Std, STD_WD_Schedule = std.WorkingDays_Std
	FROM #tblSalDetail s
	INNER JOIN tblWorkingDaySetting std ON std.EmployeeTypeID = 0 AND std.Month = @Month AND std.Year = @Year

	-- toan cong ty
	UPDATE s
	SET STD_WD = (
			SELECT std.WorkingDays_Std
			FROM tblWorkingDaySetting std
			WHERE std.EmployeeTypeID = - 1 AND std.Month = @Month AND std.Year = @Year
			)
	FROM #tblSalDetail s
	WHERE s.STD_WD IS NULL

	--TRIPOD
	UPDATE s
	SET STD_WD = 26
	FROM #tblSalDetail s
	WHERE STD_WD > 26

	UPDATE #tblSalDetail
	SET STD_WD_Schedule = STD_WD
	WHERE STD_WD_Schedule IS NULL

	UPDATE #tblSalDetail
	SET STD_WD = sc.FixedStdPerMonth
	FROM #tblSalDetail s
	INNER JOIN tblSalaryCalculationRule sc ON s.SalCalRuleID = sc.SalCalRuleID AND sc.IsFixedStd = 1

	--and not exists (select 1 from #tblEmployeeIDList e where e.EmployeeID = s.EmployeeID and (e.NewStaff = 1 or e.TerminatedStaff = 1))
	-- lấy ngày công ở đây
	CREATE TABLE #Tadata (EmployeeID VARCHAR(20), Attdate DATE, HireDate DATE, EmployeeStatusID INT, HolidayStatus INT, WorkingTime FLOAT(53), Std_Hour_PerDays FLOAT(53), Lvamount FLOAT(53), PaidAmount_Des FLOAT(53), UnpaidAmount_Des FLOAT(53), SalaryHistoryID INT, CutSI BIT, EmployeeTypeID INT)

	EXEC sp_WorkingTimeProvider @Month = @Month, @Year = @Year, @fromdate = @FromDate, @todate = @ToDate, @loginId = @LoginID

	IF (OBJECT_ID('SALCAL_CUSTOMIZE_TADATA') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_CUSTOMIZE_TADATA
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_CUSTOMIZE_TADATA @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	IF @StopUPDATE = 0
	BEGIN
		DELETE #Tadata
		WHERE EmployeeID NOT IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		UPDATE #Tadata
		SET SalaryHistoryID = ISNULL(sal.ProbationSalaryHistoryID, sal.SalaryHistoryID)
		FROM #Tadata ta
		INNER JOIN #tblSalDetail sal ON ta.EmployeeID = sal.EmployeeID AND ta.Attdate BETWEEN sal.FromDate AND sal.ToDate

		/*
		update #Tadata set SalaryHistoryID = ISNULL(sal.ProbationSalaryHistoryID, sal.SalaryHistoryID)
		,WorkingTime = case when ISNULL(sc.IsSTDMinusUnpaidLeave,0) =0 or WorkingTime is not null then WorkingTime	else
		case when
		HolidayStatus = 0 and CutSI = 0 and ISNULL(Lvamount,0) <8 then 8 - ISNULL(Lvamount,0) else 0 end
		end
		from #Tadata  ta
		inner join #tblSalDetail sal on ta.EmployeeID= sal.EmployeeID and ta.Attdate  between sal.FromDate and sal.ToDate
		inner join tblSalaryCalculationRule sc on sal.SalCalRuleID = sc.SalCalRuleID
		*/
		DELETE #Tadata
		WHERE SalaryHistoryID IS NULL
			--delete đi để câu dưới nó đừng tính nữa mất thời gian
			--delete #Tadata  where EmployeeID in(select EmployeeID from #tblCustomAttendanceData)
	END

	SELECT EmployeeID, ta.SalaryHistoryID, SUM(CASE
				WHEN ISNULL(HolidayStatus, 0) <> 1
					THEN 1
				ELSE 0
				END) AS STD_PerHistoryID, ROUND(SUM(CASE
					WHEN ISNULL(HolidayStatus, 0) = 0
						THEN ta.WorkingTime / isnull(ta.Std_Hour_PerDays, 8)
					ELSE 0
					END), @ROUND_TOTAL_WORKINGDAYS) AS AttDays, SUM(ta.PaidAmount_Des / isnull(ta.Std_Hour_PerDays, 8)) AS PaidLeaves, SUM(ta.UnpaidAmount_Des / isnull(ta.Std_Hour_PerDays, 8)) AS UnPaidLeaves, SUM(CASE
				WHEN HolidayStatus = 1
					THEN 1
				ELSE 0
				END) AS TotalSunDay, SUM(CASE
				WHEN CutSI = 1 AND HolidayStatus <> 1
					THEN 1
				ELSE 0
				END) TotalNonWorkingDays
	INTO #tblSal_AttendanceData_PerHistory
	FROM #Tadata ta
	GROUP BY EmployeeID, ta.SalaryHistoryID

	-- mặc dù đã xóa ở trên nhưng ở đây vẫn nên xóa 1 lần nữa
	--delete #tblSal_AttendanceData_PerHistory where EmployeeID in(select EmployeeID from #tblCustomAttendanceData)
	-- insert các giá trị đã được chuẩn bị sẵn
	--  insert into #tblSal_AttendanceData_PerHistory(EmployeeID,SalaryHistoryID,STD_PerHistoryID,AttDays,PaidLeaves,UnPaidLeaves,TotalNonWorkingDays)
	--  select sd.EmployeeID,ISNULL(sd.ProbationSalaryHistoryID,sd.SalaryHistoryID),sd.STD_WD,c.AttDays,c.PaidLeaves,c.UnpaidLeaves,sd.STD_WD - ISNULL(c.AttDays,0) - ISNULL(c.PaidLeaves,0) - ISNULL(c.UnpaidLeaves,0)
	--   from #tblSalDetail sd
	--  inner join #tblCustomAttendanceData c on sd.EmployeeID = c.EmployeeID
	--  where sd.LatestSalEntry = 1
	SELECT EmployeeID, sum(STD_PerHistoryID) AS STDWorkingDays, SUM(AttDays) AS AttDays, SUM(PaidLeaves) AS PaidLeaves, SUM(UnPaidLeaves) AS UnPaidLeaves, SUM(ISNULL(AttDays, 0) + ISNULL(PaidLeaves, 0)) AS TotalPaidDays, SUM(TotalSunDay) AS TotalSunDay, 0 AS ProbationHours, 0 AS DeductionHours, sum(TotalNonWorkingDays) AS TotalNonWorkingDays
	INTO #tblSal_AttendanceData
	FROM #tblSal_AttendanceData_PerHistory
	GROUP BY EmployeeID

	UPDATE #tblSal_AttendanceData
	SET STDWorkingDays = sd.STD_WD
	FROM #tblSal_AttendanceData sal
	INNER JOIN #tblSalDetail sd ON sal.employeeId = sd.EmployeeID AND sd.LatestSalEntry = 1

	SELECT lv.EmployeeID, lv.LeaveCode, lv.LvAmount, lv.LeaveDate, lt.PaidRate, lv.LeaveStatus, lt.CutDiligent, ISNULL(lt.LeaveCategory, 0) AS LeaveCategory
	INTO #tblLvHistory
	FROM tblLvHistory lv
	INNER JOIN tblLeaveType lt ON lv.LeaveCode = lt.LeaveCode AND lv.EmployeeID IN (
			SELECT te.EmployeeID
			FROM #tblEmployeeIDList te
			
			EXCEPT
			
			SELECT c.EmployeeID
			FROM #tblCustomAttendanceData c -- except để giảm thời gian thực thi bớt di
			) AND lv.LeaveDate BETWEEN @FromDate AND @ToDate

	-- xóa những ngày nghỉ trong phần chưa đi làm hoặc nghỉ dài hạn đi
	DELETE #tblLvHistory
	FROM #tblLvHistory lv
	INNER JOIN #Tadata ta ON lv.EmployeeID = ta.EmployeeID AND lv.LeaveDate = ta.Attdate AND ta.CutSI = 1

	-- nhập custom leave
	DECLARE @CustomLeaveCodeInsert VARCHAR(max) = ''

	CREATE TABLE #tempDataForLeave (EmployeeID VARCHAR(20), LeaveCode VARCHAR(50), lvAmountdays FLOAT(53))

	SELECT @CustomLeaveCodeInsert += '
	insert into #tempDataForLeave(EmployeeID,LeaveCode,lvAmountdays)
	select EmployeeID,''' + LeaveCode + ''',' + LeaveCode + ' as LvAmountDays
	from #tblCustomAttendanceData where ' + LeaveCode + ' <>0'
	FROM tblLeaveType lt
	WHERE lt.LeaveCode IN (
			SELECT column_Name
			FROM INFORMATION_SCHEMA.COLUMNS c
			WHERE c.TABLE_NAME = 'tblCustomAttendanceData'
			)

	EXEC (@CustomLeaveCodeInsert)

	INSERT INTO #tblLvHistory (EmployeeID, LeaveCode, LvAmount, LeaveDate, PaidRate, LeaveStatus, CutDiligent, LeaveCategory)
	SELECT lv.EmployeeID, lv.LeaveCode, lv.lvAmountdays * 8, @ToDateTruncate AS LeaveDate, lt.PaidRate, 3 AS LeaveStatus, 0 AS CutDiligent, ISNULL(lt.LeaveCategory, 0) AS LeaveCategory
	FROM #tempDataForLeave lv
	INNER JOIN tblLeaveType lt ON lv.LeaveCode = lt.LeaveCode

	DROP TABLE #tempDataForLeave

	-- Nhung ngay khong di làm mà không có đăng ký nghỉ, không phải cuối tuần hay ngày lễ thì tính là nghỉ không phép
	IF NOT EXISTS (
			SELECT 1
			FROM tblLeaveType
			WHERE LeaveCode IN (
					SELECT Value
					FROM tblParameter
					WHERE Code = 'NO_TA_LEAVE_CODE'
					)
			)
		UPDATE tblParameter
		SET Value = (
				SELECT TOP 1 LeaveCode
				FROM tblLeaveType
				WHERE PaidRate = 0
				)
		WHERE Code = 'NO_TA_LEAVE_CODE'

	INSERT INTO #tblLvHistory (EmployeeID, LeaveCode, LvAmount, LeaveDate, PaidRate, LeaveStatus, LeaveCategory)
	SELECT EmployeeID, (
			SELECT Value
			FROM tblParameter
			WHERE Code = 'NO_TA_LEAVE_CODE'
			), Std_Hour_PerDays - (isnull(WorkingTime, 0) + isnull(Lvamount, 0)), Attdate, 0, 2, 1
	FROM #Tadata ta
	WHERE ta.HolidayStatus = 0 AND isnull(WorkingTime, 0) + isnull(Lvamount, 0) < Std_Hour_PerDays

	UPDATE TA
	SET Lvamount = isnull(Lvamount, 0) + (Std_Hour_PerDays - (isnull(WorkingTime, 0) + isnull(Lvamount, 0))), UnpaidAmount_Des = isnull(UnpaidAmount_Des, 0) + (Std_Hour_PerDays - (isnull(WorkingTime, 0) + isnull(Lvamount, 0)))
	FROM #Tadata ta
	WHERE ta.HolidayStatus = 0 AND isnull(WorkingTime, 0) + isnull(Lvamount, 0) < Std_Hour_PerDays

	SELECT LeaveCode, EmployeeID, round(SUM(LvAmount) / 8.0, @ROUND_ATTDAYS) AS LvAmount
	INTO #LeaveTMpDAta
	FROM (
		SELECT EmployeeID, LeaveDate, LeaveCode, LvAmount
		FROM #tblLvHistory
		
		UNION
		
		SELECT ta.EmployeeID, ta.Attdate AS LeaveDate, es.LeaveCodeForCutSI AS LeaveCode, 8 AS lvAmount
		FROM #Tadata ta
		INNER JOIN tblEmployeeStatus es ON ta.EmployeeStatusID = es.EmployeeStatusID AND es.LeaveCodeForCutSI IN (
				SELECT LeaveCode
				FROM tblLeaveType
				)
		WHERE ta.CutSI = 1 AND es.LeaveCodeForCutSI IS NOT NULL AND ta.HolidayStatus = 0
		) lv
	GROUP BY EmployeeID, LeaveCode

	-- DECLARE @altertblSal_AttDataSumary_ForReport NVARCHAR(max) = ''
	-- DECLARE @currLeaveCode NVARCHAR(50) = ''
	-- SELECT @altertblSal_AttDataSumary_ForReport += 'if col_length(''tblSal_AttDataSumary_ForReport'',''' + LeaveCode + ''') is null
	-- alter table tblSal_AttDataSumary_ForReport add ' + LeaveCode + ' float
	-- '
	-- FROM tblLeaveType
	-- EXEC (@altertblSal_AttDataSumary_ForReport)
	-- INSERT INTO tblSal_AttDataSumary_ForReport (EmployeeID, Month, Year, PeriodID)
	-- SELECT EmployeeID, @Month, @Year, @PeriodID
	-- FROM #tblEmployeeIDList e
	-- WHERE NOT EXISTS (
	-- 		SELECT 1
	-- 		FROM tblSal_AttDataSumary_ForReport s
	-- 		WHERE e.EmployeeID = s.EmployeeID AND s.Month = @Month AND s.Year = @Year AND s.PeriodID = @PeriodID
	-- 		)
	-- -- phải chơi hết ko thôi mấy cái update rồi giờ ko update nữa là khộ
	-- SELECT DISTINCT LeaveCode
	-- INTO #LeaveCode
	-- FROM tblLeaveType
	-- IF @CalculateRetro = 0
	-- 	WHILE EXISTS (
	-- 			SELECT 1
	-- 			FROM #LeaveCode
	-- 			)
	-- 	BEGIN
	-- 		SELECT @currLeaveCode = LeaveCode
	-- 		FROM #LeaveCode
	-- 		SET @altertblSal_AttDataSumary_ForReport = 'update tblSal_AttDataSumary_ForReport set ' + @currLeaveCode + ' = LvAmount from tblSal_AttDataSumary_ForReport sal
	-- 	left join #LeaveTMpDAta tmp on sal.EmployeeID = tmp.EmployeeID  and tmp.LEaveCode = ''' + @currLeaveCode + '''
	-- 	where sal.EmployeeID in(select EmployeeID from #tblEmployeeIDList) and sal.Month = ' + CAST(@Month AS VARCHAR(2)) + ' and sal.Year =' + CAST(@Year AS VARCHAR(4)) + ' and sal.PeriodID = ' + CAST(@PeriodID AS VARCHAR(2))
	-- 		EXEC (@altertblSal_AttDataSumary_ForReport)
	-- 		DELETE #LeaveCode
	-- 		WHERE LeaveCode = @currLeaveCode
	-- 		DELETE #LeaveTMpDAta
	-- 		WHERE LeaveCode = @currLeaveCode
	-- 	END
	DROP TABLE #LeaveTMpDAta

	DELETE #tblLvHistory
	WHERE LeaveCategory = 0

	--TRIPOD: process Allowance
	SET ANSI_WARNINGS ON;

	EXEC sp_processAllAllowance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @SalCal = 1

	UPDATE #tblSalDetail
	SET GrossSalary = BasicSalary

	-- cap nhat tong luong
	UPDATE sal
	SET TotalSalary = ISNULL(BasicSalary, 0) + ISNULL(c.Allowance, 0), BasicSalary = ISNULL(BasicSalary, 0) + ISNULL(c.Allowance, 0)
	FROM #tblSalDetail sal
	CROSS APPLY dbo.fn_CurrentSalaryByDate_TRIPOD(@ToDate, @LoginID) c
	WHERE sal.SalaryHistoryID = c.SalaryHistoryID

	--UPDATE sal set TotalSalary = c.Totalsalary from #tblSalDetail sal
	--inner join dbo.fn_CurrentSalaryByDate_TRIPOD(@FromDate) c on sal.SalaryHistoryID = c.SalaryHistoryID
	--where sal.TotalSalary is null
	--Insert into Salary PITAmt table
	SELECT EmployeeID, 'Has no salary entry' AS Reason, CAST(1 AS BIT) AS DoNotSalCal
	INTO #TableVarSalError
	FROM #tblEmployeeIDList
	WHERE EmployeeID IN (
			SELECT DISTINCT EmployeeID
			FROM #tblSalDetail
			WHERE TotalSalary <= 0
			)

	DELETE
	FROM #tblSalDetail
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #TableVarSalError
			WHERE DoNotSalCal = 1
			)

	--DELETE FROM #tblEmployeeIDList WHERE EmployeeID in (select EmployeeID from #TableVarSalError where DoNotSalCal = 1)
	------------------------------Calculate salary per day------------------------------------------
	UPDATE sal
	SET OTSalary = fnTO.OTSalary
	FROM (
		SELECT DISTINCT Fromdate
		FROM #tblSalDetail
		) f
	CROSS APPLY (
		SELECT *
		FROM dbo.fn_CurrentOTSalary_byDate(f.FromDate, @LoginID) fnTO
		) fnTO
	INNER JOIN #tblSalDetail sal ON sal.EmployeeID = fnTO.EmployeeID AND sal.SalaryHistoryID = fnTO.SalaryHistoryID
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID AND isnull(IsDaily, 0) = 0 AND isnull(IsHourly, 0) = 0

	IF @PROBATION_PERECNT > 0 AND @PROBATION_PERECNT < 100.0
		UPDATE #tblSalDetail
		SET OTSalary = OTSalary * @PROBATION_PERECNT / 100.0
		WHERE BasicSalaryOrg IS NOT NULL AND BasicSalaryOrg <> BasicSalary

	--TRIPOD OT
	UPDATE #tblSalDetail
	SET OTSalary = CASE
			WHEN ISNULL(TotalSalary, 0) <> 0
				THEN TotalSalary
			ELSE OTSalary
			END

	UPDATE sal
	SET sal.OTSalary = sal.OTSalary * ISNULL(cs.[ExchangeRate], 1)
	FROM #tblSalDetail sal
	INNER JOIN #EmployeeExchangeRate cs ON sal.EmployeeID = cs.EmployeeID AND cs.CurrencyCode = sal.CurrencyCode

	UPDATE #tblSalDetail
	SET SalaryPerDay = CASE
			WHEN isnull(IsDaily, 0) = 1
				THEN BasicSalary
			WHEN isnull(IsHourly, 0) = 1
				THEN BasicSalary * 8.0
			ELSE TotalSalary / STD_WD
			END, SalaryPerDayOT = CASE
			WHEN isnull(IsDaily, 0) = 1
				THEN BasicSalary
			WHEN isnull(IsHourly, 0) = 0
				THEN OTSalary / STD_WD
			END
	FROM #tblSalDetail sal
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID

	------------------------------Calculate salary per hour------------------------------------------
	UPDATE #tblSalDetail
	SET SalaryPerHour = CASE
			WHEN isnull(IsHourly, 0) = 1
				THEN BasicSalary
			ELSE SalaryPerDay / 8.0
			END, SalaryPerHourOT = CASE
			WHEN isnull(IsHourly, 0) = 1
				THEN BasicSalary
			ELSE SalaryPerDayOT / sal.WorkingHoursPerDay
			END
	FROM #tblSalDetail sal
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID

	------------------------------Calculate Leave---------------------------------
	IF (OBJECT_ID('SALCAL_LEAVE_AUTOMATIC_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_LEAVE_AUTOMATIC_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_LEAVE_AUTOMATIC_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	CREATE TABLE #DataLeave (EmployeeID VARCHAR(20), LeaveDate DATETIME, LeaveCode VARCHAR(20), LeaveStatus INT, LeaveDays FLOAT, LeaveHours FLOAT, PaidRate FLOAT)

	CREATE TABLE #TableVarLeaveAmount (EmployeeID VARCHAR(20), SalaryHistoryID BIGINT, ContractSalary FLOAT(53), LeaveDate DATETIME, LeaveCode VARCHAR(20), PaidRate FLOAT, UnpaidRate FLOAT, LeaveDays FLOAT, LeaveHours FLOAT, SalaryPerDay FLOAT(53), AmountPaid FLOAT(53), AmountDeduct FLOAT(53))

	-------------------------Leave Days---------------------------------------
	INSERT INTO #DataLeave (EmployeeID, LeaveDate, LeaveCode, LeaveStatus, LeaveHours, LeaveDays, PaidRate)
	SELECT lv.EmployeeID, lv.LeaveDate, lv.LeaveCode, lv.LeaveStatus, lv.LvAmount, round(lv.LvAmount / 8.0, @ROUND_ATTDAYS), lv.PaidRate
	FROM #tblLvHistory lv
	WHERE lv.LeaveCategory = 1 AND Lv.LeaveCode <> 'FWC'

	--Remove illegal records
	DELETE l
	FROM #DataLeave l
	WHERE datename(dw, l.LeaveDate) = 'Sunday' AND EXISTS (
			SELECT 1
			FROM tblWSchedule ws
			WHERE ws.EmployeeID = l.EmployeeID AND ws.ScheduleDate = l.LeaveDate AND ws.HolidayStatus > 0
			)

	-------------------------Leave Amount---------------------------------------
	INSERT INTO #TableVarLeaveAmount (EmployeeID, LeaveCode, LeaveDays, LeaveHours, LeaveDate, PaidRate, UnpaidRate, SalaryHistoryID, SalaryPerDay) (SELECT t.EmployeeID, LeaveCode, SUM(ISNULL(LeaveDays, 0)), SUM(ISNULL(LeaveHours, 0)), LeaveDate, PaidRate, 100 - PaidRate, SalaryHistoryID, MAX(SalaryPerDay) AS SalaryPerDay FROM #DataLeave t INNER JOIN #tblSalDetail sal ON t.EmployeeID = sal.EmployeeID AND t.LeaveDate BETWEEN FromDate AND ToDate GROUP BY t.EmployeeID, LeaveCode, LeaveDate, PaidRate, SalaryHistoryID)

	---------------------------------------------------------------------------------------
	UPDATE #TableVarLeaveAmount
	SET AmountPaid = (PaidRate / 100.00) * LeaveDays * SalaryPerDay -- ContractSalary * (PaidRate/100.00) * (LeaveDays/TotalDays) --chinh xac hon lay SalaryPerDays * LeaveDays
		, AmountDeduct = (UnpaidRate / 100.00) * LeaveDays * SalaryPerDay -- ContractSalary * (UnpaidRate/100.00) * (LeaveDays/TotalDays) --chinh xac hon lay SalaryPerDays * LeaveDays

	-------------------------UPDATE into #tblSal_PaidLeave_Detail_des-------------------------------------
	INSERT INTO #tblSal_PaidLeave_Detail_des (EmployeeID, LeaveCode, Month, Year, SalaryHistoryID, LeaveDays, LeaveHour, AmountDeduct, AmountPaid, PeriodID) (SELECT EmployeeID, LeaveCode, @Month, @Year, SalaryHistoryID, SUM(LeaveDays), SUM(LeaveHours), ROUND(SUM(AmountDeduct), @ROUND_SALARY_UNIT), ROUND(SUM(AmountPaid), @ROUND_SALARY_UNIT), @PeriodID FROM #TableVarLeaveAmount GROUP BY EmployeeID, LeaveCode, SalaryHistoryID)

	-- tính tổng các ngày ko đi làm
	UPDATE #tblSalDetail
	SET UnpaidLeaveAmount = ROUND(tmp.AmountDeduct, @ROUND_SALARY_UNIT)
	FROM #tblSalDetail sal
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID AND sc.IsSTDMinusUnpaidLeave = 1 -- nếu là STD trừ đi ngày nghỉ
	INNER JOIN (
		SELECT EmployeeID, SalaryHistoryID, SUM(ISNULL(AmountDeduct, 0)) AmountDeduct
		FROM #TableVarLeaveAmount
		GROUP BY EmployeeID, SalaryHistoryID
		) tmp ON sal.EmployeeID = tmp.EmployeeID AND sal.SalaryHistoryID = tmp.SalaryHistoryID

	------------------------UPDATE into #tblSal_PaidLeave_des-----------------------
	INSERT INTO #tblSal_PaidLeave_des (EmployeeID, LeaveCode, [Month], [Year], LeaveDays, LeaveHour, AmountDeduct, AmountPaid, SalaryNameID, SalaryTermID, PeriodID) (SELECT EmployeeID, LeaveCode, @Month, @Year, SUM(ISNULL(LeaveDays, 0)), SUM(ISNULL(LeaveHours, 0)), ROUND(SUM(ISNULL(AmountDeduct, 0)), @ROUND_SALARY_UNIT), ROUND(SUM(ISNULL(AmountPaid, 0)), @ROUND_SALARY_UNIT), '', 0, @PeriodID FROM #TableVarLeaveAmount GROUP BY EmployeeID, LeaveCode)

	------------------------------Calculate Actual salary---------------------------------
	-- Luong thuc nhan cua thang
	SET ANSI_NULLS ON;
	SET ANSI_PADDING ON;
	SET ANSI_WARNINGS ON;
	SET ARITHABORT ON;
	SET CONCAT_NULL_YIELDS_NULL ON;
	SET QUOTED_IDENTIFIER ON;
	SET NUMERIC_ROUNDABORT OFF;

	--TRIPOD
	EXEC sp_processSummaryAttendance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @ViewType = 0, @Payroll = 1

	SELECT *
	INTO #AttendanceSummary
	FROM tblAttendanceSummary
	WHERE Year = @Year AND Month = @Month AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblSalDetail
			)

	--TRIPOD: gross salary - (gross salary with allowances/number of working hours * (number of working hours - number of actual working hours))
	UPDATE #tblSalDetail
	SET RegularAmt = ROUND(GrossSalary - (TotalSalary / (m.STD_WorkingHours)) * ((m.STD_WorkingHours) - WorkingHrs_Total), 0), PaidLeaveAmt = ROUND(PaidLeaveHrs_Total * (TotalSalary / (m.STD_WorkingHours)), 0), SalaryPerHour = (TotalSalary / (m.STD_WorkingHours)), SalaryPerHourOT = (TotalSalary / (m.STD_WorkingHours)), UnpaidLeaveAmount = ROUND(a.UnpaidLeaveHrs * (TotalSalary / (m.STD_WorkingHours)), 0)
	FROM #tblSalDetail s
	INNER JOIN #AttendanceSummary a ON a.EmployeeID = s.EmployeeID AND CAST(a.FromDate AS DATE) = CAST(s.FromDate AS DATE) AND CAST(a.ToDate AS DATE) = CAST(s.ToDate AS DATE)
	LEFT JOIN #tmpMonthlyPayrollCheckList m ON m.EmployeeID = s.EmployeeID

	--TRIPOD: If salary increases in the middle of the month: Gross salary - leave allowance (including all types of leave and late/early departure) - ((new gross salary - old gross salary) /  number of working hours * number of working hours have old gross salary))
	UPDATE #tblSalDetail
	SET DaysOfSalEntry = ISNULL(ca.WorkingDays_Total, 0) + ISNULL(ca.PaidLeaveDays_Total, 0) + (ISNULL(ca.RegularWorkdays, 0) - ISNULL(ca.STD_WorkingDays, 0)), STDPerSalaryHistoryId = CASE
			WHEN ca.STD_WorkingDays > sal.STD_WD
				THEN sal.STD_WD
			ELSE ca.STD_WorkingDays
			END
	FROM #tblSalDetail sal
	CROSS APPLY (
		SELECT *
		FROM #AttendanceSummary ta
		WHERE sal.EmployeeID = ta.EmployeeID AND ta.SalaryHistoryID = ISNULL(sal.ProbationSalaryHistoryID, sal.SalaryHistoryID)
		) ca

	--TRIPOD: Annual bonus, bonus 6 month total
	UPDATE #tblSalDetail
	SET AnnualBonus_Total = ROUND(((sal.BasicSalaryOrg / a.NumberDayOfYear) * a.NumberDayOfYear_Actual), 0), AnnualBonus_EvMonth = ROUND(((sal.BasicSalaryOrg / a.NumberDayOfYear) * a.NumberDayOfYear_Actual) / a.ActualMonthInYear, 0), Bonus6Month_Total = ROUND(((c.Salary / a.Number6DayMonth * a.Number6DayMonth_Actual) * (a.Bonus6MonthAllowance / 100) * (a.RatioBonus6Month / 100)), 0), Bonus6M_EveryMonth = ROUND(((c.Salary / a.Number6DayMonth * a.Number6DayMonth_Actual) * (a.Bonus6MonthAllowance / 100) * (a.RatioBonus6Month / 100)) / 6, 0)
	FROM #tblSalDetail sal
	INNER JOIN #tmpMonthlyPayrollCheckList a ON a.EmployeeID = sal.EmployeeID
	LEFT JOIN dbo.fn_CurrentSalaryByDate_TRIPOD(@ToDate, @LoginID) c ON c.EmployeeID = sal.EmployeeID AND c.SalaryHistoryID = sal.SalaryHistoryID

	IF @CalculateRetro = 0
		-- update tblSal_AttDataSumary_ForReport set TotalPaidDays = ISNULL(s.AttDays,0)+ISNULL(s.PaidLeaves,0)
		-- ,Attdays = s.AttDays
		-- ,PaidLeaves = s.PaidLeaves
		-- ,UnPaidLeaves = s.UnPaidLeaves
		-- ,STDWorkingDays = s.STDWorkingDays
		-- ,TotalNonWorkingDays = s.TotalNonWorkingDays
		-- ,TotalSunDay = s.TotalSunDay
		--  from tblSal_AttDataSumary_ForReport sal
		--  inner join  #tblSal_AttendanceData s on sal.EmployeeId = s.EmployeeId and sal.Month=@month and sal.Year = @Year and sal.PeriodID= @PeriodID
		-- update sal set ActualMonthlyBasic =case
		-- 	 when isnull(sc.IsSTDMinusUnpaidLeave,0) =0 then SalaryPerDay * DaysOfSalEntry
		-- 	 else
		-- 		 /*case when STD_WD = STDPerSalaryHistoryId then BasicSalary else BasicSalary*STDPerSalaryHistoryId /STD_WD end*/ BasicSalary - isnull(UnpaidLeaveAmount,0)
		-- 	 end
		-- 	 from #tblSalDetail sal
		-- 	inner join tblSalaryCalculationRule sc on sal.SalCalRuleID = sc.SalCalRuleID
		UPDATE #tblSalDetail
		SET ActualMonthlyBasic = ROUND(ISNULL(RegularAmt, 0) + ISNULL(PaidLeaveAmt, 0), @ROUND_SALARY_UNIT)

	-- trừ thêm cho các ngày ko đi làm
	UPDATE sal
	SET ActualMonthlyBasic = ActualMonthlyBasic - (isnull(TotalNonWorkingDays, 0) * SalaryPerDay)
	FROM #tblSalDetail sal
	INNER JOIN #tblSal_AttendanceData_PerHistory n ON sal.EmployeeId = n.Employeeid AND sal.SalaryHistoryID = n.SalaryHistoryID
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID
	WHERE isnull(sc.IsSTDMinusUnpaidLeave, 0) = 1

	IF COL_LENGTH('tblSal_Sal_Detail', 'RegularAmt') IS NULL
	BEGIN
		ALTER TABLE tblSal_Sal_Detail ADD RegularAmt MONEY
	END

	IF COL_LENGTH('tblSal_Sal_Detail', 'PaidLeaveAmt') IS NULL
	BEGIN
		ALTER TABLE tblSal_Sal_Detail ADD PaidLeaveAmt MONEY
	END

	IF COL_LENGTH('tblSal_Sal_Detail', 'GrossSalary') IS NULL
	BEGIN
		ALTER TABLE tblSal_Sal_Detail ADD GrossSalary MONEY
	END

	IF (OBJECT_ID('SALCAL_MONTHLYBASIC_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_MONTHLYBASIC_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_MONTHLYBASIC_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	------- lấy thông tin của Allowance ở đây do cần thông tin này
	CREATE TABLE #tblAllowance (EmployeeID VARCHAR(20), AllowanceID INT, AllowanceRuleID INT, AllowanceCode VARCHAR(200), SalaryHistoryID BIGINT, SalCalRuleID INT, FromDate DATETIME, ToDate DATETIME, DefaultAmount FLOAT(53), DefaultAmount_WithoutCustomAmount FLOAT(53), ReceiveAmount FLOAT(53), TaxableAmount FLOAT(53), UntaxableAmount FLOAT(53), TakeHome BIT, STD_WD FLOAT, TotalPaidDays FLOAT, CurrencyCode VARCHAR(20), Raw_DefaultAmount FLOAT(53), Raw_CurrencyCode NVARCHAR(20), Raw_ExchangeRate FLOAT(53), IsMutilCurrencyCode BIT, RetroAmount MONEY, RetroAmountNonTax MONEY, TaxFreeMaxAmount MONEY, MonthlyCustomAmount MONEY, MonthlyCustomReceiveAmount MONEY, LatestSalEntry BIT, IsTaxable BIT)

	CREATE TABLE #AllowanceCodeList (AllowanceCode VARCHAR(20), AllowanceID INT, DefaultAmount FLOAT(53), AllowanceRuleID INT, ForSalary BIT, TaxfreeMaxAmount FLOAT(53), IsHouseAllowance BIT, isUniformAllowance BIT, BasedOnSalaryScale BIT, IsTaxable BIT, IsMutilCurrencyCode BIT)

	INSERT INTO #AllowanceCodeList (AllowanceID, AllowanceCode, ForSalary, AllowanceRuleID, TaxfreeMaxAmount, IsHouseAllowance, isUniformAllowance, DefaultAmount, BasedOnSalaryScale, IsTaxable, IsMutilCurrencyCode)
	SELECT AllowanceID, AllowanceCode, ForSalary, AllowanceRuleID, TaxfreeMaxAmount, IsHouseAllowance, isUniformAllowance, DefaultAmount, BasedOnSalaryScale, IsTaxable, IsMutilCurrencyCode
	FROM tblAllowanceSetting
	WHERE AllowanceCode IN (
			SELECT c.COLUMN_NAME
			FROM INFORMATION_SCHEMA.COLUMNS c
			WHERE c.TABLE_NAME = N'tblSalaryHistory' AND c.DATA_TYPE = 'money' AND c.COLUMN_NAME NOT IN ('Salary', 'InsSalary', 'NETSalary') AND Visible = 1 AND ISNULL(ForSalary, 0) = 1
			)

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, AllowanceRuleID, AllowanceCode, SalaryHistoryID, FromDate, ToDate, DefaultAmount, TakeHome, SalCalRuleID, TotalPaidDays, IsMutilCurrencyCode, TaxFreeMaxAmount, LatestSalEntry, IsTaxable)
	SELECT s.EmployeeID, a.AllowanceID, a.AllowanceRuleID, a.AllowanceCode, s.SalaryHistoryID, s.FromDate, s.ToDate, a.DefaultAmount, a.ForSalary, s.SalCalRuleID, s.DaysOfSalEntry
		--,case when BasedOnSalaryScale = 1 then DaysOfSalEntry else s.DaysOfSalEntry end
		, a.IsMutilCurrencyCode, CASE
			WHEN isnull(a.IsTaxable, 0) = 0
				THEN 9999999999
			ELSE isnull(TaxFreeMaxAmount, 0)
			END AS TaxFreeMaxAmount, s.LatestSalEntry, a.IsTaxable
	FROM #AllowanceCodeList a
	CROSS JOIN #tblSalDetail s

	--on S.LatestSalEntry = 1 or a.BasedOnSalaryScale =1
	--left join #tblSal_AttendanceData sal on s.EmployeeID = sal.EmployeeID
	SET @Query = ''

	SELECT @Query += 'UPDATE #tblAllowance set DefaultAmount = sh.[' + c.AllowanceCode + ']
,CurrencyCode =' + CASE
			WHEN isnull(c.IsMutilCurrencyCode, 0) = 1
				THEN 'sh.[' + c.AllowanceCode + '_CurrencyCode]'
			ELSE 'sh.CurrencyCode'
			END + '
from #tblAllowance tmp
inner join tblSalaryHistory sh on tmp.SalaryHistoryID = sh.SalaryHistoryID and AllowanceID = ' + cast(c.AllowanceID AS VARCHAR) + '
'
	FROM #AllowanceCodeList c

	EXECUTE sp_executesql @Query

	UPDATE al
	SET SalaryHistoryID = ISNULL(s.ProbationSalaryHistoryID, s.SalaryHistoryID)
	FROM #tblAllowance al
	INNER JOIN #tblSalDetail s ON al.EmployeeID = s.EmployeeID AND al.LatestSalEntry = s.LatestSalEntry
	WHERE al.SalaryHistoryID <> ISNULL(s.ProbationSalaryHistoryID, s.SalaryHistoryID)

	DROP TABLE #AllowanceCodeList

	DELETE
	FROM #tblAllowance
	WHERE ISNULL(DefaultAmount, 0) = 0 AND LatestSalEntry = 0

	--tringuyen:huong tron goi & chuyen can lay theo muc luong moi
	DELETE
	FROM #tblAllowance
	WHERE AllowanceRuleID IN (1, 9) AND LatestSalEntry = 0

	-- kiểm tra coi có thằng nào bị miss exchange rate nữa hay ko
	INSERT INTO tblProcessErrorMessage (ErrorType, ErrorDetail, LoginID)
	SELECT 'Exchange Rate not seted!', 'Exchange rate for "' + a.CurrencyCode + '" is not seted!, Please complete Function "Currency Setting" first!', @loginID - 1000
	FROM #tblAllowance a
	INNER JOIN #tblSalDetail sal ON a.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1
	LEFT JOIN #EmployeeExchangeRate c ON a.CurrencyCode = c.CurrencyCode AND c.EmployeeID = a.EmployeeID
	WHERE isnull(a.CurrencyCode, 'vnd') <> 'vnd' AND c.[ExchangeRate] IS NULL

	IF @@ROWCOUNT > 0
	BEGIN
		-- nếu có lỗi thì
		RETURN;
	END

	-- update tỷ giá cho thằng default Amount trước khi tính toán để cho đúng hơn
	--,Raw_DefaultAmount float(53)
	--	,Raw_ReceiveAmount float(53)
	--	,Raw_ExchangeRate float(53)
	UPDATE al
	SET DefaultAmount = al.DefaultAmount * isnull(c.[ExchangeRate], 1), Raw_ExchangeRate = c.[ExchangeRate], Raw_DefaultAmount = al.DefaultAmount, Raw_CurrencyCode = al.CurrencyCode
	FROM #tblAllowance al
	INNER JOIN #tblSalDetail sal ON al.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1
	LEFT JOIN #EmployeeExchangeRate c ON al.CurrencyCode = c.CurrencyCode AND c.EmployeeID = al.EmployeeID

	IF @PROBATION_PERECNT < 100.0
	BEGIN
		--cuoi thang hoac thang sau moi ket thuc thu viec
		UPDATE #tblAllowance
		SET DefaultAmount = DefaultAmount * @PROBATION_PERECNT / 100.0
		FROM #tblAllowance al
		INNER JOIN #tblEmployeeIDList te ON al.EmployeeID = te.EmployeeID
		WHERE te.ProbationEndDate >= @ToDateTruncate AND @PROBATION_PERECNT > 0 AND al.DefaultAmount > 0 AND te.HireDate <> te.ProbationEndDate

		--het thu viec trong thang nay
		UPDATE #tblAllowance
		SET DefaultAmount = DefaultAmount * @PROBATION_PERECNT / 100.0
		FROM #tblAllowance al
		INNER JOIN #tblEmployeeIDList te ON al.EmployeeID = te.EmployeeID
		LEFT JOIN #NewSalaryButTerminated n ON al.EmployeeID = n.EmployeeID
		WHERE (al.LatestSalEntry = 0 OR (al.LatestSalEntry = 1 AND n.EmployeeID IS NOT NULL)) AND al.DefaultAmount > 0 AND @PROBATION_PERECNT > 0 AND te.ProbationEndDate >= @FromDate AND te.ProbationEndDate < @ToDateTruncate AND te.HireDate <> te.ProbationEndDate
	END

	-- kết thúc thông tin của allowance
	-------------------------calculate Adjustment--------------------------------------
	CREATE TABLE #tblAdjustment (EmployeeID VARCHAR(20), SalaryHistoryID INT, BasicSalary FLOAT(53), IncomeID INT, ByAmount BIT, SalaryPercent FLOAT(10), AdjustmentAmount FLOAT(53), Raw_AdjustmentAmount FLOAT(53), EmpAdjustmentID BIGINT, CurrencyCode VARCHAR(20), ExchangeRate FLOAT(53))

	-- xu ly nhung nhan vien co dc thanh toan tien phep chua su dung hang thang
	DELETE p
	FROM dbo.tblAnnualLeavePayment p
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList e
			WHERE p.EmployeeID = e.EmployeeID
			) AND p.Month = @Month AND p.Year = @Year AND ISNULL(p.Approved, 0) = 0

	DELETE p
	FROM dbo.tblAnnualLeavePayment p
	WHERE EXISTS (
			SELECT 1
			FROM tblALPaymentTracking t
			WHERE p.EmployeeID = t.EmployeeID AND p.Month = t.Month AND p.Year = t.Year AND ISNULL(t.ALPaidDays, 0) = 0
			) AND p.Month = @Month AND p.Year = @Year AND ISNULL(p.Approved, 0) = 0

	INSERT INTO tblAnnualLeavePayment (EmployeeID, EffectiveDate, SalaryHistoryID, Salary, ALDays, SalPerDay, Amount, ApprovedAmount, Approved, Year, Month)
	SELECT s.EmployeeID, @FromDate, s.SalaryHistoryID, s.BasicSalary, ap.ALPaidDays, s.SalaryPerDay, ap.ALPaidDays * s.SalaryPerDay, ap.ALPaidDays * s.SalaryPerDay, 0, @Year, @Month
	FROM tblALPaymentTracking ap
	INNER JOIN #tblSalDetail s ON ap.EmployeeID = s.EmployeeID AND s.LatestSalEntry = 1
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList e
			WHERE ap.EmployeeID = e.EmployeeID
			) AND ap.Month = @Month AND ap.Year = @Year AND ISNULL(ALPaidDays, 0) <> 0 AND NOT EXISTS (
			SELECT 1
			FROM dbo.tblAnnualLeavePayment p
			WHERE ap.EmployeeID = p.EmployeeID AND p.Approved = 1 AND ap.Month = p.Month AND ap.year = p.Year
			)

	-- dua vao bang tblPR_Adjustment
	UPDATE a
	SET a.Amount = p.ApprovedAmount
	FROM dbo.tblPR_Adjustment a
	INNER JOIN dbo.tblAnnualLeavePayment p ON a.EmployeeID = p.EmployeeID AND a.Month = p.Month AND a.Year = p.Year
	WHERE a.IncomeID = 5 AND a.Remark LIKE N'System automatic paid AL unused days%' AND a.Month = @Month AND a.Year = @Year AND ISNULL(a.SalaryTerm, 0) = 0 AND ISNULL(a.Amount, 0) <> ISNULL(p.ApprovedAmount, 0) AND EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList e
			WHERE e.EmployeeID = a.EmployeeID
			)

	DELETE a
	FROM dbo.tblPR_Adjustment a
	WHERE a.IncomeID = 5 AND a.Remark LIKE N'System automatic paid AL unused days%' AND NOT EXISTS (
			SELECT 1
			FROM tblAnnualLeavePayment p
			WHERE p.EmployeeID = a.EmployeeID AND p.Month = a.Month AND p.Year = a.Year AND a.IncomeID = 5 AND a.Remark LIKE N'System automatic paid AL unused days'
			) AND a.Month = @Month AND a.Year = @Year AND ISNULL(a.SalaryTerm, 0) = 0

	INSERT INTO dbo.tblPR_Adjustment (EmployeeID, Month, Year, IncomeID, ByAmount, Amount, Remark, SalaryTerm)
	SELECT p.EmployeeID, @Month, @Year, 5, 1, p.ApprovedAmount, N'System automatic paid AL unused days', 0
	FROM dbo.tblAnnualLeavePayment p
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList e
			WHERE p.EmployeeID = e.EmployeeID
			) AND p.Month = @Month AND p.Year = @Year AND NOT EXISTS (
			SELECT 1
			FROM dbo.tblPR_Adjustment a
			WHERE a.EmployeeID = p.EmployeeID AND a.Month = p.Month AND p.Year = a.Year AND a.IncomeID = 5
			)

	--TRIPOD
	SELECT o.EmployeeID, LatestSalEntry, ROUND(a.TotalExcessOT * SalaryPerHourOT, @ROUND_OT_NS_Detail_UNIT) ExcessOTAmount
	INTO #ExcessOT
	FROM #tblSalDetail o
	LEFT JOIN #AttendanceSummary a ON o.EmployeeID = a.EmployeeID AND CAST(a.FromDate AS DATE) = CAST(o.FromDate AS DATE) AND CAST(a.ToDate AS DATE) = CAST(o.ToDate AS DATE)
	WHERE isnull(a.TotalExcessOT, 0) > 0
	GROUP BY o.EmployeeID, LatestSalEntry, a.TotalExcessOT, o.SalaryPerHourOT

	DELETE
	FROM tblPR_Adjustment
	WHERE IncomeID = 16 AND EmployeeID IN (
			SELECT EmployeeID
			FROM #ExcessOT
			) AND [Month] = @Month AND [Year] = @Year

	INSERT INTO tblPR_Adjustment (EmployeeID, Month, Year, IncomeID, ByAmount, Amount)
	SELECT EmployeeID, @Month, @Year, 16, Amount, Amount
	FROM (
		SELECT EmployeeID, SUM(ExcessOTAmount) AS Amount
		FROM #ExcessOT
		GROUP BY EmployeeID
		) ex

	IF (OBJECT_ID('SALCAL_ADJUSTMENT_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ADJUSTMENT_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
	,@CalculateRetro int =0
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ADJUSTMENT_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID, @CalculateRetro

	-------------------Employees who have Adjustment--------------------------------
	INSERT INTO #tblAdjustment (EmployeeID, IncomeID, ByAmount, SalaryPercent, AdjustmentAmount, EmpAdjustmentID, CurrencyCode, ExchangeRate) (
		SELECT p.EmployeeID, p.IncomeID, ByAmount, SalaryPercent, p.Amount * isnull(c.[ExchangeRate], 1) AS Amount, EmpAdjustmentID, p.CurrencyCode, ISNULL(c.[ExchangeRate], 1) AS ExchangeRate FROM tblPR_Adjustment p INNER JOIN tblIrregularIncome ir ON p.InComeID = ir.IncomeID AND isnull(ir.AppendToPIT, 0) = 0 INNER JOIN #tblSalDetail sal ON p.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1 LEFT JOIN #EmployeeExchangeRate c ON p.EmployeeID = c.EmployeeID AND p.CurrencyCode = c.CurrencyCode WHERE p.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			) AND [Month] = @Month AND [Year] = @Year
		)

	UPDATE #tblAdjustment
	SET CurrencyCode = 'VND'
	WHERE ISNULL(CurrencyCode, '-1') = '-1'

	INSERT INTO tblProcessErrorMessage (ErrorType, ErrorDetail, LoginID)
	SELECT 'Exchange Rate not seted!', 'Exchange rate for "' + a.CurrencyCode + '" is not seted!, Please complete Function "Currency Setting" first!', @loginID - 1000
	FROM #tblAdjustment a
	INNER JOIN #tblSalDetail sal ON a.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1
	LEFT JOIN #EmployeeExchangeRate c ON a.CurrencyCode = c.CurrencyCode AND c.EmployeeID = a.EmployeeID
	WHERE isnull(a.CurrencyCode, 'vnd') <> 'vnd' AND c.[ExchangeRate] IS NULL

	IF @@ROWCOUNT > 0
	BEGIN
		-- nếu có lỗi thì
		RETURN;
	END

	------------Determine whether Adjustment is calculated base on Salary percent or not----------
	UPDATE #tblAdjustment
	SET ByAmount = 1 -- ISNULL(ByAmount,1)
		, SalaryPercent = 0 -- ISNULL(SalaryPercent,0)

	UPDATE #tblAdjustment
	SET BasicSalary = sd.BasicSalary
	FROM #tblAdjustment adj, #tblSalDetail sd
	WHERE adj.EmployeeID = sd.EmployeeID AND adj.ByAmount = 0 --tinh theo salary percent
		AND sd.LatestSalEntry = 1

	-------------------Calculate if Adjustment is based on Salary percent---------------
	--UPDATE #tblAdjustment
	--SET AdjustmentAmount = BasicSalary * SalaryPercent/100.0
	--WHERE ByAmount = 0
	UPDATE #tblAdjustment
	SET AdjustmentAmount = ISNULL(AdjustmentAmount, 0)

	SELECT EmployeeID, als.AllowanceID, ad.IncomeID, AdjustmentAmount, EmpAdjustmentID, ir.TaxBaseOnAllowanceCode, ad.Raw_AdjustmentAmount, ad.CurrencyCode AS Raw_CurrencyCode, ad.ExchangeRate AS Raw_ExchangeRate
	INTO #tblAdjustmentForAllowance
	FROM #tblAdjustment ad
	INNER JOIN tblIrregularIncome ir ON ad.IncomeID = ir.IncomeID AND len(ir.TaxBaseOnAllowanceCode) > 0 AND ForAllowance = 1
	INNER JOIN tblAllowanceSetting als ON ir.TaxBaseOnAllowanceCode = als.AllowanceCode

	INSERT INTO #tblSal_Adjustment_ForAllowance_Des (EmployeeID, Month, Year, PeriodID, AllowanceID, IncomeID, AdjustmentAmount, Raw_AdjustmentAmount, Raw_CurrencyCode, Raw_ExchangeRate)
	SELECT EmployeeID, @Month, @Year, @PeriodID, AllowanceID, IncomeID, AdjustmentAmount, Raw_AdjustmentAmount, Raw_CurrencyCode, Raw_ExchangeRate
	FROM #tblAdjustmentForAllowance

	DELETE #tblAdjustment
	FROM #tblAdjustment a
	INNER JOIN #tblAdjustmentForAllowance aa ON a.EmployeeId = aa.EmployeeId AND a.IncomeID = aa.IncomeID

	-----------------Insert into the table #tblSal_Adjustment_des-------------------
	SELECT EmployeeID, IncomeID, SUM(AdjustmentAmount) AdjustmentAmount, sum(Raw_AdjustmentAmount) AS Raw_AdjustmentAmount, CAST(0 AS FLOAT(53)) TaxableAmount, CAST(0 AS FLOAT(53)) UntaxableAmount
	INTO #AdjustmentSum
	FROM #tblAdjustment
	GROUP BY EmployeeID, IncomeID

	UPDATE a
	SET UntaxableAmount = ISNULL(i.TaxfreeMaxAmount, 0)
	FROM #AdjustmentSum a
	INNER JOIN tblIrregularIncome i ON a.IncomeID = i.IncomeID AND i.Taxable = 1

	UPDATE a
	SET UntaxableAmount = isnull(UntaxableAmount, 0) + AdjustmentAmount
	FROM #AdjustmentSum a
	INNER JOIN tblIrregularIncome i ON a.IncomeID = i.IncomeID AND isnull(i.Taxable, 0) = 0

	UPDATE #AdjustmentSum
	SET UntaxableAmount = AdjustmentAmount
	WHERE UntaxableAmount > AdjustmentAmount AND AdjustmentAmount > 0

	UPDATE #AdjustmentSum
	SET TaxableAmount = AdjustmentAmount - UntaxableAmount

	UPDATE #AdjustmentSum
	SET Raw_AdjustmentAmount = AdjustmentAmount, AdjustmentAmount = ROUND(AdjustmentAmount, @ROUND_SALARY_UNIT), UntaxableAmount = ROUND(UntaxableAmount, @ROUND_SALARY_UNIT), TaxableAmount = ROUND(TaxableAmount, @ROUND_SALARY_UNIT)

	IF (OBJECT_ID('SALCAL_ADJUSTMENT_BEFORE_INSERT') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ADJUSTMENT_BEFORE_INSERT
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ADJUSTMENT_BEFORE_INSERT @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	------------------------------Calculate OT------------------------------------
	-- giống như thằng Leave thì đoạn này cũng cần phải
	SELECT o.OTKind, o.EmployeeID, @Month Month, @Year Year, s.SalaryHistoryID, os.OvValue AS OTRate, SUM(o.ApprovedHours) AS OTHour, CAST(0 AS FLOAT(53)) OTAmount, s.SalaryPerDayOT, s.SalaryPerHourOT, s.STD_WD, s.LatestSalEntry, MAX(os.NSPercents) AS NSPercents, CAST(0 AS MONEY) AS NightShiftAmount
	INTO #tblSal_OT_Detail
	FROM #tblOTList o
	INNER JOIN #tblSalDetail s ON o.EmployeeID = s.EmployeeID AND o.OTDate BETWEEN s.FromDate AND s.ToDate
	INNER JOIN tblOvertimeSetting os ON o.OTKind = os.OTKind
	GROUP BY o.OTKind, o.EmployeeID, s.SalaryHistoryID, os.OvValue, s.SalaryPerDayOT, s.SalaryPerHourOT, s.SalaryPerHour, s.STD_WD, s.LatestSalEntry

	IF (OBJECT_ID('SALCAL_OT_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_OT_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,

	@FromDatedatetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,

	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_OT_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	IF @StopUPDATE = 0
	BEGIN
		-- add thêm phần night shift
		UPDATE #tblSal_OT_Detail
		SET OTAmount = o.OTRate * o.OTHour * o.SalaryPerHourOT / 100.0, NightShiftAmount = o.NSPercents * o.OTHour * o.SalaryPerHourOT / 100.0
		FROM #tblSal_OT_Detail o
	END

	--TRIPOD
	SELECT o.EmployeeID, o.SalaryHistoryID, LatestSalEntry, SUM(OTAmount / OTRate * 100.0) TaxableOTAmount, SUM(OTAmount - round((OTAmount / OTRate * 100.0), @ROUND_SALARY_UNIT)) NoneTaxableOTAmount -- làm vầy cộng lại mới tròn
		, ROUND(SUM(OTAmount), @ROUND_OT_NS_Detail_UNIT) TotalOTAmount, ROUND(SUM(NightShiftAmount), @ROUND_OT_NS_Detail_UNIT) NightShiftAmount
	INTO #SummaryOT
	FROM #tblSal_OT_Detail o
	LEFT JOIN #AttendanceSummary a ON o.EmployeeID = a.EmployeeID AND o.LatestSalEntry = a.PeriodID
	WHERE isnull(a.TotalExcessOT, 0) = 0
	GROUP BY o.EmployeeID, o.SalaryHistoryID, LatestSalEntry
	
	UNION
	
	SELECT o.EmployeeID, o.SalaryHistoryID, LatestSalEntry, ROUND(a.TaxableOT * SalaryPerHourOT, @ROUND_OT_NS_Detail_UNIT) TaxableOTAmount, ROUND(a.NontaxableOT * SalaryPerHourOT, @ROUND_OT_NS_Detail_UNIT) NoneTaxableOTAmount -- làm vầy cộng lại mới tròn
		, ROUND(a.TotalOT * SalaryPerHourOT, @ROUND_OT_NS_Detail_UNIT) TotalOTAmount, ROUND(SUM(NightShiftAmount), @ROUND_OT_NS_Detail_UNIT) NightShiftAmount
	FROM #tblSal_OT_Detail o
	LEFT JOIN #AttendanceSummary a ON o.EmployeeID = a.EmployeeID AND o.LatestSalEntry = a.PeriodID
	WHERE isnull(a.TotalExcessOT, 0) > 0
	GROUP BY o.EmployeeID, o.SalaryHistoryID, LatestSalEntry, a.TaxableOT, a.NontaxableOT, a.TotalOT, o.SalaryPerHourOT

	UPDATE #tblSalDetail
	SET TaxableOTTotal = round(tmp.TaxableOTAmount, @ROUND_SALARY_UNIT), NoneTaxableOTTotal = round(tmp.NoneTaxableOTAmount, @ROUND_OT_NS_Detail_UNIT), TotalOTAmount = tmp.TotalOTAmount, NightShiftAmount = tmp.NightShiftAmount
	FROM #tblSalDetail s
	INNER JOIN #SummaryOT tmp ON s.EmployeeID = tmp.EmployeeID AND s.SalaryHistoryID = tmp.SalaryHistoryID AND s.LatestSalEntry = tmp.LatestSalEntry

	UPDATE #tblSalDetail
	SET TotalOTAmount = ISNULL(TotalOTAmount, 0) + ISNULL(re.OT_Retro_Amount, 0), TaxableOTTotal = ISNULL(TaxableOTTotal, 0) + ISNULL(re.Taxed_OT_REtro, 0), NoneTaxableOTTotal = ISNULL(NoneTaxableOTTotal, 0) + ISNULL(re.Nontax_OT_Retro_Amount, 0)
	FROM #tblSalDetail sal
	INNER JOIN (
		SELECT EmployeeID, OT_Retro_Amount, Nontax_OT_Retro_Amount, ISNULL(OT_Retro_Amount, 0) - ISNULL(Nontax_OT_Retro_Amount, 0) AS Taxed_OT_REtro
		FROM #tblsal_retro_Final
		) re ON sal.EmployeeID = re.EmployeeID
	WHERE sal.LatestSalEntry = 1

	INSERT INTO #tblSal_OT_Detail_des (OverTimeID, EmployeeID, Year, Month, SalaryHistoryID, OTHour, OTAmount, OTRate, SalaryPerDay, SalaryPerHour, LatestSalEntry, PeriodID, NightShiftAmount, TaxableOTAmount, NoneTaxableOTAmount)
	SELECT OTKind, EmployeeID, Year, Month, SalaryHistoryID, OTHour, ROUND(OTAmount, @ROUND_OT_NS_Detail_UNIT) OTAmount, OTRate, SalaryPerDayOT, SalaryPerHourOT, LatestSalEntry, @PeriodID, NightShiftAmount, OTAmount / OTRate * 100.0 AS TaxableOTAmount, OTAmount - round((OTAmount / OTRate * 100.0), @ROUND_SALARY_UNIT) AS NoneTaxableOTAmount
	FROM #tblSal_OT_Detail

	IF (OBJECT_ID('SALCAL_OT_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_OT_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_OT_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	UPDATE #tblSalDetail
	SET TotalOTAmount = ROUND(TotalOTAmount, @ROUND_OT_NS_Detail_UNIT), TaxableOTTotal = ROUND(TaxableOTTotal, @ROUND_OT_NS_Detail_UNIT), NoneTaxableOTTotal = ROUND(NoneTaxableOTTotal, @ROUND_OT_NS_Detail_UNIT), NightShiftAmount = ROUND(NightShiftAmount, @ROUND_OT_NS_Detail_UNIT)

	-- OT summary--
	INSERT INTO #tblSal_OT_des (EmployeeID, Month, Year, OTAmount, TaxableOTAmount, NoneTaxableOTAmount, PeriodID, NightShiftAmount)
	SELECT EmployeeID, @Month, @Year, round(SUM(TotalOTAmount), @ROUND_OT_NS_Detail_UNIT), round(SUM(TaxableOTTotal), @ROUND_OT_NS_Detail_UNIT), round(SUM(NoneTaxableOTTotal), @ROUND_OT_NS_Detail_UNIT), @PeriodID, sum(NightShiftAmount) AS NightShiftAmount
	FROM #tblSalDetail s
	WHERE s.TaxableOTTotal + s.NoneTaxableOTTotal > 0
	GROUP BY EmployeeID

	-------------------------calculate Nightshift adjustment--------------------------------------
	DECLARE @PERCENT FLOAT

	SELECT @PERCENT = CAST([Value] AS FLOAT)
	FROM tblParameter
	WHERE Code = 'NIGHT_SHIFT_PERCENT'

	SET @PERCENT = ISNULL(@PERCENT, 30)

	SELECT NSKind, EmployeeID, HourApprove, [Date]
	INTO #tblNightShiftList
	FROM tblNightShiftList
	WHERE Approval = 1 AND DATE BETWEEN @FromDate AND @ToDate AND EmployeeID IN (
			SELECT te.EmployeeId
			FROM #tblEmployeeIDList te
			
			EXCEPT
			
			SELECT c.EmployeeId
			FROM #tblCustomAttendanceData c
			)

	DELETE #tblNightShiftList
	WHERE EmployeeID IN (
			SELECT c.EmployeeId
			FROM #tblCustomAttendanceData c
			)

	INSERT INTO #tblNightShiftList (NSKind, EmployeeID, HourApprove, [Date])
	SELECT 1 AS NSKind, EmployeeID, NS_Hour_1 AS HourApprove, @ToDateTruncate AS DATE
	FROM #tblCustomAttendanceData
	WHERE NS_Hour_1 <> 0
	
	UNION
	

	SELECT 2 AS NSKind, EmployeeID, NS_Hour_2 AS HourApprove, @ToDateTruncate AS DATE
	FROM #tblCustomAttendanceData
	WHERE NS_Hour_2 <> 0
	
	UNION
	
	SELECT 3 AS NSKind, EmployeeID, NS_Hour_3 AS HourApprove, @ToDateTruncate AS DATE
	FROM #tblCustomAttendanceData
	WHERE NS_Hour_3 <> 0
	
	UNION
	
	SELECT 4 AS NSKind, EmployeeID, NS_Hour_4 AS HourApprove, @ToDateTruncate AS DATE
	FROM #tblCustomAttendanceData
	WHERE NS_Hour_4 <> 0

	SELECT o.NSKind, o.EmployeeID, @Month Month, @Year Year, s.SalaryHistoryID, os.NSValue AS OTRate, SUM(o.HourApprove) AS OTHour, CAST(0 AS FLOAT(53)) NSAmount, s.SalaryPerDayOT, s.SalaryPerHourOT, s.LatestSalEntry
	INTO #tblSal_NS_Detail
	FROM #tblNightShiftList o
	INNER JOIN #tblSalDetail s ON o.EmployeeID = s.EmployeeID AND o.[Date] BETWEEN s.FromDate AND s.ToDate
	INNER JOIN tblNightShiftSetting os ON o.NSKind = os.NSKind
	GROUP BY o.NSKind, o.EmployeeID, s.SalaryHistoryID, os.NSValue, s.SalaryPerDayOT, s.SalaryPerHourOT, s.LatestSalEntry

	UPDATE #tblSal_NS_Detail
	SET OTRate = @PERCENT
	WHERE OTRate IS NULL

	IF (OBJECT_ID('SALCAL_NS_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_NS_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_NS_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	IF @StopUPDATE = 0
	BEGIN
		UPDATE #tblSal_NS_Detail
		SET NSAmount = ROUND(o.OTRate * o.OTHour * o.SalaryPerHourOT / 100.0, @ROUND_OT_NS_Detail_UNIT)
		FROM #tblSal_NS_Detail o
	END

	UPDATE #tblSal_NS_Detail
	SET NSAmount = ROUND(NSAmount, @ROUND_OT_NS_Detail_UNIT)

	INSERT INTO #tblSal_NS_Detail_des (EmployeeID, Month, Year, SalaryHistoryID, NSKind, NSHours, NSAmount, LatestSalEntry, PeriodID)
	SELECT EmployeeID, Month, Year, SalaryHistoryID, NSKind, SUM(OTHour) OTHour, SUM(NSAmount) NSAmount, LatestSalEntry, @PeriodID
	FROM #tblSal_NS_Detail
	GROUP BY EmployeeID, Month, Year, SalaryHistoryID, LatestSalEntry, NSKind

	UPDATE #tblSalDetail
	SET TotalNSAmt = round(tmp.TotalNSAmt, @ROUND_OT_NS_Detail_UNIT), NoneTaxableNSAmt = round(tmp.NoneTaxableNSAmt, @ROUND_OT_NS_Detail_UNIT)
	FROM #tblSalDetail s
	INNER JOIN (
		SELECT EmployeeID, SalaryHistoryID, LatestSalEntry, SUM(NSAmount) TotalNSAmt, SUM(NSAmount) NoneTaxableNSAmt
		FROM #tblSal_NS_Detail
		GROUP BY EmployeeID, SalaryHistoryID, LatestSalEntry
		) tmp ON s.EmployeeID = tmp.EmployeeID AND s.SalaryHistoryID = tmp.SalaryHistoryID AND s.LatestSalEntry = tmp.LatestSalEntry

	-- update retro amount of night shift (normal days only)
	UPDATE #tblSalDetail
	SET TotalNSAmt = ISNULL(TotalNSAmt, 0) + ISNULL(re.NightShift_RETRO, 0)
	FROM #tblSalDetail sal
	INNER JOIN #tblsal_retro_Final re ON sal.EmployeeID = re.EmployeeID
	WHERE sal.LatestSalEntry = 1

	IF (OBJECT_ID('SALCAL_NS_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_NS_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_NS_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	UPDATE #tblSal_NS_Detail
	SET NSAmount = ROUND(NSAmount, @ROUND_OT_NS_Detail_UNIT)

	-- NS summary--
	INSERT INTO #tblSal_NS_des (EmployeeID, Month, Year, NSHours, NSAmount, PeriodID)
	SELECT EmployeeID, Month, Year, SUM(OTHour) NSHours, ROUND(SUM(NSAmount), @ROUND_OT_NS_Detail_UNIT) NSAmount, @PeriodID
	FROM #tblSal_NS_Detail s
	GROUP BY EmployeeID, Month, Year

	-----------------------Calculate Allowance---------------------------
	UPDATE #tblAllowance
	SET DefaultAmount_WithoutCustomAmount = DefaultAmount

	UPDATE #tblAllowance
	SET MonthlyCustomAmount = isnull(MonthlyCustomAmount, 0) + isnull(a.AdjustmentAmount, 0), DefaultAmount = isnull(DefaultAmount, 0) + isnull(a.AdjustmentAmount, 0)
	FROM #tblAllowance al
	INNER JOIN (
		SELECT EmployeeID, TaxBaseOnAllowanceCode, Sum(AdjustmentAmount) AS AdjustmentAmount
		FROM #tblAdjustmentForAllowance a
		GROUP BY EmployeeID, TaxBaseOnAllowanceCode
		) a ON al.EmployeeID = a.EmployeeId AND al.AllowanceCode = a.TaxBaseOnAllowanceCode
	WHERE al.LatestSalEntry = 1

	UPDATE #tblAllowance
	SET STD_WD = CASE
			WHEN A.AllowanceRuleID IN (3, 7)
				THEN @FIXEDWORKINGDAY
			WHEN AllowanceRuleID IN (4, 8)
				THEN sal.STD_WD_Schedule
			ELSE sal.STD_WD
			END
	FROM #tblAllowance a
	INNER JOIN #tblSalDetail sal ON a.EmployeeID = sal.EmployeeID

	UPDATE a
	SET TotalPaidDays = sal.STD_WD - lv.lvAmount
	FROM #tblSalDetail sal
	INNER JOIN tblSalaryCalculationRule sc ON sal.SalCalRuleID = sc.SalCalRuleID
	INNER JOIN #tblAllowance a ON sal.EmployeeID = a.EmployeeID
	INNER JOIN (
		SELECT EmployeeID, ISNULL(SUM(lv.LvAmount / 8.0), 0) AS lvAmount
		FROM #tblLvHistory lv
		INNER JOIN tblLeaveType lt ON lv.LeaveCode = lt.LeaveCode AND isnull(lt.PaidRate, 0) = 0 AND lv.LeaveDate BETWEEN @FromDate AND @ToDate
		GROUP BY lv.EmployeeID
		) lv ON a.EmployeeID = lv.EmployeeID
	WHERE a.AllowanceRuleID = 17 AND sc.IsSTDMinusUnpaidLeave = 1

	-- tinh theo luong co ban
	--chia cong chuan * cong thuc te
	UPDATE #tblAllowance
	SET TotalPaidDays = sal.AttDays
	FROM #tblAllowance al
	INNER JOIN #tblSal_AttendanceData_PerHistory sal ON al.EmployeeID = sal.EmployeeID AND al.SalaryHistoryID = sal.SalaryHistoryID
	WHERE al.AllowanceRuleID = 4

	--ngay cong di lam thuc te
	UPDATE #tblAllowance
	SET TotalPaidDays = ISNULL(att.AttDays, 0) + ISNULL(att.ProbationHours, 0) / 8.0
	FROM #tblAllowance a
	INNER JOIN #tblSal_AttendanceData att ON a.EmployeeID = att.EmployeeID AND AllowanceRuleID IN (2, 10, 19)

	UPDATE #tblAllowance
	SET TotalPaidDays = ISNULL(a.TotalPaidDays, 0) + ISNULL(lv.LvAmount, 0)
	FROM #tblAllowance a
	INNER JOIN (
		SELECT EmployeeID, ISNULL(SUM(lv.LvAmount / 8.0), 0) AS lvAmount
		FROM #tblLvHistory lv
		INNER JOIN tblLeaveType lt ON lv.LeaveCode = lt.LeaveCode AND lt.PaidRate > 0 AND lv.LeaveDate BETWEEN @FromDate AND @ToDate
		GROUP BY lv.EmployeeID
		) lv ON a.EmployeeID = lv.EmployeeID AND AllowanceRuleID IN (19)

	--ngay cong di lam thuc te + ngay chu nhat
	UPDATE #tblAllowance
	SET TotalPaidDays = ISNULL(a.TotalPaidDays, 0) + ISNULL(att.TotalSunDay, 0)
	FROM #tblAllowance a
	INNER JOIN (
		SELECT EmployeeID, SUM(CASE
					WHEN WorkingTime > Std_Hour_PerDays
						THEN 1
					ELSE WorkingTime / Std_Hour_PerDays
					END) AS TotalSunDay
		FROM #Tadata
		WHERE HolidayStatus > 0
		GROUP BY EmployeeID
		) att ON a.EmployeeID = att.EmployeeID AND AllowanceRuleID IN (10)

	-- rule 20 nhan voi so ngay Chu nhan di lam du cong
	UPDATE #tblAllowance
	SET TotalPaidDays = isnull(FullWorkingTimeSunDays, 0)
	FROM #tblAllowance a
	INNER JOIN (
		SELECT EmployeeID, COUNT(1) AS FullWorkingTimeSunDays
		FROM #Tadata
		WHERE WorkingTime >= Std_Hour_PerDays AND HolidayStatus = 1
		GROUP BY EmployeeID
		) att ON a.EmployeeID = att.EmployeeID AND AllowanceRuleID IN (20)

	--So ngay di lam tron cong (lam du 8h cong 1 ngay moi dc tinh 1 lan tra)
	UPDATE #tblAllowance
	SET TotalPaidDays = isnull(FullWorkingTimeDays, 0)
	FROM #tblAllowance a
	INNER JOIN (
		SELECT EmployeeID, COUNT(1) AS FullWorkingTimeDays
		FROM #Tadata
		WHERE WorkingTime >= Std_Hour_PerDays
		GROUP BY EmployeeID
		) att ON a.EmployeeID = att.EmployeeID AND AllowanceRuleID IN (18)

	IF (OBJECT_ID('SALCAL_ALLOWANCE_BEFORE_PROCESS') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_BEFORE_PROCESS
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_BEFORE_PROCESS @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	--hưởng trọn gói
	UPDATE #tblAllowance
	SET ReceiveAmount = CASE
			WHEN ISNULL(TotalPaidDays, 0) = 0
				THEN 0
			ELSE ISNULL(DefaultAmount, 0)
			END
	WHERE AllowanceRuleID = 1

	--theo ngày tổng ngày công hưởng lương
	UPDATE al
	SET ReceiveAmount = CASE
			/*
	 when isnull(sc.IsDaily,0)=1
			then DefaultAmount*TotalPaidDays -- ngày
			*/
			WHEN isnull(sc.IsFixedStd, 0) = 1
				THEN DefaultAmount * TotalPaidDays / FixedStdPerMonth
			ELSE DefaultAmount * TotalPaidDays / STD_WD
			END
	FROM #tblAllowance al
	INNER JOIN tblSalaryCalculationRule sc ON al.SalCalRuleID = sc.SalCalRuleID
	WHERE AllowanceRuleID IN (3, 4, 5, 7, 8, 17)

	UPDATE al
	SET ReceiveAmount = DefaultAmount * TotalPaidDays
	FROM #tblAllowance al
	INNER JOIN tblSalaryCalculationRule sc ON al.SalCalRuleID = sc.SalCalRuleID --and isnull(sc.IsDaily,0)=0
	WHERE AllowanceRuleID IN (2, 10, 18, 20)

	-- thâm niên
	-- select EmployeeID
	-- ,Hiredate BeginDate
	-- ,@ToDate EndDate
	-- ,1 FirstMonthAddition --mac dinh tinh luon thang vao lam
	-- ,1 LastMonthAddition --tinh ca thang ket thuc
	-- ,TerminateDate
	-- ,0 as Months
	-- into #tmpSeniority
	-- from #tblEmployeeIDList e where Hiredate < @ToDate
	-- --nhan vien nghi viec thi chi tinh den thang nghi viec thoi
	-- UPDATE #tmpSeniority SET EndDate = TerminateDate where TerminateDate is not null
	IF (OBJECT_ID('SALCAL_ALLOWANCE_SENIORIRY_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_SENIORIRY_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_SENIORIRY_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- if @StopUPDATE = 0
	-- begin
	-- 	DECLARE @SENIORITY_FOR_FIRST_MONTH int, @SENIORITY_FOR_LAST_MONTH int
	-- 	select @SENIORITY_FOR_FIRST_MONTH = [Value] from tblParameter where Code = 'SENIORITY_FOR_FIRST_MONTH'
	-- 	SET @SENIORITY_FOR_FIRST_MONTH = ISNULL(@SENIORITY_FOR_FIRST_MONTH,0)
	-- 	select @SENIORITY_FOR_LAST_MONTH = [Value] from tblParameter where Code = 'SENIORITY_FOR_LAST_MONTH'
	-- 	SET @SENIORITY_FOR_LAST_MONTH = ISNULL(@SENIORITY_FOR_LAST_MONTH,31)
	-- 	if @SENIORITY_FOR_FIRST_MONTH > 0 --VD: neu vao lam sau ngay 15 thi khong duoc tham nien thang dau
	-- 		UPDATE #tmpSeniority SET FirstMonthAddition = 0 where day(BeginDate) > @SENIORITY_FOR_FIRST_MONTH
	-- 	if @SENIORITY_FOR_LAST_MONTH <= 0 --nhap 0 thi tinh den cuoi thang truoc
	-- 		UPDATE #tmpSeniority SET LastMonthAddition = 0 where TerminateDate is not null
	-- 	else if @SENIORITY_FOR_LAST_MONTH < 31 --nhap ngay trong thang, gia su nhap 15 thi nghi viec truoc ngay 15 thi khong duoc, tu ngay 16 tro di thi duoc
	-- 		UPDATE #tmpSeniority SET LastMonthAddition = 0 where day(TerminateDate) < @SENIORITY_FOR_LAST_MONTH
	-- 	else if @SENIORITY_FOR_LAST_MONTH >= 31 --nhap 31 thi nghi viec ngay 1 thi khong duoc, vi LastWorkingDay la ngay cuoi cung cua thang truoc, tu ngay 2 duoc
	-- 		UPDATE #tmpSeniority SET LastMonthAddition = 0 where day(TerminateDate) = 1
	-- 	--tru 2 la tru thang dau tien va thang cuoi cung
	-- 	--UPDATE #tmpSeniority SET Months = DATEDIFF(month,BeginDate,EndDate) - 2 + FirstMonthAddition + LastMonthAddition
	-- end
	-- CREATE TABLE #tblSeniorityAllowance(EmployeeID varchar(20),AllowanceAmount float(53))
	-- insert into #tblSeniorityAllowance(EmployeeID,AllowanceAmount)
	-- select EmployeeID,c.AllowanceAmt from #tmpSeniority a cross apply (
	-- 	select Min(FromMonth) FromMonth
	-- 		from tblSeniorityAllwanceSetting b where a.Months between b.FromMonth and b.ToMonth
	-- ) b
	-- inner join tblSeniorityAllwanceSetting c on b.FromMonth = c.FromMonth
	-- UPDATE a set ReceiveAmount = s.AllowanceAmount
	-- from #tblAllowance a
	-- inner join #tblSeniorityAllowance s on a.EmployeeID = s.EmployeeID
	-- where a.AllowanceRuleID in (13)
	--cap nhat phu cap tham nien vao bang history
	SET @Query = ''

	SELECT @Query += '
update sal set [' + AllowanceCode + '] = ReceiveAmount
 from tblSalaryHistory sal
inner join #tblAllowance al on sal.SalaryHistoryID = al.SalaryHistoryID
where al.AllowanceCode= ''' + AllowanceCode + '''
'
	FROM (
		SELECT DISTINCT AllowanceCode
		FROM #tblAllowance al
		WHERE al.AllowanceRuleID = 13
		) al

	EXECUTE sp_executesql @Query

	IF (OBJECT_ID('SALCAL_ALLOWANCE_SENIORIRY_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_SENIORIRY_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_SENIORIRY_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- chuyên cần, chuyen can chuyencan
	-- RuleID = 9
	IF (OBJECT_ID('SALCAL_ALLOWANCE_DILIGENTALL_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_DILIGENTALL_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_DILIGENTALL_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- sp_DiligentDeductItems_DataSetting -- danh sach cac muc tru chuyen can
	-- tblDiligentAllowanceRule -- cac thiet lap tinh chuyen can
	SELECT s.Code, s.Qty, s.DeductPercentage, cast(0 AS FLOAT) AS ActualQty, cast(0 AS FLOAT(53)) DeductAmount, a.*
	INTO #tblDiligentAll
	FROM #tblAllowance a, tblDiligentAllowanceRule s
	WHERE a.AllowanceRuleID = 9
	ORDER BY a.EmployeeID, s.Code, s.PaidPercentage DESC

	-- Đi trễ về - sớm bao nhiêu phút
	SELECT EmployeeID, IODate, IOKind, IOMinutes, IOMinutesDeduct, ApprovedDeduct
	INTO #tblIOData
	FROM tblInLateOutEarly il
	WHERE ApprovedDeduct = 1 AND ApprovedDeduct > 0 AND IODate BETWEEN @FromDate AND @ToDate AND EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList te
			WHERE il.EmployeeID = te.EmployeeID AND il.IODate BETWEEN te.HireDate AND te.LastWorkingDate
			)

	UPDATE #tblDiligentAll
	SET ActualQty = tmp.IOMinute
	FROM #tblDiligentAll d
	INNER JOIN (
		SELECT EmployeeID, SUM(IOMinutesDeduct) AS IOMinute
		FROM #tblIOData
		GROUP BY EmployeeID
		) tmp ON d.EmployeeID = tmp.EmployeeID
	WHERE d.Code = 'IOMinute'

	-- so lan di tre
	-- Đi trễ về - sớm bao nhiêu lần trong tháng
	UPDATE #tblDiligentAll
	SET ActualQty = tmp.IOMinute
	FROM #tblDiligentAll d
	INNER JOIN (
		SELECT EmployeeID, count(1) AS IOMinute
		FROM #tblIOData
		GROUP BY EmployeeID
		) tmp ON d.EmployeeID = tmp.EmployeeID
	WHERE d.Code = 'IOCount'

	--Không xuống ca - không tăng ca theo lịch: NotOT
	UPDATE #tblDiligentAll
	SET ActualQty = tmp.NotOTCount
	FROM #tblDiligentAll D
	INNER JOIN (
		SELECT EmployeeID, Count(1) NotOTCount
		FROM tblNotOtList ot
		WHERE OTDate BETWEEN @FromDate AND @ToDate AND Approved = 1 AND EXISTS (
				SELECT 1
				FROM #tblEmployeeIDList te
				WHERE ot.EmployeeID = te.EmployeeID AND ot.OTDate BETWEEN te.HireDate AND te.LastWorkingDate
				)
		GROUP BY EmployeeID
		) TMP ON d.EmployeeID = tmp.EmployeeID
	WHERE d.Code = 'NotOT'

	-- Số lần quyên bấm thẻ, vân tay: FWCCount
	UPDATE #tblDiligentAll
	SET ActualQty = tmp.FWCCount
	FROM #tblDiligentAll D
	INNER JOIN (
		SELECT EmployeeID, SUM(CASE
					WHEN LeaveStatus = 3
						THEN 2
					ELSE 1
					END) FWCCount
		FROM #tblLvHistory
		WHERE LeaveCode = 'FWC'
		GROUP BY EmployeeID
		) TMP ON d.EmployeeID = tmp.EmployeeID
	WHERE d.Code = 'FWCCount'

	-- Tổng số ngày công hưởng lương
	UPDATE #tblDiligentAll
	SET ActualQty = STD_WD - TotalPaidDays
	WHERE Code IN ('PD', 'PDAWD')

	-- các loại nghỉ bị trừ chuyên cần
	UPDATE #tblDiligentAll
	SET ActualQty = lv.lvCount
	FROM #tblDiligentAll D
	CROSS APPLY (
		SELECT SUM(lv.LvAmount) / 8.0 lvCount
		FROM #tblLvHistory lv
		WHERE D.EmployeeID = lv.EmployeeID AND D.Code = lv.LeaveCode
		) lv
	WHERE lv.lvCount > 0 AND d.Code NOT IN ('PD', 'PDAWD', 'IOMinute', 'IOCount', 'NotOT', 'FWCCount', 'FWC')

	UPDATE #tblDiligentAll
	SET ActualQty = tmp.lvCount
	FROM #tblDiligentAll D
	INNER JOIN (
		SELECT lv.EmployeeID, lv.lvCount
		FROM #tblDiligentAll d
		INNER JOIN (
			SELECT SUM(lv.LvAmount) / 8.0 AS lvCount, EmployeeID
			FROM #tblLvHistory lv
			WHERE isnull(lv.CutDiligent, 0) = 1
			GROUP BY lv.EmployeeID
			) lv ON d.EmployeeID = lv.EmployeeID
		) TMP ON d.EmployeeID = tmp.EmployeeID
	WHERE Code IN ('ALL_leave')

	DELETE #tblDiligentAll
	WHERE Qty > ActualQty

	DELETE d
	FROM #tblDiligentAll d
	WHERE NOT EXISTS (
			SELECT 1
			FROM (
				SELECT Code, EmployeeID, MAX(Qty) Qty
				FROM #tblDiligentAll
				WHERE Qty <= ActualQty
				GROUP BY Code, EmployeeID
				) tmp
			WHERE d.EmployeeID = tmp.EmployeeID AND d.Code = tmp.Code AND d.Qty = tmp.Qty
			)

	UPDATE #tblDiligentAll
	SET DeductAmount = DefaultAmount * DeductPercentage / 100

	-- Get the remain of diligent allowance
	-- Negative set to zero
	UPDATE d
	SET ReceiveAmount = CASE
			WHEN tmp.DefaultAmount - tmp.DeductAmount > 0
				THEN tmp.DefaultAmount - tmp.DeductAmount
			ELSE 0
			END
	FROM #tblDiligentAll d
	INNER JOIN (
		SELECT d.EmployeeID, Max(d.DefaultAmount) DefaultAmount, SUM(d.DeductAmount) DeductAmount
		FROM #tblDiligentAll d
		GROUP BY d.EmployeeID
		) tmp ON d.EmployeeID = tmp.EmployeeID

	-- store the result
	UPDATE a
	SET ReceiveAmount = isnull(d.ReceiveAmount, a.DefaultAmount)
	FROM #tblAllowance a
	LEFT JOIN #tblDiligentAll d ON a.EmployeeID = d.EmployeeID AND a.AllowanceID = d.AllowanceID
	WHERE a.AllowanceRuleID = 9

	IF (OBJECT_ID('SALCAL_ALLOWANCE_DILIGENTALL_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_DILIGENTALL_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_DILIGENTALL_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- ket thuc chuyen can
	SELECT DISTINCT AllowanceCode, AllowanceID
	INTO #CustomColname
	FROM tblAllowanceSetting
	WHERE AllowanceCode IN (
			SELECT Column_Name
			FROM INFORMATION_SCHEMA.COLUMNS
			WHERE TABLE_NAME = 'tblCustomInputImportMonthly'
			) AND Visible = 1

	SELECT *
	INTO #tblCustomInputImportMonthly
	FROM tblCustomInputImportMonthly c
	WHERE Month = @Month AND Year = @Year AND EXISTS (
			SELECT 1
			FROM #tblEmployeeIDList te
			WHERE c.EmployeeID = te.EmployeeID
			)

	SET @Query = ''

	DECLARE @AllowanceCustomInput NVARCHAR(100) = ''
	DECLARE @AllowanceID NVARCHAR(10) = ''

	WHILE EXISTS (
			SELECT 1
			FROM #CustomColname
			)
	BEGIN
		SELECT TOP 1 @AllowanceCustomInput = AllowanceCode, @AllowanceID = AllowanceID
		FROM #CustomColname

		SET @Query = 'update #tblAllowance
		set ReceiveAmount = isnull(c.[' + @AllowanceCustomInput + '] ,0)
		from #tblAllowance al
		inner join #tblCustomInputImportMonthly c on al.EmployeeId = c.EmployeeID
		where al.AllowanceID  =' + @AllowanceID + ' and c.[' + @AllowanceCustomInput + '] is not null
		and al.LatestSalEntry = 1'

		EXEC (@Query)

		--neu co import thi xoa nhung dong luong cu di
		SET @Query = 'delete #tblAllowance
		from #tblAllowance al
		inner join #tblCustomInputImportMonthly c on al.EmployeeId = c.EmployeeID
		where al.AllowanceID  =' + @AllowanceID + ' and c.[' + @AllowanceCustomInput + '] is not null
		and al.LatestSalEntry = 0'

		EXEC (@Query)

		DELETE #CustomColname
		WHERE AllowanceCode = @AllowanceCustomInput
	END

	DROP TABLE #tblCustomInputImportMonthly

	DROP TABLE #CustomColname

	-- Lap trinh rieng theo quy tac cua khach hang
	IF (OBJECT_ID('SALCAL_ALLOWANCE_CUSTOMER_RULE') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_CUSTOMER_RULE
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_CUSTOMER_RULE @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- cộng Retro allowance vào
	CREATE TABLE #tblRetro_Allowance_detail (EmployeeId VARCHAR(20), AllowanceCode NVARCHAR(200), Amount MONEY)

	SELECT SUBSTRING(SUBSTRING(c.COLUMN_NAME, 4, 9999), 1, LEN(SUBSTRING(c.COLUMN_NAME, 4, 9999)) - 6) AS AllowanceName, c.COLUMN_NAME
	INTO #AllowanceCodeFromRetroTable
	FROM INFORMATION_SCHEMA.COLUMNS c
	WHERE c.TABLE_NAME = 'tblSal_Retro_Sumary' AND c.COLUMN_NAME IN (
			SELECT 'AL_' + AllowanceCode + '_Retro'
			FROM tblAllowanceSetting
			WHERE Visible = 1
			)

	IF (
			SELECT COUNT(1)
			FROM #AllowanceCodeFromRetroTable
			) > 0
	BEGIN
		SET @Query = ''

		SELECT @Query += ' select EmployeeID,''' + AllowanceName + ''',' + COLUMN_NAME + '
	from #tblsal_retro_Final where ' + COLUMN_NAME + ' <> 0
	union all'
		FROM #AllowanceCodeFromRetroTable

		SET @Query = SUBSTRING(@Query, 1, len(@Query) - LEN('union all'))
		SET @Query = 'insert into #tblRetro_Allowance_detail(EmployeeId,AllowanceCode,Amount)
	' + @Query

		EXEC (@Query)
	END

	UPDATE al
	SET RetroAmount = re.Amount, ReceiveAmount = ISNULL(ReceiveAmount, 0) + ISNULL(re.Amount, 0)
	FROM #tblRetro_Allowance_detail re
	INNER JOIN #tblAllowance al ON re.EmployeeId = al.EmployeeID AND re.AllowanceCode = al.AllowanceCode

	-- hết cộng retro vào
	UPDATE #tblAllowance
	SET UntaxableAmount = TaxfreeMaxAmount
	FROM #tblAllowance a

	--inner join tblAllowanceSetting al on a.AllowanceID = al.AllowanceID
	SELECT al.EmployeeID, al.AllowanceID, SUM(al.ReceiveAmount) sum_ReceiveAmount, MAX(al.TaxFreeMaxAmount) max_TaxFreeMaxAmount
	INTO #TwoAllowanceFreeTax
	FROM #tblAllowance al
	WHERE al.isTaxable = 1 AND al.TaxfreeMaxAmount > 0 AND al.ReceiveAmount > 0
	GROUP BY al.EmployeeID, al.AllowanceID
	HAVING COUNT(1) > 1 AND SUM(al.ReceiveAmount) > max(al.TaxFreeMaxAmount)

	SELECT ROW_NUMBER() OVER (
			PARTITION BY al.EmployeeID, al.AllowanceID ORDER BY al.LatestSalEntry
			) ORD, al.EmployeeID, al.AllowanceID, al.LatestSalEntry, al.ReceiveAmount, tw.sum_ReceiveAmount, tw.max_TaxFreeMaxAmount, CAST(NULL AS MONEY) UntaxableAmount_Accummulate
	INTO #AccummulateUntaxableAmount
	FROM #tblAllowance al
	INNER JOIN #TwoAllowanceFreeTax tw ON al.EmployeeID = tw.EmployeeID AND al.AllowanceID = tw.AllowanceID

	UPDATE #AccummulateUntaxableAmount
	SET UntaxableAmount_Accummulate = CASE
			WHEN ReceiveAmount > max_TaxFreeMaxAmount
				THEN max_TaxFreeMaxAmount
			ELSE ReceiveAmount
			END
	WHERE ORD = 1

	UPDATE a2
	SET max_TaxFreeMaxAmount = a2.max_TaxFreeMaxAmount - a1.UntaxableAmount_Accummulate
	FROM #AccummulateUntaxableAmount a1
	INNER JOIN #AccummulateUntaxableAmount a2 ON a1.EmployeeID = a2.EmployeeID AND a1.AllowanceID = a2.AllowanceID
	WHERE a1.ORD = 1 AND a2.ORD = 2

	UPDATE #AccummulateUntaxableAmount
	SET UntaxableAmount_Accummulate = CASE
			WHEN ReceiveAmount > max_TaxFreeMaxAmount
				THEN max_TaxFreeMaxAmount
			ELSE ReceiveAmount
			END
	WHERE ORD = 2

	UPDATE #tblAllowance
	SET UntaxableAmount = ac.UntaxableAmount_Accummulate
	FROM #tblAllowance al
	INNER JOIN #AccummulateUntaxableAmount ac ON al.EmployeeID = ac.EmployeeID AND al.AllowanceID = ac.AllowanceID
	WHERE al.LatestSalEntry = ac.LatestSalEntry

	UPDATE #tblAllowance
	SET UntaxableAmount = 0
	WHERE UntaxableAmount IS NULL

	UPDATE #tblAllowance
	SET UntaxableAmount = round(CASE
				WHEN ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0) > UntaxableAmount
					THEN UntaxableAmount
				ELSE ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0)
				END, @ROUND_SALARY_UNIT), RetroAmountNonTax = round(CASE
				WHEN ISNULL(ReceiveAmount, 0) > UntaxableAmount
					THEN UntaxableAmount
				ELSE ISNULL(ReceiveAmount, 0)
				END, @ROUND_SALARY_UNIT) - round(CASE
				WHEN ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0) > UntaxableAmount
					THEN UntaxableAmount
				ELSE ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0)
				END, @ROUND_SALARY_UNIT)

	-- phụ cấp trang phục, đồng phục, 1 năm được miễn thuế 5tr, nếu vượt quá thì không được miễn thuế nữa
	UPDATE a
	SET UntaxableAmount = round(CASE
				WHEN ISNULL(a.ReceiveAmount, 0) > t.TaxfreeMaxAmount
					THEN t.TaxfreeMaxAmount
				ELSE a.ReceiveAmount
				END, @ROUND_SALARY_UNIT)
	FROM #tblAllowance a
	INNER JOIN (
		SELECT tmp.EmployeeID, tmp.AllowanceID, sa.TaxfreeMaxAmount - ISNULL(tmp.UntaxableAmount, 0) TaxfreeMaxAmount
		FROM tblAllowanceSetting sa
		INNER JOIN (
			SELECT a.EmployeeID, SUM(a.UntaxableAmount) UntaxableAmount, sa.AllowanceID
			FROM #tblSal_Allowance_Detail_des a
			INNER JOIN tblAllowanceSetting sa ON a.AllowanceID = sa.AllowanceID AND isnull(sa.isUniformAllowance, 0) = 1
			INNER JOIN #tblAllowance al ON a.EmployeeID = al.EmployeeID AND al.AllowanceID = a.AllowanceID
			WHERE (a.Month + a.Year * 12) BETWEEN @Year * 12 + 1 AND @Year * 12 + 12 AND a.Month + a.Year <> @month + @year
			GROUP BY a.EmployeeID, a.AllowanceID, sa.AllowanceID
			) tmp ON sa.AllowanceID = tmp.AllowanceID
		) t ON a.EmployeeID = t.EmployeeID AND a.AllowanceID = t.AllowanceID

	-- phụ cấp nhà ở
	DECLARE @HouseAllPercent REAL

	SET @HouseAllPercent = (
			SELECT cast(Value AS FLOAT(53))
			FROM tblParameter
			WHERE code = 'HOUSE_ALL_PER_COMP'
			)
	SET @HouseAllPercent = isnull(@HouseAllPercent, 15)

	--tổng số tiền tinh thuế kovượt quá 15% tổng thu nhập chịu thuế (không bao gồm phụ cấp nhà ở)
	-- tổng hợp thu nhập chịu thuế chua gồm tiền nhà
	UPDATE #tblAllowance
	SET ReceiveAmount = ROUND(ReceiveAmount, @ROUND_SALARY_UNIT)

	UPDATE #tblSalDetail
	SET ActualMonthlyBasic = ROUND(ActualMonthlyBasic, @ROUND_SALARY_UNIT)

	UPDATE #tblSalDetail
	SET ActualMonthlyBasic = ISNULL(ActualMonthlyBasic, 0) + ISNULL(sr.ActualMonthlyBasic_Retro_Amount, 0)
	FROM #tblSalDetail sal
	INNER JOIN #tblsal_retro_Final sr ON sal.EmployeeID = sr.EmployeeID --and sr.Month= @Month and sr.Year= @Year
	WHERE sal.LatestSalEntry = 1

	UPDATE #tblAllowance
	SET TaxableAmount = ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0) - ISNULL(UntaxableAmount, 0)

	UPDATE #tblAllowance
	SET TaxableAmount = 0, UntaxableAmount = 0
	WHERE isnull(ReceiveAmount, 0) = 0

	CREATE TABLE #tblAdjustmentNeedConfig (EmployeeId VARCHAR(20), IncomeID INT)

	INSERT INTO #tblAdjustmentNeedConfig (EmployeeId, IncomeID)
	SELECT EmployeeId, IncomeID
	FROM (
		UPDATE #AdjustmentSum
		SET UntaxableAmount = CASE
				WHEN a.AdjustmentAmount > al.TaxFreeMaxAmount - al.UntaxableAmount
					THEN al.TaxFreeMaxAmount - al.UntaxableAmount
				ELSE a.AdjustmentAmount
				END
		OUTPUT inserted.EmployeeID, inserted.IncomeID
		FROM #AdjustmentSum a
		INNER JOIN tblIrregularIncome irr ON a.IncomeID = irr.IncomeID
		INNER JOIN tblAllowanceSetting als ON irr.TaxBaseOnAllowanceCode = als.AllowanceCode
		INNER JOIN #tblAllowance al ON als.AllowanceID = al.AllowanceID AND a.EmployeeID = al.EmployeeID
		WHERE al.TaxFreeMaxAmount > al.UntaxableAmount
		) ud

	IF @@ROWCOUNT > 0
	BEGIN
		UPDATE #AdjustmentSum
		SET TaxableAmount = AdjustmentAmount - ISNULL(a.UntaxableAmount, 0)
		FROM #AdjustmentSum a
		INNER JOIN #tblAdjustmentNeedConfig n ON a.EmployeeID = n.EmployeeId AND a.IncomeID = n.IncomeID
	END

	--tringuyen
	UPDATE #AdjustmentSum
	SET TaxableAmount = 0, UntaxableAmount = 0
	WHERE isnull(AdjustmentAmount, 0) = 0

	DROP TABLE #tblAdjustmentNeedConfig

	-- người vận chuyển đoạn insert update của thằng adjustment xuống đây
	INSERT INTO #tblSal_Adjustment_des (EmployeeID, Month, Year, IncomeID, Amount, Raw_Amount, PeriodID, UntaxableAmount, TaxableAmount)
	SELECT EmployeeID, @Month, @Year, IncomeID, AdjustmentAmount, Raw_AdjustmentAmount, @PeriodID, UntaxableAmount, TaxableAmount
	FROM #AdjustmentSum

	UPDATE #tblSalDetail
	SET TaxableAdjustmentTotal = round(tmp.TaxableAmount, @ROUND_SALARY_UNIT), TaxableAdjustmentTotal_ForSalary = round(tmp.TaxableAmount_ForSalary, @ROUND_SALARY_UNIT), TaxableAdjustmentTotal_NotForSalary = round(tmp.TaxableAmount_NotForSalary, @ROUND_SALARY_UNIT), NoneTaxableAdjustmentTotal = round(tmp.UntaxableAmount, @ROUND_SALARY_UNIT), TotalAdjustmentForSalary = round(tmp.TotalAdjustmentForSalary, @ROUND_SALARY_UNIT), TotalAdjustment_WithoutForce = round(tmp.TotalAdjustment_WithoutForce, @ROUND_SALARY_UNIT)
	FROM #tblSalDetail sal, (
			SELECT a.EmployeeID, SUM(CASE
						WHEN i.IncomeKind = 0
							THEN - 1 * UntaxableAmount
						ELSE UntaxableAmount
						END) UntaxableAmount, SUM(CASE
						WHEN i.IncomeKind = 0
							THEN - 1 * TaxableAmount
						ELSE TaxableAmount
						END) TaxableAmount, SUM(CASE
						WHEN isnull(i.ForSalary, 0) = 0
							THEN 0
						WHEN i.IncomeKind = 0
							THEN - 1 * AdjustmentAmount
						ELSE AdjustmentAmount
						END * CASE
						WHEN Taxable = 1
							THEN 1
						ELSE 0
						END) TaxableAmount_ForSalary, SUM(CASE
						WHEN isnull(i.ForSalary, 0) = 1
							THEN 0
						WHEN i.IncomeKind = 0
							THEN - 1 * TaxableAmount
						ELSE TaxableAmount
						END) TaxableAmount_NotForSalary, SUM(CASE
						WHEN ISNULL(i.ForSalary, 0) = 0
							THEN 0
						ELSE CASE
								WHEN i.IncomeKind = 0
									THEN - 1
								ELSE 1
								END * AdjustmentAmount
						END) TotalAdjustmentForSalary, SUM(CASE
						WHEN ISNULL(ForceNonTax, 0) = 0
							THEN CASE
									WHEN i.IncomeKind = 0
										THEN - 1
									ELSE 1
									END * AdjustmentAmount
						ELSE 0
						END) TotalAdjustment_WithoutForce, sum(CASE
						WHEN i.incomeKind = 1
							THEN 1
						ELSE 0
						END * a.AdjustmentAmount) AS TotalDeductFromTotalEarnCauseOfNegativeAmount
			FROM #AdjustmentSum a
			INNER JOIN tblIrregularIncome i ON a.IncomeID = i.IncomeID
			GROUP BY a.EmployeeID
			) tmp
	WHERE sal.EmployeeID = tmp.EmployeeID AND sal.LatestSalEntry = 1

	--OtherDeductionAfterPIT
	UPDATE #tblSalDetail
	SET OtherDeductionAfterPIT = tmp.Amount
	FROM #tblSalDetail s
	INNER JOIN (
		SELECT a.EmployeeID, sum(a.AdjustmentAmount) Amount
		FROM #AdjustmentSum a
		INNER JOIN tblIrregularIncome ir ON a.IncomeID = ir.IncomeID AND ir.IncomeKind = 0 AND isnull(ir.Taxable, 0) = 0
		GROUP BY a.EmployeeID
		) tmp ON s.EmployeeID = tmp.EmployeeID

	IF (OBJECT_ID('SALCAL_ADJUSTMENT_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ADJUSTMENT_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ADJUSTMENT_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- hết adjustment
	UPDATE #tblSalDetail
	SET TaxableIncomeBeforeDeduction = ISNULL(ActualMonthlyBasic, 0) + ROUND(ISNULL(TotalNSAmt, 0), 0) - ROUND(isnull(NoneTaxableNSAmt, 0), 0) + ROUND(ISNULL(TaxableAdjustmentTotal, 0), 0) + ROUND(isnull(TaxableOTTotal, 0), 0) - ROUND(ISNULL(NoneTaxableOTTotal, 0), 0)


	--tripod
	UPDATE s
	SET TaxableIncomeBeforeDeduction = isnull(s.TaxableIncomeBeforeDeduction, 0) + ISNULL(tmp.TaxableAmount, 0)
	FROM #tblSalDetail s
	INNER JOIN (
		SELECT a.EmployeeID, SUM(ISNULL(a.TaxableAmount, a.ReceiveAmount)) TaxableAmount
		FROM #tblAllowance a
		INNER JOIN tblAllowanceSetting sa ON a.AllowanceID = sa.AllowanceID AND isnull(sa.IsHouseAllowance, 0) = 0
		GROUP BY EmployeeID
		) tmp ON s.EmployeeID = tmp.EmployeeID

	-- cộng với lương từ nước ngoài để gross up
	-- delete first
	SELECT sa.*
	INTO #tblSalaryAbroad
	FROM #tblEmployeeIDList e
	CROSS APPLY (
		SELECT MAX(Month + Year * 12) MY
		FROM tblSalaryAbroad sa1
		WHERE e.EmployeeID = sa1.EmployeeID AND sa1.Month + sa1.Year * 12 <= @month + @year * 12 AND (sa1.ToMonth IS NULL OR sa1.ToYear IS NULL OR sa1.ToMonth + sa1.ToYear * 12 >= @month + @year * 12)
		) ca
	INNER JOIN tblSalaryAbroad sa ON sa.EmployeeID = e.EmployeeID AND sa.Month + sa.Year * 12 = ca.MY

	INSERT INTO #tblSal_Abroad_ForTaxPurpose_Des (EmployeeID, Month, Year, NetAmountVND, Raw_NetAmount, GrossAmountVND, Raw_GrossAmount, CurrencyCode, ExchangeRate, NationID, PeriodID, VND_Amount, Raw_Amount_AfterDeductVND)
	SELECT sa.EmployeeID, @month AS month, @Year AS year, round(isnull(NetAmount, 0) * c.[ExchangeRate], @ROUND_SALARY_UNIT) AS NetAmountVND, NetAmount AS Raw_NetAmount, round(isnull(GrossAmount, 0) * c.[ExchangeRate], @ROUND_SALARY_UNIT) AS GrossAmountVND, GrossAmount AS Raw_Amount, sa.CurrencyCode, c.[ExchangeRate] AS ExchangeRate, sa.NationID, @PeriodID, sa.VND_Amount, NetAmount - (sa.VND_Amount / c.[ExchangeRate]) AS Raw_Amount_AfterDeductVND
	FROM #tblSalaryAbroad sa
	INNER JOIN #tblSalDetail sal ON sa.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1
	LEFT JOIN #EmployeeExchangeRate c ON sa.CurrencyCode = c.CurrencyCode AND c.EmployeeID = sa.EmployeeID

	-- lấy danh sách allowance Gross ra trừ đi trước khi grossup
	-- có thể net hóa nó nhưng mà khó lém
	SELECT EmployeeID, sum(TaxableAmount) AS TotalGrossAllowanceAmount_Taxable
	INTO #grossAllowanceAmount
	FROM #tblAllowance a
	INNER JOIN tblAllowanceSetting al ON a.AllowanceCode = al.AllowanceCode
	WHERE al.IsTaxable = 1 AND al.IsGrossAllowance_InNetSal = 1
	GROUP BY EmployeeID

	IF @@ROWCOUNT > 0 -- nếu có gross allowance thì phải trừ đi rồi mới gross up
	BEGIN
		UPDATE #tblSalDetail
		SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction - isnull(gross.TotalGrossAllowanceAmount_Taxable, 0)
		FROM #tblSalDetail sal
		INNER JOIN #grossAllowanceAmount gross ON sal.EmployeeID = gross.EmployeeID AND sal.LatestSalEntry = 1
		WHERE sal.IsNet = 1
	END

	-- cộng cục này với phần Net từ nước ngoài trả
	UPDATE #tblSalDetail
	SET TaxableIncomeBeforeDeduction += isnull(ca.NetAmountVND, 0) -- cộng phần net để grossup trước
	FROM #tblSalDetail sal
	CROSS APPLY (
		SELECT sum(NetAmountVND) AS NetAmountVND
		FROM #tblSal_Abroad_ForTaxPurpose_des sa
		WHERE sa.Month = @Month AND sa.Year = @Year AND sa.EmployeeID = sal.EmployeeID
		) ca
	WHERE sal.LatestSalEntry = 1 AND sal.IsNet = 1

	-- custom lấy cái TotalNetIncome ra nào
	UPDATE #tblSalDetail
	SET TotalNetIncome_Custom = TaxableIncomeBeforeDeduction

	--gross it up
	SELECT (IncomeFrom - (IncomeFrom - 1)) * TaxPercent + ProgressiveAmount AS MinTax -- số thuế tối thiểu phải đóng
		, (IncomeTo - (IncomeFrom - 1)) * TaxPercent + ProgressiveAmount AS MaxTax -- số thuế tối đa phải đóng
		, IncomeFrom - 1 --+9000000
		- ((IncomeFrom - (IncomeFrom - 1)) * TaxPercent + ProgressiveAmount) AS MinNet -- số tiền net tối thiểu (chưa tính giảm trừ trong này nha)
		, IncomeTo - 1 --+9000000
		- ((IncomeTo - (IncomeFrom - 1)) * TaxPercent + ProgressiveAmount) AS MaxNet -- số tiền net tối đa (chưa tính giảm trừ trong này nha)
		, *
	INTO #TaxForGrossup
	FROM tblTax tt
	WHERE tt.EffectDate = (
			SELECT Max(EffectDate)
			FROM tblTax tx
			WHERE tx.EffectDate <= @FromDate
			) --for gross up

	DECLARE @PesonalDeduct FLOAT(53), @RelationDeduct FLOAT(53)

	SELECT @PesonalDeduct = TAX_PERSONAL_DEDUCT, @RelationDeduct = TAX_RELATE_DEDUCT
	FROM fn_TaxDeduction_byMonthYear(@Month, @Year)

	--set @PesonalDeduct = (select cast(Value as float(53)) from tblParameter where code = 'TAX_PERSONAL_DEDUCT')
	SET @PesonalDeduct = isnull(@PesonalDeduct, 9000000)
	--set @RelationDeduct = (select cast(Value as float(53)) from tblParameter where code = 'TAX_RELATE_DEDUCT')
	SET @RelationDeduct = isnull(@RelationDeduct, 3600000)

	SELECT EmployeeID, count(EmployeeID) AS CountDeduct
	INTO #CountRelation
	FROM tblFamilyInfo
	WHERE TaxDependant = 1 AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			) AND ISNULL(EffectiveDate, @ToDate) <= @ToDate AND ISNULL(EffectiveToDate, @FromDate) >= @FromDate
	GROUP BY EmployeeID

	-- đang làm tới đây
	----update dependant truocws nhes
	--select TaxableIncomeBeforeDeduction,-- tính before tax coi có ngon chưa nào
	UPDATE sal
	SET TaxableIncomeBeforeDeduction = round((IncomeFrom - 1) + -- lấy khoản Income from
			((TaxableIncomeBeforeDeduction - (MinNet + @PesonalDeduct + (isnull(c.CountDeduct, 0) * @RelationDeduct))) / (1 - TaxPercent)) -- cộng với công thức ba lăng nhăng
			+ @PesonalDeduct + (isnull(c.CountDeduct, 0) * @RelationDeduct) -- cộng với giảm trừ bản thân, gia đình, tới đây còn thiếu cái tiền bảo hiểm tý mới cộng
			--as TaxableIncomeBeforeDeduction_GrossedUp
			--,MinNet
			--,*
			, 0, 1)
	FROM #tblSalDetail sal
	LEFT JOIN #CountRelation c ON sal.EmployeeID = c.EmployeeID
	INNER JOIN #TaxForGrossup tg ON sal.TaxableIncomeBeforeDeduction -- đổi với những người lương NET thì cái này được hiểu là tổng lương net Nhé anh em
		- @PesonalDeduct - (isnull(c.CountDeduct, 0) * @RelationDeduct) BETWEEN tg.MinNet AND tg.MaxNet
	WHERE IsNet = 1

	UPDATE #tblSalDetail
	SET GrossedUpWithoutHousing_WithoutGrossIncome_Custom = TaxableIncomeBeforeDeduction

	IF EXISTS (
			SELECT 1
			FROM #grossAllowanceAmount
			) -- nếu có gross allowance thì cộng vào lại chứ ko vỡ mồm
	BEGIN
		UPDATE #tblSalDetail
		SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + isnull(gross.TotalGrossAllowanceAmount_Taxable, 0)
		FROM #tblSalDetail sal
		INNER JOIN #grossAllowanceAmount gross ON sal.EmployeeID = gross.EmployeeID AND sal.LatestSalEntry = 1
		WHERE sal.IsNet = 1
	END

	-------------------------Calculate Employee insurance --------------------------------
	IF @PeriodID IN (0, 2)
	BEGIN
		IF @CalculateRetro = 1
			EXEC EmpInsuranceMonthly_List @Month = @Month, @Year = @Year, @LoginID = @LoginID, @CalFromSalCal = 1, @CalculateRetro = 1, @EmployeeID = @EmployeeID
		ELSE
			EXEC EmpInsuranceMonthly_List @Month = @Month, @Year = @Year, @LoginID = @LoginID, @CalFromSalCal = 1, @EmployeeID = @EmployeeID
	END

	----khong co cham cong thi khong dong bao hiem
	--select si.EmployeeTotal,TaxableIncomeBeforeDeduction,TaxableIncomeBeforeDeduction*0.15,*
	UPDATE sal
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + isnull(si.EmployeeTotal, 0), GrossedUpWithoutHousing_WithoutGrossIncome_Custom = GrossedUpWithoutHousing_WithoutGrossIncome_Custom + isnull(si.EmployeeTotal, 0)
	FROM #tblSalDetail sal
	INNER JOIN tblSal_Insurance si ON sal.EmployeeID = si.EmployeeID AND si.Month = @Month AND si.Year = @Year
	WHERE sal.LatestSalEntry = 1 AND sal.IsNet = 1 AND @PeriodID IN (0, 2)

	-- cộng thêm lương gross từ nước ngoài
	UPDATE sal
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + isnull(ca.GrossAmountVND, 0)
	FROM #tblSalDetail sal
	CROSS APPLY (
		SELECT sum(GrossAmountVND) AS GrossAmountVND
		FROM #tblSal_Abroad_ForTaxPurpose_des sa
		WHERE sa.Month = @Month AND sa.Year = @Year AND sa.EmployeeID = sal.EmployeeID
		) ca
	WHERE sal.LatestSalEntry = 1 AND sal.IsNet = 1

	UPDATE #tblSalDetail
	SET GrossedUpWithoutHousing_Custom = round(TaxableIncomeBeforeDeduction, 0)

	--tien nha mac dinh tinh thue het, neu vuot qua 15% thu nhap chiu thue thi duoc mien thue phan du tren 15% đó ~~ TriNg: la khoản fixed - nen thue f lay full thang
	UPDATE a
	SET UntaxableAmount = round(CASE
				WHEN ISNULL(a.ReceiveAmount, 0) > s.TaxableIncomeBeforeDeduction * @HouseAllPercent / 100.0
					THEN a.ReceiveAmount - s.TaxableIncomeBeforeDeduction * @HouseAllPercent / 100.0
				ELSE 0
				END, @ROUND_SALARY_UNIT)
	FROM #tblAllowance a
	INNER JOIN tblAllowanceSetting sa ON a.AllowanceID = sa.AllowanceID AND sa.IsHouseAllowance = 1 AND a.ReceiveAmount > 0
	INNER JOIN (
		SELECT EmployeeID, SUM(TaxableIncomeBeforeDeduction) TaxableIncomeBeforeDeduction
		FROM #tblSalDetail
		GROUP BY EmployeeID
		) s ON a.EmployeeID = s.EmployeeID

	IF (OBJECT_ID('SALCAL_ALLOWANCE_FINISHED') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_ALLOWANCE_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,


	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20),
	@CalculateRetro bit =0
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_ALLOWANCE_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID, @CalculateRetro

	UPDATE #tblAllowance
	SET TaxableAmount = ISNULL(ReceiveAmount, 0) - ISNULL(RetroAmount, 0) - ISNULL(UntaxableAmount, 0)

	DELETE #tblAllowance
	WHERE isnull(DefaultAmount, 0) = 0 AND isnull(ReceiveAmount, 0) = 0

	UPDATE #tblAllowance
	SET ReceiveAmount = 0
	WHERE ReceiveAmount IS NULL

	UPDATE #tblAllowance
	SET ReceiveAmount = ROUND(ReceiveAmount, @ROUND_SALARY_UNIT), TaxableAmount = ROUND(TaxableAmount, @ROUND_SALARY_UNIT), UntaxableAmount = ROUND(UntaxableAmount, @ROUND_SALARY_UNIT), MonthlyCustomAmount = ROUND(MonthlyCustomAmount, @ROUND_SALARY_UNIT), DefaultAmount = ROUND(DefaultAmount_WithoutCustomAmount, @ROUND_SALARY_UNIT)

	--bang detail cung sum luôn, vi se co nhung thang thu viec trùng salaryhistoryid wtc
	INSERT INTO #tblSal_Allowance_Detail_des (
		EmployeeID, AllowanceID, Year, Month, SalaryHistoryID, Amount, TakeHome, TaxableAmount, UntaxableAmount, DefaultAmount --chay lenh nay neu bao loi:	ALTER TABLE #tblSal_Allowance_Detail_des ADD DefaultAmount float(53)
		, Raw_DefaultAmount, Raw_CurrencyCode, Raw_ExchangeRate, RetroAmount, RetroAmountNonTax, MonthlyCustomAmount, PeriodID, TotalPaidDays, LatestSalEntry
		)
	SELECT a.EmployeeID, a.AllowanceID, @Year, @Month, a.SalaryHistoryID, sum(a.ReceiveAmount), a.TakeHome, sum(a.TaxableAmount), sum(a.UntaxableAmount), sum(DefaultAmount), sum(a.Raw_DefaultAmount), max(a.Raw_CurrencyCode), max(a.Raw_ExchangeRate), sum(a.RetroAmount), sum(a.RetroAmountNonTax), sum(a.MonthlyCustomAmount), @PeriodID, sum(a.TotalPaidDays), MAX(cast(LatestSalEntry AS INT))
	FROM #tblAllowance a
	GROUP BY a.EmployeeID, a.AllowanceID, a.SalaryHistoryID, a.TakeHome

	INSERT INTO #tblSal_Allowance_des (EmployeeID, AllowanceID, [Year], [Month], Amount, TakeHome, UntaxableAmount, TaxableAmount, Raw_DefaultAmount, Raw_CurrencyCode, Raw_ExchangeRate, RetroAmount, RetroAmountNonTax, MonthlyCustomAmount, PeriodID) (
		SELECT al.EmployeeID, al.AllowanceID, @Year, @Month, SUM(ISNULL(al.ReceiveAmount, 0)), al.TakeHome, sum(UntaxableAmount) AS UntaxableAmount, sum(TaxableAmount) AS TaxableAmount, sum(CASE
				WHEN LatestSalEntry = 1
					THEN Raw_DefaultAmount
				ELSE 0
				END) AS Raw_DefaultAmount, max(Raw_CurrencyCode) AS Raw_CurrencyCode, max(Raw_ExchangeRate) AS Raw_ExchangeRate, sum(RetroAmount) AS RetroAmount, SUM(RetroAmountNonTax) AS RetroAmountNonTax, SUM(MonthlyCustomAmount) AS MonthlyCustomAmount, @PeriodID FROM #tblAllowance al GROUP BY al.EmployeeID, al.AllowanceID, al.TakeHome
		)

	-- taxable allowance
	UPDATE #tblSalDetail
	SET TaxableAllowanceTotal = round(tmp.TaxableAmount, @ROUND_SALARY_UNIT)
	FROM #tblSalDetail sal, (
			SELECT SUM(ISNULL(al.TaxableAmount, 0) + ISNULL(al.RetroAmount, 0) - ISNULL(al.RetroAmountNonTax, 0)) TaxableAmount, al.EmployeeID
			FROM #tblAllowance al
			GROUP BY al.EmployeeID
			) tmp
	WHERE sal.EmployeeID = tmp.EmployeeID AND sal.LatestSalEntry = 1

	-- Nonetaxable allowance
	UPDATE #tblSalDetail
	SET NoneTaxableAllowanceTotal = round(tmp.UntaxableAmount, @ROUND_SALARY_UNIT)
	FROM #tblSalDetail sal, (
			SELECT SUM(ISNULL(al.UntaxableAmount, 0) + ISNULL(al.RetroAmountNonTax, 0)) UntaxableAmount, al.EmployeeID
			FROM #tblAllowance al
			GROUP BY al.EmployeeID
			) tmp
	WHERE sal.EmployeeID = tmp.EmployeeID AND sal.LatestSalEntry = 1

	UPDATE #tblSalDetail
	SET TotalAllowanceForSalary = tmp.ReceiveAmount
	FROM #tblSalDetail sal, (
			SELECT SUM(ISNULL(al.ReceiveAmount, 0)) ReceiveAmount, al.EmployeeID
			FROM #tblAllowance al
			INNER JOIN tblAllowanceSetting a ON al.AllowanceID = a.AllowanceID
			GROUP BY al.EmployeeID
			) tmp
	WHERE sal.EmployeeID = tmp.EmployeeID AND sal.LatestSalEntry = 1

	--select TotalAllowanceForSalary,* from #tblSalDetail
	-------------------------Calculate Employee insurance --------------------------------
	EXEC EmpInsuranceMonthly_List @Month = @Month, @Year = @Year, @LoginID = @LoginID, @CalFromSalCal = 1

	--bao hiem
	UPDATE #tblSalDetail
	SET InsAmtComp = CompanyTotal --ISNULL(CompanySI,0) + ISNULL(CompanyHI,0) + ISNULL(CompanyUI,0)
		, InsAmt = EmployeeTotal --ISNULL(EmployeeSI,0) + ISNULL(EmployeeHI,0) + ISNULL(EmployeeUI,0)
	FROM #tblSalDetail sd
	INNER JOIN tblSal_Insurance ins ON sd.EmployeeID = ins.EmployeeID
		--AND sd.SalaryHistoryID = ins.SalaryHistoryID
		AND ins.[Month] = @Month AND ins.[Year] = @Year AND sd.LatestSalEntry = 1 AND @PeriodID IN (0, 2) AND sd.isNet = 0

	UPDATE #tblSalDetail
	SET InsAmtComp = CompanyTotal --ISNULL(CompanySI,0) + ISNULL(CompanyHI,0) + ISNULL(CompanyUI,0)
		, InsAmt = EmployeeTotal - ISNULL(ins.EmployeeSI, 0) --ISNULL(EmployeeSI,0) + ISNULL(EmployeeHI,0) + ISNULL(EmployeeUI,0)
	FROM #tblSalDetail sd
	INNER JOIN tblSal_Insurance ins ON sd.EmployeeID = ins.EmployeeID
		--AND sd.SalaryHistoryID = ins.SalaryHistoryID
		AND ins.[Month] = @Month AND ins.[Year] = @Year AND sd.LatestSalEntry = 1 AND @PeriodID IN (0, 2) AND sd.isNet = 1

	-------------------------Calculate Trade Union fee--------------------------------
	DECLARE @UNION_FEE_METHOD TINYINT

	-- 1: Dựa vào phần trăm lương,
	-- 2: Số tiền đóng cố định,
	-- 3: nhân viên đóng số tiền cố định, công ty đóng theo % lương cơ bản,
	-- 4: đóng theo phần trăm lương tối thiểu,
	-- 5: đóng theo phần trăm lương cơ bản, nhân viên đóng tối đa 10% lương tối thiểu
	SET @UNION_FEE_METHOD = (
			SELECT CAST([Value] AS FLOAT)
			FROM tblParameter
			WHERE Code = 'UNION_FEE_METHOD'
			)
	SET @UNION_FEE_METHOD = isnull(@UNION_FEE_METHOD, 1)

	-- danh sach tham gia cong doan
	--co phat sinh bao hiem xa hoi trong thang nay thi se dong tien cong doan
	SELECT EmployeeID
	INTO #Insurance
	FROM tblSal_Insurance
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			) AND CompanyTotal > 0

	--VU: tripod: tự động tham gia công đoàn
	INSERT INTO tblJoinedUnionEmployeeMonthly (EmployeeID, Month, Year, EmpPay)
	SELECT EmployeeID, @Month, @Year, 1
	FROM #tblEmployeeIDList t
	WHERE NOT EXISTS (
			SELECT *
			FROM tblJoinedUnionEmployeeMonthly m
			WHERE m.EmployeeID = t.EmployeeID AND m.Month = @Month AND m.Year = @Year
			)

	DECLARE @UnionPercentEmp FLOAT, @UnionPercentComp FLOAT, @UnionPackageEmp FLOAT, @UnionPackageComp FLOAT

	CREATE TABLE #tblTradeUnion (EmployeeID VARCHAR(20), BasicSalary FLOAT(53), BaseSalaryRegional FLOAT(53), IsEmpPaid BIT, IsComPaid BIT, UnionFeeEmp FLOAT(53), UnionFeeComp FLOAT(53), Comp_ByPercent BIT, Emp_ByPercent BIT, Is_CeilSalary BIT, UNION_PERCENT_COMP FLOAT, UNION_PERCENT_EMP FLOAT, UNION_PACKAGE_COMP FLOAT, UNION_PACKAGE_EMP FLOAT, UNION_PACKAGE_EMP_MAX FLOAT, UNION_PACKAGE_COMP_MAX FLOAT, MaximumByPercentsOfBaseSalaryRegional FLOAT)

	INSERT INTO #tblTradeUnion (EmployeeID, IsEmpPaid, IsComPaid, Comp_ByPercent, Emp_ByPercent, Is_CeilSalary, UNION_PERCENT_COMP, UNION_PERCENT_EMP, UNION_PACKAGE_COMP, UNION_PACKAGE_EMP, UNION_PACKAGE_EMP_MAX, UNION_PACKAGE_COMP_MAX, MaximumByPercentsOfBaseSalaryRegional)
	SELECT u.EmployeeID, 0, 1, Comp_ByPercent, Emp_ByPercent, Is_CeilSalary, UNION_PERCENT_COMP, UNION_PERCENT_EMP, UNION_PACKAGE_COMP, UNION_PACKAGE_EMP, isnull(UNION_PACKAGE_EMP_MAX, 0), isnull(UNION_PACKAGE_COMP_MAX, 0), MaximumByPercentsOfBaseSalaryRegional
	FROM #tblEmployeeIDList u
	INNER JOIN tblDivision div ON u.DivisionID = div.DivisionID
	CROSS APPLY (
		SELECT TOP 1 (UNION_FEE_METHOD) AS UNION_FEE_METHOD
		FROM tblCompany c
		) c
	LEFT JOIN tblUnionFeeMethod f ON f.UnionFeeMethodID = isnull(isnull(div.UNION_FEE_METHOD, c.UNION_FEE_METHOD), 3)

	UPDATE #tblTradeUnion
	SET IsEmpPaid = 1
	FROM #tblTradeUnion t
	WHERE EXISTS (
			SELECT 1
			FROM tblJoinedUnionEmployeeMonthly un
			WHERE t.EmployeeID = un.EmployeeID AND un.Month = @Month AND un.Year = @Year AND isnull(EmpPay, 0) = 1
			) AND t.EmployeeID IN (
			SELECT EmployeeID
			FROM #Insurance
			)

	SELECT EmployeeID, Year, Month, HIIncome, SIIncome, EmployeeHI, EmployeeSI, EmployeeTotal, CompanyHI, CompanySI, CompanySM, CompanyTotal, Total, SalaryHistoryID, UIIncome, EmployeeUI, CompanyUI, Approval, UnionFeeEmp, UnionFeeComp, Notes, InsPaymentStatus
	INTO #tblSal_Insurance_Forquery
	FROM tblSal_Insurance_Retro
	WHERE @CalculateRetro = 1 AND Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	INSERT INTO #tblSal_Insurance_Forquery (EmployeeID, Year, Month, HIIncome, SIIncome, EmployeeHI, EmployeeSI, EmployeeTotal, CompanyHI, CompanySI, CompanySM, CompanyTotal, Total, SalaryHistoryID, UIIncome, EmployeeUI, CompanyUI, Approval, UnionFeeEmp, UnionFeeComp, Notes, InsPaymentStatus)
	SELECT EmployeeID, Year, Month, HIIncome, SIIncome, EmployeeHI, EmployeeSI, EmployeeTotal, CompanyHI, CompanySI, CompanySM, CompanyTotal, Total, SalaryHistoryID, UIIncome, EmployeeUI, CompanyUI, Approval, UnionFeeEmp, UnionFeeComp, Notes, InsPaymentStatus
	FROM tblSal_Insurance
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			) AND EmployeeID NOT IN (
			SELECT EmployeeID
			FROM #tblSal_Insurance_Forquery
			)

	--bao giam thi ko dong tien cong doan thang nay
	UPDATE #tblTradeUnion
	SET IsComPaid = 0, IsEmpPaid = 0
	FROM #tblTradeUnion u
	WHERE u.EmployeeID NOT IN (
			SELECT EmployeeID
			FROM #tblSal_Insurance_Forquery i
			WHERE (ISNULL(i.EmployeeSI, 0) <> 0 OR ISNULL(i.CompanySI, 0) <> 0)
			) AND u.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList e
			)

	UPDATE #tblTradeUnion
	SET IsEmpPaid = 0
	FROM #tblTradeUnion t
	LEFT JOIN #tblSal_AttendanceData ta ON t.EmployeeID = ta.EmployeeID
	WHERE (ta.EmployeeID IS NULL OR ISNULL(ta.TotalPaidDays, 0) = 0)

	UPDATE #tblTradeUnion
	SET BasicSalary = i.SIIncome
	FROM #tblTradeUnion u
	INNER JOIN #tblSal_Insurance_Forquery i ON u.EmployeeID = i.EmployeeID

	--where i.Month = @Month and i.Year = @Year and i.EmployeeID in (select EmployeeID from #tblEmployeeIDList)
	UPDATE #tblTradeUnion
	SET BasicSalary = s.SI_Salary
	FROM #tblTradeUnion u
	INNER JOIN dbo.fn_CurrentSISalary_byDate(@SIDate, @LoginID) s ON u.EmployeeID = s.EmployeeID
	WHERE u.BasicSalary IS NULL OR u.BasicSalary <= 0

	DECLARE @miniMumsal MONEY = (
			SELECT TOP 1 a.MinimumSal
			FROM tblSI_CeilSalary a
			WHERE a.EffectiveDate = (
					SELECT Max(sie.EffectiveDate) EffectiveDate
					FROM tblSI_CeilSalary sie
					WHERE sie.EffectiveDate <= @FromDate
					)
			)

	UPDATE u
	SET BaseSalaryRegional = @miniMumsal
	FROM #tblTradeUnion u -- thay đổi đóng theo lương tối thiểu
		-- inner join #tblSalDetail s on u.EmployeeID = s.EmployeeID
		--inner join dbo.fn_CurrentBaseSalRegionalByDate(@SIDate) b on s.BaseSalRegionalID = b.BaseSalRegionalID
		--where s.LatestSalEntry = 1

	-- nếu đóng theo lương cơ sở
	UPDATE #tblTradeUnion
	SET BasicSalary = @miniMumsal
	WHERE Is_CeilSalary = 1

	-- nếu dc chặn lại bởi 10% lương cơ sở vùng
	UPDATE #tblTradeUnion
	SET UnionFeeEmp = CASE
			WHEN isnull(Emp_ByPercent, 0) = 1
				THEN UNION_PERCENT_EMP * BasicSalary / 100
			ELSE UNION_PACKAGE_EMP
			END * IsEmpPaid, UnionFeeComp = CASE
			WHEN isnull(Comp_ByPercent, 0) = 1
				THEN UNION_PERCENT_COMP * BasicSalary / 100
			ELSE UNION_PACKAGE_COMP
			END * IsComPaid

	UPDATE #tblTradeUnion
	SET UnionFeeEmp = BaseSalaryRegional * MaximumByPercentsOfBaseSalaryRegional / 100
	WHERE MaximumByPercentsOfBaseSalaryRegional > 0 AND UnionFeeEmp > BaseSalaryRegional * MaximumByPercentsOfBaseSalaryRegional / 100

	UPDATE #tblTradeUnion
	SET UnionFeeEmp = ISNULL(i.UnionFeeEmp, u.UnionFeeEmp), UnionFeeComp = ISNULL(i.UnionFeeComp, u.UnionFeeComp)
	FROM #tblTradeUnion u
	INNER JOIN #tblSal_Insurance_Forquery i ON u.EmployeeID = i.EmployeeID
		--	and i.Month = @Month and i.Year = @Year
		AND (i.UnionFeeEmp IS NOT NULL OR i.UnionFeeComp IS NOT NULL)

	-- Bị chặn bởi mức max trong thiết lập công đoàn
	UPDATE #tblTradeUnion
	SET UnionFeeEmp = UNION_PACKAGE_EMP_MAX
	WHERE UNION_PACKAGE_EMP_MAX > 0 AND UnionFeeEmp > UNION_PACKAGE_EMP_MAX

	UPDATE #tblTradeUnion
	SET UnionFeeComp = UNION_PACKAGE_COMP_MAX
	WHERE UNION_PACKAGE_COMP_MAX > 0 AND UnionFeeComp > UNION_PACKAGE_COMP_MAX

	INSERT INTO #tblTradeUnion (EmployeeID, UnionFeeEmp, UnionFeeComp)
	SELECT EmployeeID, ISNULL(UnionFeeEmp, 0), ISNULL(UnionFeeComp, 0)
	FROM #tblSal_Insurance_Forquery i
	WHERE --i.Month = @Month and i.Year = @Year and
		(i.UnionFeeEmp IS NOT NULL OR i.UnionFeeComp IS NOT NULL) AND NOT EXISTS (
			SELECT 1
			FROM #tblTradeUnion u
			WHERE i.EmployeeID = u.EmployeeID
			) AND i.EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	UPDATE sal
	SET EmpUnion_RETRO = round(re.Union_RETRO_EE, 0), EmpUnion = round(uni.UnionFeeEmp, 0), CompUnion_RETRO = round(re.Union_RETRO_ER, 0), CompUnion = round(uni.UnionFeeComp, 0)
	FROM #tblSalDetail sal
	LEFT JOIN #tblTradeUnion uni ON sal.EmployeeID = uni.EmployeeID
	LEFT JOIN #tblsal_retro_Final re ON sal.EmployeeID = re.EmployeeID --and re.Month = @Month and re.Year = @Year
	WHERE sal.LatestSalEntry = 1

	--------------------- Calculate IO ----------------------------------
	IF (OBJECT_ID('SALCAL_IO_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_IO_INITIAL
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_IO_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	IF @StopUPDATE = 0
	BEGIN
		INSERT INTO #tblSal_IO_des (EmployeeID, Month, Year, InLateHours, InLateAmount, PeriodID)
		SELECT EmployeeID, Month, Year, InLateHours, InLateAmount, @PeriodID
		FROM (
			INSERT INTO #tblSal_IO_Detail_des (EmployeeID, Month, Year, SalaryHistoryID, InLateHours, OutEarlyHours, InLateAmount, OutEarlyAmount, PeriodID)
			OUTPUT inserted.*
			SELECT sal1.EmployeeID, @Month, @Year, isnull(sal1.ProbationSalaryHistoryID, SalaryHistoryID), sal2.DeductionHours, 0, sal1.IOAmt, 0, @PeriodID
			FROM #tblSalDetail sal1
			INNER JOIN #tblSal_AttendanceData sal2 ON sal1.EmployeeID = sal2.EmployeeID
			WHERE sal2.DeductionHours IS NOT NULL
			) tmp
		WHERE tmp.InLateAmount IS NOT NULL
	END

	----------------------Payroll sumaried items-----------------------------------------
	UPDATE #tblSalDetail
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0)
	WHERE isNet = 0

	SELECT *, CAST(NULL AS FLOAT(53)) TaxableIncome_SalaryOnly
	INTO #tblSalDetail_ForTax
	FROM #tblSalDetail
	WHERE LatestSalEntry = 1 --lấy dòng lương cuối cùng chắc chắn có

	UPDATE #tblSalDetail_ForTax
	SET ActualMonthlyBasic = s.ActualMonthlyBasic, UnpaidLeaveAmount = s.UnpaidLeaveAmount, TaxableOTTotal = s.TaxableOTTotal, NoneTaxableOTTotal = s.NoneTaxableOTTotal, TotalOTAmount = s.TotalOTAmount, TotalNSAmt = s.TotalNSAmt, NoneTaxableNSAmt = s.NoneTaxableNSAmt
	FROM #tblSalDetail_ForTax t
	INNER JOIN (
		SELECT EmployeeID, SUM(ActualMonthlyBasic) ActualMonthlyBasic, SUM(UnpaidLeaveAmount) UnpaidLeaveAmount, SUM(TaxableOTTotal) TaxableOTTotal, SUM(NoneTaxableOTTotal) NoneTaxableOTTotal, SUM(TotalOTAmount) TotalOTAmount, SUM(TotalNSAmt) TotalNSAmt, SUM(NoneTaxableNSAmt) NoneTaxableNSAmt
		FROM #tblSalDetail d
		GROUP BY EmployeeID
		) s ON t.EmployeeID = s.EmployeeID

	UPDATE #tblSalDetail_ForTax
	SET GrossTakeHome = round((ActualMonthlyBasic + isnull(TotalOTAmount, 0) + isnull(TotalNSAmt, 0) + ISNULL(TotalAllowanceForSalary, 0) + isnull(TotalAdjustmentForSalary, 0)), @ROUND_TAKE) - (ISNULL(InsAmt, 0) + ISNULL(IOAmt, 0) + ISNULL(EmpUnion, 0)), TotalCostComPaid = ActualMonthlyBasic + isnull(TotalOTAmount, 0) + isnull(TotalNSAmt, 0) + ISNULL(TaxableAllowanceTotal, 0) + ISNULL(NoneTaxableAllowanceTotal, 0) + ISNULL(InsAmtComp, 0) - ISNULL(IOAmt, 0) + ISNULL(CompUnion, 0) + isnull(CompUnion_RETRO, 0) + CASE
			WHEN ISNULL(IsNet, 0) = 1
				THEN ISNULL(InsAmt, 0)
			ELSE 0
			END

	UPDATE #tblSalDetail_ForTax
	SET TotalPayrollFund = TotalCostComPaid

	--tripod
	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0)
	WHERE isNet = 0

	UPDATE #tblSalDetail_ForTax
	SET TotalCostComPaid = ISNULL(TotalCostComPaid, 0) + adj.AdjustmentAmount
	FROM #tblSalDetail_ForTax sal
	INNER JOIN (
		SELECT a.EmployeeID, SUM(CASE
					WHEN ir.IncomeKind = 1
						THEN a.AdjustmentAmount
					ELSE - 1 * a.AdjustmentAmount
					END) AS AdjustmentAmount
		FROM #AdjustmentSum a
		INNER JOIN tblIrregularIncome ir ON a.IncomeID = ir.IncomeID AND ISNULL(ir.isNotLabourCost, 0) = 0
		GROUP BY a.EmployeeID
		) adj ON sal.EmployeeID = adj.EmployeeID

	UPDATE #tblSalDetail_ForTax
	SET TotalPayrollFund = ISNULL(TotalPayrollFund, 0) + adj.AdjustmentAmount
	FROM #tblSalDetail_ForTax sal
	INNER JOIN (
		SELECT a.EmployeeID, SUM(CASE
					WHEN ir.IncomeKind = 1
						THEN a.AdjustmentAmount
					ELSE - 1 * a.AdjustmentAmount
					END) AS AdjustmentAmount
		FROM #AdjustmentSum a
		INNER JOIN tblIrregularIncome ir ON a.IncomeID = ir.IncomeID -- and ISNULL(ir.isNotLabourCost,0) = 0
		GROUP BY a.EmployeeID
		) adj ON sal.EmployeeID = adj.EmployeeID

	--Taxable before deduct co tru luon tien bao hiem 10.5% cua nhan vien
	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction = ISNULL(ActualMonthlyBasic, 0) + ISNULL(TotalNSAmt, 0) - isnull(NoneTaxableNSAmt, 0) + ISNULL(TaxableAllowanceTotal, 0) + ISNULL(TaxableAdjustmentTotal, 0) - ISNULL(IOAmt, 0) + ISNULL(TaxableOTTotal, 0) - ISNULL(InsAmt, 0), TotalIncome_Taxable_Without_INS_Persion_family = ISNULL(ActualMonthlyBasic, 0) + ISNULL(TotalNSAmt, 0) - isnull(NoneTaxableNSAmt, 0) + ISNULL(TaxableAllowanceTotal, 0) + ISNULL(TaxableAdjustmentTotal, 0) - ISNULL(IOAmt, 0) + ISNULL(TaxableOTTotal, 0)

	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + ISNULL(InsAmt, 0)
	WHERE IsNet = 1

	-- nếu muốn cộng insurance vào nếu 10%
	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + ISNULL(InsAmt, 0)
	FROM #tblSalDetail_ForTax t
	INNER JOIN #tblEmployeeIDList e ON t.EmployeeId = e.EmployeeID
	--inner join tblDivision div on e.DivisionId = div.DivisionID and div.Add_EE_Insurance_Into_TaxableIncome = 1
	WHERE isnull(t.IsNet, 0) = 0 AND t.employeeID IN (
			SELECT employeeId
			FROM #tblTemporaryContractTax
			)

	-- cộng INS vào làm tổng lương trước khi trừ deduction
	-- trừ các khoảng thuế gross ra
	-- + với net từ nước ngoài
	-- gross up nó
	-- + lại allowance gross
	-- + insurance + gross từ nước ngoài
	-- tính toán lại tổng số lương trước khi nhảy qua đoạn thu
	--select 9999,* from tblSal_Abroad_ForTaxPurpose
	-- lấy danh sách allowance Gross ra trừ đi trước khi grossup
	-- có thể net hóa nó nhưng mà khó lém
	TRUNCATE TABLE #grossAllowanceAmount

	INSERT INTO #grossAllowanceAmount
	SELECT EmployeeID, sum(TaxableAmount) AS TotalGrossAllowanceAmount_Taxable
	FROM #tblAllowance a
	INNER JOIN tblAllowanceSetting al ON a.AllowanceCode = al.AllowanceCode
	WHERE al.IsTaxable = 1 AND al.IsGrossAllowance_InNetSal = 1
	GROUP BY EmployeeID

	IF @@ROWCOUNT > 0 -- nếu có gross allowance thì phải trừ đi rồi mới gross up
	BEGIN
		UPDATE #tblSalDetail_ForTax
		SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction - isnull(gross.TotalGrossAllowanceAmount_Taxable, 0)
		FROM #tblSalDetail_ForTax sal
		INNER JOIN #grossAllowanceAmount gross ON sal.EmployeeID = gross.EmployeeID AND sal.LatestSalEntry = 1
		WHERE sal.IsNet = 1
	END

	-- cộng cục này với phần Net từ nước ngoài trả
	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction += ISNULL(ca.NetAmountVND, 0) -- cộng phần net để grossup trước
	FROM #tblSalDetail_ForTax sal
	CROSS APPLY (
		SELECT sum(NetAmountVND) AS NetAmountVND
		FROM #tblSal_Abroad_ForTaxPurpose_des sa
		WHERE sa.Month = @Month AND sa.Year = @Year AND sa.EmployeeID = sal.EmployeeID
		) ca
	WHERE sal.LatestSalEntry = 1 AND sal.IsNet = 1

	--gross it up
	----update dependant truocws nhes
	--select TaxableIncomeBeforeDeduction,-- tính before tax coi có ngon chưa nào
	UPDATE sal
	SET TaxableIncomeBeforeDeduction = round((IncomeFrom - 1) + -- lấy khoản Income from
			((TaxableIncomeBeforeDeduction - (MinNet + @PesonalDeduct + (isnull(c.CountDeduct, 0) * @RelationDeduct))) / (1 - TaxPercent)) -- cộng với công thức ba lăng nhăng
			+ @PesonalDeduct + (isnull(c.CountDeduct, 0) * @RelationDeduct) -- cộng với giảm trừ bản thân, gia đình, tới đây còn thiếu cái tiền bảo hiểm tý mới cộng
			--as TaxableIncomeBeforeDeduction_GrossedUp
			--,MinNet
			--,*
			, 0, 1)
	FROM #tblSalDetail_ForTax sal
	LEFT JOIN #CountRelation c ON sal.EmployeeID = c.EmployeeID
	INNER JOIN #TaxForGrossup tg ON sal.TaxableIncomeBeforeDeduction -- đổi với những người lương NET thì cái này được hiểu là tổng lương net Nhé anh em
		- @PesonalDeduct - (isnull(c.CountDeduct, 0) * @RelationDeduct) BETWEEN tg.MinNet AND tg.MaxNet
	WHERE IsNet = 1

	-- lấy cái net của cty ra trước khi cộng gross - ee trả thuế vào
	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction_EROnly_ForNETOnly = TaxableIncomeBeforeDeduction
	WHERE IsNet = 1

	IF EXISTS (
			SELECT 1
			FROM #grossAllowanceAmount
			) -- nếu có gross allowance thì cộng vào lại chứ ko vỡ mồm
	BEGIN
		UPDATE #tblSalDetail_ForTax
		SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + isnull(gross.TotalGrossAllowanceAmount_Taxable, 0)
		FROM #tblSalDetail_ForTax sal
		INNER JOIN #grossAllowanceAmount gross ON sal.EmployeeID = gross.EmployeeID
		WHERE sal.IsNet = 1 AND sal.LatestSalEntry = 1
	END

	-------------------------Calculate Employee insurance --------------------------------
	--select si.EmployeeTotal,TaxableIncomeBeforeDeduction,TaxableIncomeBeforeDeduction*0.15,*
	UPDATE sal
	SET TotalIncome_Taxable_Without_INS_Persion_family = TaxableIncomeBeforeDeduction + isnull(si.EmployeeTotal, 0)
	FROM #tblSalDetail_ForTax sal
	LEFT JOIN tblSal_Insurance si ON sal.EmployeeID = si.EmployeeID AND si.Month = @Month AND si.Year = @Year
	WHERE sal.LatestSalEntry = 1 AND IsNet = 1

	-- cộng thêm lương gross từ nước ngoài
	UPDATE sal
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction + isnull(ca.GrossAmountVND, 0)
	FROM #tblSalDetail_ForTax sal
	CROSS APPLY (
		SELECT sum(GrossAmountVND) AS GrossAmountVND
		FROM #tblSal_Abroad_ForTaxPurpose_des sa
		WHERE sa.Month = @Month AND sa.Year = @Year AND sa.EmployeeID = sal.EmployeeID
		) ca
	WHERE sal.LatestSalEntry = 1 AND sal.IsNet = 1

	-- kết thúc gross up
	UPDATE #tblSalDetail_ForTax
	SET TotalIncome = round(isnull(ActualMonthlyBasic, 0) + isnull(TotalOTAmount, 0) + isnull(TotalNSAmt, 0) + ISNULL(TotalAllowanceForSalary, 0) + isnull(TotalAdjustmentForSalary, 0) + isnull(OtherDeductionAfterPIT, 0) - ISNULL(IOAmt, 0), @ROUND_NET), TaxableIncome = TaxableIncomeBeforeDeduction - ROUND(ISNULL(NoneTaxableOTTotal, 0), 0) --TRIPOD
		, TaxableIncome_EROnly_ForNETOnly = TaxableIncomeBeforeDeduction_EROnly_ForNETOnly, TotalIncome_ForSalaryTaxedAdj = round(isnull(ActualMonthlyBasic, 0) + isnull(TotalOTAmount, 0) + isnull(TotalNSAmt, 0) + ISNULL(TotalAllowanceForSalary, 0) + isnull(TaxableAdjustmentTotal_ForSalary, 0) - ISNULL(IOAmt, 0), @ROUND_NET)

	UPDATE #tblSalDetail_ForTax
	SET TotalEarn = isnull(ActualMonthlyBasic, 0) + isnull(TotalOTAmount, 0) + isnull(TotalNSAmt, 0) + ISNULL(TotalAllowanceForSalary, 0)

	UPDATE #tblSalDetail_ForTax
	SET TotalEarn = ISNULL(TotalEarn, 0) + t.AdjustmentAmount
	FROM #tblSalDetail_ForTax tx
	INNER JOIN (
		SELECT a.EmployeeID, SUM(a.AdjustmentAmount) AdjustmentAmount
		FROM #tblAdjustment a
		INNER JOIN tblIrregularIncome ir ON a.IncomeID = ir.IncomeID AND ir.IncomeKind = 1 AND ir.ForSalary = 1 AND (ISNULL(DoNotAddToTotalEarnIfNegative, 0) = 0 OR AdjustmentAmount > 0)
		GROUP BY A.EmployeeID
		) t ON tx.EmployeeID = t.EmployeeID

	-- select 7878787878 as asdasdsa,EmployeeID
	-- ,sum(case when i.incomeKind = 1 then 1 else 0 end * a.AdjustmentAmount) as TotalDeductFromTotalEarnCauseOfNegativeAmount
	--from #AdjustmentSum a
	--inner join tblIrregularIncome i on a.IncomeID = i.IncomeID  and i.DoNotAddToTotalEarnIfNegative =1
	--group by a.EmployeeID
	-------------------------------------Calculate tax----------------------------------------------
	IF (OBJECT_ID('SALCAL_TAX_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_TAX_INITIAL
(
	@StopUPDATE bit output,
	@Month int,	@Year int,

	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_TAX_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	--tinh thue 10% thi khong duoc mien thue tang ca
	SELECT EMployeeId
	INTO #empNeedToFixTaxAmount
	FROM #tblTemporaryContractTax c

	UPDATE #tblSalDetail_ForTax
	SET TaxableIncomeBeforeDeduction = TaxableIncomeBeforeDeduction - ISNULL(TaxableOTTotal, 0) + ISNULL(TotalOTAmount, 0) - ISNULL(TaxableAdjustmentTotal, 0) + ISNULL(TotalAdjustment_WithoutForce, 0) - ISNULL(TaxableAllowanceTotal, 0) + ISNULL(TotalAllowanceForSalary, 0), TotalIncome_Taxable_Without_INS_Persion_family = TotalIncome_Taxable_Without_INS_Persion_family - ISNULL(TaxableOTTotal, 0) + ISNULL(TotalOTAmount, 0) - ISNULL(TaxableAdjustmentTotal, 0) + ISNULL(TotalAdjustment_WithoutForce, 0) - ISNULL(TaxableAllowanceTotal, 0) + ISNULL(TotalAllowanceForSalary, 0)
	FROM #tblSalDetail_ForTax s
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #empNeedToFixTaxAmount
			)

	-- ở đây sẽ xử lý hết mấy thằng OT, Allowance, Adjustment
	UPDATE #tblSal_OT_des
	SET Raw_TaxableOTAmount = TaxableOTAmount, Raw_NoneTaxableOTAmount = NoneTaxableOTAmount

	UPDATE #tblSal_OT_des
	SET TaxableOTAmount = OTAmount, NoneTaxableOTAmount = 0
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #empNeedToFixTaxAmount
			)

	UPDATE #tblSal_Allowance_des
	SET Raw_TaxableAmount = TaxableAmount, Raw_UntaxableAmount = UntaxableAmount, Raw_RetroAmountNonTax = RetroAmountNonTax

	UPDATE #tblSal_Allowance_des
	SET TaxableAmount = Amount, UntaxableAmount = 0, RetroAmountNonTax = 0
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #empNeedToFixTaxAmount
			)

	UPDATE #tblSal_Allowance_Detail_des
	SET Raw_TaxableAmount = TaxableAmount, Raw_UntaxableAmount = UntaxableAmount, Raw_RetroAmountNonTax = RetroAmountNonTax

	UPDATE #tblSal_Allowance_Detail_des
	SET TaxableAmount = Amount, UntaxableAmount = 0, RetroAmountNonTax = 0
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #empNeedToFixTaxAmount
			)

	UPDATE #tblSal_Adjustment_des
	SET Raw_TaxableAmount = TaxableAmount, Raw_UntaxableAmount = UntaxableAmount

	UPDATE #tblSal_Adjustment_des
	SET TaxableAmount = Amount, UntaxableAmount = 0
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #empNeedToFixTaxAmount
			) AND IncomeID NOT IN (
			SELECT IncomeID
			FROM tblIrregularIncome
			WHERE ForceNonTax = 1
			) AND IncomeID IN (
			SELECT IncomeID
			FROM tblIrregularIncome
			WHERE IncomeKind = 1
			)

	DROP TABLE #empNeedToFixTaxAmount

	IF (OBJECT_ID('SALCAL_TAX_10_INITIAL') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_TAX_10_INITIAL
(
	@StopUPDATE bit output,

	@Month int,	@Year int,

	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	-- custom
	EXEC SALCAL_TAX_10_INITIAL @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	-- TAX_DEDUCTION: Khấu trừ thuế khi tính lương? 0: không trừ, 1: có trừ tiền thuế
	-- không tính thuế từ phần mềm, có thể import từ bên ngoài vào
	DECLARE @TAX_DEDUCTION BIT

	SET @TAX_DEDUCTION = ISNULL((
				SELECT Value
				FROM tblParameter
				WHERE Code = 'TAX_DEDUCTION'
				), 1) --mot vai cong ty khong tinh thue ma import tu file - nếu từ file thì phải set = 0

	IF @TAX_DEDUCTION = 1
	BEGIN
		CREATE TABLE #TableVarTax (
			EmployeeID VARCHAR(20), TaxableIncome FLOAT(53), TaxableIncome_EROnly_ForNETOnly FLOAT(53), TaxableIncomeFrom FLOAT(53), TaxableIncomeFrom_EROnly_ForNETOnly FLOAT(53), TaxableIncomeTo FLOAT(53), TaxableIncomeTo_EROnly_ForNETOnly FLOAT(53), TaxPercent FLOAT, TaxPercent_EROnly_ForNETOnly FLOAT, ProgressiveAmount FLOAT(53), ProgressiveAmount_EROnly_ForNETOnly FLOAT(53), PITAmt FLOAT(53), PITAmt_ER FLOAT(53), SalaryHistoryID BIGINT, FixedPercent BIT, IncomeTaxableEmployeeOld FLOAT(53), TaxRetroImported FLOAT(53), TaxableIncome_SalaryOnly FLOAT(53), PITAmt_SalaryOnly FLOAT(53) --TRIPOD Foreigner
			)

		SELECT te.EmployeeID, te.TaxRegNo
		INTO #tmpEmpTaxNo
		FROM tblEmployee te
		INNER JOIN #tblEmployeeIDList a ON te.EmployeeID = a.EmployeeID

		-- Family deduction
		SELECT EmployeeID, cast(0.0 AS FLOAT(53)) AS DeductionAmount, cast(@PesonalDeduct AS FLOAT(53)) PesonalDeduct, CAST(0 AS FLOAT(53)) FamilyDeduction
		INTO #Deduction
		FROM #tblEmployeeIDList

		UPDATE #Deduction
		SET DeductionAmount = ISNULL(PesonalDeduct, @PesonalDeduct)

		UPDATE #Deduction
		SET DeductionAmount = DeductionAmount + @RelationDeduct * isnull(CountDeduct, 0), FamilyDeduction = @RelationDeduct * isnull(CountDeduct, 0)
		FROM #Deduction a
		INNER JOIN #CountRelation b ON a.EmployeeID = b.EmployeeID

		UPDATE #CountRelation
		SET CountDeduct = 0
		WHERE EmployeeID IN (
				SELECT EmployeeID
				FROM #tblTemporaryContractTax
				)

		UPDATE #Deduction
		SET DeductionAmount = 0, FamilyDeduction = 0, PesonalDeduct = 0
		WHERE EmployeeID IN (
				SELECT EmployeeID
				FROM #tblTemporaryContractTax
				)

		--TRIPOD
		UPDATE #tblSalDetail_ForTax
		SET TaxableIncome = TotalIncome - ROUND(ISNULL(NoneTaxableOTTotal, 0), 0) - ISNULL(DeductionAmount, 0) - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0), TaxableIncome_SalaryOnly = RegularAmt - ISNULL(DeductionAmount, 0) - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0), TaxableIncome_EROnly_ForNETOnly = TaxableIncome_EROnly_ForNETOnly - (ISNULL(DeductionAmount, 0))
		FROM #tblSalDetail_ForTax a
		INNER JOIN #Deduction b ON a.EmployeeID = b.EmployeeID
		WHERE isNet = 0

		UPDATE #tblSalDetail_ForTax
		SET TaxableIncome = TotalIncome - ROUND(ISNULL(NoneTaxableOTTotal, 0), 0) - ISNULL(DeductionAmount, 0) - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0), TaxableIncome_SalaryOnly = RegularAmt - ISNULL(DeductionAmount, 0) - ISNULL(InsAmt, 0) - ISNULL(EmpUnion, 0), TaxableIncome_EROnly_ForNETOnly = TaxableIncome_EROnly_ForNETOnly - (ISNULL(DeductionAmount, 0))
		FROM #tblSalDetail_ForTax a
		INNER JOIN #Deduction b ON a.EmployeeID = b.EmployeeID
		WHERE isNet = 1

		--SELECT * FROM #tblSalDetail where EmployeeID = '62250010' return
		--nhung nguoi hd duoi 3 thang ko duoc huong tang ca mien thue, neu luong < 9tr va co tich lowincome va co ma so thue thi duoc giam tru OTnontax
		INSERT INTO #TableVarTax (EmployeeID, TaxableIncome, TaxableIncome_EROnly_ForNETOnly)
		SELECT EmployeeID, TaxableIncome, TaxableIncome_EROnly_ForNETOnly
		FROM #tblSalDetail_ForTax

		UPDATE #TableVarTax
		SET TaxableIncomeFrom = tx.IncomeFrom, TaxableIncomeTo = tx.IncomeTo, TaxPercent = tx.TaxPercent, ProgressiveAmount = tx.ProgressiveAmount
		FROM #TableVarTax txv, (
				SELECT *
				FROM tblTax tt
				WHERE tt.EffectDate = (
						SELECT MAX(EffectDate)
						FROM tblTax
						WHERE datediff(day, tt.EffectDate, @FromDate) >= 0
						)
				) tx
		WHERE txv.TaxableIncome BETWEEN tx.IncomeFrom AND tx.IncomeTo

		--TRIPOD Foreigner
		UPDATE t
		SET TaxableIncome_SalaryOnly = sal.TaxableIncome_SalaryOnly
		FROM #TableVarTax t
		INNER JOIN #tblSalDetail_ForTax sal ON t.EmployeeID = sal.EmployeeID
		WHERE sal.isNET = 1

		UPDATE #TableVarTax
		SET TaxableIncomeFrom_EROnly_ForNETOnly = tx.IncomeFrom, TaxableIncomeTo_EROnly_ForNETOnly = tx.IncomeTo, TaxPercent_EROnly_ForNETOnly = tx.TaxPercent, ProgressiveAmount_EROnly_ForNETOnly = tx.ProgressiveAmount
		FROM #TableVarTax txv, (
				SELECT *
				FROM tblTax tt
				WHERE tt.EffectDate = (
						SELECT MAX(EffectDate)
						FROM tblTax
						WHERE datediff(day, tt.EffectDate, @FromDate) >= 0
						)
				) tx
		WHERE txv.TaxableIncome_EROnly_ForNETOnly BETWEEN tx.IncomeFrom AND tx.IncomeTo

		UPDATE #TableVarTax
		SET TaxableIncomeFrom = ISNULL(TaxableIncomeFrom, 0), TaxableIncomeTo = ISNULL(TaxableIncomeTo, 0), TaxPercent = ISNULL(TaxPercent, 0), ProgressiveAmount = ISNULL(ProgressiveAmount, 0), TaxableIncomeFrom_EROnly_ForNETOnly = ISNULL(TaxableIncomeFrom_EROnly_ForNETOnly, 0), TaxableIncomeTo_EROnly_ForNETOnly = ISNULL(TaxableIncomeTo_EROnly_ForNETOnly, 0), TaxPercent_EROnly_ForNETOnly = ISNULL(TaxPercent_EROnly_ForNETOnly, 0), ProgressiveAmount_EROnly_ForNETOnly = ISNULL(ProgressiveAmount_EROnly_ForNETOnly, 0)

		UPDATE #TableVarTax
		SET PITAmt = (TaxableIncome - (TaxableIncomeFrom - 1)) * TaxPercent + ProgressiveAmount, PITAmt_SalaryOnly = (TaxableIncome_SalaryOnly - (TaxableIncomeFrom - 1)) * TaxPercent + ProgressiveAmount, PITAmt_ER = (TaxableIncome_EROnly_ForNETOnly - (TaxableIncomeFrom_EROnly_ForNETOnly - 1)) * TaxPercent_EROnly_ForNETOnly + ProgressiveAmount_EROnly_ForNETOnly
		FROM #TableVarTax a
		WHERE EmployeeID NOT IN (
				SELECT EmployeeID
				FROM #tblTemporaryContractTax
				)

		-- thuế cho người chưa có hợp đồng chính thức, mac dinh 10%
		UPDATE #TableVarTax
		SET TaxableIncome = CASE
				WHEN ISNULL(sal.TaxableIncomeBeforeDeduction, 0) < 0 AND e.DivisionID IS NULL
					THEN 0
				ELSE ISNULL(sal.TaxableIncomeBeforeDeduction, 0)
				END, PITAmt = CASE
				WHEN ISNULL(sal.TaxableIncomeBeforeDeduction, 0) < 2000000
					THEN 0
				ELSE ISNULL(sal.TaxableIncomeBeforeDeduction, 0) * tmp.TaxPercentage
				END, FixedPercent = 1
		FROM #TableVarTax a
		INNER JOIN #tblTemporaryContractTax tmp ON a.EmployeeID = tmp.EmployeeID
		LEFT JOIN #tblEmployeeIDList e ON a.EmployeeID = e.EmployeeId
		--and e.DivisionID in(select DivisionID from tblDivision where DoNotFixTaxableIncome = 1)
		INNER JOIN #tblSalDetail_ForTax sal ON a.EmployeeID = sal.EmployeeID

		UPDATE #TableVarTax
		SET PITAmt = 0, TaxableIncome = 0, FixedPercent = 0
		WHERE PITAmt <= 0.05

		--co ma so thue + cam ket thu nhap thap + < 9tr: khong tinh thue nhung duoc tru tang ca mien thue, dong phuc mien thue, tien an mien thue
		UPDATE #TableVarTax
		SET PITAmt = CASE
				WHEN LTRIM(RTRIM(ISNULL(te.TaxRegNo, ''))) <> '' AND tmp.IsLowSalary = 1 AND sal.TotalSalary <= @PesonalDeduct
					THEN 0
				ELSE t.PITAmt
				END, TaxableIncome = CASE
				WHEN LTRIM(RTRIM(ISNULL(te.TaxRegNo, ''))) <> '' AND tmp.IsLowSalary = 1 AND sal.TotalSalary <= @PesonalDeduct
					THEN 0
				ELSE t.TaxableIncome
				END
		FROM #TableVarTax t
		INNER JOIN #tblTemporaryContractTax tmp ON t.EmployeeID = tmp.EmployeeID
		INNER JOIN #tblSalDetail_ForTax sal ON t.EmployeeID = sal.EmployeeID
		INNER JOIN #tmpEmpTaxNo te ON t.EmployeeID = te.EmployeeID

		UPDATE #TableVarTax
		SET SalaryHistoryID = b.SalaryHistoryID
		FROM #TableVarTax a, (
				SELECT MAX(SalaryHistoryID) SalaryHistoryID, EmployeeID
				FROM #tblSalDetail_ForTax
				GROUP BY EmployeeID
				) b
		WHERE a.EmployeeID = b.EmployeeID

		UPDATE #TableVarTax
		SET TaxableIncome = 0, TaxableIncome_SalaryOnly = 0
		WHERE TaxableIncome < 0 OR TaxableIncome IS NULL

		UPDATE #TableVarTax
		SET TaxableIncome_EROnly_ForNETOnly = 0
		WHERE TaxableIncome_EROnly_ForNETOnly < 0 OR TaxableIncome_EROnly_ForNETOnly IS NULL

		UPDATE #TableVarTax
		SET TaxableIncome = ROUND(TaxableIncome, @ROUND_SALARY_UNIT), PITAmt = ROUND(PITAmt, @ROUND_SALARY_UNIT)

		--UPDATE #Sal_OT1_0 SET OTDeduction = OTDeduction
		UPDATE #TableVarTax
		SET FixedPercent = 0
		WHERE PITAmt <= 0.05

		UPDATE #TableVarTax
		SET TaxRetroImported = pit.totalPITRetro, PITAmt = round(ISNULL(PITAmt, 0) + ISNULL(pit.totalPITRetro, 0), 0)
		FROM #TableVarTax tax
		INNER JOIN (
			SELECT EmployeeID, SUM(Amount) AS totalPITRetro
			FROM tblPR_Adjustment p
			WHERE p.EmployeeID IN (
					SELECT EmployeeID
					FROM #tblEmployeeIDList
					) AND p.Month = @Month AND p.Year = @Year AND p.IncomeID IN (
					SELECT IncomeID
					FROM tblIrregularIncome
					WHERE AppendToPIT = 1
					)
			GROUP BY p.EmployeeID
			) pit ON tax.EmployeeID = pit.EmployeeID

		UPDATE #TableVarTax
		SET TaxRetroImported = isnull(TaxRetroImported, 0) + isnull(re.PIT_Retro_Amount, 0), PITAmt = round(ISNULL(PITAmt, 0) + ISNULL(re.PIT_Retro_Amount, 0), 0)
		FROM #TableVarTax tax
		INNER JOIN tblSal_Retro_Imported re ON tax.EmployeeID = re.EmployeeID AND re.Month = @month AND re.YEar = @year AND re.PIT_Retro_Amount <> 0

		UPDATE #TableVarTax
		SET PITAmt = ROUND(PITAmt, 0), PITAmt_ER = ROUND(PITAmt_ER, 0), PITAmt_SalaryOnly = ROUND(PITAmt_SalaryOnly, 0)

		-- calculate PIT retro by cal back dependants
		EXEC sp_ProcessDependentAdjustment @LoginID, @Month, @Year, @NotSelect = 1

		UPDATE #TableVarTax
		SET PITAmt = CASE
				WHEN Round(ISNULL(PITAmt, 0) + a.PITAdjustment, @ROUND_SALARY_UNIT) < 0
					THEN 0
				ELSE Round(ISNULL(PITAmt, 0) + a.PITAdjustment, @ROUND_SALARY_UNIT)
				END
		FROM #TableVarTax p
		INNER JOIN (
			SELECT EmployeeId, sum(PITAdjustment) AS PITAdjustment
			FROM tblPIT_Adjustment_For_ChangedDependants
			WHERE ToMonth = @month AND ToYear = @year
			GROUP BY EmployeeID
			) a ON p.EmployeeID = a.EmployeeID

		-- end calculate PIT retro by cal back dependants
		IF (OBJECT_ID('SALCAL_TAX_FINISHED') IS NULL)
		BEGIN
			EXEC (
					'CREATE PROCEDURE dbo.SALCAL_TAX_FINISHED
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20) = ''-1''
)
as
begin
	SET NOCOUNT ON;
end'
					)
		END

		SET @StopUPDATE = 0

		EXEC SALCAL_TAX_FINISHED @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

		--alter table tblSal_tax add FixedPercents float
		INSERT INTO #tblSal_tax_des (EmployeeID, Month, year, IncomeTaxable, DeductionAmt, EmployeeExemption, FamilyExemption, DependantNumber, OTDeduction, TaxAmt, IsNET, TaxableIncome_EROnly_ForNETOnly, PITAmt_ER, TaxRetroImported, FixedPercents, isLowSalary, PeriodID, TaxableIncome_SalaryOnly, TaxAmt_SalaryOnly) --TRIPOD Foreigner
		SELECT tx.EmployeeID, @Month, @Year, tx.TaxableIncome, d.DeductionAmount, d.PesonalDeduct, isnull(dp.CountDeduct, 0) * isnull(@RelationDeduct, 0), dp.CountDeduct, sal.NoneTaxableOTTotal, tx.PITAmt, sh.IsNET, tx.TaxableIncome_EROnly_ForNETOnly, tx.PITAmt_ER, TaxRetroImported, tc.TaxPercentage AS FixedPercents, tc.isLowSalary, @PeriodID, tx.TaxableIncome_SalaryOnly, tx.PITAmt_SalaryOnly
		FROM #TableVarTax tx
		INNER JOIN #tblSalDetail_ForTax sal ON tx.SalaryHistoryID = sal.SalaryHistoryID AND sal.LatestSalEntry = 1
		LEFT JOIN tblSalaryHistory sh ON tx.SalaryHistoryID = sh.SalaryHistoryID
		LEFT JOIN #Deduction d ON tx.EmployeeID = d.EmployeeID
		LEFT JOIN #CountRelation dp ON tx.EmployeeID = dp.EmployeeID
		LEFT JOIN #tblTemporaryContractTax tc ON tx.EmployeeID = tc.EmployeeID

		UPDATE #tblSalDetail_ForTax
		SET PITAmt = tx.PITAmt, PITAmt_ER = tx.PITAmt_ER
		FROM #tblSalDetail_ForTax sal
		INNER JOIN #TableVarTax tx ON sal.EmployeeID = tx.EmployeeID AND sal.LatestSalEntry = 1
	END
	ELSE
	BEGIN
		DELETE #tblSal_tax_des
		WHERE month = @Month AND Year = @Year AND EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		SELECT t.EmployeeID, t.IncomeTaxable, t.TaxAmt
		INTO #tblSal_TaxImport
		FROM tblSal_TaxImport t
		WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		INSERT INTO #tblSal_tax_des (EmployeeID, Month, Year, IncomeTaxable, TaxAmt)
		SELECT t.EmployeeID, @Month, @Year, t.IncomeTaxable, t.TaxAmt
		FROM #tblSal_TaxImport t

		UPDATE #tblSalDetail_ForTax
		SET PITAmt = tx.TaxAmt
		FROM #tblSalDetail_ForTax sal
		INNER JOIN #tblSal_TaxImport tx ON sal.EmployeeID = tx.EmployeeID AND sal.LatestSalEntry = 1
	END

	--------------------------UPDATE other sumaried items of Sumary Table--------------------------
	UPDATE #tblSalDetail_ForTax
	SET IncomeAfterPIT = TotalIncome - ISNULL(InsAmt, 0) - ISNULL(PITAmt, 0) - (ISNULL(EmpUnion, 0) + ISNULL(EmpUnion_RETRO, 0))
	WHERE isnull(IsNet, 0) = 0

	UPDATE #tblSalDetail_ForTax
	SET IncomeAfterPIT = TotalIncome - (ISNULL(PITAmt, 0) - isnull(PITAmt_ER, 0))
	WHERE isnull(IsNet, 0) = 1

	--UPDATE #tblSalDetail_ForTax set PITReturn = ISNULL(TaxableAdjustmentTotal,0) + ISNULL(NoneTaxableAdjustmentTotal,0) - ISNULL(TotalAdjustmentForSalary,0)
	--deduct advance and union
	UPDATE sal
	SET AdvanceAmt = av.AdvanceAmount
	FROM tblSal_Advance av
	INNER JOIN #tblSalDetail_ForTax sal ON av.EmployeeID = sal.EmployeeID AND sal.LatestSalEntry = 1
	WHERE av.Month = @Month AND av.Year = @Year AND av.IsLock = 1

	UPDATE #tblSalDetail_ForTax
	SET GrossTakeHome = ROUND(IncomeAfterPIT - ISNULL(OtherDeductionAfterPIT, 0) - ISNULL(PITReturn, 0) - ISNULL(AdvanceAmt, 0), @ROUND_SALARY_UNIT)
	WHERE IncomeAfterPIT <> 0

	--select GrossTakeHome,@ROUND_SALARY_UNIT from #tblSalDetail_ForTax
	-- total cost thì phải trừ các khoản không dc tính trong total Cót Com Paid
	-- use IsNotLabourCost column
	UPDATE sal
	SET sal.TotalCostComPaid = sal.TotalCostComPaid - isnull(al.Total_Allowance_NotInLabourCost, 0)
	FROM #tblSalDetail_ForTax sal
	INNER JOIN (
		SELECT employeeID, sum(ReceiveAmount) AS Total_Allowance_NotInLabourCost
		FROM #tblAllowance a
		INNER JOIN tblAllowanceSetting al ON a.AllowanceID = al.AllowanceID AND al.IsNotLabourCost = 1
		GROUP BY EmployeeID
		) al ON sal.EmployeeID = al.EmployeeID
	WHERE sal.LatestSalEntry = 1

	-----------------------UPDATE salary detail records-----------------------------
	--dong luong cu ko can update
	UPDATE #tblSalDetail
	SET TaxableIncomeBeforeDeduction = 0, TotalIncome_Taxable_Without_INS_Persion_family = 0
	WHERE LatestSalEntry = 0

	--already delete old data
	UPDATE #tblSalDetail
	SET GrossTakeHome = sal2.GrossTakeHome, TotalCostComPaid = sal2.TotalCostComPaid + CASE
			WHEN isnull(sal2.IsNet, 0) = 1
				THEN isnull(sal2.PITAmt_ER, 0)
			ELSE 0
			END -- nếu là net thì phải trả thêm nha
		, TotalPayrollFund = sal2.TotalPayrollFund + CASE
			WHEN isnull(sal2.IsNet, 0) = 1
				THEN isnull(sal2.PITAmt_ER, 0)
			ELSE 0
			END -- nếu là net thì phải trả thêm nha
		, TaxableIncomeBeforeDeduction = sal2.TaxableIncomeBeforeDeduction, TaxableIncomeBeforeDeduction_EROnly_ForNETOnly = sal2.TaxableIncomeBeforeDeduction_EROnly_ForNETOnly, TotalIncome = sal2.TotalIncome, TotalEarn = sal2.TotalEarn, TaxableIncome = sal2.TaxableIncome, TaxableIncome_EROnly_ForNETOnly = sal2.TaxableIncome_EROnly_ForNETOnly, PITAmt = sal2.PITAmt, PITAmt_ER = sal2.PITAmt_ER, IncomeAfterPIT = sal2.IncomeAfterPIT, PITReturn = sal2.PITReturn, AdvanceAmt = sal2.AdvanceAmt, TotalIncome_ForSalaryTaxedAdj = sal2.TotalIncome_ForSalaryTaxedAdj, TotalIncome_Taxable_Without_INS_Persion_family = sal2.TotalIncome_Taxable_Without_INS_Persion_family
	FROM #tblSalDetail sal1
	INNER JOIN #tblSalDetail_ForTax sal2 ON sal1.EmployeeID = sal2.EmployeeID AND sal1.LatestSalEntry = 1

	DROP TABLE #tblSalDetail_ForTax

	UPDATE #tblSalDetail
	SET GrossTakeHome = ROUND(GrossTakeHome, @ROUND_TAKE), TotalEarn = ROUND(TotalEarn, @ROUND_NET), TotalIncome = ROUND(TotalIncome, @ROUND_NET)

	IF @PROBATION_PERECNT > 0 AND @PROBATION_PERECNT < 100.0 --xu ly mot vai nguoi co probation tu dong
		UPDATE #tblSalDetail
		SET BasicSalaryOrg = BasicSalary
		WHERE LatestSalEntry = 0 AND BasicSalaryOrg IS NOT NULL

	--xoa mot so du lieu thua o lan tinh luong truoc
	DELETE
	FROM #tblSalDetail
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			WHERE TerminatedStaff = 1 AND TerminateDate <= @FromDate
			) AND GrossTakeHome = 0 AND ISNULL(TotalIncome, 0) = 0 AND ISNULL(PITAmt, 0) = 0 AND ISNULL(TotalCostComPaid, 0) = 0

	--luu du lieu truoc khi delete	
	SELECT EmployeeID, IsCash, RemainAL, Notes
	INTO #tmpSalSal_Backup
	FROM tblSal_Sal
	WHERE [Month] = @Month AND [Year] = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	UPDATE #tblSalDetail
	SET ActualMonthlyBasic = ISNULL(ActualMonthlyBasic, 0) - isnull(sr.ActualMonthlyBasic_Retro_Amount, 0)
	FROM #tblSalDetail sal
	INNER JOIN #tblsal_retro_Final sr ON sal.EmployeeID = sr.EmployeeID --and sr.Month= @Month and sr.Year= @Year
	WHERE sal.LatestSalEntry = 1

	INSERT INTO #tblSal_Sal_Detail_des (EmployeeID, Month, Year, PeriodID, SalaryHistoryID, FromDate, ToDate, DepartmentID, SectionID, PositionID, StandardWDays, BasicSalary, SalaryPerDay, ActualMonthlyBasic, TaxableAllowance, NontaxableAllowance, TaxableAdjustment, NontaxableAdj, TaxableAdjustmentTotal_ForSalary, TaxableAdjustmentTotal_NotForSalary, TotalIncome, TotalEarn, IOAmt, EmpUnion, CompUnion, TaxableIncomeBeforeDeduction, IncomeAfterPIT, GrossTakeHome, SalaryPerHour, SalCalRuleID, LatestSalEntry, DaysOfSalEntry, Raw_BasicSalary, Raw_CurrencyCode, Raw_ExchangeRate, IsNet, UnpaidLeaveAmount, TotalNetIncome_Custom, GrossedUpWithoutHousing_Custom, GrossedUpWithoutHousing_WithoutGrossIncome_Custom, RegularAmt, PaidLeaveAmt, GrossSalary, AnnualBonus_Total, AnnualBonus_EvMonth, Bonus6Month_Total, Bonus6M_EveryMonth) --TRIPOD
	SELECT sal.EmployeeID, @Month, @Year, @PeriodID, ISNULL(sal.ProbationSalaryHistoryID, sal.SalaryHistoryID), sal.FromDate, sal.ToDate, e.DepartmentID, e.SectionID, e.PositionID, sal.STD_WD, sal.BasicSalary, sal.SalaryPerDay, sal.ActualMonthlyBasic, sal.TaxableAllowanceTotal, sal.NoneTaxableAllowanceTotal, sal.TaxableAdjustmentTotal, sal.NoneTaxableAdjustmentTotal, TaxableAdjustmentTotal_ForSalary, TaxableAdjustmentTotal_NotForSalary, sal.TotalIncome, TotalEarn, sal.IOAmt, sal.EmpUnion, sal.CompUnion, sal.TaxableIncomeBeforeDeduction, sal.IncomeAfterPIT, sal.GrossTakeHome, sal.SalaryPerHour, sal.SalCalRuleID, LatestSalEntry, DaysOfSalEntry, CASE
			WHEN ISNULL(sal.isNET, 0) = 1
				THEN sal.NetSalary
			ELSE sh.Salary
			END AS Raw_BasicSalary, sal.CurrencyCode AS Raw_CurrencyCode, sal.ExchangeRate AS Raw_ExchangeRate, sal.IsNet, UnpaidLeaveAmount, TotalNetIncome_Custom, GrossedUpWithoutHousing_Custom, round(GrossedUpWithoutHousing_WithoutGrossIncome_Custom, 0), sal.RegularAmt, sal.PaidLeaveAmt, sal.GrossSalary, AnnualBonus_Total, AnnualBonus_EvMonth, Bonus6Month_Total, Bonus6M_EveryMonth
	FROM #tblSalDetail sal
	INNER JOIN #tblEmployeeIDList e ON sal.EmployeeID = e.EmployeeID
	INNER JOIN tblSalaryHistory sh ON sal.SalaryHistoryID = sh.SalaryHistoryID

	--select 9999,TotalNetIncome_Custom,GrossedUpWithoutHousing_Custom,* from #tblSalDetail
	IF (OBJECT_ID('SALCAL_FinishUpdateSalDetail') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.SALCAL_FinishUpdateSalDetail
(
	@StopUPDATE bit output,
	@Month int,
	@Year int,
	@FromDate datetime,
	@ToDate datetime,
	@LoginID int,
	@PeriodID int = 0,
	@EmployeeID nvarchar(20)
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUPDATE = 0

	EXEC SALCAL_FinishUpdateSalDetail @StopUPDATE OUTPUT, @Month, @Year, @FromDate, @ToDate, @LoginID, @PeriodID, @EmployeeID

	----------------------------UPDATE Salary sumary record-----------------------------
	--already delete old data
	INSERT INTO #tblSal_Sal_des (EmployeeID, Month, Year, PeriodID, ActualMonthlyBasic, TaxableAllowance, NontaxableAllowance, TaxableAdjustment, NontaxableAdj, TaxableAdjustmentTotal_ForSalary, TaxableAdjustmentTotal_NotForSalary, TotalIncome, TotalEarn, IOAmt, EmpUnion, CompUnion, EmpUnion_RETRO, CompUnion_RETRO, TaxableIncomeBeforeDeduction, IncomeAfterPIT, GrossTakeHome, TotalCostComPaid, TotalPayrollFund, TotalIncome_ForSalaryTaxedAdj, TotalIncome_Taxable_Without_INS_Persion_family, UnpaidLeaveAmount, TotalNetIncome_Custom, GrossedUpWithoutHousing_Custom, GrossedUpWithoutHousing_WithoutGrossIncome_Custom)
	SELECT EmployeeID, @Month, @Year, @PeriodID, SUM(ActualMonthlyBasic), SUM(TaxableAllowanceTotal), SUM(NoneTaxableAllowanceTotal), SUM(TaxableAdjustmentTotal), SUM(NoneTaxableAdjustmentTotal), SUM(TaxableAdjustmentTotal_ForSalary), SUM(TaxableAdjustmentTotal_NotForSalary), SUM(TotalIncome), SUM(TotalEarn), SUM(IOAmt), SUM(EmpUnion), SUM(CompUnion), SUM(EmpUnion_RETRO), SUM(CompUnion_RETRO), SUM(TaxableIncomeBeforeDeduction), SUM(IncomeAfterPIT), SUM(GrossTakeHome), Round(SUM(TotalCostComPaid), @ROUND_SALARY_UNIT), Round(SUM(TotalPayrollFund), @ROUND_SALARY_UNIT), SUM(TotalIncome_ForSalaryTaxedAdj), SUM(TotalIncome_Taxable_Without_INS_Persion_family), SUM(UnpaidLeaveAmount), SUM(TotalNetIncome_Custom), SUM(GrossedUpWithoutHousing_Custom), sum(GrossedUpWithoutHousing_WithoutGrossIncome_Custom)
	FROM #tblSalDetail
	GROUP BY EmployeeID

	UPDATE #tblSal_Sal_des
	SET IsCash = b.IsCash, Notes = b.Notes
	FROM #tblSal_Sal_des sal
	INNER JOIN #tmpSalSal_Backup b ON sal.EmployeeID = b.EmployeeID AND sal.Month = @Month AND Year = @Year

	/*
TakeHome_Actual_VND

TakeHome_RequestedAmount
TakeHome_Requested_Currency
Takehome_Requested_ExchangeRate
*/
	-- kiểm tra coi có ai cần dc trả ngoại tệ không
	SELECT EmployeeID, CurrencyCode, RequestAmount, AlsoViewVNDAmount, TransferAll
	INTO #PaidInAnotherCurrency
	FROM tblSal_RequestPaidInAnotherCurrency
	WHERE @month + @year * 12 >= FromMonth + FromYear * 12 AND (ToMonth IS NULL OR @month + @year * 12 <= ToMonth + ToYear * 12) AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tblEmployeeIDList
			)

	--select sal.EmployeeID,sal.GrossTakeHome,p.RequestAmount,p.CurrencyCode,ex.ExchangeRate
	UPDATE sal
	SET TakeHome_RequestedAmount = p.RequestAmount, TakeHome_Requested_Currency = p.CurrencyCode, Takehome_Requested_ExchangeRate = ex.ExchangeRate, TakeHome_Actual_VND = ROUND(CASE
				WHEN sal.GrossTakeHome - (p.RequestAmount * ex.ExchangeRate) > 0
					THEN sal.GrossTakeHome - (p.RequestAmount * ex.ExchangeRate)
				ELSE 0
				END, 0)
	FROM #tblSal_Sal_des sal
	INNER JOIN #PaidInAnotherCurrency p ON sal.EmployeeID = p.EmployeeID
	INNER JOIN #EmployeeExchangeRate ex ON p.EmployeeID = ex.EmployeeID AND p.CurrencyCode = ex.CurrencyCode

	-- cập nhật Key của table
	SET ANSI_WARNINGS ON

	SELECT KU.table_name AS TABLENAME, column_name AS PRIMARYKEYCOLUMN
	INTO #tmpPRIMARYKEYCOLUMN
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC
	INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KU ON TC.CONSTRAINT_TYPE = 'PRIMARY KEY' AND TC.CONSTRAINT_NAME = KU.CONSTRAINT_NAME AND KU.table_name IN (
			SELECT PhysicTableName
			FROM #NameOfPhysicTables
			)

	UPDATE t
	SET PrimaryKeyCOlumns = tmp.PrimaryKeyCOlumns
	FROM #NameOfPhysicTables t
	INNER JOIN (
		SELECT TABLENAME, STUFF((
					SELECT ',' + CAST(tmp.PRIMARYKEYCOLUMN AS VARCHAR(MAX))
					FROM #tmpPRIMARYKEYCOLUMN tmp
					WHERE (tmp.TABLENAME = Results.TABLENAME)
					FOR XML PATH(''), TYPE
					).value('.', 'VARCHAR(MAX)'), 1, 1, '') AS PrimaryKeyCOlumns
		FROM #tmpPRIMARYKEYCOLUMN Results
		GROUP BY TABLENAME
		) tmp ON t.PhysicTableName = tmp.TABLENAME

	SET ANSI_WARNINGS OFF

	DECLARE @tempTableName NVARCHAR(500), @PhysicTableName NVARCHAR(500)

	IF @CalculateRetro = 0 -- nếu @CalculateRetro= 0 thì chẳng có trong bảng tạm cũng như bảng danh sách nhân viên đâu, nhưng mà cứ chạy cái cho nó chắc
	BEGIN
		-- delêt bảng danh sách nhân viên
		--(EmployeeID IN (SELECT EmployeeID FROM #tblEmployeeIDList))
		DELETE #tblEmployeeIDList
		FROM #tblEmployeeIDList e
		WHERE EXISTS (
				SELECT 1
				FROM tblSal_Lock sl
				WHERE e.EmployeeID = sl.EmployeeID AND sl.Month = @Month AND sl.Year = @Year
				)

		-- tạo cái base query
		-- chắc ăn hơn nữa thì xóa 1 lần trong các bảng tạm đi nào a e
		SET @Query = N'delete %temptableName% from %temptableName% tmp where tmp.EmployeeId not in(select EmployeeID from #tblEmployeeIDList)
		-- delete bảng thực cho nó gọn
		delete %PhysicTableName% from %PhysicTableName% phy where phy.Month= ' + CAST(@Month AS VARCHAR(2)) + ' and phy.Year= ' + CAST(@year AS VARCHAR(4)) + ' and isnull(phy.PeriodID,0) = ' + cast(@PeriodID AS VARCHAR(20)) + '
		and exists (select 1 from #tblEmployeeIDList tel where phy.EmployeeID = tel.EmployeeID)
		'

		DECLARE @UpdateQuery NVARCHAR(max) = ''

		IF EXISTS (
				SELECT 1
				FROM #NameOfPhysicTables
				WHERE len(ISNULL(PrimaryKeyCOlumns, '')) <= 1
				)
		BEGIN
			SELECT N'Những bảng không có key cần xem lại', *
			FROM #NameOfPhysicTables
			WHERE len(ISNULL(PrimaryKeyCOlumns, '')) <= 1 -- không có key kô cho lưu

			DELETE #NameOfPhysicTables
			WHERE len(ISNULL(PrimaryKeyCOlumns, '')) <= 1 -- không có key kô cho lưu
		END

		WHILE EXISTS (
				SELECT 1
				FROM #NameOfPhysicTables
				)
		BEGIN
			SELECT TOP 1 @tempTableName = TempTablename, @PhysicTableName = PhysicTableName
			FROM #NameOfPhysicTables

			--print @tempTableName + '-'+@PhysicTableName
			SET @UpdateQuery = REPLACE(REPLACE(@Query, '%PhysicTableName%', @PhysicTableName), '%temptableName%', @tempTableName)

			--print @UpdateQuery
			EXECUTE (@UpdateQuery)

			EXEC sp_InsertUpdateFromTempTableTOTable @TempTableName = @tempTableName, @TableName = @PhysicTableName

			DELETE #NameOfPhysicTables
			WHERE @tempTableName = TempTablename AND @PhysicTableName = PhysicTableName
		END

		IF @CalculateRetro = 0
			UPDATE sal1
			SET Attdays = sal1.Attdays - ISNULL(sal2.Attdays, 0), TotalPaidDays = sal1.TotalPaidDays - ISNULL(sal2.TotalPaidDays, 0), PaidLeaves = sal1.PaidLeaves - ISNULL(sal2.PaidLeaves, 0), UnPaidLeaves = sal1.UnPaidLeaves - ISNULL(sal2.UnPaidLeaves, 0), TotalSunDay = sal1.TotalSunDay - ISNULL(sal2.TotalSunDay, 0)
			FROM tblSal_AttDataSumary_ForReport sal1
			INNER JOIN tblSal_AttDataSumary_ForReport sal2 ON sal1.EmployeeID = sal2.EmployeeID AND sal2.Month = @Month AND sal2.Year = @Year AND sal2.PeriodID = 1
			WHERE sal1.EmployeeID IN (
					SELECT EmployeeID
					FROM #tblEmployeeIDList
					) AND sal1.Month = @Month AND sal1.Year = @Year AND sal1.PeriodID = 0
	END
	ELSE IF @CalculateRetro = 1
	BEGIN
		SELECT sal1.EmployeeID, sal1.DaysOfSalEntry - ISNULL(sal2.DaysOfSalEntry, 0) AS BalanceDays
		INTO #DiffDaysofSalEntry
		FROM (
			SELECT EmployeeID, SUM(DaysOfSalEntry) AS DaysOfSalEntry
			FROM #tblSal_Sal_Detail_des
			GROUP BY EmployeeID
			) sal1
		CROSS APPLY (
			SELECT SUM(DaysOfSalEntry) AS DaysOfSalEntry
			FROM tblSal_Sal_Detail sd
			WHERE sd.EmployeeID = sal1.EmployeeID AND sd.Month = @Month AND sd.Year = @Year AND sd.PeriodID = 0
			) sal2

		-- diff basic
		SELECT sal1.EmployeeID, sal1.ActualMonthlyBasic AS ActualMonthlyBasic_Retro, sal2.ActualMonthlyBasic, sal1.ActualMonthlyBasic - isnull(sal2.ActualMonthlyBasic, 0) AS Diff
		INTO #DiffBasic
		FROM #tblSal_Sal_des sal1
		LEFT JOIN tblSal_Sal sal2 ON sal1.EmployeeID = sal2.EmployeeID AND sal2.Month = @Month AND sal2.Year = @Year AND sal2.PeriodID = 0
		WHERE ISNULL(sal1.ActualMonthlyBasic, 0) <> ISNULL(sal2.ActualMonthlyBasic, 0)

		--diff ot
		SELECT ot1.EmployeeID, ISNULL(ot1.OTAmount, 0) - ISNULL(ot2.OTAmount, 0) AS DiffOTAmount, ISNULL(ot1.TaxableOTAmount, 0) - ISNULL(ot2.TaxableOTAmount, 0) AS DiffTaxableOTAmount, ISNULL(ot1.NoneTaxableOTAmount, 0) - ISNULL(ot2.NoneTaxableOTAmount, 0) AS DiffNoneTaxableOTAmount
		INTO #DiffOT
		FROM #tblSal_OT_des ot1
		LEFT JOIN tblSal_OT ot2 ON ot1.EmployeeID = ot2.EmployeeID AND ot2.Month = @Month AND ot2.Year = @Year AND ot2.PeriodID = 0

		-- diff allowance
		SELECT al1.EmployeeID, sum(ISNULL(al1.Amount, 0) - isnull(al2.Amount, 0)) AS DiffAmount, sum(ISNULL(al1.TaxableAmount, 0) - isnull(al2.TaxableAmount, 0)) AS DiffTaxableAmount, sum(ISNULL(al1.UntaxableAmount, 0) - isnull(al2.UntaxableAmount, 0)) AS DiffNontaxableAmount, 'AL_' + als.AllowanceCode + '_Retro' AS RetroTablecolumnName
		INTO #DiffAllowance
		FROM #tblSal_Allowance_des al1
		INNER JOIN tblAllowanceSetting als ON al1.AllowanceID = als.AllowanceID
		LEFT JOIN tblSal_Allowance al2 ON al2.Month = @Month AND al2.Year = @Year AND al1.EmployeeID = al2.EmployeeID AND al1.AllowanceID = al2.AllowanceID AND al2.PeriodID = 0
		GROUP BY al1.EmployeeID, al1.AllowanceID, 'AL_' + als.AllowanceCode + '_Retro'

		DELETE #DiffAllowance
		WHERE ISNULL(DiffAmount, 0) = 0

		-- diff Night shift -- added
		SELECT ns1.EmployeeID, ISNULL(ns1.NSAmount, 0) - isnull(ns2.NSAmount, 0) AS DiffAmount
		INTO #DiffNightShift
		FROM #tblSal_NS_des ns1
		LEFT JOIN tblSal_NS ns2 ON ns1.EmployeeID = ns2.EmployeeID AND ns2.Month = @Month AND ns2.Year = @Year AND ns2.PeriodID = 0
		WHERE ISNULL(ns1.NSAmount, 0) - isnull(ns2.NSAmount, 0) <> 0

		DELETE #tblEmployeeIDList
		WHERE EmployeeID IN (
				SELECT EmployeeID
				FROM tblSal_Lock
				WHERE Month = @nextMonth AND Year = @nextYear
				) -- xóa những thằng đã khóa lương tháng sau

		DELETE tblSal_Retro
		FROM tblSal_Retro re
		WHERE Month = @nextMonth AND Year = @nextYear AND EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				) AND NOT EXISTS (
				SELECT 1
				FROM tblSal_Lock sl
				WHERE sl.Month = @nextMonth AND sl.Year = @nextYear
				) AND EmployeeID NOT IN (
				SELECT EmployeeID
				FROM tblSal_AttendanceData_Retro r
				WHERE r.Month = @Month AND r.Year = @Year
				
				UNION
				
				SELECT c.EmployeeID
				FROM tblCustomAttendanceData c
				WHERE c.Month = @Month AND c.Year = @Year AND c.IsRetro = 1
				) AND ISNULL(IsImported, 0) = 0

		-- xóa những thằng ko phải imported, nằm trong danh sách working, mà ko nằm trong danh sách nhân viên retro
		-- ịn vào nếu chưa có
		INSERT INTO tblSal_Retro (EmployeeID, Month, Year)
		SELECT DISTINCT EmployeeID, @nextMonth, @nextYear
		FROM (
			SELECT EmployeeID
			FROM #DiffAllowance
			
			UNION
			
			SELECT EmployeeID
			FROM #DiffBasic
			
			UNION
			
			SELECT EmployeeID
			FROM #DiffOT
			) u
		WHERE u.EmployeeID NOT IN (
				SELECT EmployeeID
				FROM tblSal_Retro r
				WHERE r.Month = @nextMonth AND r.Year = @nextYear
				)

		-- update thôi
		-- basic
		UPDATE tblSal_Retro
		SET ActualMonthlyBasic_Retro_Amount = ROUND(b.Diff, 0)
		FROM tblSal_Retro re
		LEFT JOIN #DiffBasic b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		-- ot
		UPDATE tblSal_Retro
		SET OT_Retro_Amount = ROUND(b.DiffOTAmount, 0), Nontax_OT_Retro_Amount = ROUND(b.DiffNoneTaxableOTAmount, 0)
		FROM tblSal_Retro re
		LEFT JOIN #DiffOT b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		-- allowance
		SET @Query = ''

		SELECT @Query += '
	 if COL_LENGTH(''tblSal_Retro'',''' + RetroTablecolumnName + ''') is null
	 begin
		 alter table tblSal_Retro add [' + RetroTablecolumnName + '] money
		 alter table tblSal_Retro_Sumary add [' + RetroTablecolumnName + '] money
		 alter table #tblSal_Retro_tmpImport add [' + RetroTablecolumnName + '] money
	 end
	 '
		FROM (
			SELECT DISTINCT RetroTablecolumnName
			FROM #DiffAllowance
			) s

		EXEC (@Query)

		SET @Query = ''

		SELECT @Query += '
	 update tblSal_Retro set [' + RetroTablecolumnName + '] = ROUND(tmp.DiffAmount,0)
	 from tblSal_Retro  t
	 inner join #DiffAllowance tmp  on t.EmployeeID = tmp.EmployeeID and tmp.RetroTablecolumnName = ''' + RetroTablecolumnName + ''''
		FROM (
			SELECT DISTINCT RetroTablecolumnName
			FROM #DiffAllowance
			) s

		--print @Query
		EXEC (@Query)

		--select * from #DiffAllowance
		--  diff ins
		SELECT re.EmployeeID, ISNULL(re.EmployeeTotal, 0) - isnull(ins.EmployeeTotal, 0) AS DiffEMployee, ISNULL(re.CompanyTotal, 0) - ISNULL(ins.CompanyTotal, 0) AS DiffCompany
		INTO #DiffIns
		FROM tblSal_Insurance_Retro re
		LEFT JOIN tblSal_Insurance ins ON re.EmployeeID = ins.EmployeeID AND ins.Month = @Month AND ins.Year = @Year
		-- and  (ISNULL(re.EmployeeTotal,0) <> isnull(ins.EmployeeTotal,0) or ISNULL(re.CompanyTotal,0) <> ISNULL(ins.CompanyTotal,0))
		WHERE re.Month = @Month AND re.Year = @Year AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		UPDATE tblSal_Retro
		SET INS_Retro_Amount_EE = ROUND(b.DiffEMployee, 0), INS_Retro_Amount_ER = ROUND(b.DiffCompany, 0)
		FROM tblSal_Retro re
		LEFT JOIN #DiffIns b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		-- diff union
		-- do đã delete đi add lại ròi nên đừng có sợ gì cả
		SELECT u.EmployeeID, ISNULL(u.UnionFeeEmp, 0) - ISNULL(sal.EmpUnion, 0) AS DiffEmployee, ISNULL(u.UnionFeeComp, 0) - ISNULL(sal.CompUnion, 0) AS DiffCompany
		INTO #diffUnion
		FROM #tblTradeUnion u
		LEFT JOIN tblSal_Sal sal ON u.EmployeeID = sal.EmployeeID AND sal.Month = @Month AND sal.Year = @Year
		WHERE ISNULL(u.UnionFeeEmp, 0) <> ISNULL(sal.EmpUnion, 0) OR ISNULL(u.UnionFeeComp, 0) <> ISNULL(sal.CompUnion, 0)

		UPDATE tblSal_Retro
		SET Union_RETRO_EE = ROUND(b.DiffEmployee, 0), Union_RETRO_ER = ROUND(b.DiffCompany, 0)
		FROM tblSal_Retro re
		LEFT JOIN #diffUnion b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		-- diff Night Shift -- finalize
		UPDATE tblSal_Retro
		SET NightShift_RETRO = ROUND(b.DiffAmount, 0)
		FROM tblSal_Retro re
		LEFT JOIN #DiffNightShift b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)

		-- balance days
		UPDATE tblSal_Retro
		SET BalanceDays = b.BalanceDays
		FROM tblSal_Retro re
		LEFT JOIN #DiffDaysofSalEntry b ON re.EmployeeID = b.EmployeeID
		WHERE re.Month = @nextMonth AND re.Year = @nextYear AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM #tblEmployeeIDList
				)
			--drop table #DiffBasic
			--drop table #DiffOT
			--drop table #DiffAllowance
			--drop table #DiffInspiut
	END

	----------------------Error in salary period-------------------------------
	INSERT INTO #tblSal_Error_des ([Month], [Year], EmployeeID, Remark, PeriodID)
	SELECT @Month, @Year, EmployeeID, Reason, @PeriodID
	FROM #TableVarSalError

	--------------------Drop temporary table--------------------------------
	DROP TABLE #tblEmployeeIDList

	DROP TABLE #tblSalDetail

	DROP TABLE #tblLvHistory
END

PRINT 'eof'
	--exec SALCAL_MAIN 7,2025,3,0,'-1',0
GO




if object_id('[dbo].[sp_processSummaryAttendance]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_processSummaryAttendance] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_processSummaryAttendance] (@LoginID INT, @Year INT, @Month INT, @ViewType INT = 0, @Payroll BIT = 0)
AS
BEGIN
	--View Type: 0: 0 view chỉ process, 1: view summary, 2: view in-out chi tiết
	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	--LeaveType
	DECLARE @Query NVARCHAR(MAX) = ''

	SELECT @Query += N'IF COL_LENGTH(''tblAttendanceSummary'',''' + LeaveCode + N''') is null
                        ALTER TABLE tblAttendanceSummary ADD [' + LeaveCode + N'] FLOAT;'
	FROM tblLeaveType
	WHERE IsVisible = 1

	EXEC (@Query)

	--Tạo bảng tạm để lưu trữ dữ liệu
	SELECT *, CAST(NULL AS DATETIME) TerminateDate, CAST(NULL AS DATETIME) HireDate, CAST(NULL AS FLOAT) PercentProbation, CAST(NULL AS DATETIME) ProbationEndDate, CAST(NULL AS INT) isForeign
	INTO #tblAttendanceSummary
	FROM tblAttendanceSummary
	WHERE 1 = 0

	SELECT te.EmployeeID, te.DivisionID, te.DepartmentID, te.SectionID, te.GroupID, te.EmployeeTypeID, te.PositionID, te.EmployeeStatusID, te.Sex, CASE
			WHEN te.HireDate > @fromDate
				THEN cast(1 AS BIT)
			ELSE 0
			END AS NewStaff, CAST(0 AS BIT) AS TerminatedStaff, HireDate, CAST(NULL AS DATETIME) TerminateDate, ProbationEndDate, te.LastWorkingDate, CAST(0 AS BIT) hasTwoPeriods, et.isLocalStaff, te.isForeign
	INTO #EmployeeList
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, '-1', @LoginID) te
	INNER JOIN tblDivision div ON te.DivisionID = div.DivisionID
	LEFT JOIN tblEmployeeType et ON te.EmployeeTypeID = et.EmployeeTypeID

	-- WHERE NOT EXISTS (
	-- 		SELECT 1
	-- 		FROM tblSal_Lock l
	-- 		WHERE te.EmployeeID = l.EmployeeID AND l.Month = @Month AND l.Year = @Year
	-- 		)
	IF EXISTS (
			SELECT a.EmployeeID
			FROM tblAtt_LockMonth a
			INNER JOIN #EmployeeList e ON a.EmployeeID = e.EmployeeID
			WHERE a.Month = @Month AND a.Year = @Year
			)
	BEGIN
		DELETE
		FROM #EmployeeList
		WHERE EmployeeID IN (
				SELECT DISTINCT a.EmployeeID
				FROM tblAtt_LockMonth a
				INNER JOIN #EmployeeList e ON a.EmployeeID = e.EmployeeID
				WHERE a.Month = @Month AND a.Year = @Year
				)
	END

	-- khoa roi thi khong tinh luong nua
	SELECT *
	INTO #fn_EmployeeStatus_ByDate
	FROM dbo.fn_EmployeeStatus_ByDate(@ToDate)

	SELECT *
	INTO #fn_EmployeeStatus_ByDate_FirstLastMonth
	FROM dbo.fn_EmployeeStatus_ByDate(dateadd(dd, 1, @ToDate))

	SELECT l.*
	INTO #tblLvHistory
	FROM tblLvHistory l
	INNER JOIN #EmployeeList e ON l.EmployeeID = e.EmployeeID
	WHERE LeaveDate BETWEEN @FromDate AND @ToDate

	--lay trang thai ben bang history cho chinh xac
	UPDATE #EmployeeList
	SET EmployeeStatusID = stt.EmployeeStatusID
	FROM #EmployeeList te
	INNER JOIN #fn_EmployeeStatus_ByDate stt ON te.EmployeeID = stt.EmployeeID

	UPDATE #EmployeeList
	SET EmployeeStatusID = stt.EmployeeStatusID, TerminateDate = stt.ChangedDate, LastWorkingDate = dateadd(dd, - 1, stt.ChangedDate)
	FROM #EmployeeList te
	INNER JOIN #fn_EmployeeStatus_ByDate_FirstLastMonth stt ON te.EmployeeID = stt.EmployeeID
	WHERE stt.EmployeeStatusID = 20

	UPDATE #EmployeeList
	SET TerminatedStaff = 1
	WHERE TerminateDate IS NOT NULL

	SELECT *
	INTO #CurrentSalary
	FROM dbo.fn_CurrentSalaryHistoryIDByDate(@ToDate)

	--Những người có 2 dòng công = 2 dòng lương
	INSERT INTO #tblAttendanceSummary (Year, Month, EmployeeID, HireDate, TerminateDate, ProbationEndDate, PeriodID, SalaryHistoryID, FromDate, ToDate, isForeign)
	SELECT @Year, @Month, sh.EmployeeID, HireDate, TerminateDate, ProbationEndDate, 0, sh.SalaryHistoryID, CASE
			WHEN sh.DATE < @FromDate
				THEN @FromDate
			ELSE sh.DATE
			END, @ToDate, te.isForeign
	FROM #EmployeeList te
	INNER JOIN #CurrentSalary s ON te.EmployeeID = s.EmployeeID
	INNER JOIN tblSalaryHistory sh ON s.SalaryHistoryID = sh.SalaryHistoryID
	WHERE sh.DATE >= te.HireDate

	INSERT INTO #tblAttendanceSummary (Year, Month, EmployeeID, HireDate, TerminateDate, ProbationEndDate, PeriodID, SalaryHistoryID, FromDate, ToDate, isForeign)
	SELECT @Year, @Month, sh.EmployeeID, HireDate, TerminateDate, ProbationEndDate, 1, sh.SalaryHistoryID, CASE
			WHEN sh.DATE < @FromDate
				THEN @FromDate
			ELSE sh.DATE
			END, @ToDate, te.isForeign
	FROM #EmployeeList te
	INNER JOIN tblSalaryHistory sh ON te.EmployeeID = sh.EmployeeID
	WHERE sh.SalaryHistoryID NOT IN (
			SELECT SalaryHistoryID
			FROM #CurrentSalary
			) AND [Date] > @FromDate AND NOT EXISTS (
			SELECT 1
			FROM #tblAttendanceSummary s
			WHERE sh.SalaryHistoryID = s.SalaryHistoryID
			) AND sh.DATE <= @ToDate AND ISNULL(te.isForeign, 0) = 0

	UPDATE #tblAttendanceSummary
	SET PeriodID = 0
	WHERE ToDate < @ToDate

	UPDATE #tblAttendanceSummary
	SET PeriodID = 0
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tblAttendanceSummary s
			GROUP BY EmployeeID
			HAVING COUNT(1) = 1
			)

	--Thử việc
	IF EXISTS (
			SELECT 1
			FROM #tblAttendanceSummary sh
			WHERE ProbationEndDate BETWEEN @FromDate AND @ToDate AND HireDate <> ProbationEndDate
			)
	BEGIN
		UPDATE #tblAttendanceSummary
		SET PercentProbation = ISNULL(CASE
					WHEN ISNULL(tsh.PercentProbation, 0) = 0
						THEN NULL
					ELSE tsh.PercentProbation
					END, et.PercentProbation)
		FROM #tblAttendanceSummary sh
		LEFT JOIN tblSalaryHistory tsh ON sh.SalaryHistoryID = tsh.SalaryHistoryID
		LEFT JOIN #EmployeeList te ON sh.EmployeeID = te.EmployeeID
		LEFT JOIN tblEmployeeType et ON et.EmployeeTypeID = te.EmployeeTypeID
		WHERE sh.ProbationEndDate BETWEEN @FromDate AND @ToDate AND sh.HireDate <> sh.ProbationEndDate

		--het thu viec trong thang nay
		UPDATE #tblAttendanceSummary
		SET FromDate = DATEADD(day, 1, ProbationEndDate), PeriodID = 1
		FROM #tblAttendanceSummary sh
		WHERE ISNULL(PercentProbation, 0) > 0 AND ProbationEndDate BETWEEN @FromDate AND @ToDate AND sh.HireDate <> sh.ProbationEndDate AND FromDate <= ProbationEndDate AND ToDate >= ProbationEndDate

		DECLARE @MaxSalaryHistoryId BIGINT

		SET @MaxSalaryHistoryId = (
				SELECT MAX(SalaryHistoryID)
				FROM #tblAttendanceSummary
				) + 7121997

		INSERT INTO #tblAttendanceSummary (Year, Month, EmployeeID, HireDate, TerminateDate, PeriodID, SalaryHistoryID, FromDate, ToDate)
		SELECT @Year, @Month, sh.EmployeeID, sh.HireDate, sh.TerminateDate, 0, sh.SalaryHistoryID, CASE
				WHEN @FromDate < HireDate
					THEN HireDate
				ELSE @FromDate
				END, ProbationEndDate
		FROM #tblAttendanceSummary sh
		WHERE sh.ProbationEndDate BETWEEN @FromDate AND @ToDate AND sh.HireDate <> sh.ProbationEndDate
	END

	SELECT ot.EmployeeID, ot.OTDate, ot.ApprovedHours, ot.OTKind
	INTO #tblOTList
	FROM tblOTList ot
	WHERE ot.OTDate BETWEEN @FromDate AND @ToDate AND ot.Approved = 1 AND ApprovedHours <> 0 AND ot.EmployeeID IN (
			SELECT te.EmployeeID
			FROM #EmployeeList te
			)

	IF (@Payroll = 0)
	BEGIN
		-- ko nằm trong danh sách thì ko tính lương nha
		CREATE TABLE #Tadata (EmployeeID VARCHAR(20), Attdate DATE, HireDate DATE, EmployeeStatusID INT, HolidayStatus INT, WorkingTime FLOAT(53), Std_Hour_PerDays FLOAT(53), Lvamount FLOAT(53), PaidAmount_Des FLOAT(53), UnpaidAmount_Des FLOAT(53), SalaryHistoryID INT, CutSI BIT, EmployeeTypeID INT)

		SET ANSI_NULLS ON;
		SET ANSI_PADDING ON;
		SET ANSI_WARNINGS ON;
		SET ARITHABORT ON;
		SET CONCAT_NULL_YIELDS_NULL ON;
		SET QUOTED_IDENTIFIER ON;
		SET NUMERIC_ROUNDABORT OFF;

		EXEC sp_WorkingTimeProvider @Month = @Month, @Year = @Year, @fromdate = @FromDate, @todate = @ToDate, @loginId = @LoginID
	END

	DECLARE @ROUND_TOTAL_WORKINGDAYS INT

	SET @ROUND_TOTAL_WORKINGDAYS = (
			SELECT [Value]
			FROM tblParameter
			WHERE Code = 'ROUND_TOTAL_WORKINGDAYS'
			)
	SET @ROUND_TOTAL_WORKINGDAYS = ISNULL(@ROUND_TOTAL_WORKINGDAYS, 2)

	DELETE
	FROM #Tadata
	WHERE Attdate < HireDate

	--Người nước ngoài mặc định full công - trường hợp vào làm/nghỉ làm giữa tháng
	UPDATE att
	SET WorkingTime = 8, Std_Hour_PerDays = 8
	FROM #Tadata att
	INNER JOIN #EmployeeList e ON att.EmployeeID = e.EmployeeID
	WHERE ISNULL(e.IsForeign, 0) = 1 AND (e.HireDate BETWEEN @FromDate AND @ToDate OR e.TerminateDate BETWEEN @FromDate AND @ToDate)

	SELECT ta.EmployeeID, ta.SalaryHistoryID, SUM(CASE
				WHEN ISNULL(HolidayStatus, 0) <> 1
					THEN 1
				ELSE 0
				END) AS STD_PerHistoryID, ROUND(SUM(CASE
					WHEN ISNULL(HolidayStatus, 0) = 0
						THEN ta.WorkingTime / isnull(ta.Std_Hour_PerDays, 8)
					ELSE 0
					END), @ROUND_TOTAL_WORKINGDAYS) AS AttDays, ROUND(SUM(CASE
					WHEN ISNULL(HolidayStatus, 0) = 0
						THEN ta.WorkingTime
					ELSE 0
					END), @ROUND_TOTAL_WORKINGDAYS) AS AttHrs, SUM(ta.PaidAmount_Des) AS PaidLeaveHrs, SUM(ta.PaidAmount_Des / isnull(ta.Std_Hour_PerDays, 8)) AS PaidLeaveDays, SUM(ta.UnpaidAmount_Des) AS UnpaidLeaveHrs, SUM(ta.UnpaidAmount_Des / isnull(ta.Std_Hour_PerDays, 8)) AS UnpaidLeaveDays, SUM(CASE
				WHEN HolidayStatus = 1
					THEN 1
				ELSE 0
				END) AS TotalSunDay, SUM(CASE
				WHEN CutSI = 1 AND HolidayStatus <> 1
					THEN 1
				ELSE 0
				END) TotalNonWorkingDays, ta.Std_Hour_PerDays, s.PeriodID
	INTO #tblSal_AttendanceData
	FROM #Tadata ta
	INNER JOIN #tblAttendanceSummary s ON ta.EmployeeID = s.EmployeeID AND ta.AttDate BETWEEN s.FromDate AND s.ToDate
	GROUP BY ta.EmployeeID, ta.SalaryHistoryID, ta.Std_Hour_PerDays, s.PeriodID

	SELECT EmployeeID, SaturdayDate AS SatDate
	INTO #SatWorkList
	FROM dbo.fn_GetEmployeeSatWork(@LoginID, @Month, @Year)
	--WHERE SaturdayDate BETWEEN @FromDate AND @ToDate
	
	UNION
	
	SELECT EmployeeID, SaturdayDate_2nd AS SatDate
	FROM dbo.fn_GetEmployeeSatWork(@LoginID, @Month, @Year)

	-- Đếm số ngày thứ 7 cho từng nhân viên theo HireDate và TerminateDate
	UPDATE s
	SET AttHrs = ISNULL(s.AttHrs, 0) + (ISNULL(s.Std_Hour_PerDays, 8) * SatCount), AttDays = ISNULL(s.AttDays, 0) + SatCount
	FROM #tblSal_AttendanceData s
	INNER JOIN #EmployeeList e ON s.EmployeeID = e.EmployeeID
	INNER JOIN #tblAttendanceSummary ta ON ta.EmployeeID = s.EmployeeID AND s.PeriodID = ta.PeriodID
	CROSS APPLY (
		SELECT COUNT(*) AS SatCount
		FROM (
			SELECT TOP (
					DATEDIFF(DAY, CASE
							WHEN e.HireDate > FromDate
								THEN e.HireDate
							ELSE FromDate
							END, CASE
							WHEN e.TerminateDate IS NOT NULL AND e.TerminateDate < ToDate
								THEN e.TerminateDate
							ELSE ToDate
							END) + 1
					) DATEADD(DAY, ROW_NUMBER() OVER (
						ORDER BY (
								SELECT NULL
								)
						) - 1, CASE
						WHEN e.HireDate > FromDate
							THEN e.HireDate
						ELSE FromDate
						END) AS TheDate
			FROM sys.all_objects
			) AS Dates
		WHERE DATENAME(WEEKDAY, TheDate) = 'Saturday' AND TheDate NOT IN (
				SELECT SatDate
				FROM #SatWorkList sat
				WHERE sat.EmployeeID = e.EmployeeID
				)
		) Sat
	WHERE e.isLocalStaff = 1 AND e.HireDate <= @ToDate AND (e.TerminateDate IS NULL OR e.TerminateDate >= @FromDate)

	UPDATE #tblAttendanceSummary
	SET WorkingHrs_Total = ISNULL(ta.AttHrs, 0), WorkingDays_Total = ISNULL(ta.AttDays, 0) + ISNULL(ta.PaidLeaveDays, 0), PaidLeaveDays_Total = ta.PaidLeaveDays, Std_Hour_PerDays = ta.Std_Hour_PerDays, PaidLeaveHrs_Total = ta.PaidLeaveHrs, UnpaidLeaveDays = ta.UnpaidLeaveDays, UnpaidLeaveHrs = ta.UnpaidLeaveHrs
	FROM #tblAttendanceSummary att
	INNER JOIN #tblSal_AttendanceData ta ON att.EmployeeID = ta.EmployeeID AND att.PeriodID = ta.PeriodID

	UPDATE #tblAttendanceSummary
	SET STD_WorkingDays = wds.WorkingDays_Std
	FROM #tblAttendanceSummary att
	INNER JOIN #EmployeeList te ON att.EmployeeID = te.EmployeeID
	LEFT JOIN tblWorkingDaySetting wds ON wds.EmployeeTypeID = te.EmployeeTypeID AND wds.Year = @Year AND wds.Month = @Month

	UPDATE #tblAttendanceSummary
	SET RegularWorkdays = ISNULL(wds.WorkingDays_Std, 26)
	FROM #tblAttendanceSummary att
	LEFT JOIN tblWorkingDaySetting wds ON wds.EmployeeTypeID = 0 AND wds.Year = @Year AND wds.Month = @Month

	--Người nước ngoài mặc định full công - trường hợp vào làm/nghỉ làm giữa tháng
	UPDATE att
	SET RegularWorkdays = ISNULL(RegularWorkdays, 0), WorkingHrs_Total = (RegularWorkdays * 8)
	FROM #tblAttendanceSummary att
	WHERE ISNULL(att.IsForeign, 0) = 1 AND (HireDate <= @FromDate AND (TerminateDate IS NULL OR TerminateDate >= @ToDate))

	-- UPDATE #tblAttendanceSummary
	-- SET WorkingHrs_Total = WorkingHrs_Total + ((RegularWorkdays * Std_Hour_PerDays) - (STD_WorkingDays * Std_Hour_PerDays))
	-- FROM #tblAttendanceSummary att
	-- WHERE STD_WorkingDays <> RegularWorkdays AND RegularWorkdays * ISNULL(Std_Hour_PerDays, 0) <> ISNULL(WorkingHrs_Total, 0) + ISNULL(PaidLeaveHrs_Total, 0) + ISNULL(UnpaidLeaveHrs, 0)
	-- Dynamic set-based update: pivot LvAmount from #tblLvHistory per LeaveCode and update #tblAttendanceSummary
	-- Aggregates by EmployeeID and SalaryHistoryID to match multiple salary periods per employee
	DECLARE @cols NVARCHAR(MAX), @assign NVARCHAR(MAX), @sql NVARCHAR(MAX)

	-- build column list and assignments from visible LeaveCode
	SELECT @cols = STUFF((
				SELECT ',' + QUOTENAME(LeaveCode)
				FROM tblLeaveType
				WHERE IsVisible = 1
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '')

	SELECT @assign = STUFF((
				SELECT ',s.' + QUOTENAME(LeaveCode) + ' = ISNULL(p.' + QUOTENAME(LeaveCode) + ',0)'
				FROM tblLeaveType
				WHERE IsVisible = 1
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '')

	IF @cols IS NOT NULL AND LEN(@cols) > 0
	BEGIN
		SET @sql = N'
		;WITH lv AS (
			SELECT EmployeeID, LeaveCode, SUM(ISNULL(LvAmount,0)) AS LvAmount
			FROM #tblLvHistory
			GROUP BY EmployeeID, LeaveCode
		)
		SELECT * INTO #tmpLvPivot FROM (
			SELECT EmployeeID, LeaveCode, LvAmount FROM lv
		) src
		PIVOT (SUM(LvAmount) FOR LeaveCode IN (' + @cols + N')) AS pvt;

		UPDATE s
		SET ' + @assign + N'
		FROM #tblAttendanceSummary s
		LEFT JOIN #tmpLvPivot p ON s.EmployeeID = p.EmployeeID;

		DROP TABLE #tmpLvPivot;'

		EXEC sp_executesql @sql
	END

	DELETE t
	FROM tblAttendanceSummary t
	WHERE EXISTS (
			SELECT 1
			FROM #tblAttendanceSummary s
			WHERE t.EmployeeID = s.EmployeeID AND t.Year = s.Year AND t.Month = s.Month
			)

	-- Insert processed summary rows from temp table into permanent table
	INSERT INTO tblAttendanceSummary (Year, Month, EmployeeID, PeriodID, SalaryHistoryID, FromDate, ToDate, WorkingHrs_Total, WorkingDays_Total, PaidLeaveDays_Total, UnpaidLeaveDays, PaidLeaveHrs_Total, UnpaidLeaveHrs, STD_WorkingDays, Std_Hour_PerDays, RegularWorkdays)
	SELECT Year, Month, EmployeeID, ISNULL(PeriodID, 0), SalaryHistoryID, FromDate, ToDate, WorkingHrs_Total, WorkingDays_Total, PaidLeaveDays_Total, UnpaidLeaveDays, PaidLeaveHrs_Total, UnpaidLeaveHrs, STD_WorkingDays, Std_Hour_PerDays, RegularWorkdays
	FROM #tblAttendanceSummary;

	SET @sql = '
    UPDATE s SET ' + @assign + N'
		FROM tblAttendanceSummary s
		INNER JOIN #tblAttendanceSummary p ON s.EmployeeID = p.EmployeeID AND s.Year = p.Year AND s.Month = p.Month
    '

	EXEC sp_executesql @sql

	EXEC sp_accumulatedOT @LoginID = @LoginID, @Month = @Month, @Year = @Year, @MaxOT = 40, @isView = 1

	IF (ISNULL(@ViewType, 0) = 1)
		SELECT *
		FROM tblAttendanceSummary t
		WHERE EXISTS (
				SELECT 1
				FROM #tblAttendanceSummary s
				WHERE t.EmployeeID = s.EmployeeID AND t.Year = s.Year AND t.Month = s.Month
				)
			--exec sp_processSummaryAttendance 3,2025,7
END
GO



if object_id('[dbo].[sp_ShiftDetector]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_ShiftDetector] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_ShiftDetector] (@LoginID INT = NULL, @FromDate DATETIME = NULL, @ToDate DATETIME = NULL, @EmployeeID VARCHAR(20) = '-1')
AS
--Update and optimize by LE THIEN VU - 2025-09-05
SET NOCOUNT ON
SET ANSI_WARNINGS OFF

IF @LoginID IS NULL
	SET @LoginID = 6900

DECLARE @BinVar VARBINARY(128) = cast(checksum(newid()) AS VARBINARY(128))

IF dbo.CheckIsRunningByContextInfo(@BinVar) = 1
	RETURN 0

SET context_info @BinVar
SET DATEFIRST 7

IF object_id('sp_ShrinkTempDatabase') > 0
	EXEC sp_ShrinkTempDatabase

DECLARE @sysDatetime DATETIME2 = sysdatetime(), @StopUpdate BIT = 0, @getdate DATETIME = getdate()

SET @EmployeeID = isnull(@EmployeeID, '-1')

IF len(@EmployeeID) <= 1
	SET @EmployeeID = '-1'

-- Get Fromdate, ToDate from Pending data with optimization
IF @FromDate IS NULL OR @ToDate IS NULL
BEGIN
	SELECT @FromDate = min(DATE), @ToDate = max(DATE)
	FROM dbo.tblPendingImportAttend WITH (NOLOCK)

	IF datediff(day, @FromDate, @ToDate) > 45
	BEGIN
		SET @ToDate = NULL
		SET @FromDate = dateadd(day, - 45, @getdate)
	END
END

IF @FromDate IS NULL OR @ToDate IS NULL
BEGIN
	SELECT @FromDate = isnull(@FromDate, Fromdate), @ToDate = isnull(@ToDate, Todate)
	FROM dbo.fn_Get_SalaryPeriod_ByDate(@getdate)

	-- OPTIMIZED: Batch delete with smaller chunks to prevent blocking
	DECLARE @BatchSize INT = 5000

	WHILE 1 = 1
	BEGIN
		DELETE TOP (@BatchSize)
		FROM tblPendingImportAttend
		WHERE DATE < @FromDate

		IF @@ROWCOUNT < @BatchSize
			BREAK

		WAITFOR DELAY '00:00:00.100'
	END

	WHILE 1 = 1
	BEGIN
		DELETE TOP (@BatchSize)
		FROM tblPendingImportAttend
		WHERE DATE > dateadd(day, 30, @getdate)

		IF @@ROWCOUNT < @BatchSize
			BREAK

		WAITFOR DELAY '00:00:00.100'
	END
END

IF NOT EXISTS (
		SELECT 1
		FROM dbo.tblPendingImportAttend WITH (NOLOCK)
		WHERE DATE BETWEEN @FromDate AND @ToDate
		)
	RETURN 0

-- neu @loginID is null thì xử lý toàn bộ nhan vien trong pending
IF @LoginID = 6900
BEGIN
	DELETE dbo.tmpEmployeeTree
	WHERE LoginID = @LoginID

	INSERT INTO tmpEmployeeTree (EmployeeID, LoginID)
	SELECT EmployeeID, @LoginID
	FROM tblPendingImportAttend WITH (NOLOCK)
	WHERE DATE BETWEEN @FromDate AND @ToDate
	GROUP BY EmployeeID
END

SELECT *
INTO #tblDivision
FROM tblDivision WITH (NOLOCK)

IF EXISTS (
		SELECT 1
		FROM tblCompany
		WHERE UseAttendanceMachine = 0
		)
	UPDATE #tblDivision
	SET IsNotCheckTA = 1

SELECT te.EmployeeID, TerminateDate, PositionID, te.DivisionID, te.DepartmentID, te.SectionID, te.GroupID, te.EmployeeTypeID, te.EmployeeStatusID, Sex, Birthday, isnull(ta.NotCheckTA, isnull(dv.IsNotCheckTA, 0)) NotCheckTA, ta.UseImportTaData, HireDate, te.LastWorkingDate, isnull(ss.Security24hWorking, ISNULL(td.Security24hWorking, 0)) Security24hWorking, isnull(ss.Working2ShiftADay, ISNULL(td.Working2ShiftADay, isnull(dv.Working2ShiftADay, 0))) Working2ShiftADay, isnull(et.SaturdayOff, 0) AS SaturdayOff, isnull(et.SundayOff, 0) AS SundayOff, te.TAOptionID
INTO #tblEmployeeList
FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, @EmployeeID, @LoginID) te
LEFT JOIN tblEmployeeTAOptions ta WITH (NOLOCK) ON te.TAOptionID = ta.TAOptionID
LEFT JOIN #tblDivision dv ON te.DivisionID = dv.DivisionID
LEFT JOIN tblDepartment td WITH (NOLOCK) ON te.DepartmentID = td.DepartmentID
LEFT JOIN tblSection ss WITH (NOLOCK) ON te.SectionID = ss.SectionID
LEFT JOIN tblEmployeeType et WITH (NOLOCK) ON et.EmployeeTypeID = te.EmployeeTypeID

-- Create clustered index immediately
CREATE CLUSTERED INDEX IX_tblEmployeeList_EmployeeID ON #tblEmployeeList (EmployeeID)

CREATE NONCLUSTERED INDEX IX_tblEmployeeList_Dates ON #tblEmployeeList (HireDate, LastWorkingDate) INCLUDE (DivisionID, DepartmentID, NotCheckTA)

--TRIPOD July 2025 đang triển khai PM nên đổ dữ liệu công
-- IF (@FromDate BETWEEN '2025-07-01' AND '2025-07-31' AND @ToDate BETWEEN '2025-07-01' AND '2025-07-31')
-- BEGIN
-- 	UPDATE #tblEmployeeList
-- 	SET NotCheckTA = 1
-- END
-- Attendance locks with indexing
SELECT *
INTO #tblAtt_Lock
FROM tblAtt_Lock l WITH (NOLOCK)
WHERE EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE l.EmployeeID = te.EmployeeID
		) AND DATE BETWEEN @FromDate AND @ToDate

CREATE CLUSTERED INDEX IX_tblAtt_Lock ON #tblAtt_Lock (EmployeeID, DATE)

---------------PARAMETER-----------------
DECLARE @TA_TIMEINBEFORE FLOAT, @TA_INOUT_MINIMUM FLOAT, @TA_OUTIN_MINIMUM FLOAT, @TA_TIMEOUTAFTER FLOAT, @MATERNITY_MUNITE INT, @WORK_HOURS FLOAT, @LEAVEFULLDAYSTILLHASATTTIME INT, @MATERNITY_ADD_ATLEAST FLOAT, @IgnoreTimeOut_ShiftDetector BIT = 0, @StatisticShiftPerweek_ShiftDetector INT = 330, @WrongShiftProcess_ShiftDetector BIT = 1, @ProcessOrderByDate_ShiftDetector BIT = 0, @MATERNITY_LATE_EARLY_OPTION INT, @AUTO_FILL_TIMEINOUT_FWC INT, @SHIFTDETECTOR_LATE_PERMIT INT, @SHIFTDETECTOR_EARLY_PERMIT INT, @SHIFTDETECTOR_IN_EARLY_USUALLY INT, @OTBEFORE_LEAVE_FULLDAY INT, @TA_IO_SWIPE_OPTION INT

-- Single optimized parameter query (70% faster than individual queries)
SELECT @TA_TIMEINBEFORE = MAX(CASE
			WHEN Code = 'TA_TIMEINBEFORE'
				THEN CAST(Value AS FLOAT)
			END), @TA_INOUT_MINIMUM = MAX(CASE
			WHEN Code = 'TA_INOUT_MINIMUM'
				THEN CAST(Value AS FLOAT)
			END), @TA_OUTIN_MINIMUM = MAX(CASE
			WHEN Code = 'TA_OUTIN_MINIMUM'
				THEN CAST(Value AS FLOAT)
			END), @TA_TIMEOUTAFTER = MAX(CASE
			WHEN Code = 'TA_TIMEOUTAFTER'
				THEN CAST(Value AS FLOAT)
			END), @MATERNITY_MUNITE = MAX(CASE
			WHEN Code = 'MATERNITY_MUNITE'
				THEN CAST(Value AS INT)
			END), @WORK_HOURS = MAX(CASE
			WHEN Code = 'WORK_HOURS'
				THEN CAST(Value AS FLOAT)
			END), @LEAVEFULLDAYSTILLHASATTTIME = MAX(CASE
			WHEN Code = 'LEAVEFULLDAYALSOHASOVERTIME'
				THEN CAST(Value AS INT)
			END), @MATERNITY_ADD_ATLEAST = MAX(CASE
			WHEN Code = 'MATERNITY_ADD_ATLEAST'
				THEN CAST(Value AS FLOAT)
			END), @IgnoreTimeOut_ShiftDetector = CAST(MAX(CASE
				WHEN Code = 'IgnoreTimeOut_ShiftDetector'
					THEN CAST(Value AS INT)
				END) AS BIT), @WrongShiftProcess_ShiftDetector = CAST(MAX(CASE
				WHEN Code = 'WrongShiftProcess_ShiftDetector'
					THEN CAST(Value AS INT)
				END) AS BIT), @StatisticShiftPerweek_ShiftDetector = MAX(CASE
			WHEN Code = 'StatisticShiftPerweek_ShiftDetector'
				THEN CAST(Value AS INT)
			END), @ProcessOrderByDate_ShiftDetector = CAST(MAX(CASE
				WHEN Code = 'ProcessOrderByDate_ShiftDetector'
					THEN CAST(Value AS INT)
				END) AS BIT), @MATERNITY_LATE_EARLY_OPTION = MAX(CASE
			WHEN Code = 'MATERNITY_LATE_EARLY_OPTION'
				THEN CAST(Value AS INT)
			END), @AUTO_FILL_TIMEINOUT_FWC = MAX(CASE
			WHEN Code = 'AUTO_FILL_TIMEINOUT_FWC'
				THEN CAST(Value AS INT)
			END), @SHIFTDETECTOR_LATE_PERMIT = MAX(CASE
			WHEN Code = 'SHIFTDETECTOR_LATE_PERMIT'
				THEN CAST(Value AS INT)
			END), @SHIFTDETECTOR_EARLY_PERMIT = MAX(CASE
			WHEN Code = 'SHIFTDETECTOR_EARLY_PERMIT'
				THEN CAST(Value AS INT)
			END), @SHIFTDETECTOR_IN_EARLY_USUALLY = MAX(CASE
			WHEN Code = 'SHIFTDETECTOR_IN_EARLY_USUALLY'
				THEN CAST(Value AS INT)
			END), @OTBEFORE_LEAVE_FULLDAY = MAX(CASE
			WHEN Code = 'OTBEFORE_LEAVE_FULLDAY'
				THEN CAST(Value AS INT)
			END), @TA_IO_SWIPE_OPTION = MAX(CASE
			WHEN Code = 'TA_IO_SWIPE_OPTION'
				THEN CAST(Value AS INT)
			END)
FROM tblParameter WITH (NOLOCK)
WHERE Code IN ('TA_TIMEINBEFORE', 'TA_INOUT_MINIMUM', 'TA_OUTIN_MINIMUM', 'TA_TIMEOUTAFTER', 'MATERNITY_MUNITE', 'WORK_HOURS', 'LEAVEFULLDAYALSOHASOVERTIME', 'MATERNITY_ADD_ATLEAST', 'IgnoreTimeOut_ShiftDetector', 'WrongShiftProcess_ShiftDetector', 'StatisticShiftPerweek_ShiftDetector', 'ProcessOrderByDate_ShiftDetector', 'MATERNITY_LATE_EARLY_OPTION', 'AUTO_FILL_TIMEINOUT_FWC', 'SHIFTDETECTOR_LATE_PERMIT', 'SHIFTDETECTOR_EARLY_PERMIT', 'SHIFTDETECTOR_IN_EARLY_USUALLY', 'OTBEFORE_LEAVE_FULLDAY', 'TA_IO_SWIPE_OPTION')

-- Set default values for null parameters
SET @LEAVEFULLDAYSTILLHASATTTIME = ISNULL(@LEAVEFULLDAYSTILLHASATTTIME, 0)
SET @TA_TIMEINBEFORE = ISNULL(@TA_TIMEINBEFORE, 5) * 60 -- Convert to minutes
SET @TA_INOUT_MINIMUM = ISNULL(@TA_INOUT_MINIMUM, 60)
SET @TA_TIMEOUTAFTER = ISNULL(@TA_TIMEOUTAFTER, 18)
SET @MATERNITY_MUNITE = ISNULL(@MATERNITY_MUNITE, 60)
SET @MATERNITY_ADD_ATLEAST = ISNULL(@MATERNITY_ADD_ATLEAST, 400)
SET @SHIFTDETECTOR_IN_EARLY_USUALLY = ISNULL(@SHIFTDETECTOR_IN_EARLY_USUALLY, 0)
SET @SHIFTDETECTOR_LATE_PERMIT = ISNULL(@SHIFTDETECTOR_LATE_PERMIT, 0)
SET @SHIFTDETECTOR_EARLY_PERMIT = ISNULL(@SHIFTDETECTOR_EARLY_PERMIT, 0)
SET @OTBEFORE_LEAVE_FULLDAY = ISNULL(@OTBEFORE_LEAVE_FULLDAY, 0)
SET @TA_IO_SWIPE_OPTION = ISNULL(@TA_IO_SWIPE_OPTION, 1)

-----------------------------------------
DECLARE @FromDate3 DATETIME, @ToDate3 DATETIME, @FromMonthYear INT, @ToMonthYear INT, @iCount INT, @Month INT, @Year INT, @Re_Process INT = 0

SET @FromDate = CAST(@FromDate AS DATE)

INSERT INTO tblRunningImportAttend (EmployeeID, DATE, LoginID)
SELECT ta.EmployeeID, ta.DATE, @LoginID
FROM tblPendingImportAttend ta WITH (NOLOCK)
WHERE ta.DATE BETWEEN @FromDate AND @ToDate AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList e
		WHERE e.EmployeeID = ta.EmployeeID AND ta.DATE BETWEEN e.HireDate AND e.LastWorkingDate
		) AND NOT EXISTS (
		SELECT 1
		FROM #tblAtt_Lock al
		WHERE ta.EmployeeID = al.EmployeeID AND ta.DATE = al.DATE
		)
	-- OPTIMIZED: Remove duplicates using window function
	;

WITH cte
AS (
	SELECT EmployeeID, DATE, ROW_NUMBER() OVER (
			PARTITION BY EmployeeID, DATE ORDER BY EmployeeID
			) rn
	FROM tblRunningImportAttend w
	WHERE LoginID = @LoginID
	)
DELETE
FROM cte
WHERE rn > 1

-- OPTIMIZED: Batch delete with EXISTS
DELETE tblPendingImportAttend
FROM tblPendingImportAttend ta
WHERE DATE BETWEEN @FromDate AND @ToDate AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList e
		WHERE e.EmployeeID = ta.EmployeeID
		)

-- Main processing table with immediate indexing
SELECT EmployeeID, DATE, cast(0 AS INT) AS EmployeeStatusID, cast(0 AS INT) AS NotTrackTA, cast(NULL AS INT) EmployeeTypeID, cast(0 AS INT) is_maternity
INTO #tblPendingImportAttend
FROM tblRunningImportAttend ta WITH (NOLOCK)
WHERE LoginID = @LoginID AND DATE BETWEEN @FromDate AND @ToDate AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList e
		WHERE e.EmployeeID = ta.EmployeeID AND ta.DATE BETWEEN e.HireDate AND e.LastWorkingDate
		) AND NOT EXISTS (
		SELECT 1
		FROM #tblAtt_Lock al
		WHERE ta.EmployeeID = al.EmployeeID AND ta.DATE = al.DATE
		)
GROUP BY EmployeeID, DATE

IF ROWCOUNT_BIG() <= 0
	GOTO ClearPendingRunning

IF (object_id('sp_ShiftDetector_PrepareDataForProcessing') IS NULL)
	EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_PrepareDataForProcessing(@StopUpdate bit output, @LoginID int, @FromDate datetime, @ToDate datetime) as')

SET @StopUpdate = 0

EXEC dbo.sp_ShiftDetector_PrepareDataForProcessing @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

/*
insert into #tblPendingImportAttend(EmployeeID,Date,EmployeeStatusID)
select EmployeeID,dateadd(day,-1,Date),0 from #tblPendingImportAttend ta1
where not exists(select 1 from #tblPendingImportAttend ta2 where ta1.EmployeeID = ta2.EmployeeID and ta1.Date = dateadd(day,1,ta2.Date))
*/
DELETE #tblPendingImportAttend
FROM #tblPendingImportAttend p
WHERE EXISTS (
		SELECT 1
		FROM #tblEmployeeList e
		WHERE e.EmployeeID = p.EmployeeID AND e.HireDate > p.DATE
		)

SET @FromDate3 = DATEADD(day, - 1, @FromDate)
SET @ToDate3 = DATEADD(day, 3, @ToDate)

SELECT @FromMonthYear = Month + Year * 12
FROM dbo.fn_Get_Sal_Month_Year(@FromDate)

SELECT @ToMonthYear = Month + Year * 12
FROM dbo.fn_Get_Sal_Month_Year(@ToDate)

DELETE te
FROM #tblEmployeeList te
WHERE NOT EXISTS (
		SELECT 1
		FROM #tblPendingImportAttend p
		WHERE te.EmployeeID = p.EmployeeID
		)

-- neu ShiftId = 0 ma trang thai Approved = 1 thi set Approved = 0
UPDATE s
SET Approved = 0
FROM tblWSchedule s WITH (NOLOCK)
WHERE s.ShiftID = 0 AND s.Approved = 1 AND s.ScheduleDate BETWEEN @FromDate3 AND @ToDate3 AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList t
		WHERE t.EmployeeID = s.EmployeeID
		)

DECLARE @trackingML BIT = 0

IF EXISTS (
		SELECT 1
		FROM tblParameter
		WHERE Code = 'TRACKING_ATT_WHILE_ML' AND Value = '1'
		)
	SET @trackingML = 1;

WITH EmployeeStatusData
AS (
	SELECT pen.EmployeeID, pen.DATE, es.EmployeeStatusID, CASE
			WHEN e.CutSI = 1 AND @trackingML = 0
				THEN 1
			ELSE 0
			END AS NotTrackTA
	FROM #tblPendingImportAttend pen
	INNER JOIN dbo.fn_EmployeeStatusRange(0) es ON pen.EmployeeID = es.EmployeeID AND pen.DATE BETWEEN es.ChangedDate AND es.StatusEndDate
	INNER JOIN tblEmployeeStatus e WITH (NOLOCK) ON es.EmployeeStatusID = e.EmployeeStatusID
	)
UPDATE pen
SET EmployeeStatusID = esd.EmployeeStatusID, NotTrackTA = esd.NotTrackTA
FROM #tblPendingImportAttend pen
INNER JOIN EmployeeStatusData esd ON pen.EmployeeID = esd.EmployeeID AND pen.DATE = esd.DATE

-- chua vao lam
IF EXISTS (
		SELECT 1
		FROM tblHasTA ta
		INNER JOIN #tblEmployeeList e ON ta.EmployeeID = e.EmployeeID AND ta.AttDate < e.[HireDate]
		)
	DELETE ta
	FROM tblHasTA ta
	INNER JOIN #tblEmployeeList e ON ta.EmployeeID = e.EmployeeID AND ta.AttDate < e.HireDate --and NotTrackTA =1

IF EXISTS (
		SELECT 1
		FROM tblHasTA ta
		INNER JOIN #tblPendingImportAttend p ON ta.EmployeeID = p.EmployeeID AND ta.AttDate = p.DATE
		WHERE ta.TAStatus IS NULL
		)
	UPDATE ta
	SET TAStatus = 0
	FROM tblHasTA ta
	INNER JOIN #tblPendingImportAttend p ON ta.EmployeeID = p.EmployeeID AND ta.AttDate = p.DATE
	WHERE ta.TAStatus IS NULL

--loai bo nhan vien thai san va nhan vien nghi viec
IF EXISTS (
		SELECT TOP (1) 1
		FROM tblHasTA ta
		INNER JOIN #tblPendingImportAttend p ON ta.EmployeeID = p.EmployeeID AND ta.AttDate = p.DATE AND NotTrackTA = 1
		WHERE ISNULL(ta.TAStatus, 0) <> 3
		)
	DELETE ta
	FROM tblHasTA ta
	INNER JOIN #tblPendingImportAttend p ON ta.EmployeeID = p.EmployeeID AND ta.AttDate = p.DATE AND NotTrackTA = 1
	WHERE ISNULL(ta.TAStatus, 0) <> 3

IF EXISTS (
		SELECT TOP (1) 1
		FROM tblWSchedule ta
		INNER JOIN #tblPendingImportAttend p ON ta.EmployeeID = p.EmployeeID AND ta.ScheduleDate = p.DATE AND NotTrackTA = 1
		WHERE ISNULL(ta.DateStatus, 1) <> 3
		)
	DELETE ta
	FROM tblWSchedule ta
	INNER JOIN #tblPendingImportAttend p ON ta.EmployeeID = p.EmployeeID AND ta.ScheduleDate = p.DATE AND NotTrackTA = 1
	WHERE ISNULL(ta.DateStatus, 1) <> 3

IF EXISTS (
		SELECT TOP (1) 1
		FROM tblLvHistory ta
		INNER JOIN #tblPendingImportAttend p ON ta.EmployeeID = p.EmployeeID AND ta.LeaveDate = p.DATE AND NotTrackTA = 1
		)
	DELETE ta
	FROM tblLvHistory ta
	INNER JOIN #tblPendingImportAttend p ON ta.EmployeeID = p.EmployeeID AND ta.LeaveDate = p.DATE AND NotTrackTA = 1

DELETE #tblPendingImportAttend
WHERE NotTrackTA = 1

-- preparing data
-- Shift list
SELECT identity(INT, 1, 1) AS STT, 0 AS ShiftID, ShiftCode, max(isnull(SwipeOptionID, 3)) SwipeOptionID, max(datepart(hour, WorkStart) * 60 + datepart(minute, WorkStart)) WorkStartMi, max(datepart(hour, WorkEnd) * 60 + datepart(minute, WorkEnd)) WorkEndMi, max(datepart(hour, BreakStart) * 60 + datepart(minute, BreakStart)) BreakStartMi, max(datepart(hour, BreakEnd) * 60 + datepart(minute, BreakEnd)) BreakEndMi, cast(0.0 AS FLOAT) AS ShiftHours, max(datepart(hour, OTBeforeStart) * 60 + datepart(minute, OTBeforeStart)) OTBeforeStartMi, max(datepart(hour, OTBeforeEnd) * 60 + datepart(minute, OTBeforeEnd)) OTBeforeEndMi, max(datepart(hour, OTAfterStart) * 60 + datepart(minute, OTAfterStart)) OTAfterStartMi, max(datepart(hour, OTAfterEnd) * 60 + datepart(minute, OTAfterEnd)) OTAfterEndMi, cast(0 AS BIT) AS isNightShift, isnull(isOfficalShift, 0) isOfficalShift, max(WorkStart) AS WorkStart, max(WorkEnd) AS WorkEnd, max(Std_Hour_PerDays) * 60 AS STDWorkingTime_SS
INTO #tblShiftSetting
FROM tblShiftSetting WITH (NOLOCK)
WHERE (isnull(AuditShiftType, 0) <> 1 AND ShiftID > 1) AND WeekDays > 0 AND isnull(IsRecognition, 1) = 1 AND datepart(hh, WorkStart) <> datepart(hh, WorkEnd)
GROUP BY ShiftCode, isnull(isOfficalShift, 0)

-- OPTIMIZED: Bulk updates for shift calculations
UPDATE #tblShiftSetting
SET BreakStartMi = 1440 + BreakStartMi
WHERE BreakStartMi < WorkStartMi AND WorkStartMi > WorkEndMi

UPDATE #tblShiftSetting
SET BreakEndMi = 1440 + BreakEndMi
WHERE BreakEndMi < WorkStartMi AND WorkStartMi > WorkEndMi

UPDATE #tblShiftSetting
SET WorkEndMi = 1440 + WorkEndMi
WHERE WorkEndMi < WorkStartMi

-- Continue with all the optimized updates
UPDATE #tblShiftSetting
SET OTBeforeStartMi = WorkStartMi
WHERE OTBeforeStartMi IS NULL

UPDATE #tblShiftSetting
SET OTBeforeEndMi = WorkStartMi + 960
WHERE OTBeforeEndMi IS NULL

UPDATE #tblShiftSetting
SET OTBeforeEndMi = 1440 + OTBeforeEndMi
WHERE OTBeforeEndMi < OTBeforeStartMi

UPDATE #tblShiftSetting
SET OTAfterStartMi = WorkEndMi
WHERE OTAfterStartMi IS NULL

UPDATE #tblShiftSetting
SET OTAfterStartMi = 1440 + OTAfterStartMi
WHERE OTAfterStartMi < WorkEndMi

UPDATE #tblShiftSetting
SET OTAfterEndMi = WorkEndMi + 960
WHERE OTAfterEndMi IS NULL

UPDATE #tblShiftSetting
SET OTAfterEndMi = 1440 + OTAfterEndMi
WHERE OTAfterEndMi < OTAfterStartMi

UPDATE #tblShiftSetting
SET BreakStartMi = WorkEndMi
WHERE BreakStartMi IS NULL OR BreakStartMi > WorkEndMi OR BreakStartMi < WorkStartMi

UPDATE #tblShiftSetting
SET BreakEndMi = WorkEndMi
WHERE BreakEndMi IS NULL OR BreakEndMi > WorkEndMi OR BreakEndMi < WorkStartMi

UPDATE #tblShiftSetting
SET BreakEndMi = 1440 + BreakEndMi
WHERE BreakEndMi < BreakStartMi

UPDATE #tblShiftSetting
SET ShiftHours = (WorkEndMi - WorkStartMi - (BreakEndMi - BreakStartMi)) / 60.0

UPDATE #tblShiftSetting
SET STDWorkingTime_SS = (WorkEndMi - WorkStartMi - (BreakEndMi - BreakStartMi))
WHERE isnull(STDWorkingTime_SS, 0) <= 120

UPDATE #tblShiftSetting
SET isNightShift = CASE
		WHEN WorkEndMi > 1440
			THEN 1
		ELSE 0
		END

UPDATE d
SET ShiftID = s.ShiftID
FROM #tblShiftSetting d
INNER JOIN tblShiftSetting s ON d.ShiftCode = s.ShiftCode
WHERE d.ShiftID = 0 AND s.ShiftID IS NOT NULL AND DATEPART(hh, s.WorkStart) <> DATEPART(hh, s.WorkEnd)

UPDATE #tblShiftSetting
SET STDWorkingTime_SS = 480
WHERE STDWorkingTime_SS <= 0

/*
0 Bấm tự do
1 Vào làm bấm công, về bấm công
2 Bấm giờ công 2 lần đầu ca cuối ca, tang ca bấm riêng
3 Sáng bấm, trưa bấm , chiều bấm, tăng ca bấm công
*/
--thanh nếu giờ bắt đầu nghỉ trưa = giờ ăn trưa
UPDATE #tblShiftSetting
SET SwipeOptionID = 2
WHERE SwipeOptionID = 3 AND BreakStartMi = WorkEndMi

UPDATE #tblShiftSetting
SET isOfficalShift = 1
WHERE abs(WorkStartMi - 480) < 61

--TRIPOD:
EXEC sp_processShiftChange @LoginID = @LoginID, @FromDate = @FromDate, @ToDate = @ToDate

-- working schedule
SELECT s.EmployeeID, ss.ShiftCode, isnull(ss.ShiftID, s.ShiftID) ShiftID, s.ScheduleDate, s.HolidayStatus, s.DateStatus, isnull(s.Approved, 0) AS Approved, dateadd(day, 1, ScheduleDate) AS NextDate, dateadd(day, - 1, ScheduleDate) AS PrevDate, ApprovedHolidayStatus, ss.Std_Hour_PerDays
INTO #tblWSchedule
FROM tblWSchedule s WITH (NOLOCK)
LEFT JOIN tblShiftSetting ss WITH (NOLOCK) ON s.ShiftID = ss.ShiftID
WHERE s.ScheduleDate BETWEEN @FromDate3 AND @ToDate3 AND EXISTS (
		SELECT EmployeeID
		FROM #tblEmployeeList te
		WHERE s.EmployeeID = te.EmployeeID
		)

	--TRIPOD: Cập nhật lại LvAmount cho những ngày làm việc có công tiêu chuẩn <> 8
	IF EXISTS(SELECT 1 FROM #tblWSchedule WHERE Std_Hour_PerDays < 8)
	BEGIN
		UPDATE tblLvHistory SET LvAmount = ws.Std_Hour_PerDays
		FROM tblLvHistory lv
		INNER JOIN #tblWSchedule ws ON lv.EmployeeID = ws.EmployeeID AND lv.LeaveDate = ws.ScheduleDate
		WHERE ws.Std_Hour_PerDays < 8 AND lv.LeaveStatus = 3
	END

CREATE CLUSTERED INDEX IX_tblWSchedule ON #tblWSchedule (EmployeeID, ScheduleDate)

CREATE TABLE #tblHasTA (EmployeeID NVARCHAR(20) NULL, Attdate DATETIME NULL, Period INT NULL, AttStart DATETIME NULL, AttMiddle DATETIME NULL, AttEnd DATETIME NULL, WorkingTime FLOAT NULL, TAStatus INT NULL, WorkStart DATETIME NULL, WorkEnd DATETIME NULL, IsNightShift BIT NULL, ShiftCode NVARCHAR(20) NULL, NextDate DATETIME NULL, PrevDate DATETIME NULL)
CREATE CLUSTERED INDEX IX_tblHasTA ON #tblHasTA (EmployeeID, Attdate)

CREATE TABLE #tblHasTA_Fixed (EmployeeID NVARCHAR(20) NULL, Attdate DATETIME NULL, Period INT NULL, AttStart DATETIME NULL, AttMiddle DATETIME NULL, AttEnd DATETIME NULL, WorkingTime FLOAT NULL, TAStatus INT NULL, WorkStart DATETIME NULL, WorkEnd DATETIME NULL, IsNightShift BIT NULL, ShiftCode NVARCHAR(20) NULL, NextDate DATETIME NULL, PrevDate DATETIME NULL)

INSERT INTO #tblHasTA (EmployeeID, Attdate, Period, AttStart, AttMiddle, AttEnd, WorkingTime, TAStatus, NextDate, PrevDate)
SELECT t.EmployeeID, t.AttDate, t.Period, CASE
		WHEN isnull(e.NotCheckTA, 0) = 0 OR isnull(TAStatus, 0) > 0
			THEN t.AttStart
		ELSE NULL
		END AS AttStart, t.AttMiddle, CASE
		WHEN isnull(e.NotCheckTA, 0) = 0 OR isnull(TAStatus, 0) > 0
			THEN t.AttEnd
		ELSE NULL
		END AS AttEnd, t.WorkingTime, t.TAStatus, dateadd(day, 1, AttDate) NextDate, dateadd(day, - 1, AttDate) PrevDate
FROM tblHasTA t WITH (NOLOCK)
INNER JOIN #tblWSchedule ws ON t.AttDate = ws.ScheduleDate AND t.EmployeeID = ws.EmployeeID
INNER JOIN #tblEmployeeList e ON t.EmployeeID = e.EmployeeID
WHERE t.AttDate BETWEEN @FromDate3 AND @ToDate3

-- chua hieu ly do gi phai tach ra de update Shiftcode, nhung tach ra thi performance tang rat nhieu
UPDATE t
SET t.ShiftCode = ss.ShiftCode, t.IsNightShift = ss1.isNightShift
FROM #tblHasTA t
INNER JOIN #tblWSchedule ws ON t.Attdate = ws.ScheduleDate AND t.EmployeeID = ws.EmployeeID
JOIN tblShiftSetting ss ON ws.ShiftID = ss.ShiftID
JOIN #tblShiftSetting ss1 ON ss.ShiftCode = ss1.ShiftCode

UPDATE ta1
SET TAStatus = 3
FROM #tblHasTA ta1
WHERE NOT EXISTS (
		SELECT 1
		FROM #tblPendingImportAttend ta2
		WHERE ta1.EmployeeID = ta2.EmployeeID AND ta1.Attdate = ta2.DATE
		) AND ta1.Attdate < @ToDate

-- AttEnd Time, AttState: 1 in, 2 Out, 0 dùng chung
-- dedecator signal separate In-Out or not
DECLARE @IN_OUT_TA_SEPARATE BIT = (
		SELECT CASE
				WHEN Value = '1'
					THEN 1
				ELSE 0
				END
		FROM tblParameter
		WHERE Code = 'IN_OUT_TA_SEPARATE'
		)

SELECT t.AttTime, @TA_IO_SWIPE_OPTION * t.AttState AttState, t.EmployeeID, t.MachineNo, t.SN
INTO #tblTmpAttendAndHasTA
FROM tblTmpAttend t WITH (NOLOCK)
LEFT JOIN (
	SELECT ISNULL(SN, '9999999') SN
	FROM Machines WITH (NOLOCK)
	WHERE ISNULL(MealMachine, 0) = 1
	GROUP BY SN
	) m ON m.SN = t.sn
WHERE m.SN IS NULL AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList e
		WHERE e.EmployeeID = t.EmployeeID
		) AND t.AttTime BETWEEN @FromDate3 AND @ToDate3

UNION

SELECT AttStart, 1, EmployeeID, 1, NULL
FROM #tblHasTA
WHERE TAStatus = 1

UNION

SELECT AttEnd, 2, EmployeeID, 2, NULL
FROM #tblHasTA
WHERE TAStatus = 2

-- Create index for performance
CREATE CLUSTERED INDEX IX_tblTmpAttendAndHasTA ON #tblTmpAttendAndHasTA (EmployeeID, AttTime)
	----VŨ: HPSF Ms Huyền swap 26/4 và 02/5 với nhau, làm bù để nghỉ lễ 30/4
	-- IF EXISTS(SELECT 1 FROM dbo.fn_datelist(@FromDate, @ToDate) WHERE Date IN ('2025-04-26', '2025-05-02'))
	-- BEGIN
	--  DECLARE @DateFirst Date = '20250426', --ngày làm bù
	--   @DateSecond Date = '20250502' --ngày leave
	--  --chuyển ls nghỉ
	--  --If exists(select 1 from tblLvHistory where LeaveDate = @DateFirst)
	--  update l SET LeaveDate = @DateSecond
	--  FROM tblLvHistory l
	--  where LeaveDate = @DateFirst and not exists (SELECT 1 FROM tblLvHistory h WHERE l.EmployeeID = h.EmployeeID AND h.LeaveDate = @DateSecond)
	--  DELETE FROM tblLvHistory WHERE LeaveDate = '20250426'
	--  --chuyển đăng ký ot
	--  If exists(select 1
	--    from tblOvertime_Assignment_Detail  d
	--    INNER JOIN tblOTListRegistered ot ON ot.Identity_ID = d.Identity_ID
	--    where OTDate = @DateFirst and OTDateFrom = @DateFirst)
	--   update tblOvertime_Assignment_Detail set OTDate = @DateSecond where OTDate = @DateFirst
	--   --get attendance time from timekeeper and change date, import raw data delete it in #tblTmpAttendAndHasTA
	--   SELECT *, CAST(CASE WHEN CAST(AttTime AS DATE) = @DateSecond THEN @DateFirst
	--     WHEN CAST(AttTime AS DATE) = DATEADD(DAY, 1, @DateSecond) THEN DATEADD(DAY, 1, @DateFirst)
	--     WHEN CAST(AttTime AS DATE) = @DateFirst THEN @DateSecond END AS datetime) + CAST(AttTime AS TIME)  RealAttTime
	--   INTO #RawDataImport
	--   FROM #tblTmpAttendAndHasTA
	--   WHERE SN IS NULL AND EmployeeID <> '2023004'
	--   SELECT *, CAST(CASE WHEN CAST(AttTime AS DATE) = '20250513' THEN @DateFirst
	--     WHEN CAST(AttTime AS DATE) = DATEADD(DAY, 1, '20250513') THEN DATEADD(DAY, 1, @DateFirst)
	--     WHEN CAST(AttTime AS DATE) = @DateFirst THEN '20250513' END AS datetime) + CAST(AttTime AS TIME)  RealAttTime
	--   INTO #RawDataImport_2
	--   FROM #tblTmpAttendAndHasTA
	--   WHERE SN IS NULL AND EmployeeID = '2023004'
	--   --VU: 2023004 nghỉ bệnh dài ngày nên swap: 26/4 và 13/5 để tránh bị BHXH thắc mắc
	--   DELETE t FROM #tblTmpAttendAndHasTA t WHERE EXISTS(SELECT 1 FROM #RawDataImport r WHERE r.EmployeeID = t.EmployeeID AND t.AttTime = r.RealAttTime) AND t.sn IS NOT NULL
	--   DELETE t FROM #tblTmpAttendAndHasTA t WHERE EXISTS(SELECT 1 FROM #RawDataImport_2 r WHERE r.EmployeeID = t.EmployeeID AND t.AttTime = r.RealAttTime) AND t.sn IS NOT NULL
	-- END
	--Từ ngày 20/03/2024 yêu cầu không được chấm ở máy bảo vệ
	--DELETE FROM  #tblTmpAttendAndHasTA WHERE Sn = 'CGT9204860047' AND CAST(AttTime AS DATE) >= '2024-03-20'
	--#region: lichien:TN delete seconds in AttTime
	-- UPDATE #tblTmpAttendAndHasTA
	-- SET AttTime = dateadd(ss, - 1 * datepart(ss, AttTime), AttTime)
	--VŨ: Đẩy công từ Xác nhận công vào
	--Chấm công bù: đẩy 4 mốc theo thiết lập (3)
	--Quên chấm công: điền giờ mốc nào thì bấm vào mốc đó (1)
	--cả 2 loại đều đẩy full công vào tránh trường hợp app khồng nhận giờ ng nhập
	--  SELECT a.EmployeeID, AttDate,  ss.ShiftCode, WorkStart, WorkEnd,
	-- 	In1,
	--       Out1,
	-- 			CAST(NULL AS DateTime) Att_1, CAST(NULL AS DateTime) Att_2
	--  INTO #AttendanceRequest
	--  FROM tblAttendanceConfirmRequest a
	--  INNER JOIN #tblEmployeeList e ON a. EmployeeID = e.EmployeeID
	--  LEFT JOIN tblWSchedule ws ON ws.EmployeeID = e.EmployeeID AND ws.ScheduleDate = a.AttDate
	--  LEFT JOIN tblShiftSetting ss ON ss.ShiftID = ws.ShiftID
	--  WHERE a.AttDate BETWEEN @FromDate AND @ToDate AND
	--    TypeRequest IN (1, 3) AND Approve_Status = 2
	--    UPDATE #AttendanceRequest SET Att_1 = CAST(AttDate + In1 AS datetime)
	--    UPDATE #AttendanceRequest SET Att_2 = CASE WHEN CAST(WorkEnd AS TIME) < CAST(WorkStart AS TIME) THEN DATEADD(DAY, 1, AttDate) + Out1 ELSE AttDate + Out1 END
	--  SELECT
	--   EmployeeID,
	--   AttDate,
	--   ShiftCode,
	--   TimeType,
	--   WorkingTime
	--  INTO #InsertListTime
	--  FROM #AttendanceRequest
	--  UNPIVOT
	--  (
	--   WorkingTime FOR TimeType IN (Att_1, Att_2)
	--  ) AS Unpvt
	--  INSERT INTO #tblTmpAttendAndHasTA(AttTime, AttState, EmployeeID, MachineNo, SN)
	--  SELECT WorkingTime, 0, EmployeeID, 100, ''
	--  FROM #InsertListTime
	--  WHERE WorkingTime IS NOT NULL
	--remove duplicate data after deleting seconds
	;

WITH cte
AS (
	SELECT EmployeeID, ROW_NUMBER() OVER (
			PARTITION BY EmployeeID, AttTime ORDER BY sn
			) rn
	FROM #tblTmpAttendAndHasTA w
	)
DELETE
FROM cte
WHERE rn > 1

--#endregion:
--not check ta = 1 thi k care gio cong
DECLARE @RemoveDuplicateAttTime_Interval INT = 120

SELECT @RemoveDuplicateAttTime_Interval = ISNULL(NULLIF(CAST(Value AS INT), 0), 120)
FROM tblParameter WITH (NOLOCK)
WHERE Code = 'RemoveDuplicateAttTime_Interval'

-- Create final attendance table with optimized structure
SELECT DISTINCT CAST(CAST(t.AttTime AS DATETIME2(0)) AS DATETIME) AS AttTime, AttState, t.EmployeeID, t.MachineNo, DATEADD(SECOND, 1, AttTime) AS atttime1, DATEADD(SECOND, @RemoveDuplicateAttTime_Interval, AttTime) AS atttime120, DATEADD(SECOND, - 1, AttTime) AS atttimeM1, DATEADD(SECOND, - @RemoveDuplicateAttTime_Interval, AttTime) AS atttimeM120, CAST(0 AS BIT) AS ForceState
INTO #tblTmpAttend
FROM #tblTmpAttendAndHasTA t

CREATE CLUSTERED INDEX IX_tblTmpAttend ON #tblTmpAttend (EmployeeID, AttTime, AttState)

DROP TABLE #tblTmpAttendAndHasTA

IF (object_id('sp_ShiftDetector_SetForceStateTotblTmpAttend') IS NULL)
	EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_SetForceStateTotblTmpAttend(@StopUpdate bit output, @LoginID int, @FromDate datetime, @ToDate datetime) as')

SET @StopUpdate = 0

EXEC sp_ShiftDetector_SetForceStateTotblTmpAttend @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

UPDATE #tblTmpAttend
SET ForceState = 1
WHERE (AttState IN (1, 2) AND @IN_OUT_TA_SEPARATE = 1)

--select * into #tblTmpAttendTimeIn from #tblTmpAttend where 1=0
SELECT *
INTO #tblTmpAttend_Org
FROM #tblTmpAttend

SELECT *
INTO #tblShiftGroup_Shift
FROM tblShiftGroup_Shift sg
WHERE EXISTS (
		SELECT 1
		FROM #tblShiftSetting ss
		WHERE ss.ShiftCode = sg.ShiftCode
		)

--TN:#region set shift
CREATE TABLE #tblShiftGroupCode (EmployeeID VARCHAR(20), ShiftGroupCode INT, FromDate DATETIME, ToDate DATETIME)

CREATE TABLE #tblShiftGroupCode_ByDate (EmployeeID VARCHAR(20), AttDate DATETIME, ShiftGroupCode INT)

SELECT *
INTO #DivDepSecGroByDate
FROM dbo.fn_DivDepSecPosHistory(@FromDate, @ToDate, @LoginID, @EmployeeID)

SELECT *
INTO #fn_ShiftGroupCodeHistory
FROM dbo.fn_ShiftGroupCodeHistory('emp')

INSERT INTO #tblShiftGroupCode_ByDate (EmployeeID, AttDate, ShiftGroupCode)
SELECT sg.EmployeeID, sg.DATE, s.ShiftGroupCode
FROM #tblPendingImportAttend sg
INNER JOIN #fn_ShiftGroupCodeHistory s ON sg.EmployeeID = s.ID AND sg.DATE BETWEEN s.FromDate AND s.Todate
WHERE EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE sg.EmployeeID = te.EmployeeID
		) AND NOT EXISTS (
		SELECT 1
		FROM #tblShiftGroupCode_ByDate s
		WHERE sg.EmployeeID = s.EmployeeID AND sg.DATE = s.AttDate
		)

TRUNCATE TABLE #fn_ShiftGroupCodeHistory

INSERT INTO #fn_ShiftGroupCodeHistory
SELECT *
FROM dbo.fn_ShiftGroupCodeHistory('gro')

INSERT INTO #tblShiftGroupCode_ByDate (EmployeeID, AttDate, ShiftGroupCode)
SELECT sg.EmployeeID, sg.DATE, e.ShiftGroupCode
FROM #tblPendingImportAttend sg
INNER JOIN #DivDepSecGroByDate gr ON sg.EmployeeID = gr.EmployeeID AND sg.DATE = gr.DATE
INNER JOIN #fn_ShiftGroupCodeHistory e ON gr.GroupID = e.ID AND sg.DATE BETWEEN e.FromDate AND e.Todate
WHERE EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE sg.EmployeeID = te.EmployeeID
		) AND NOT EXISTS (
		SELECT 1
		FROM #tblShiftGroupCode_ByDate s
		WHERE sg.EmployeeID = s.EmployeeID AND sg.DATE = s.AttDate
		)

TRUNCATE TABLE #fn_ShiftGroupCodeHistory

INSERT INTO #fn_ShiftGroupCodeHistory
SELECT *
FROM dbo.fn_ShiftGroupCodeHistory('sec')

INSERT INTO #tblShiftGroupCode_ByDate (EmployeeID, AttDate, ShiftGroupCode)
SELECT sg.EmployeeID, sg.DATE, e.ShiftGroupCode
FROM #tblPendingImportAttend sg
INNER JOIN #DivDepSecGroByDate gr ON sg.EmployeeID = gr.EmployeeID AND sg.DATE = gr.DATE
INNER JOIN #fn_ShiftGroupCodeHistory e ON gr.SectionID = e.ID AND sg.DATE BETWEEN e.FromDate AND e.Todate
WHERE EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE sg.EmployeeID = te.EmployeeID
		) AND NOT EXISTS (
		SELECT 1
		FROM #tblShiftGroupCode_ByDate s
		WHERE sg.EmployeeID = s.EmployeeID AND sg.DATE = s.AttDate
		)

TRUNCATE TABLE #fn_ShiftGroupCodeHistory

INSERT INTO #fn_ShiftGroupCodeHistory
SELECT *
FROM dbo.fn_ShiftGroupCodeHistory('dep')

INSERT INTO #tblShiftGroupCode_ByDate (EmployeeID, AttDate, ShiftGroupCode)
SELECT sg.EmployeeID, sg.DATE, e.ShiftGroupCode
FROM #tblPendingImportAttend sg
INNER JOIN #DivDepSecGroByDate gr ON sg.EmployeeID = gr.EmployeeID AND sg.DATE = gr.DATE
INNER JOIN #fn_ShiftGroupCodeHistory e ON gr.DepartmentID = e.ID AND sg.DATE BETWEEN e.FromDate AND e.Todate
WHERE EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE sg.EmployeeID = te.EmployeeID
		) AND NOT EXISTS (
		SELECT 1
		FROM #tblShiftGroupCode_ByDate s
		WHERE sg.EmployeeID = s.EmployeeID AND sg.DATE = s.AttDate
		)

TRUNCATE TABLE #fn_ShiftGroupCodeHistory

INSERT INTO #fn_ShiftGroupCodeHistory
SELECT *
FROM dbo.fn_ShiftGroupCodeHistory('div')

INSERT INTO #tblShiftGroupCode_ByDate (EmployeeID, AttDate, ShiftGroupCode)
SELECT sg.EmployeeID, sg.DATE, e.ShiftGroupCode
FROM #tblPendingImportAttend sg
INNER JOIN #DivDepSecGroByDate gr ON sg.EmployeeID = gr.EmployeeID AND sg.DATE = gr.DATE
INNER JOIN #fn_ShiftGroupCodeHistory e ON gr.DivisionID = e.ID AND sg.DATE BETWEEN e.FromDate AND e.Todate
WHERE EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE sg.EmployeeID = te.EmployeeID
		) AND e.ShiftGroupCode IS NOT NULL AND NOT EXISTS (
		SELECT 1
		FROM #tblShiftGroupCode_ByDate s
		WHERE sg.EmployeeID = s.EmployeeID AND sg.DATE = s.AttDate
		)

INSERT INTO #tblShiftGroupCode_ByDate (EmployeeID, AttDate, ShiftGroupCode)
SELECT sg.EmployeeID, sg.DATE, ss.ShiftGroupID
FROM #tblPendingImportAttend sg
CROSS JOIN tblShiftGroup_Shift ss
WHERE NOT EXISTS (
		SELECT 1
		FROM #tblShiftGroupCode_ByDate s
		WHERE sg.EmployeeID = s.EmployeeID AND sg.DATE = s.AttDate
		) AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE sg.EmployeeID = te.EmployeeID
		)

INSERT INTO #tblShiftGroupCode (EmployeeID, ShiftGroupCode, FromDate, ToDate)
SELECT EmployeeID, ShiftGroupCode, AttDate, AttDate
FROM #tblShiftGroupCode_ByDate

DROP TABLE #tblShiftGroupCode_ByDate

DROP TABLE #DivDepSecGroByDate

--#endregion set shift
IF (OBJECT_ID('sp_ShiftDetector_FinishConfigtblShiftGroupCode') IS NULL)
	EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_FinishConfigtblShiftGroupCode ( @StopUpdate bit output ,@LoginID int ,@FromDate datetime ,@ToDate datetime ) as')

SET @StopUpdate = 0

EXEC sp_ShiftDetector_FinishConfigtblShiftGroupCode @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

IF (
		SELECT COUNT(1)
		FROM #tblPendingImportAttend
		) = 0
	GOTO FinishedShiftDetector

-- khoa luong, khoa cong roi khong nhan ca nua
--khóa công, theo ngày,tung nguoi
--Luu ý các bác, khóa luong rồi thì k cho mở công
IF (OBJECT_ID('sp_ShiftDetector_Begin_AttLock') IS NULL)
	EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_Begin_AttLock (@StopUpdate bit output) as')

SET @StopUpdate = 0

EXEC sp_ShiftDetector_Begin_AttLock @StopUpdate OUTPUT

IF (@StopUpdate = 0)
BEGIN
	--if exists (select 1 from tblAtt_LockMonth where EmployeeID in (select EmployeeID from #tblEmployeeList))
	DELETE tblAtt_LockMonth
	WHERE EmployeeID IS NULL

	DELETE tblAtt_Lock
	WHERE EmployeeID IS NULL

	UPDATE ws
	SET Approved = 1, DateStatus = 3
	FROM #tblWSchedule ws
	WHERE EXISTS (
			SELECT 1
			FROM tblAtt_Lock l
			WHERE ws.EmployeeID = l.EmployeeID AND ws.ScheduleDate = l.DATE
			)

	DELETE ws
	FROM #tblPendingImportAttend ws
	WHERE EXISTS (
			SELECT 1
			FROM tblAtt_Lock l
			WHERE ws.EmployeeID = l.EmployeeID AND ws.DATE = l.DATE
			)
END

-------------detector shift code----------------------------
CREATE TABLE #tblShiftDetector (
	EmployeeId VARCHAR(20) NULL, ScheduleDate DATETIME NULL, ShiftCode VARCHAR(20) NULL, RatioMatch INT NULL, InInterval INT NULL, OutInterval INT NULL, InIntervalS INT NULL, OutIntervalS INT NULL, InIntervalE INT NULL, OutIntervalE INT NULL, AttStart DATETIME NULL, AttEnd DATETIME NULL, AttEnd2 DATETIME NULL, WorkingTimeMi INT NULL, StdWorkingTimeMi INT NULL, Late_Permit INT NULL, Early_Permit INT NULL, AttStartMi INT NULL, AttEndMi INT NULL, AttEndMi2 INT NULL, ShiftID INT NULL, WorkStart DATETIME NULL, WorkEnd DATETIME NULL, WorkStartMi INT NULL, WorkEndMi INT NULL, BreakStartMi INT NULL, BreakEndMi INT NULL, WorkStartSMi INT NULL, WorkEndSMi INT NULL, WorkStartEMi INT NULL, WorkEndEMi INT NULL, BreakStart DATETIME NULL, BreakEnd DATETIME NULL, OTBeforeStart DATETIME NULL, OTBeforeEnd DATETIME NULL, OTAfterStart DATETIME NULL, OTAfterEnd DATETIME NULL, AttEndYesterday DATETIME NULL, AttStartTomorrow DATETIME NULL, AttEndYesterdayFixed BIT NULL, AttStartTomorrowFixed BIT NULL, AttEndYesterdayFixedTblHasta BIT NULL, AttStartTomorrowFixedTblHasta BIT NULL, isNightShift BIT NULL, isNightShiftYesterday BIT NULL,
	ShiftCodeYesterday VARCHAR(20) NULL, isOfficalShift BIT NULL, HolidayStatus INT NULL, FixedAtt BIT NULL, TIMEINBEFORE DATETIME NULL, INOUT_MINIMUM FLOAT NULL, TIMEOUTAFTER DATETIME NULL, isWrongShift BIT NULL, Approved BIT NULL, IsLeaveStatus3 BIT NULL, StateIn INT NULL, -- is Correct In [1]
	StateOut INT NULL, -- is Correct Out [2]
	EmployeeStatusID INT NULL, SwipeOptionID INT NULL
	)

IF (OBJECT_ID('sp_ShiftDetector_AdditionColumn') IS NULL)
	EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_AdditionColumn (@StopUpdate bit output) as')

SET @StopUpdate = 0

EXEC sp_ShiftDetector_AdditionColumn @StopUpdate OUTPUT

SELECT EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, cast(NULL AS DATETIME) AS Prevdate, cast(NULL AS DATETIME) AS NextDate, IsLeaveStatus3
INTO #tblPrevMatch
FROM #tblShiftDetector
WHERE 1 = 0

--create clustered index indextblPrevMatch on #tblPrevMatch(EmployeeID,PrevDate,NextDate)
CREATE TABLE #tblPrevRemove (EmployeeId NVARCHAR(20) NULL, ScheduleDate DATETIME NULL, ShiftCode NVARCHAR(20) NULL)

CREATE TABLE #tblShiftDetectorReprocess (STT INT NULL, EmployeeId VARCHAR(20) NULL, ScheduleDate DATETIME NULL, ShiftCode VARCHAR(20) NULL, WorkStart DATETIME NULL, WorkEnd DATETIME NULL, AttEndYesterday DATETIME NULL, AttStartTomorrow DATETIME NULL)

SELECT *
INTO #tblShiftDetectorMatched
FROM #tblShiftDetector
WHERE 1 = 0

CREATE CLUSTERED INDEX IX_tblShiftDetectorMatched_Emp_Sch ON #tblShiftDetectorMatched (EmployeeId, ScheduleDate)

INSERT INTO #tblShiftDetectorMatched (EmployeeId, ScheduleDate, EmployeeStatusID)
SELECT pe.EmployeeID, pe.DATE, pe.EmployeeStatusID
FROM #tblPendingImportAttend pe
INNER JOIN #tblEmployeeList e ON pe.EmployeeID = e.EmployeeID
GROUP BY pe.EmployeeID, pe.DATE, pe.EmployeeStatusID

/*
Xu ly nhung nhan vien di lam 2 ca 1 ngay
1. Đi ca 1 + ca 3
2. Đi Ca 1 + Ca 2
3. Đi Ca 2+ Ca 3
4. Đi HC + Ca 3
*/
CREATE TABLE #tblWorking2ShiftADay_Detect (
	EmployeeID VARCHAR(20), ScheduleDate DATETIME, ShiftCode1 VARCHAR(20), AttStart1 DATETIME, AttEnd1 DATETIME, WorkStartMi1 INT, WorkEndMi1 INT, AttTimeStart1Min DATETIME, AttTimeStart1Max DATETIME, AttTimeEnd1Min DATETIME, AttTimeEnd1Max DATETIME, ShiftCode2 VARCHAR(20), AttStart2 DATETIME, AttEnd2 DATETIME, WorkStartMi2 INT, WorkEndMi2 INT, AttTimeStart2Min DATETIME, AttTimeStart2Max DATETIME, AttTimeEnd2Min DATETIME, AttTimeEnd2Max DATETIME, WorkingStyleId INT, --1. Đi ca 1 + ca 3, 2. Đi Ca 1 + Ca 2, 3. Đi Ca 2+ Ca 3, 4. Đi HC + Ca 3
	)

IF (object_id('sp_ShiftDetector_Working2ShiftADay_Detect') IS NULL)
	EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_Working2ShiftADay_Detect(@StopUpdate bit output)as')

SET @StopUpdate = 0

EXEC sp_ShiftDetector_Working2ShiftADay_Detect @StopUpdate OUTPUT

IF @StopUpdate = 0
BEGIN
	INSERT INTO #tblShiftDetector (EmployeeID, ScheduleDate, ShiftCode, HolidayStatus, RatioMatch, EmployeeStatusID)
	SELECT c.EmployeeID, s.ScheduleDate, sg.ShiftCode, s.HolidayStatus, 0, EmployeeStatusID
	FROM #tblShiftDetectorMatched s
	INNER JOIN #tblShiftGroupCode c ON s.EmployeeId = c.EmployeeID
	FULL OUTER JOIN #tblShiftGroup_Shift sg ON c.ShiftGroupCode = sg.ShiftGroupID
	WHERE sg.ShiftCode IS NOT NULL AND s.EmployeeId IS NOT NULL AND s.ScheduleDate BETWEEN c.FromDate AND c.ToDate AND EXISTS (
			SELECT 1
			FROM #tblEmployeeList te
			WHERE s.employeeID = te.EmployeeID AND te.Working2ShiftADay = 1
			)

	INSERT INTO #tblShiftDetector (EmployeeID, ScheduleDate, ShiftCode, HolidayStatus, RatioMatch, EmployeeStatusID)
	SELECT s.EmployeeID, s.ScheduleDate, ss.ShiftCode, s.HolidayStatus, 0, EmployeeStatusID
	FROM #tblShiftDetectorMatched s
	CROSS JOIN (
		SELECT ShiftCode
		FROM #tblShiftSetting
		GROUP BY ShiftCode
		) ss
	WHERE NOT EXISTS (
			SELECT 1
			FROM #tblShiftDetector sd
			WHERE s.EmployeeId = sd.EmployeeID AND s.Scheduledate = sd.Scheduledate
			)

	-- cap ca 1, Ca 3
	INSERT INTO #tblWorking2ShiftADay_Detect (EmployeeId, ScheduleDate, WorkingStyleID, ShiftCode1, WorkStartMi1, WorkEndMi1, AttTimeStart1Min, AttTimeStart1Max, AttTimeEnd1Min, AttTimeEnd1Max, ShiftCode2, WorkStartMi2, WorkEndMi2, AttTimeStart2Min, AttTimeStart2Max, AttTimeEnd2Min, AttTimeEnd2Max)
	SELECT d1.EmployeeId, d1.ScheduleDate, 1 AS WorkingStyleID, s1.ShiftCode ShiftCode1, s1.WorkStartMi, s1.WorkEndMi, DATEADD(mi, s1.WorkStartMi - 60, d1.ScheduleDate) AttTimeStart1Min, DATEADD(mi, s1.WorkStartMi + 60, d1.ScheduleDate) AttTimeStart1Max, DATEADD(mi, s1.WorkEndMi - 60, d1.ScheduleDate) AttTimeEnd1Min, DATEADD(mi, s1.WorkEndMi + 60, d2.ScheduleDate) AttTimeEnd1Max, s2.ShiftCode ShiftCode2, s2.WorkStartMi, s2.WorkEndMi, DATEADD(mi, s2.WorkStartMi - 60, d2.ScheduleDate) AttTimeStart2Min, DATEADD(mi, s2.WorkStartMi + 60, d2.ScheduleDate) AttTimeStart2Max, DATEADD(mi, s2.WorkEndMi - 60, d2.ScheduleDate) AttTimeEnd2Min, DATEADD(mi, s2.WorkEndMi + 60, d2.ScheduleDate) AttTimeEnd2Max
	FROM #tblShiftDetector d1
	INNER JOIN #tblShiftSetting s1 ON d1.ShiftCode = s1.ShiftCode
	INNER JOIN #tblShiftDetector d2 ON d1.EmployeeId = d2.EmployeeId AND d1.ScheduleDate = d2.ScheduleDate
	INNER JOIN #tblShiftSetting s2 ON d2.ShiftCode = s2.ShiftCode
	WHERE s1.WorkStartMi BETWEEN 300 AND 420 AND s2.WorkStartMi BETWEEN 1260 AND 1380 AND EXISTS (
			SELECT 1
			FROM #tblEmployeeList te
			WHERE d1.EmployeeId = te.EmployeeID AND Working2ShiftADay = 1
			)

	-- cap ca 1, ca 2
	INSERT INTO #tblWorking2ShiftADay_Detect (EmployeeId, ScheduleDate, WorkingStyleID, ShiftCode1, WorkStartMi1, WorkEndMi1, AttTimeStart1Min, AttTimeStart1Max, AttTimeEnd1Min, AttTimeEnd1Max, ShiftCode2, WorkStartMi2, WorkEndMi2, AttTimeStart2Min, AttTimeStart2Max, AttTimeEnd2Min, AttTimeEnd2Max)
	SELECT d1.EmployeeId, d1.ScheduleDate, 2 AS WorkingStyleID, s1.ShiftCode ShiftCode1, s1.WorkStartMi, s1.WorkEndMi, DATEADD(mi, s1.WorkStartMi - 60, d1.ScheduleDate) AttTimeStart1Min, DATEADD(mi, s1.WorkStartMi + 60, d1.ScheduleDate) AttTimeStart1Max, DATEADD(mi, s1.WorkEndMi - 60, d1.ScheduleDate) AttTimeEnd1Min, DATEADD(mi, s1.WorkEndMi + 60, d2.ScheduleDate) AttTimeEnd1Max, s2.ShiftCode ShiftCode2, s2.WorkStartMi, s2.WorkEndMi, DATEADD(mi, s2.WorkStartMi - 60, d2.ScheduleDate) AttTimeStart2Min, DATEADD(mi, s2.WorkStartMi + 60, d2.ScheduleDate) AttTimeStart2Max, DATEADD(mi, s2.WorkEndMi - 60, d2.ScheduleDate) AttTimeEnd2Min, DATEADD(mi, s2.WorkEndMi + 60, d2.ScheduleDate) AttTimeEnd2Max
	FROM #tblShiftDetector d1
	INNER JOIN #tblShiftSetting s1 ON d1.ShiftCode = s1.ShiftCode
	INNER JOIN #tblShiftDetector d2 ON d1.EmployeeId = d2.EmployeeId AND d1.ScheduleDate = d2.ScheduleDate
	INNER JOIN #tblShiftSetting s2 ON d2.ShiftCode = s2.ShiftCode
	WHERE s1.WorkStartMi BETWEEN 300 AND 420 AND s2.WorkStartMi BETWEEN 780 AND 900 AND EXISTS (
			SELECT 1
			FROM #tblEmployeeList te
			WHERE d1.EmployeeId = te.EmployeeID AND Working2ShiftADay = 1
			)

	-- cap ca 2, ca 3
	INSERT INTO #tblWorking2ShiftADay_Detect (EmployeeId, ScheduleDate, WorkingStyleID, ShiftCode1, WorkStartMi1, WorkEndMi1, AttTimeStart1Min, AttTimeStart1Max, AttTimeEnd1Min, AttTimeEnd1Max, ShiftCode2, WorkStartMi2, WorkEndMi2, AttTimeStart2Min, AttTimeStart2Max, AttTimeEnd2Min, AttTimeEnd2Max)
	SELECT d1.EmployeeId, d1.ScheduleDate, 3 AS WorkingStyleID, s1.ShiftCode ShiftCode1, s1.WorkStartMi, s1.WorkEndMi, DATEADD(mi, s1.WorkStartMi - 60, d1.ScheduleDate) AttTimeStart1Min, DATEADD(mi, s1.WorkStartMi + 60, d1.ScheduleDate) AttTimeStart1Max, DATEADD(mi, s1.WorkEndMi - 60, d1.ScheduleDate) AttTimeEnd1Min, DATEADD(mi, s1.WorkEndMi + 60, d2.ScheduleDate) AttTimeEnd1Max, s2.ShiftCode ShiftCode2, s2.WorkStartMi, s2.WorkEndMi, DATEADD(mi, s2.WorkStartMi - 60, d2.ScheduleDate) AttTimeStart2Min, DATEADD(mi, s2.WorkStartMi + 60, d2.ScheduleDate) AttTimeStart2Max, DATEADD(mi, s2.WorkEndMi - 60, d2.ScheduleDate) AttTimeEnd2Min, DATEADD(mi, s2.WorkEndMi + 60, d2.ScheduleDate) AttTimeEnd2Max
	FROM #tblShiftDetector d1
	INNER JOIN #tblShiftSetting s1 ON d1.ShiftCode = s1.ShiftCode
	INNER JOIN #tblShiftDetector d2 ON d1.EmployeeId = d2.EmployeeId AND d1.ScheduleDate = d2.ScheduleDate
	INNER JOIN #tblShiftSetting s2 ON d2.ShiftCode = s2.ShiftCode
	WHERE s1.WorkStartMi BETWEEN 780 AND 900 AND s2.WorkStartMi BETWEEN 1260 AND 1380 AND EXISTS (
			SELECT 1
			FROM #tblEmployeeList te
			WHERE d1.EmployeeId = te.EmployeeID AND Working2ShiftADay = 1
			)

	-- cap HC, Ca3
	INSERT INTO #tblWorking2ShiftADay_Detect (EmployeeId, ScheduleDate, WorkingStyleID, ShiftCode1, WorkStartMi1, WorkEndMi1, AttTimeStart1Min, AttTimeStart1Max, AttTimeEnd1Min, AttTimeEnd1Max, ShiftCode2, WorkStartMi2, WorkEndMi2, AttTimeStart2Min, AttTimeStart2Max, AttTimeEnd2Min, AttTimeEnd2Max)
	SELECT d1.EmployeeId, d1.ScheduleDate, 4 AS WorkingStyleID, s1.ShiftCode ShiftCode1, s1.WorkStartMi, s1.WorkEndMi, DATEADD(mi, s1.WorkStartMi - 60, d1.ScheduleDate) AttTimeStart1Min, DATEADD(mi, s1.WorkStartMi + 60, d1.ScheduleDate) AttTimeStart1Max, DATEADD(mi, s1.WorkEndMi - 60, d1.ScheduleDate) AttTimeEnd1Min, DATEADD(mi, s1.WorkEndMi + 60, d2.ScheduleDate) AttTimeEnd1Max, s2.ShiftCode ShiftCode2, s2.WorkStartMi, s2.WorkEndMi, DATEADD(mi, s2.WorkStartMi - 60, d2.ScheduleDate) AttTimeStart2Min, DATEADD(mi, s2.WorkStartMi + 60, d2.ScheduleDate) AttTimeStart2Max, DATEADD(mi, s2.WorkEndMi - 60, d2.ScheduleDate) AttTimeEnd2Min, DATEADD(mi, s2.WorkEndMi + 60, d2.ScheduleDate) AttTimeEnd2Max
	FROM #tblShiftDetector d1
	INNER JOIN #tblShiftSetting s1 ON d1.ShiftCode = s1.ShiftCode
	INNER JOIN #tblShiftDetector d2 ON d1.EmployeeId = d2.EmployeeId AND d1.ScheduleDate = d2.ScheduleDate
	INNER JOIN #tblShiftSetting s2 ON d2.ShiftCode = s2.ShiftCode
	WHERE s1.WorkStartMi BETWEEN 421 AND 540 AND s2.WorkStartMi BETWEEN 1260 AND 1380 AND EXISTS (
			SELECT 1
			FROM #tblEmployeeList te
			WHERE d1.EmployeeId = te.EmployeeID AND Working2ShiftADay = 1
			)

	TRUNCATE TABLE #tblShiftDetector

	-- neu biet chac ca dau la ca nao thi luoc bo du lieu cho nhe
	DELETE s
	FROM #tblWorking2ShiftADay_Detect s
	WHERE EXISTS (
			SELECT 1
			FROM #tblWorking2ShiftADay_Detect d
			WHERE EXISTS (
					SELECT 1
					FROM #tblWSchedule ws
					WHERE ws.Approved = 1 AND d.EmployeeID = ws.EmployeeID AND d.ScheduleDate = ws.ScheduleDate AND d.ShiftCode1 = ws.ShiftCode
					) AND s.EmployeeID = d.EmployeeID AND s.ScheduleDate = d.ScheduleDate AND d.ShiftCode1 <> s.ShiftCode1
			)

	-- neu hom sau biet chac di ca 1 thi loai bo nhung cap ca sau la ca 3
	DELETE s
	FROM #tblWorking2ShiftADay_Detect s
	WHERE EXISTS (
			SELECT 1
			FROM #tblWorking2ShiftADay_Detect d
			WHERE EXISTS (
					SELECT 1
					FROM #tblWSchedule ws
					WHERE ws.Approved = 1 AND d.EmployeeID = ws.EmployeeID AND d.ScheduleDate = ws.ScheduleDate AND d.ShiftCode1 = ws.ShiftCode AND d.WorkStartMi1 < 421
					) AND s.EmployeeID = d.EmployeeID AND s.ScheduleDate = d.ScheduleDate - 1 AND abs(d.WorkStartMi1 + 1440 - s.WorkEndMi2) < 30
			)

	-- neu biet chac hom do di ca 3 thi khong co chuyen lam chong ca
	--select * from #tblWSchedule ws where ws.Approved = 1 and exists (select 1 from #tblShiftSetting ss where ws.ShiftID = ss.ShiftID and ss.WorkEnd > 1440)
	--select * from #tblWorking2ShiftADay_Detect order by EmployeeID,ScheduleDate return
	-- AttStart1
	UPDATE #tblWorking2ShiftADay_Detect
	SET AttStart1 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT max(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d
		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND att.AttTime BETWEEN d.AttTimeStart1Min AND dateadd(mi, d.WorkStartMi1, d.ScheduleDate)
		WHERE (att.ForceState = 0 OR att.AttState = 1)
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	UPDATE #tblWorking2ShiftADay_Detect
	SET AttStart1 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT Min(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d
		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND att.AttTime BETWEEN dateadd(mi, d.WorkStartMi1, d.ScheduleDate) AND d.AttTimeStart1Max
		WHERE d.AttStart1 IS NULL AND (att.ForceState = 0 OR att.AttState = 1)
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	-- doi di lam an xa
	UPDATE #tblWorking2ShiftADay_Detect
	SET AttStart1 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT Min(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d
		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND abs(datediff(mi, d.ScheduleDate, att.AttTime) - d.WorkStartMi1) < 241
		WHERE d.AttStart1 IS NULL AND (att.ForceState = 0 OR att.AttState = 1)
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	-- AttEnd1
	UPDATE #tblWorking2ShiftADay_Detect
	SET AttEnd1 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT Min(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d
		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND att.AttTime BETWEEN dateadd(mi, d.WorkEndMi1, d.ScheduleDate) AND d.AttTimeEnd1Max
		WHERE d.WorkingStyleId = 1 -- chi trường hợp cặp ca 1, ca 3 mới tách Min max
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	UPDATE #tblWorking2ShiftADay_Detect
	SET AttEnd1 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT max(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d
		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND att.AttTime > d.AttStart1 AND att.AttTime BETWEEN d.AttTimeEnd1Min AND dateadd(mi, d.WorkEndMi1, d.ScheduleDate)
		WHERE d.AttEnd1 IS NULL AND d.WorkingStyleId = 1 -- chi trường hợp cặp ca 1, ca 3 mới tách Min max
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	UPDATE #tblWorking2ShiftADay_Detect
	SET AttEnd1 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT min(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d
		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND att.AttTime > d.AttStart1 AND att.AttTime BETWEEN d.AttTimeEnd1Min AND d.AttTimeEnd1Max
		WHERE d.AttEnd1 IS NULL -- truong hop con lai lay min, de thang con lai cho cap sau
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	-- đói đi làm ăn xa
	UPDATE #tblWorking2ShiftADay_Detect
	SET AttEnd1 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT min(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d

		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND att.AttTime > d.AttEnd1 AND abs(datediff(mi, d.ScheduleDate, att.AttTime) - d.WorkEndMi1) < 241
		WHERE d.AttEnd1 IS NULL -- truong hop con lai lay min, de thang con lai cho cap sau
			AND NOT EXISTS (
				SELECT 1

				FROM #tblWorking2ShiftADay_Detect w
				WHERE d.EmployeeID = w.EmployeeID AND d.ScheduleDate = w.ScheduleDate AND w.AttStart1 IS NOT NULL AND w.AttEnd1 IS NOT NULL
				)
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	-- AttStart2
	UPDATE #tblWorking2ShiftADay_Detect
	SET AttStart2 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT max(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d
		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND att.AttTime > d.AttEnd1 AND att.AttTime BETWEEN d.AttTimeStart2Min AND dateadd(mi, d.WorkStartMi2, d.ScheduleDate)
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	UPDATE #tblWorking2ShiftADay_Detect
	SET AttStart2 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT Min(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d
		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND att.AttTime > d.AttEnd1 AND att.AttTime BETWEEN dateadd(mi, d.WorkStartMi2, d.ScheduleDate) AND d.AttTimeStart2Max
		WHERE d.AttStart2 IS NULL
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	-- doi thi di lam an xa
	UPDATE #tblWorking2ShiftADay_Detect
	SET AttStart2 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT Min(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d
		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND att.AttTime > d.AttEnd1 AND abs(datediff(mi, d.ScheduleDate, att.AttTime) - d.WorkStartMi2) < 241
		WHERE d.AttStart2 IS NULL
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	-- AttEnd2
	UPDATE #tblWorking2ShiftADay_Detect
	SET AttEnd2 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT Min(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d
		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND att.AttTime BETWEEN dateadd(mi, d.WorkEndMi2, d.ScheduleDate) AND d.AttTimeEnd2Max
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	UPDATE #tblWorking2ShiftADay_Detect
	SET AttEnd2 = t.AttTime
	FROM #tblWorking2ShiftADay_Detect d
	INNER JOIN (
		SELECT max(att.AttTime) AttTime, d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		FROM #tblWorking2ShiftADay_Detect d
		INNER JOIN #tblTmpAttend att ON d.EmployeeID = att.EmployeeID AND att.AttTime BETWEEN d.AttTimeEnd2Min AND dateadd(mi, d.WorkEndMi2, d.ScheduleDate)
		WHERE d.AttEnd2 IS NULL
		GROUP BY d.employeeID, d.ScheduleDate, d.ShiftCode1, d.ShiftCode2
		) t ON d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode1 = t.ShiftCode1 AND d.ShiftCode2 = t.ShiftCode2

	--select AttStart1,AttEnd1,AttStart2,AttEnd2,ShiftCode1,ShiftCode2,* from #tblWorking2ShiftADay_Detect order by employeeId, scheduleDate return
	DELETE #tblWorking2ShiftADay_Detect
	WHERE (AttStart1 IS NULL OR AttEnd1 IS NULL OR AttStart2 IS NULL OR AttEnd2 IS NULL)

	--select AttStart1,AttEnd1,AttStart2,AttEnd2,ShiftCode1,ShiftCode2,* from #tblWorking2ShiftADay_Detect where ScheduleDate = '2019-04-18' order by employeeId, scheduleDate return
	DELETE d
	FROM #tblWorking2ShiftADay_Detect d
	WHERE NOT EXISTS (
			SELECT 1
			FROM (
				SELECT max(datediff(mi, d.AttEnd1, d.AttStart2)) MaxSE, d.EmployeeID, d.ScheduleDate
				FROM #tblWorking2ShiftADay_Detect d
				GROUP BY d.EmployeeID, d.ScheduleDate
				) t
			WHERE d.EmployeeID = t.EmployeeID AND d.ScheduleDate = t.ScheduleDate AND datediff(mi, d.AttEnd1, d.AttStart2) = t.MaxSE
			)
		--select AttStart1,AttEnd1,AttStart2,AttEnd2,ShiftCode1,ShiftCode2,* from #tblWorking2ShiftADay_Detect order by employeeId, scheduleDate return
END

SELECT *
INTO #tblHoliday
FROM tblHoliday
WHERE LeaveDate BETWEEN @FromDate AND @ToDate

IF (OBJECT_ID('sp_ShiftDetector_Begin_HolidayStatusByEmployeeType') IS NULL)
	EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_Begin_HolidayStatusByEmployeeType(@StopUpdate bit output)as')

SET @StopUpdate = 0

EXEC sp_ShiftDetector_Begin_HolidayStatusByEmployeeType @StopUpdate OUTPUT

IF (@StopUpdate = 0)
BEGIN
	-- tu bang tblwschdule
	UPDATE m
	SET HolidayStatus = s.HolidayStatus
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT EmployeeID, ScheduleDate, HolidayStatus
		FROM #tblWSchedule s
		WHERE s.ApprovedHolidayStatus = 1
		) s ON m.EmployeeId = s.EmployeeID AND m.ScheduleDate = s.ScheduleDate



	--where m.HolidayStatus is null -- bỏ đi do approvedholidaystatus tức là khách đã approve cái ngày đó là nghỉ hay đi làm rồi
	CREATE TABLE #tblHasHoliday (EmployeeID VARCHAR(20), ScheduleDate DATE)

	INSERT INTO #tblHasHoliday (EmployeeID, ScheduleDate)
	SELECT EmployeeID, ScheduleDate
	FROM (
		UPDATE d
		SET HolidayStatus = h.HolidayStatus
		OUTPUT inserted.EmployeeId, inserted.ScheduleDate
		FROM #tblShiftDetectorMatched d
		INNER JOIN #tblEmployeeList e ON d.EmployeeId = e.EmployeeID
		INNER JOIN #tblHoliday h ON h.LeaveDate = d.ScheduleDate AND (e.EmployeeTypeID = h.EmployeeTypeID OR h.EmployeeTypeID = - 1)
		LEFT JOIN dbo.fn_EmployeeStatusRange(0) es ON d.EmployeeId = es.EmployeeID AND d.ScheduleDate BETWEEN es.ChangedDate AND es.StatusEndDate AND es.EmployeeStatusID IN (
				SELECT EmployeeStatusID
				FROM tblEmployeeStatus
				WHERE isnull(CutSI, 0) = 0
				)
		WHERE d.HolidayStatus IS NULL AND es.EmployeeID IS NOT NULL
		) ho

	-- tu loai nhan vien
	UPDATE d
	SET HolidayStatus = CASE
			WHEN (e.SaturdayOff = 1 AND DATENAME(dw, d.ScheduleDate) = 'Saturday') OR (e.SundayOff = 1 AND DATENAME(dw, d.ScheduleDate) = 'Sunday')
				THEN 1
			ELSE NULL
			END
	FROM #tblShiftDetectorMatched d
	INNER JOIN #tblEmployeeList e ON d.EmployeeId = e.EmployeeID
	WHERE d.HolidayStatus IS NULL

	SELECT @Month = Month, @Year = Year
	FROM dbo.fn_Get_Sal_Month_Year(@FromDate)

	--TRIPOD: 2 ngày làm việc thứ 7
	SELECT EmployeeID, SaturdayDate AS SatDate
	INTO #SatWorkList
	FROM dbo.fn_GetEmployeeSatWork(@LoginID, @Month, @Year)
	--WHERE SaturdayDate BETWEEN @FromDate AND @ToDate

	UNION

	SELECT EmployeeID, SaturdayDate_2nd AS SatDate
	FROM dbo.fn_GetEmployeeSatWork(@LoginID, @Month, @Year)

	UPDATE s
	SET HolidayStatus = 0
	FROM #tblShiftDetectorMatched s
	INNER JOIN #SatWorkList sw ON s.EmployeeID = sw.EmployeeID AND s.ScheduleDate = sw.SatDate

	UPDATE #tblShiftDetectorMatched
	SET HolidayStatus = 0
	WHERE HolidayStatus IS NULL

	--hpsf: Vu - employeeTypeID = 0, làm 2 thứ 7 giữa tháng thực tế (không phải tháng chu kì lương)
	--  SELECT *
	--  INTO #SatList
	--  FROM dbo.fn_Get2SatMidOfMonth(MONTH(@FromDate), YEAR(@FromDate))
	--  UNION
	--  SELECT *
	--  FROM dbo.fn_Get2SatMidOfMonth(MONTH(@ToDate), YEAR(@ToDate))
	--  WHERE MONTH(@FromDate) <> MONTH(@ToDate) OR YEAR(@FromDate) <> YEAR(@ToDate)
	-- --2 sat in the mid of month
	--  UPDATE d SET HolidayStatus = 0
	--  FROM #tblShiftDetectorMatched d
	--  INNER JOIN #tblEmployeeList e ON d.EmployeeId = e.EmployeeID
	--  WHERE ScheduleDate IN (SELECT SatDate FROM #SatList) AND e.EmployeeTypeID = 0
	/*
 --TN:le roi vao ngày nghỉ tuần thì k insert nghỉ, chỉ cập nhật HolidayStatus
 DELETE #tblHasHOliday FROM #tblHasHOliday h
 INNER JOIN (
 SELECT d.EmployeeId, d.ScheduleDate, CASE when (e.SaturdayOff = 1 and DATENAME(dw,d.ScheduleDate) = 'Saturday') OR (e.SundayOff = 1 and DATENAME(dw,d.ScheduleDate) = 'Sunday') then 1 else null END OffWeek
 from #tblShiftDetectorMatched d
 inner join #tblEmployeeList e on d.EmployeeId = e.EmployeeID
 ) so ON h.EmployeeID = so.EmployeeId AND h.ScheduleDate = so.ScheduleDate AND so.OffWeek = 1

 */
	SELECT m.EmployeeID, m.ScheduleDate, h.LeaveStatus, h.LeaveCode LeaveCode, CASE
			WHEN h.LeaveStatus IN (1, 2)
				THEN 4
			WHEN h.LeaveStatus IN (4, 5)
				THEN 2
			ELSE 8
			END LvAmount, 1 LvRegister, N'System automatically insert leave' Reason, h.EmployeeTypeID
	INTO #LeaveAuto
	FROM #tblHasHoliday m
	INNER JOIN #tblEmployeeList e ON m.EmployeeID = e.EmployeeID
	INNER JOIN #tblHoliday h ON m.ScheduleDate = h.LeaveDate AND (e.EmployeeTypeID = h.EmployeeTypeID OR h.EmployeeTypeID = - 1) AND h.LeaveCode IS NOT NULL

	-- remove duplicate holiday record
	DELETE l
	FROM #LeaveAuto l
	INNER JOIN (
		SELECT l.EmployeeID, l.ScheduleDate, l.LeaveCode, max(l.EmployeeTypeID) EmployeeTypeID
		FROM #LeaveAuto l
		GROUP BY l.EmployeeID, l.ScheduleDate, l.LeaveCode
		HAVING count(1) > 1
		) tmp ON l.EmployeeID = tmp.EmployeeID AND l.ScheduleDate = tmp.ScheduleDate AND l.LeaveCode = tmp.LeaveCode AND l.EmployeeTypeID < tmp.EmployeeTypeID

	DELETE lv
	FROM tblLvHistory lv
	INNER JOIN #tblShiftDetectorMatched m ON lv.EmployeeID = m.EmployeeId AND lv.LeaveDate = m.ScheduleDate
	WHERE lv.LeaveDate BETWEEN @FromDate AND @ToDate AND EXISTS (
			SELECT 1
			FROM #tblEmployeeList te
			WHERE lv.EmployeeID = te.EmployeeID
			) AND Reason = N'System automatically insert leave'
		-- xóa tất cả những thằng cản đường
		AND NOT EXISTS (
			SELECT 1
			FROM #LeaveAuto la
			WHERE lv.EmployeeID = la.EmployeeID AND lv.LeaveDate = la.ScheduleDate AND lv.LeaveCode = la.LeaveCode AND lv.LvAmount = la.LvAmount
			)

	/*
delete tblLvHistory
from tblLvHistory lv
where exists (select 1 from #tblEmployeeList st where lv.EmployeeID=st.EmployeeID and lv.LeaveDate between dateadd(dd, -30, st.HireDate) and st.HireDate)
and lv.Reason=N'System automatically insert leave'
*/
	INSERT INTO tblLvHistory (EmployeeID, LeaveDate, LeaveStatus, LeaveCode, LvAmount, LvRegister, Reason)
	SELECT EmployeeID, ScheduleDate, LeaveStatus, LeaveCode, LvAmount, LvRegister, Reason
	FROM #LeaveAuto la
	WHERE NOT EXISTS (
			SELECT 1
			FROM tblLvHistory lv
			WHERE la.EmployeeID = lv.EmployeeID AND la.ScheduleDate = lv.LeaveDate
			)

	DROP TABLE #LeaveAuto

	-- --HPSF: NVVP vẫn làm 48h/tuần nhưng làm bù vào các ngày trong tuần và nghỉ thứ 7 nên thêm 1 loại nghỉ bù thứ 7 để đếm công
	--  select e.EmployeeID, s.SatDate, 3 LeaveStatus,  'P' LeaveCode, 8 LvAmount, 1 LvRegister, N'System automatically insert Compensatory Leave for staff' Reason, e.EmployeeTypeID
	-- into #LeaveBu
	-- from  #tblEmployeeList e
	-- CROSS JOIN #SatList s
	-- WHERE e.EmployeeTypeID = 1 AND EmployeeStatusID NOT IN (1) AND SatDate BETWEEN @FromDate AND @ToDate
	-- insert into tblLvHistory(EmployeeID, LeaveDate, LeaveStatus, LeaveCode, LvAmount, LvRegister, Reason)
	-- select EmployeeID, SatDate, LeaveStatus, LeaveCode, LvAmount, LvRegister, Reason
	-- from #LeaveBu la
	-- where not exists (select 1 from tblLvHistory lv where la.EmployeeID=lv.EmployeeID and la.SatDate=lv.LeaveDate)


	IF @trackingML = 1
	BEGIN
		--phot vao roi thi xoa di
		DELETE tblLvHistory
		FROM tblLvHistory lv
		INNER JOIN #tblPendingImportAttend p ON lv.EmployeeID = p.EmployeeID AND lv.LeaveDate = p.DATE AND EXISTS (
				SELECT 1
				FROM tblEmployeeStatus es
				WHERE es.CutSI = 1 AND lv.LeaveCode = es.LeaveCodeForCutSI
				)
		WHERE lv.Reason = N'System automatically insert leave' AND lv.LeaveDate BETWEEN @FromDate AND @ToDate

		--insert into tblLvHistory(EmployeeID,LeaveDate,LeaveCode,LeaveStatus,LvAmount,Reason)
		SELECT ws.EmployeeID, ws.ScheduleDate AS LeaveDate, s.LeaveCodeForCutSI AS LeaveCode, 3 AS LeaveStatus, 8 AS LvAmount, N'System automatically insert leave' AS Reason
		INTO #CutSItblLvHistory
		FROM tblWSchedule ws
		INNER JOIN #tblPendingImportAttend p ON ws.EmployeeID = p.EmployeeID AND ws.ScheduleDate = p.DATE
		INNER JOIN tblEmployeeStatus s ON p.EmployeeStatusID = s.EmployeeStatusID AND s.CutSI = 1 AND s.LeaveCodeForCutSI IS NOT NULL AND s.LeaveCodeForCutSI IN (
				SELECT LeaveCode
				FROM tblLeaveType
				)
		WHERE ws.HolidayStatus = 0 AND ws.ScheduleDate BETWEEN @FromDate AND @ToDate AND NOT EXISTS (
				SELECT 1
				FROM tblLvHistory lv
				WHERE ws.EmployeeID = lv.EmployeeID AND ws.ScheduleDate = lv.LeaveDate AND isnull(lv.Reason, '') <> 'System automatically insert leave'
				)

		EXEC sp_InsertUpdateFromTempTableTOTable '#CutSItblLvHistory', 'tblLvHistory'

		DROP TABLE #CutSItblLvHistory
	END
END

IF (OBJECT_ID('sp_ShiftDetector_Finish_HolidayStatusByEmployeeType') IS NULL)
BEGIN
	EXEC (
			'CREATE PROCEDURE dbo.sp_ShiftDetector_Finish_HolidayStatusByEmployeeType
(@StopUpdate bit output)
as
begin
 SET NOCOUNT ON;
end'
			)
END

SET @StopUpdate = 0

EXEC sp_ShiftDetector_Finish_HolidayStatusByEmployeeType @StopUpdate OUTPUT

-- leave
SELECT lv.EmployeeID, lv.LeaveDate, lv.LeaveStatus, lv.LeaveCode, lv.LvAmount, isnull(lt.PaidRate, 0) PaidRate, lt.LeaveCategory, lv.Reason
INTO #tblLvHistory
FROM tblLvHistory lv
INNER JOIN tblLeaveType lt ON lv.LeaveCode = lt.LeaveCode
LEFT JOIN (
	SELECT LeaveCode
	FROM tblLeaveType
	WHERE (LeaveCategory = 1 OR (LeaveCategory = 0 AND PaidRate = 0)) AND LeaveCode <> 'FWC'
	) lc ON lc.LeaveCode = lt.LeaveCode
WHERE lv.LeaveDate BETWEEN @FromDate3 AND @ToDate3 AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE lv.EmployeeID = te.EmployeeID
		) AND lc.LeaveCode IS NOT NULL

--create nonclustered index ix_temptblLvHistory on #tblLvHistory(EmployeeId,Leavedate,LeaveStatus,LeaveCode) include(lvamount,PaidRate)
SELECT lv.EmployeeId, lv.LeaveDate, lv.LeaveStatus
INTO #tblFWC
FROM tblLvhistory lv
WHERE lv.LeaveDate BETWEEN @FromDate3 AND @ToDate3 AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE lv.EmployeeID = te.EmployeeID
		) AND lv.LeaveCode = 'FWC'

-- dua các ca vào để chấm điểm
INSERT INTO #tblShiftDetector (EmployeeID, ScheduleDate, ShiftCode, HolidayStatus, RatioMatch, EmployeeStatusID)
SELECT c.EmployeeID, s.ScheduleDate, sg.ShiftCode, s.HolidayStatus, 0, EmployeeStatusID
FROM #tblShiftDetectorMatched s
INNER JOIN #tblShiftGroupCode c ON s.EmployeeId = c.EmployeeID
FULL OUTER JOIN #tblShiftGroup_Shift sg ON c.ShiftGroupCode = sg.ShiftGroupID
WHERE sg.ShiftCode IS NOT NULL AND s.EmployeeId IS NOT NULL AND s.ScheduleDate BETWEEN c.FromDate AND c.ToDate

INSERT INTO #tblShiftDetector (EmployeeID, ScheduleDate, ShiftCode, HolidayStatus, RatioMatch, EmployeeStatusID)
SELECT s.EmployeeID, s.ScheduleDate, ss.ShiftCode, s.HolidayStatus, 0, EmployeeStatusID
FROM #tblShiftDetectorMatched s
CROSS JOIN (
	SELECT ShiftCode
	FROM #tblShiftSetting
	GROUP BY ShiftCode
	) ss
WHERE NOT EXISTS (
		SELECT 1
		FROM #tblShiftDetector sd
		WHERE s.EmployeeId = sd.EmployeeID AND s.Scheduledate = sd.Scheduledate
		)


-- tam thoi lay ca HC dua vao tao lich
INSERT INTO tblWSchedule (EmployeeID, ScheduleDate, ShiftID, HolidayStatus)
SELECT d.EmployeeID, d.ScheduleDate, s.ShiftID, d.HolidayStatus
FROM #tblShiftDetector d
INNER JOIN (
	SELECT TOP 1 *
	FROM #tblShiftSetting s

	WHERE EXISTS (
			SELECT 1
			FROM #tblShiftDetector d
			WHERE s.ShiftCode = d.ShiftCode
			) AND abs(s.WorkStartMi - 480) < 121
	ORDER BY abs(s.WorkStartMi - 480)
	) s ON d.ShiftCode = s.ShiftCode
WHERE NOT EXISTS (
		SELECT 1
		FROM tblWSchedule ws
		WHERE d.EmployeeId = ws.EmployeeID AND d.ScheduleDate = ws.ScheduleDate
		)


IF (OBJECT_ID('sp_ShiftDetector_FinishCustomizeListShiftCode') IS NULL)
BEGIN
	EXEC (
			'CREATE PROCEDURE dbo.sp_ShiftDetector_FinishCustomizeListShiftCode
(
 @StopUpdate bit output
 ,@LoginID int
 ,@FromDate datetime
 ,@ToDate datetime
)
as
begin
 SET NOCOUNT ON;
end'
			)
END

SET @StopUpdate = 0

EXEC sp_ShiftDetector_FinishCustomizeListShiftCode @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

-- *XAC DINH CA CHINH XAC2
-- da dc nguoi dung duyet, hoac tao lich manual
--delete #tblShiftDetectorMatched from #tblShiftDetectorMatched m where not exists (select 1 from #tblEmployeeList te where te.EmployeeID = m.EmployeeId and te.NotCheckTA = 1)
TRUNCATE TABLE #tblShiftDetectorMatched

INSERT INTO #tblShiftDetectorMatched (EmployeeId, ScheduleDate, ShiftCode, RatioMatch, WorkStart, WorkEnd, BreakStart, BreakEnd, OTBeforeStart, OTBeforeEnd, OTAfterStart, OTAfterEnd, HolidayStatus, Approved, EmployeeStatusID)
SELECT ws.EmployeeID, ws.ScheduleDate, ws.ShiftCode, 1000, dateadd(mi, ss.WorkStartMi, ws.ScheduleDate), dateadd(mi, ss.WorkEndMi, ws.ScheduleDate), dateadd(mi, ss.BreakStartMi, ws.ScheduleDate), dateadd(mi, ss.BreakEndMi, ws.ScheduleDate), dateadd(mi, ss.OTBeforeStartMi, ws.ScheduleDate), dateadd(mi, ss.OTBeforeEndMi, ws.ScheduleDate), dateadd(mi, ss.OTAfterStartMi, ws.ScheduleDate), dateadd(mi, ss.OTAfterEndMi, ws.ScheduleDate), ws.HolidayStatus, ws.Approved, p.EmployeeStatusID --,e.WHPerWeek
FROM #tblWSchedule ws
INNER JOIN #tblPendingImportAttend p ON ws.EmployeeID = p.EmployeeID AND ws.ScheduleDate = p.DATE
LEFT JOIN #tblShiftSetting ss ON ws.ShiftCode = ss.ShiftCode
WHERE (
		(ws.Approved = 1)
		--người dùng đã xác nhận giờ vào và giờ ra của ngày hôm dó, và hôm đó chỉ có 1 period
		OR EXISTS (
			SELECT 1
			FROM (
				SELECT EmployeeID, Attdate
				FROM #tblHasTA
				WHERE TAStatus = 3 AND AttStart IS NULL AND AttEnd IS NULL
				GROUP BY EmployeeID, Attdate
				HAVING COUNT(1) = 1
				) tmp
			WHERE ws.employeeID = tmp.EmployeeID AND tmp.Attdate = ws.ScheduleDate
			)
		) AND NOT EXISTS (
		SELECT 1
		FROM #tblWorking2ShiftADay_Detect ts
		WHERE ts.EmployeeID = ws.EmployeeId AND ts.ScheduleDate = ws.ScheduleDate
		) AND NOT EXISTS (
		SELECT 1
		FROM #tblLvHistory lv
		WHERE lv.EmployeeID = ws.EmployeeId AND lv.LeaveDate = ws.ScheduleDate AND lv.LeaveStatus = 3 AND @LEAVEFULLDAYSTILLHASATTTIME = 0
		)


DELETE D
FROM #tblShiftDetector D
WHERE EXISTS (
		SELECT 1
		FROM #tblShiftDetectorMatched M
		WHERE M.EmployeeId = D.EmployeeId AND M.ScheduleDate = D.ScheduleDate
		)

-- chỉ có 1 ca duy nhất
INSERT INTO #tblShiftDetectorMatched (EmployeeId, ScheduleDate, ShiftCode, RatioMatch, HolidayStatus, WorkStart, WorkEnd, BreakStart, BreakEnd, OTBeforeStart, OTBeforeEnd, OTAfterStart, OTAfterEnd, Approved, EmployeeStatusID)
SELECT d.EmployeeId, d.ScheduleDate, d.ShiftCode, d.RatioMatch, d.HolidayStatus, dateadd(mi, ss.WorkStartMi, d.ScheduleDate), dateadd(mi, ss.WorkEndMi, d.ScheduleDate), dateadd(mi, ss.BreakStartMi, d.ScheduleDate), dateadd(mi, ss.BreakEndMi, d.ScheduleDate), dateadd(mi, ss.OTBeforeStartMi, d.ScheduleDate), dateadd(mi, ss.OTBeforeEndMi, d.ScheduleDate), dateadd(mi, ss.OTAfterStartMi, d.ScheduleDate), dateadd(mi, ss.OTAfterEndMi, d.ScheduleDate), 1, d.EmployeeStatusID
FROM #tblShiftDetector d
INNER JOIN #tblShiftSetting ss ON d.ShiftCode = ss.ShiftCode
WHERE EXISTS (
		SELECT 1
		FROM (
			SELECT EmployeeId, ScheduleDate
			FROM #tblShiftDetector
			GROUP BY EmployeeId, ScheduleDate
			HAVING COUNT(1) = 1
			) tmp
		WHERE tmp.EmployeeId = d.EmployeeId AND tmp.ScheduleDate = d.ScheduleDate
		)

-- nhan vien khong can cham cong thi lay mac dinh la ca HC
UPDATE m
SET ShiftCode = ss.ShiftCode
--Select ss.*, m.*
FROM #tblShiftDetectorMatched m
INNER JOIN #tblShiftGroupCode d ON m.EmployeeId = d.EmployeeId AND m.ScheduleDate BETWEEN d.FromDate AND d.ToDate
INNER JOIN #tblShiftGroup_Shift ss ON d.ShiftGroupCode = ss.ShiftGroupID
WHERE EXISTS (
		SELECT 1
		FROM #tblShiftSetting s
		WHERE s.ShiftCode = ss.ShiftCode AND s.isOfficalShift = 1 AND s.WorkStartMi = 480 AND s.WorkEndMi = 1020
		) AND ISNULL(m.Approved, 0) = 0

UPDATE m
SET ShiftCode = ss.ShiftCode
FROM #tblShiftDetectorMatched m
INNER JOIN #tblShiftGroupCode d ON m.EmployeeId = d.EmployeeId AND m.ScheduleDate BETWEEN d.FromDate AND d.ToDate
INNER JOIN #tblShiftGroup_Shift ss ON d.ShiftGroupCode = ss.ShiftGroupID
WHERE m.ShiftCode IS NULL AND EXISTS (
		SELECT 1
		FROM #tblShiftSetting s
		WHERE s.ShiftCode = ss.ShiftCode AND s.isOfficalShift = 1 AND s.WorkStartMi = 480
		)

UPDATE m
SET ShiftCode = ss.ShiftCode
FROM #tblShiftDetectorMatched m
INNER JOIN #tblShiftGroupCode d ON m.EmployeeId = d.EmployeeId AND m.ScheduleDate BETWEEN d.FromDate AND d.ToDate
INNER JOIN #tblShiftGroup_Shift ss ON d.ShiftGroupCode = ss.ShiftGroupID
WHERE m.ShiftCode IS NULL AND EXISTS (
		SELECT 1
		FROM #tblShiftSetting s
		WHERE s.ShiftCode = ss.ShiftCode AND s.isOfficalShift = 1 AND abs(s.WorkStartMi - 480) < 31
		)

UPDATE m
SET ShiftCode = ss.ShiftCode
FROM #tblShiftDetectorMatched m
INNER JOIN #tblShiftGroupCode d ON m.EmployeeId = d.EmployeeId AND m.ScheduleDate BETWEEN d.FromDate AND d.ToDate
INNER JOIN #tblShiftGroup_Shift ss ON d.ShiftGroupCode = ss.ShiftGroupID
WHERE m.ShiftCode IS NULL AND EXISTS (
		SELECT 1
		FROM #tblShiftSetting s
		WHERE s.ShiftCode = ss.ShiftCode AND s.isOfficalShift = 1 AND abs(s.WorkStartMi - 480) < 61
		)

UPDATE m
SET ShiftCode = ss.ShiftCode
FROM #tblShiftDetectorMatched m
INNER JOIN #tblShiftGroupCode d ON m.EmployeeId = d.EmployeeId AND m.ScheduleDate BETWEEN d.FromDate AND d.ToDate
INNER JOIN #tblShiftGroup_Shift ss ON d.ShiftGroupCode = ss.ShiftGroupID
WHERE m.ShiftCode IS NULL AND EXISTS (
		SELECT 1
		FROM #tblShiftSetting s
		WHERE s.ShiftCode = ss.ShiftCode
		)

--Select * from #tblShiftSetting s where exists (select 1 from #tblShiftGroup_Shift ss inner join #tblShiftGroupCode d on d.ShiftGroupCode = ss.ShiftGroupID where ss.ShiftCode = s.ShiftCode)
IF (OBJECT_ID('sp_ShiftDetector_MatchedShift_Process') IS NULL)
	EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_MatchedShift_Process(@StopUpdate bit output, @LoginID int, @FromDate datetime, @ToDate datetime) as')

SET @StopUpdate = 0

EXEC sp_ShiftDetector_MatchedShift_Process @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

IF @StopUpdate = 0
BEGIN
	UPDATE #tblShiftDetectorMatched
	SET TIMEINBEFORE = DATEADD(MI, - @TA_TIMEINBEFORE, WorkStart), TIMEOUTAFTER = DATEADD(hour, @TA_TIMEOUTAFTER, WorkStart), INOUT_MINIMUM = @TA_INOUT_MINIMUM

	-- loại bỏ những nhân viên lấy giờ hôm trước làm giờ vào hôm nay
	DELETE m2
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate - 1 AND m1.AttEnd = m2.AttStart

	DELETE D
	FROM #tblShiftDetector D
	WHERE EXISTS (
			SELECT 1
			FROM #tblShiftDetectorMatched M
			WHERE M.EmployeeId = D.EmployeeId AND M.ScheduleDate = D.ScheduleDate
			)

	DECLARE @Max_WorkingHour_PerDay INT

	SELECT @Max_WorkingHour_PerDay = ISNULL((
				SELECT Value
				FROM tblParameter
				WHERE Code = 'Max_WorkingHour_PerDay'
				), 24)

	IF @Max_WorkingHour_PerDay < 4
	BEGIN
		SET @Max_WorkingHour_PerDay = 9

		UPDATE tblParameter
		SET Value = '9'
		WHERE Code = 'Max_WorkingHour_PerDay'
	END

	-- XÁC ĐỊNH GIỜ VÀO RA CHO CA CHÍNH XÁC
	-- fixed att
	UPDATE #tblShiftDetectorMatched
	SET FixedAtt = 0

	--update m1 set FixedAtt = 1 from #tblShiftDetectorMatched m1 inner join #tblWSchedule m2 on m1.EmployeeId = m2.EmployeeId and m1.ScheduleDate = m2.ScheduleDate
	-- where m2.DateStatus = 3
	UPDATE m
	SET AttStart = ta.AttStart, StateIn = 1
	FROM #tblShiftDetectorMatched M
	INNER JOIN #tblHasTA TA ON M.EmployeeId = ta.EmployeeID AND m.ScheduleDate = ta.AttDate
	WHERE (ta.TAStatus = 1)

	UPDATE m
	SET AttEnd = ta.AttEnd, StateOut = 2
	FROM #tblShiftDetectorMatched M
	INNER JOIN #tblHasTA TA ON M.EmployeeId = ta.EmployeeID AND m.ScheduleDate = ta.AttDate
	WHERE (ta.TAStatus = 2)

	UPDATE m
	SET AttStart = ta.AttStart, AttEnd = ta.AttEnd, FixedAtt = 1
	FROM #tblShiftDetectorMatched M
	INNER JOIN (
		SELECT EmployeeID, AttDate, max(TAStatus) TAStatus, Min(AttStart) AttStart, Max(AttEnd) AttEnd
		FROM #tblHasTA
		GROUP BY EmployeeID, AttDate
		) TA ON M.EmployeeId = ta.EmployeeID AND m.ScheduleDate = ta.AttDate
	WHERE (ta.TAStatus = 3)

	--phang tới tấp qua ben kia luôn, người dùng sửa giờ rồi mà
	UPDATE m
	SET AttStart = ta.AttStart, AttEnd = ta.AttEnd, FixedAtt = 1, StateIn = 1, StateOut = 2
	FROM #tblShiftDetector M
	INNER JOIN (
		SELECT EmployeeID, AttDate, max(TAStatus) TAStatus, Min(AttStart) AttStart, Max(AttEnd) AttEnd
		FROM #tblHasTA
		GROUP BY EmployeeID, AttDate
		) TA ON M.EmployeeId = ta.EmployeeID AND m.ScheduleDate = ta.AttDate
	WHERE (ta.TAStatus = 3)

	UPDATE #tblShiftDetectorMatched
	SET IsLeaveStatus3 = 0

	UPDATE ta1
	SET IsLeaveStatus3 = 1
	FROM #tblShiftDetectorMatched ta1
	INNER JOIN #tblLvHistory ta2 ON ta1.EmployeeId = ta2.EmployeeID AND ta1.ScheduleDate = ta2.LeaveDate AND LeaveStatus = 3

	-- AttEnd Yesterday cho bang Matched
	UPDATE m1
	SET AttEndYesterday = isnull(m2.AttEnd, m2.WorkEnd)
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate + 1
	WHERE (m2.AttEnd IS NOT NULL OR (m2.WorkEnd IS NOT NULL AND DATEDIFF(MI, m2.WorkStart, m2.WorkEnd) < 600)) AND m2.Approved = 1

	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, m2.WorkStart)
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate - 1
	WHERE (m2.AttStart IS NOT NULL OR m2.WorkStart IS NOT NULL) AND m2.Approved = 1

	-- trong bảng HasTA
	UPDATE m1
	SET AttEndYesterday = isnull(m2.AttEnd, dateadd(HOUR, - 10, m1.WorkStart))
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblHasTA m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.NextDate
	WHERE m2.AttEnd IS NOT NULL AND (m2.AttStart IS NOT NULL OR DATEDIFF(MI, m2.WorkStart, m2.WorkEnd) < 500) AND (m2.TAStatus = 3 OR m2.AttDate BETWEEN @FromDate3 AND @FromDate)

	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, DATEADD(hour, 16, m1.WorkEnd))
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblHasTA m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.PrevDate
	WHERE m2.AttStart IS NOT NULL AND (m2.TAStatus = 3)

	-- xac dinh gio vao ra do hom qua và ngày mai dã được  fix cố định chưa
	UPDATE m1
	SET AttEndYesterdayFixed = 1
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblWSchedule m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.NextDate
	WHERE m2.DateStatus = 3

	UPDATE m1
	SET AttStartTomorrowFixed = 1
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblWSchedule m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.PrevDate
	WHERE m2.DateStatus = 3

	UPDATE #tblShiftDetectorMatched
	SET AttEndYesterday = dateadd(HOUR, - 10, WorkStart)
	WHERE AttEndYesterday IS NULL

	UPDATE #tblShiftDetectorMatched
	SET AttStartTomorrow = DATEADD(hour, 16, WorkEnd)
	WHERE AttStartTomorrow IS NULL

	-- trong bảng HasTA
	UPDATE m1
	SET AttEndYesterday = isnull(m2.AttEnd, dateadd(HOUR, - 10, m1.WorkStart))
	FROM #tblShiftDetector m1
	INNER JOIN #tblHasTA m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.NextDate
	WHERE m2.AttEnd IS NOT NULL AND (m2.TAStatus = 3) -- or m2.AttDate between @FromDate3 and @FromDate)
		--where m2.AttEnd is not null and (m2.TAStatus = 3 or m2.AttDate between @FromDate3 and @FromDate)
		-- xac dinh gio vao ra do hom qua và ngày mai dã được fix cố định chưa

	UPDATE m1
	SET AttEndYesterdayFixed = 1
	FROM #tblShiftDetector m1
	INNER JOIN #tblWSchedule m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.NextDate
	WHERE m2.DateStatus = 3

	UPDATE m1
	SET AttStartTomorrowFixed = 1
	FROM #tblShiftDetector m1
	INNER JOIN #tblWSchedule m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.PrevDate
	WHERE m2.DateStatus = 3

	-- xác định AttStart cho #tblShiftDetectorMatched
	-- 1. gà què an quanh cối xay
	UPDATE #tblShiftDetectorMatched
	SET AttStart = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, MIN(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND FixedAtt = 0 AND (ForceState = 0 OR AttState = 1) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND abs(DATEDIFF(mi, m.WorkStart, t.AttTime)) <= 15
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	UPDATE #tblShiftDetectorMatched
	SET AttStart = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, max(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND FixedAtt = 0 AND (ForceState = 0 OR AttState = 1) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND DATEDIFF(mi, m.WorkStart, t.AttTime) BETWEEN - 150 AND - 1
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	UPDATE #tblShiftDetectorMatched
	SET AttStart = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, MIN(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND FixedAtt = 0 AND (ForceState = 0 OR AttState = 1) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND abs(DATEDIFF(mi, m.WorkStart, t.AttTime)) <= 60
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	UPDATE #tblShiftDetectorMatched
	SET AttStart = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, max(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND FixedAtt = 0 AND (ForceState = 0 OR AttState = 1) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND DATEDIFF(mi, m.WorkStart, t.AttTime) BETWEEN - 330 AND - 1
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	-- lay dc gio vao roi thi do nguoc lai xem co ai cham som hon ko
	UPDATE #tblShiftDetectorMatched
	SET AttStart = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, min(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NOT NULL AND FixedAtt = 0 AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND (ForceState = 0 OR AttState = 1) AND t.AttTime BETWEEN DATEADD(mi, - 60, m.AttStart) AND m.AttStart AND DATEDIFF(mi, m.WorkStart, t.AttTime) BETWEEN - 330 AND - 1
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	UPDATE #tblShiftDetectorMatched
	SET AttStart = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, MIN(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND FixedAtt = 0 AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND (ForceState = 0 OR AttState = 1) AND DATEDIFF(mi, m.WorkStart, t.AttTime) BETWEEN 0 AND 330
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	/*
 AttEnd cho #tblShiftDetectorMatched */
	--1. ga que an quan coi xay
	UPDATE #tblShiftDetectorMatched
	SET AttEnd = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, max(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.FixedAtt = 0 AND (t.ForceState = 0 OR t.AttState = 2) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND abs(DATEDIFF(mi, m.WorkEnd, t.AttTime)) <= 60 AND (t.AttTime > m.AttStart OR (m.AttStart IS NULL AND t.AttTime > m.WorkStart))
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	--1. xu ly truong hop bam nham, sau do hon 1h moi ra ve
	UPDATE #tblShiftDetectorMatched
	SET AttEnd = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, max(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd < m.WorkEnd AND m.FixedAtt = 0 AND (t.ForceState = 0 OR t.AttState = 2) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND DATEDIFF(mi, m.WorkEnd, t.AttTime) <= 120 AND (t.AttTime > m.AttStart OR (m.AttStart IS NULL AND t.AttTime > m.WorkStart))
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	-- riêng với những người thuộc bộ phận bảo vệ làm 24h/ngày
	UPDATE m
	SET AttStartTomorrow = dateadd(MI, 60, AttStartTomorrow)
	FROM #tblShiftDetectorMatched m
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployeeList e
			WHERE m.EmployeeId = e.EmployeeID AND e.Security24hWorking = 1
			)

	UPDATE m
	SET AttEnd = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, min(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend_Org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND FixedAtt = 0 AND (ForceState = 0 OR AttState = 2) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND abs(DATEDIFF(mi, m.WorkEnd, t.AttTime)) <= 60 AND (t.AttTime > m.AttStart OR (m.AttStart IS NULL AND t.AttTime > m.WorkStart))
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate
	WHERE EXISTS (
			SELECT 1
			FROM #tblEmployeeList e
			WHERE m.EmployeeId = e.EmployeeID AND e.Security24hWorking = 1
			)

	-- nhân viên làm 24h một ngày (bao ve di 24h ngay), làm 1 ngay nghi 1 ngay, vì thế bỏ những ngày kế tiếp
	UPDATE m2
	SET AttStart = NULL, AttEnd = NULL
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate - 1 AND (m1.AttEnd = m2.AttStart OR (m1.AttStart IS NOT NULL AND m1.AttEnd IS NOT NULL))
	WHERE m1.AttStart IS NOT NULL AND m1.AttEnd IS NOT NULL AND (m2.AttStart IS NULL OR m2.AttEnd IS NULL) AND EXISTS (
			SELECT 1
			FROM #tblEmployeeList e
			WHERE m2.EmployeeId = e.EmployeeID AND e.Security24hWorking = 1
			)

	SELECT ROW_NUMBER() OVER (
			PARTITION BY datediff(day, m1.ScheduleDate, m2.ScheduleDate) ORDER BY m2.employeeID
			) AS STT, m2.EmployeeId, m2.ScheduleDate, m2.ShiftCode, m2.AttStart, m2.AttEnd
	INTO #Security24hWorkingNeedDelete
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate - 1 AND m1.AttEnd = m2.AttStart
	WHERE m2.AttStart IS NOT NULL AND m2.AttEnd IS NOT NULL AND m1.AttStart IS NOT NULL AND m1.AttEnd IS NOT NULL AND EXISTS (
			SELECT 1
			FROM #tblEmployeeList e
			WHERE m2.EmployeeId = e.EmployeeID AND e.Security24hWorking = 1
			)

	DELETE #Security24hWorkingNeedDelete
	WHERE STT % 2 = 0

	UPDATE m
	SET AttStart = NULL, AttEnd = NULL
	FROM #Security24hWorkingNeedDelete d1
	INNER JOIN #tblShiftDetectorMatched m ON d1.EmployeeId = m.EmployeeId AND d1.ScheduleDate = m.ScheduleDate

	UPDATE #tblShiftDetectorMatched
	SET AttEnd = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, max(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND AttStart IS NOT NULL AND FixedAtt = 0 AND (ForceState = 0 OR AttState = 2) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND abs(DATEDIFF(mi, m.WorkEnd, t.AttTime)) <= 330 AND (t.AttTime > m.AttStart OR (m.AttStart IS NULL AND t.AttTime > m.WorkStart))
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	UPDATE m1
	SET AttEndYesterday = isnull(m2.AttEnd, m2.WorkEnd)
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate + 1
	WHERE (m2.AttEnd IS NOT NULL OR m2.WorkEnd IS NOT NULL) AND m2.Approved = 1

	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, m2.WorkStart)
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate - 1
	WHERE (m2.AttStart IS NOT NULL OR m2.WorkStart IS NOT NULL) AND m2.Approved = 1

	-- 2. Ðói thì di làm an xa
	UPDATE #tblShiftDetectorMatched
	SET AttStart = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, MIN(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE (m.AttStart IS NULL) AND FixedAtt = 0 --or DATEDIFF(mi,t.AttTime,m.WorkEnd) >= 30
			AND (ForceState = 0 OR AttState = 1) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND (t.AttTime < dateadd(mi, - 1 * m.INOUT_MINIMUM, m.AttEnd) OR (m.AttEnd IS NULL AND t.AttTime < m.WorkEnd)) AND t.AttTime BETWEEN m.TimeinBefore AND m.TIMEOUTAFTER
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, m2.WorkStart)
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate - 1
	WHERE (m2.AttStart IS NOT NULL OR m2.WorkStart IS NOT NULL) AND m2.Approved = 1

	-- 2. Ðói thì di làm an xa
	UPDATE #tblShiftDetectorMatched
	SET AttEnd = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, max(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND FixedAtt = 0 AND ((ForceState = 0 AND (datediff(day, t.Atttime, WorkEnd) = 0 OR datediff(hour, t.AttTime, TIMEOUTAFTER) > 3)) OR AttState = 2) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > isnull(m.AttStart, m.WorkStart)
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	-- có đi làm, tăng ca trước giờ làm, sau đó nghỉ cả ngày: để bắt được giờ vào ra để tính tăng ca
	UPDATE #tblShiftDetectorMatched
	SET AttEnd = m.AttStart, AttStart = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, min(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND FixedAtt = 0 AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.WorkEnd AND t.AttTime < m.AttStart AND t.AttTime BETWEEN m.OTBeforeStart AND m.OTBeforeEnd AND DATEDIFF(mi, t.AttTime, m.AttStart) >= 50
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND @OTBEFORE_LEAVE_FULLDAY = 1

	-- quên bấm 1 đàu và AttStart dang trùng AttEnd thì xác định lại cho dúng anh nào vào anh nào ra
	-- trường hợp nhân viên sửa lại giờ vào ra, nen bi du thua attTime
	UPDATE #tblShiftDetectorMatched
	SET AttStart = CASE
			WHEN DATEDIFF(mi, WorkStart, AttStart) < 240 AND (isnull(AttEndYesterdayFixed, 0) = 0 OR DATEDIFF(mi, AttEndYesterday, AttStart) > 120)
				THEN AttStart
			ELSE NULL
			END, AttEnd = CASE
			WHEN DATEDIFF(mi, WorkEnd, AttEnd) >= - 240 AND (isnull(AttStartTomorrowFixed, 0) = 0 OR DATEDIFF(mi, AttStartTomorrow, AttStart) < 120)
				THEN AttEnd
			ELSE NULL
			END
	FROM #tblShiftDetectorMatched
	WHERE AttStart = AttEnd --and EmployeeId = 'HLS001'

	/*-- nghỉ cả ngày mà bấm thiếu đầu thì bỏ
update m set AttStart = null, AttEnd = null
from #tblShiftDetectorMatched m where ((m.AttStart is not null and m.AttEnd is null ) or (m.AttStart is null and m.AttEnd is not null))
and (IsLeaveStatus3 =1 -- nghi ca ngay
or (DATEDIFF(DAY,m.WorkStart, m.WorkEnd) > 0 and m.AttStart is null and exists (select 1 from #tblShiftDetectorMatched m2 where m.EmployeeId = m2.EmployeeId and m.ScheduleDate + 1 = m2.ScheduleDate and DATEDIFF(DAY,m2.WorkStart, m2.WorkEnd) = 0)) -- ca đêm dài, ngày đó nghỉ để xoay sang ca ngay
)
and FixedAtt =0
*/
	UPDATE m
	SET AttEnd = NULL
	FROM #tblShiftDetectorMatched m
	WHERE DATEDIFF(DAY, m.WorkStart, m.WorkEnd) > 0 AND m.AttStart IS NULL AND m.AttEnd IS NOT NULL AND EXISTS (
			SELECT 1
			FROM #tblHasTA ta
			INNER JOIN #tblShiftSetting ss ON ta.ShiftCode = ss.ShiftCode AND ss.WorkEndMi < 1440
			WHERE ta.EmployeeID = m.EmployeeId AND m.ScheduleDate + 1 = ta.Attdate
			)
END

-- tinh workingTime cho bang dang duyet
UPDATE ws
SET WorkStart = dateadd(mi, ss.WorkStartMi, ws.ScheduleDate), WorkEnd = dateadd(mi, ss.WorkEndMi, ws.ScheduleDate), BreakStart = dateadd(mi, ss.BreakStartMi, ws.ScheduleDate), BreakEnd = dateadd(mi, ss.BreakEndMi, ws.ScheduleDate), isNightShift = CASE
		WHEN ss.WorkEndMi > 1440 OR ss.WorkStartMi < 130
			THEN 1
		ELSE 0
		END, isOfficalShift = ISNULL(ss.isOfficalShift, 0), WorkStartMi = ss.WorkStartMi, WorkEndMi = ss.WorkEndMi, BreakStartMi = ss.BreakStartMi, BreakEndMi = ss.BreakEndMi
FROM #tblShiftDetectorMatched ws
INNER JOIN #tblShiftSetting ss ON ws.ShiftCode = ss.ShiftCode

UPDATE #tblShiftDetectorMatched
SET AttStartMi = datepart(hour, AttStart) * 60 + DATEPART(minute, AttStart), AttEndMi = datepart(hour, AttEnd) * 60 + DATEPART(minute, AttEnd)

UPDATE #tblShiftDetectorMatched
SET AttEndMi = 1440 + AttEndMi
WHERE DATEDIFF(day, ScheduleDate, AttEnd) = 1

IF (@AUTO_FILL_TIMEINOUT_FWC = 1)
BEGIN
	UPDATE ta1
	SET AttStartMi = CASE
			WHEN AttStartMi IS NULL AND ta2.LeaveStatus IN (1, 3, 4)
				THEN ta1.WorkStartMi
			ELSE AttStartMi
			END, AttEndMi = CASE
			WHEN AttEndMi IS NULL AND ta2.LeaveStatus IN (2, 3, 5)
				THEN ta1.workendMi
			ELSE AttEndMi
			END
	FROM #tblShiftDetectorMatched ta1
	INNER JOIN #tblFWC ta2 ON ta1.EmployeeId = ta2.EmployeeId AND ta1.ScheduleDate = ta2.LeaveDAte
END

IF @MATERNITY_LATE_EARLY_OPTION = 1
	UPDATE #tblShiftDetectorMatched
	SET AttStartMi = CASE
			WHEN AttStartMi > WorkStartMi
				THEN CASE
						WHEN AttStartMi - WorkStartMi <= 30
							THEN WorkStartMi
						ELSE AttStartMi - @MATERNITY_MUNITE
						END
			ELSE AttStartMi
			END
	FROM #tblShiftDetectorMatched ta1
	WHERE EmployeeStatusID IN (10, 11) AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL
ELSE IF @MATERNITY_LATE_EARLY_OPTION = 2
	UPDATE #tblShiftDetectorMatched
	SET AttEndMi = CASE
			WHEN AttEndMi < WorkEndMi
				THEN CASE
						WHEN WorkEndMi - AttStartMi <= 30
							THEN WorkEndMi
						ELSE AttEndMi + @MATERNITY_MUNITE
						END
			ELSE AttEndMi
			END
	FROM #tblShiftDetectorMatched ta1
	WHERE EmployeeStatusID IN (10, 11) AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL
ELSE IF @MATERNITY_LATE_EARLY_OPTION = 3
	UPDATE #tblShiftDetectorMatched
	SET AttEndMi = CASE
			WHEN WorkEndMi - AttEndMi >= AttStartMi - WorkStartMi AND AttEndMi < WorkEndMi
				THEN CASE
						WHEN WorkEndMi - AttStartMi <= 30
							THEN WorkEndMi
						ELSE AttEndMi + @MATERNITY_MUNITE
						END
			ELSE AttEndMi
			END, AttStartMi = CASE
			WHEN WorkEndMi - AttEndMi < AttStartMi - WorkStartMi AND AttStartMi > WorkStartMi
				THEN CASE
						WHEN AttStartMi - WorkStartMi <= 30
							THEN WorkStartMi
						ELSE AttStartMi - @MATERNITY_MUNITE
						END
			ELSE AttStartMi
			END
	FROM #tblShiftDetectorMatched ta1
	WHERE EmployeeStatusID IN (10, 11) AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL

-- UPDATE LATE_PERMIT AND EARLY_PERMIT
UPDATE sd
SET sd.Late_Permit = COALESCE(p.LATE_PERMIT, sc.LATE_PERMIT, dp.LATE_PERMIT, d.LATE_PERMIT), sd.Early_Permit = COALESCE(p.Early_Permit, sc.Early_Permit, dp.Early_Permit, d.Early_Permit)
FROM #tblShiftDetectorMatched sd
LEFT JOIN #tblEmployeeList s ON s.EmployeeID = sd.EmployeeId
LEFT JOIN tblDivision d ON d.DivisionID = s.DivisionID
LEFT JOIN tblDepartment dp ON dp.DepartmentID = s.DepartmentID
LEFT JOIN tblSection sc ON sc.SectionID = s.SectionID
LEFT JOIN tblPosition p ON p.PositionID = s.PositionID

--update sd set AttStartMi = case when AttStartMi < WorkEndMi + Late_Permit then WorkEndMi else AttStartMi end from #tblShiftDetectorMatched sd
UPDATE sd
SET AttStartMi = CASE
		WHEN AttStartMi BETWEEN WorkStartMi AND WorkStartMi + Late_Permit
			THEN WorkStartMi
		ELSE AttStartMi
		END, AttEndMi = CASE
		WHEN AttEndMi BETWEEN WorkEndMi - Early_Permit AND WorkEndMi
			THEN WorkEndMi
		ELSE AttEndMi
		END
FROM #tblShiftDetectorMatched sd

UPDATE #tblShiftDetectorMatched
SET WorkingTimeMi = CASE
		WHEN AttEndMi >= WorkEndMi
			THEN WorkEndMi
		WHEN AttEndMi >= BreakEndMi
			THEN AttEndMi
		WHEN AttEndMi >= BreakStartMi
			THEN BreakStartMi
		WHEN AttEndMi >= WorkStartMi
			THEN AttEndMi
		ELSE WorkStartMi
		END - CASE
		WHEN AttStartMi <= WorkStartMi
			THEN WorkStartMi
		WHEN AttStartMi < BreakStartMi
			THEN AttStartMi
		WHEN AttStartMi <= BreakEndMi
			THEN BreakEndMi
		WHEN AttStartMi <= WorkEndMi
			THEN AttStartMi
		ELSE WorkEndMi
		END, StdWorkingTimeMi = WorkEndMi - WorkStartMi - (BreakEndMi - BreakStartMi)
WHERE AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL

UPDATE m
SET StdWorkingTimeMi = StdWorkingTimeMi - lv.LvAmount * 60.0
FROM #tblShiftDetectorMatched m
INNER JOIN (
	SELECT EmployeeID, LeaveDate, sum(LvAmount) LvAmount
	FROM #tblLvHistory
	WHERE PaidRate > 0 AND LeaveCategory = 1
	GROUP BY EmployeeID, LeaveDate
	) lv ON lv.EmployeeID = m.EmployeeId AND m.ScheduleDate = lv.LeaveDate
WHERE StdWorkingTimeMi IS NOT NULL AND m.IsLeaveStatus3 <> 1

UPDATE #tblShiftDetectorMatched
SET StdWorkingTimeMi = 480
WHERE StdWorkingTimeMi <= 0

UPDATE #tblShiftDetectorMatched
SET WorkingTimeMi = WorkingTimeMi - (BreakEndMi - BreakStartMi)
WHERE BreakStartMi < BreakEndMi AND AttStartMi < BreakStartMi AND AttEndMi > BreakEndMi AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL

IF @MATERNITY_LATE_EARLY_OPTION = 0
	UPDATE #tblShiftDetectorMatched
	SET WorkingTimeMi = CASE
			WHEN WorkingTimeMi + @MATERNITY_MUNITE >= StdWorkingTimeMi
				THEN StdWorkingTimeMi
			ELSE WorkingTimeMi + @MATERNITY_MUNITE
			END
	FROM #tblShiftDetectorMatched d
	WHERE d.EmployeeStatusID IN (10, 11) AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL

UPDATE #tblShiftDetectorMatched
SET WorkingTimeMi = StdWorkingTimeMi
WHERE WorkingTimeMi >= StdWorkingTimeMi

--VŨ: không hiểu tác dụng đoạn này và nó gây lỗi nên tạm thời ẩn đi
--UPDATE ta1 set WorkingTimeMi = cast(WorkingTimeMi as float) / ta1.StdWorkingTimeMi * (ta2.STDWorkingTime_SS -isnull(lv.LvAmount*60.0,0))
--from #tblShiftDetectorMatched ta1
--inner join #tblShiftSetting ta2 on ta1.ShiftCode = ta2.ShiftCode
-- and ta1.StdWorkingTimeMi <> ta2.STDWorkingTime_SS
-- and ta1.Workingtimemi >0
--left join (select EmployeeID,LeaveDate, sum(LvAmount) LvAmount
--from #tblLvHistory where LeaveCategory = 1 group by EmployeeID,LeaveDate) lv on lv.EmployeeID = ta1.EmployeeId and ta1.ScheduleDate = lv.LeaveDate
--where StdWorkingTimeMi is not null and ta1.IsLeaveStatus3 <> 1
-- thiếu vào hoặc ra mà giờ vào hoặc ra quá cách xa so với bắt đầu-kết thúc của ca
-- Hoa thom toa huong xa
SELECT EmployeeID, ScheduleDate, ScheduleDate + 1 AS FromDate, ScheduleDate + 7 AS ToDate, ShiftCode, ROW_NUMBER() OVER (
		PARTITION BY EmployeeID ORDER BY EmployeeId, ScheduleDate
		) STT, RatioMatch
INTO #tblBloomFlavour
FROM #tblShiftDetectorMatched
WHERE Approved = 1

UPDATE b1
SET ToDate = b2.ScheduleDate - 1
FROM #tblBloomFlavour b1
INNER JOIN #tblBloomFlavour b2 ON b1.EmployeeId = b2.EmployeeId AND b1.STT = b2.STT - 1
WHERE b1.ToDate > b1.FromDate

INSERT INTO #tblShiftDetectorMatched (EmployeeId, ScheduleDate, ShiftCode, RatioMatch, WorkStart, WorkEnd, BreakStart, BreakEnd, OTBeforeStart, OTBeforeEnd, OTAfterStart, OTAfterEnd, HolidayStatus, Approved, AttStart, AttEnd)
SELECT p.EmployeeID, p.ScheduleDate, p.ShiftCode1, 10000, dateadd(mi, ss.WorkStartMi, p.ScheduleDate), dateadd(mi, ss.WorkEndMi, p.ScheduleDate), dateadd(mi, ss.BreakStartMi, p.ScheduleDate), dateadd(mi, ss.BreakEndMi, p.ScheduleDate), dateadd(mi, ss.OTBeforeStartMi, p.ScheduleDate), dateadd(mi, ss.OTBeforeEndMi, p.ScheduleDate), dateadd(mi, ss.OTAfterStartMi, p.ScheduleDate), dateadd(mi, ss.OTAfterEndMi, p.ScheduleDate), ws.HolidayStatus, ws.Approved, p.AttStart1, p.AttEnd2
FROM #tblWSchedule ws
INNER JOIN #tblWorking2ShiftADay_Detect p ON ws.EmployeeID = p.EmployeeID AND ws.ScheduleDate = p.ScheduleDate
LEFT JOIN #tblShiftSetting ss ON ws.ShiftCode = ss.ShiftCode
WHERE NOT EXISTS (
		SELECT 1
		FROM #tblShiftDetectorMatched m
		WHERE m.EmployeeID = ws.EmployeeId AND m.ScheduleDate = ws.ScheduleDate
		)

DELETE D
FROM #tblShiftDetector D
WHERE EXISTS (
		SELECT 1
		FROM #tblShiftDetectorMatched M
		WHERE M.EmployeeId = D.EmployeeId AND M.ScheduleDate = D.ScheduleDate
		)

--select * from  #tblShiftDetectorMatched order by EmployeeId, ScheduleDate, ShiftCode return
-------------------------------------Bắt đầu nhận dạng ca--------------------------------------------
BEGIN -- bat dau nhan dang ca
	SELECT *
	INTO #tblShiftDetector_NeedUpdate
	FROM #tblShiftDetector
	WHERE 1 = 0

	--create nonclustered index indextblShiftDetector_NeedUpdate on #tblShiftDetector_NeedUpdate(EmployeeID,ScheduleDate,AttStart,AttEnd)
	StartShiftDetector:

	-- AttStart, AttEnd
	UPDATE ws
	SET WorkStart = dateadd(mi, ss.WorkStartMi, ws.ScheduleDate), WorkEnd = dateadd(mi, ss.WorkEndMi, ws.ScheduleDate), BreakStart = dateadd(mi, ss.BreakStartMi, ws.ScheduleDate), BreakEnd = dateadd(mi, ss.BreakEndMi, ws.ScheduleDate), isNightShift = CASE
			WHEN ss.WorkEndMi > 1440 OR ss.WorkStartMi < 130
				THEN 1
			ELSE 0
			END, isOfficalShift = ISNULL(ss.isOfficalShift, 0), WorkStartMi = ss.WorkStartMi, WorkEndMi = ss.WorkEndMi, BreakStartMi = ss.BreakStartMi, BreakEndMi = ss.BreakEndMi
	FROM #tblShiftDetector ws
	INNER JOIN #tblShiftSetting ss ON ws.ShiftCode = ss.ShiftCode

	-- lấy thống kê ca dựa trên nhân viên
	UPDATE #tblShiftDetector
	SET TIMEINBEFORE = DATEADD(MINUTE, - @TA_TIMEINBEFORE, WorkStart), TIMEOUTAFTER = DATEADD(hour, CASE
				WHEN isNightShift = 1 AND @TA_TIMEOUTAFTER > 14
					THEN 14
				ELSE @TA_TIMEOUTAFTER
				END, WorkStart), INOUT_MINIMUM = @TA_INOUT_MINIMUM

	DECLARE @RepeatTime INT = 0

	UPDATE #tblShiftDetector
	SET IsLeaveStatus3 = 0

	UPDATE ta1
	SET IsLeaveStatus3 = 1
	FROM #tblShiftDetector ta1
	INNER JOIN #tblLvHistory lv ON lv.EmployeeID = ta1.EmployeeId AND lv.LeaveDate = ta1.ScheduleDate AND lv.LeaveStatus = 3

	IF (object_id('sp_ShiftDetector_FinishTimeInTimeOutRange') IS NULL)
	BEGIN
		EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_FinishTimeInTimeOutRange(@StopUpdate bit output, @LoginID int, @FromDate datetime, @ToDate datetime) as begin SET NOCOUNT ON; end')
	END

	SET @StopUpdate = 0

	-- Goi thu thu thuc customize import de ap dung cho tung khach hang rieng biet
	EXEC sp_ShiftDetector_FinishTimeInTimeOutRange @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

	UPDATE #tblShiftDetector
	SET AttEndYesterdayFixedTblHasta = 0, AttStartTomorrowFixedTblHasta = 0

	TRUNCATE TABLE #tblPrevMatch

	INSERT INTO #tblPrevMatch (EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3, Prevdate, NextDate)
	SELECT EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3, DATEADD(day, - 1, ScheduleDate), DATEADD(day, 1, ScheduleDate)
	FROM #tblShiftDetectorMatched

	TRUNCATE TABLE #tblHasTA_Fixed

	TRUNCATE TABLE #tblShiftDetector_NeedUpdate

	INSERT INTO #tblHasTA_Fixed
	SELECT *
	FROM #tblHasTA
	WHERE TAStatus = 3 OR Attdate < @FromDate

	INSERT INTO #tblShiftDetector_NeedUpdate
	SELECT *
	FROM #tblShiftDetector --where IsLeaveStatus3 = 0 -- nghi ca ngay thi khong can nhan biet ca nao

	DECLARE @count INT = 0 -- (select count(1) from #tblShiftDetector_NeedUpdate)

	TRUNCATE TABLE #tblShiftDetector

	StartRepeat:

	--select * into tblShiftDetector_NeedUpdate from #tblShiftDetector_NeedUpdate
	--select * into tblPrevMatch from #tblPrevMatch
	-- gio ra hom qua va gio vao hom sau
	UPDATE m1
	SET AttEndYesterday = isnull(m2.AttEnd, dateadd(HOUR, - 10, m1.WorkStart)), ShiftCodeYesterday = m2.ShiftCode, isNightShiftYesterday = CASE
			WHEN m2.AttStart IS NOT NULL
				THEN m2.isNightShift
			ELSE 0
			END
	FROM #tblShiftDetector_NeedUpdate m1
	INNER JOIN #tblPrevMatch m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.NextDate AND m2.IsLeaveStatus3 = 0
	WHERE m1.AttEndYesterdayFixedTblHasta <> 1 AND (m2.AttEnd IS NOT NULL OR m1.Holidaystatus > 0 OR m1.IsLeaveStatus3 = 1)

	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, DATEADD(hour, 16, m1.WorkEnd))
	FROM #tblShiftDetector_NeedUpdate m1
	INNER JOIN #tblPrevMatch m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.Prevdate AND m2.IsLeaveStatus3 = 0
	WHERE m1.AttStartTomorrowFixedTblHasta <> 1 AND m2.AttStart IS NOT NULL

	UPDATE m1
	SET AttEndYesterday = m2.AttEnd, AttEndYesterdayFixedTblHasta = 1
	FROM #tblShiftDetector_NeedUpdate m1
	INNER JOIN #tblHasTA_Fixed m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.NextDate AND m2.AttEnd IS NOT NULL
	WHERE m1.AttEndYesterdayFixedTblHasta <> 1

	UPDATE m1
	SET AttEndYesterday = m2.AttEnd
	FROM #tblShiftDetector_NeedUpdate m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate + 1
	WHERE m1.AttEndYesterday IS NULL AND m2.AttEnd IS NOT NULL

	UPDATE m1
	SET ShiftCodeYesterday = m2.ShiftCode
	FROM #tblShiftDetector_NeedUpdate m1
	INNER JOIN #tblHasTA_Fixed m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.NextDate
	WHERE m1.ShiftCodeYesterday IS NULL AND m2.AttStart IS NOT NULL AND m2.AttEnd IS NOT NULL

	UPDATE m1
	SET isNightShiftYesterday = m2.isNightShift
	FROM #tblShiftDetector_NeedUpdate m1
	INNER JOIN #tblHasTA_Fixed m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.NextDate
	WHERE m2.AttStart IS NOT NULL AND m2.AttEnd IS NOT NULL AND m1.ShiftCodeYesterday IS NULL --and (m2.TAStatus = 3 or m2.AttDate < @FromDate)
		-- update m1 set ShiftCodeYesterday = m2.ShiftCode from #tblShiftDetector m1 inner join #tblWSchedule m2 on m1.EmployeeId = m2.EmployeeId and m1.ScheduleDate = m2.ScheduleDate+1 where m2.DateStatus = 3
		--ca hom qua da dc duyet, hoac Nhan vien nghi ca ngay thi lay ca hom qua ap cho ca hom nay

	UPDATE m1
	SET ShiftCodeYesterday = m2.ShiftCode
	FROM #tblShiftDetector_NeedUpdate m1
	INNER JOIN #tblWSchedule m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.NextDAte
	WHERE ((m2.DateStatus = 3 OR m2.Approved = 1) OR m1.IsLeaveStatus3 = 3) AND EXISTS (
			SELECT 1
			FROM #tblHasTA ta
			WHERE ta.EmployeeID = m1.EmployeeId AND ta.NextDate = m1.ScheduleDate AND ta.AttStart IS NOT NULL AND ta.AttEnd IS NOT NULL
			)

	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, DATEADD(hour, 16, m1.WorkEnd))
	FROM #tblShiftDetector_NeedUpdate m1
	INNER JOIN #tblHasTA m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.PrevDate
	WHERE m2.AttStart IS NOT NULL AND (m2.TAStatus = 3)

	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, DATEADD(hour, 16, m1.WorkEnd))
	FROM #tblShiftDetector_NeedUpdate m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate - 1
	WHERE m2.AttStart IS NOT NULL

	-- xac dinh gio vao ra do hom qua và ngày mai dã được fix cố định chưa
	UPDATE m1
	SET AttEndYesterdayFixed = 1
	FROM #tblShiftDetector_NeedUpdate m1
	INNER JOIN #tblWSchedule m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.NextDate
	WHERE m2.DateStatus = 3

	UPDATE m1
	SET AttStartTomorrowFixed = 1
	FROM #tblShiftDetector_NeedUpdate m1
	INNER JOIN #tblWSchedule m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.PrevDate
	WHERE m2.DateStatus = 3

	UPDATE #tblShiftDetector_NeedUpdate
	SET AttEndYesterday = CASE
			WHEN AttEndYesterday IS NULL
				THEN dateadd(HOUR, - 10, WorkStart)
			ELSE AttEndYesterday
			END, AttStartTomorrow = CASE
			WHEN AttStartTomorrow IS NULL
				THEN DATEADD(hour, 12, WorkEnd)
			ELSE AttStartTomorrow
			END
	WHERE AttEndYesterday IS NULL OR AttStartTomorrow IS NULL

	-------------------------------------------------------------------------------------------------------------
	IF (OBJECT_ID('sp_ShiftDetector_AttStartAttEnd') IS NULL)
		EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_AttStartAttEnd ( @StopUpdate bit output ,@LoginID int ,@FromDate datetime ,@ToDate datetime ,@IN_OUT_TA_SEPARATE bit ) as begin SET NOCOUNT ON; end')

	SET @StopUpdate = 0

	EXEC sp_ShiftDetector_AttStartAttEnd @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate, @IN_OUT_TA_SEPARATE

	IF @StopUpdate = 0
	BEGIN
		--1. gà què an quanh cối xay
		-- ga que an quan coi xay
		UPDATE #tblShiftDetector_NeedUpdate
		SET AttStart = tmp.AttTime, StateIn = AttState
		FROM #tblShiftDetector_NeedUpdate m
		INNER JOIN (
			SELECT ROW_NUMBER() OVER (
					PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime ASC
					) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND (ForceState = 0 OR AttState = 1)
			WHERE m.AttStart IS NULL AND abs(DATEDIFF(mi, m.WorkStart, t.AttTime)) <= 60
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1

		-- lấy giờ vào dựa trên giờ tăng ca trước
		UPDATE #tblShiftDetector_NeedUpdate
		SET AttStart = tmp.AttTime, StateIn = AttState, OTBeforeStart = tmp.AttTime
		FROM #tblShiftDetector_NeedUpdate m
		INNER JOIN (
			SELECT ROW_NUMBER() OVER (
					PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime ASC
					) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
			INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
			WHERE m.AttStart IS NULL AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND (ForceState = 0 OR AttState = 1) AND abs(datediff(mi, dateadd(mi, ss.OTBeforeStartMi - ss.WorkStartMi, m.WorkStart), t.AttTime)) < 60
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode

		-- voi phan biet vao ra thi lay xa hon chut neu khop trang thai vao
		IF @IN_OUT_TA_SEPARATE = 1
		BEGIN
			UPDATE #tblShiftDetector_NeedUpdate
			SET AttStart = tmp.AttTime, StateIn = AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN (
				SELECT ROW_NUMBER() OVER (
						PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime ASC
						) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
				FROM #tblShiftDetector_NeedUpdate m
				INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID AND t.AttState = 1 AND ISNULL(m.FixedAtt, 0) = 0 AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.attTime < dateadd(hour, 2, WorkStart)
				) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1

			-- 2. Ðói thì di làm an xa
			UPDATE #tblShiftDetector_NeedUpdate
			SET AttStart = tmp.AttTime, StateIn = AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN (
				SELECT ROW_NUMBER() OVER (
						PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime ASC
						) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
				FROM #tblShiftDetector_NeedUpdate m
				INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID AND t.AttState = 1 AND ISNULL(m.FixedAtt, 0) = 0 AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.attTime < WorkEnd AND DATEDIFF(mi, m.WorkStart, t.AttTime) < 600
				) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1
			WHERE AttStart IS NULL
		END

		/*print 'x--------------------------------------------------------x11'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
		-- 2. Ðói thì di làm an xa
		UPDATE #tblShiftDetector_NeedUpdate
		SET AttStart = tmp.AttTime, StateIn = AttState
		FROM #tblShiftDetector_NeedUpdate m
		INNER JOIN (
			SELECT ROW_NUMBER() OVER (
					PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime ASC
					) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID AND (ForceState = 0 OR AttState = 1) AND t.AttTime BETWEEN m.TIMEINBEFORE AND m.WorkEnd AND t.attTime < WorkEnd AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND DATEDIFF(mi, m.WorkStart, t.AttTime) < 600
			WHERE m.AttStart IS NULL
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1

		-- ca 3 thi gio vao ko the la 5h sang hom sau dc
		UPDATE #tblShiftDetector_NeedUpdate
		SET AttStart = NULL
		WHERE isNightShift = 1 AND DATEDIFF(hh, WorkStart, AttStart) > 5

		/*print 'x--------------------------------------------------------x12'

set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
		-- AttEnd
		-- 1. ga que an quan cuoi xay
		UPDATE #tblShiftDetector_NeedUpdate
		SET AttEnd = tmp.AttTime, StateOut = AttState
		FROM #tblShiftDetector_NeedUpdate m
		INNER JOIN (
			SELECT ROW_NUMBER() OVER (

					PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime DESC
					) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttEnd IS NULL AND (ForceState = 0 OR AttState = 2) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND abs(DATEDIFF(mi, m.WorkEnd, t.AttTime)) <= 60
				--group by m.EmployeeId, m.ScheduleDate,m.ShiftCode
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1

		UPDATE #tblShiftDetector_NeedUpdate
		SET AttEnd = tmp.AttTime, StateOut = AttState
		FROM #tblShiftDetector_NeedUpdate m
		INNER JOIN (
			SELECT ROW_NUMBER() OVER (
					PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime DESC
					) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
			WHERE t.AttTime < m.WorkEnd AND m.AttEnd IS NULL AND t.AttTime > m.WorkStart AND (t.ForceState = 0 OR t.AttState = 2) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND DATEDIFF(mi, ISNULL(m.AttStart, m.WorkStart), t.AttTime) > m.INOUT_MINIMUM AND DATEDIFF(mi, m.WorkEnd, t.AttTime) <= 60
				--group by m.EmployeeId, m.ScheduleDate,m.ShiftCode
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1

		UPDATE #tblShiftDetector_NeedUpdate
		SET AttEnd = tmp.AttTime, StateOut = AttState
		FROM #tblShiftDetector_NeedUpdate m
		INNER JOIN (
			SELECT ROW_NUMBER() OVER (
					PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime DESC
					) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttEnd < m.WorkEnd AND (t.ForceState = 0 OR t.AttState = 2) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND DATEDIFF(mi, m.WorkEnd, t.AttTime) <= 120
				--group by m.EmployeeId, m.ScheduleDate,m.ShiftCode
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1

		-- lấy giờ ra dựa trên giờ tăng ca sau
		UPDATE #tblShiftDetector_NeedUpdate
		SET AttEnd = tmp.AttTime, StateOut = AttState, OTAfterEnd = tmp.AttTime
		FROM #tblShiftDetector_NeedUpdate m
		INNER JOIN (
			SELECT ROW_NUMBER() OVER (
					PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime DESC
					) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
			INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
			WHERE m.AttEnd IS NULL AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.atttime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND (ForceState = 0 OR AttState = 2) AND abs(datediff(mi, dateadd(mi, ss.OTAfterEndMi - ss.WorkEndMi, m.WorkEnd), t.AttTime)) < 60
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1

		IF @IN_OUT_TA_SEPARATE = 1
		BEGIN
			UPDATE #tblShiftDetector_NeedUpdate
			SET AttEnd = tmp.AttTime, StateOut = 2
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN (
				SELECT m.EmployeeId, m.ScheduleDate, m.ShiftCode, max(t.AttTime) AttTime
				FROM #tblShiftDetector_NeedUpdate m
				INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
				WHERE t.AttState = 2 AND ISNULL(FixedAtt, 0) = 0 AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.attTime > dateadd(hour, - 6, WorkEnd)
				GROUP BY m.EmployeeId, m.ScheduleDate, m.ShiftCode
				) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode
		END

		/*print 'x--------------------------------------------------------x14'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
		-- 2. Ðói thì di làm an xa
		UPDATE #tblShiftDetector_NeedUpdate
		SET AttEnd = tmp.AttTime, StateOut = AttState
		FROM #tblShiftDetector_NeedUpdate m
		INNER JOIN (
			SELECT ROW_NUMBER() OVER (
					PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime DESC
					) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttEnd IS NULL AND (ForceState = 0 OR AttState = 2) AND (m.AttStart IS NULL OR (t.AttTime > m.AttStart AND DATEDIFF(mi, m.AttStart, t.AttTime) >= 20)) AND t.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND abs(DATEDIFF(mi, m.WorkEnd, t.AttTime)) <= 90
				--group by m.EmployeeId, m.ScheduleDate,m.ShiftCode
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1

		-- 2. Ðói thì di làm an xa
		UPDATE #tblShiftDetector_NeedUpdate
		SET AttEnd = tmp.AttTime, StateOut = AttState
		FROM #tblShiftDetector_NeedUpdate m
		INNER JOIN (
			SELECT ROW_NUMBER() OVER (
					PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime DESC
					) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttEnd IS NULL AND (ForceState = 0 OR AttState = 2) AND (m.AttStart IS NULL OR (t.AttTime > m.AttStart AND DATEDIFF(mi, m.AttStart, t.AttTime) >= 20)) AND t.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow
				--and abs(DATEDIFF(mi,m.WorkEnd,t.AttTime)) <=320
				--group by m.EmployeeId, m.ScheduleDate,m.ShiftCode
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1

		-- AttStart
		-- 2. Ðói thì di làm an xa
		-- 2. doi thi di lam an xa
		UPDATE #tblShiftDetector_NeedUpdate
		SET AttStart = tmp.AttTime, StateIn = AttState
		FROM #tblShiftDetector m
		INNER JOIN (
			SELECT ROW_NUMBER() OVER (
					PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime ASC
					) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
			FROM #tblShiftDetector_NeedUpdate m
			INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttStart IS NULL AND (ForceState = 0 OR AttState = 1) AND (t.AttTime < m.AttEnd OR m.AttEnd IS NULL) AND t.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow
				--group by m.EmployeeId, m.ScheduleDate,m.ShiftCode
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1

		-- quên bấm 1 đầu và AttStart dang trùng AttEnd thì xác định lại cho dúng anh nào vào anh nào ra
		-- t/h nhân viên sửa lại giờ vào ra, nen bi du thua attTime
		UPDATE #tblShiftDetector_NeedUpdate
		SET AttStart = CASE
				WHEN DATEDIFF(mi, WorkStart, AttStart) < 240 AND (isnull(AttEndYesterdayFixed, 0) = 0 OR DATEDIFF(mi, AttEndYesterday, AttStart) > 120)
					THEN AttStart
				ELSE NULL
				END, AttEnd = CASE
				WHEN DATEDIFF(mi, WorkEnd, AttEnd) >= - 240 AND (isnull(AttStartTomorrowFixed, 0) = 0 OR DATEDIFF(mi, AttStartTomorrow, AttStart) < 120)
					THEN AttEnd
				ELSE NULL
				END, StateIn = 0, StateOut = 0
		FROM #tblShiftDetector_NeedUpdate
		WHERE AttStart = AttEnd --and EmployeeId = 'HLS001'
	END

	-- nghỉ cả ngày mà bấm thiếu vào ra thì bỏ
	UPDATE m
	SET -- AttStart = null, AttEnd = null,
		StateIn = 0, StateOut = 0
	FROM #tblShiftDetector_NeedUpdate m
	WHERE (m.AttStart IS NULL OR m.AttEnd IS NULL)
		--and (HolidayStatus > 0 or IsLeaveStatus3 = 1)
		AND (IsLeaveStatus3 = 1)

	/*print 'x--------------------------------------------------------x16'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
	UPDATE #tblShiftDetector_NeedUpdate
	SET AttStartMi = datepart(hour, AttStart) * 60 + DATEPART(minute, AttStart) + (datediff(day, ScheduleDate, AttStart) * 1440), AttEndMi = datepart(hour, AttEnd) * 60 + DATEPART(minute, AttEnd)

	UPDATE #tblShiftDetector_NeedUpdate
	SET AttEndMi = 1440 + AttEndMi
	WHERE DATEDIFF(day, ScheduleDate, AttEnd) = 1

	IF @MATERNITY_LATE_EARLY_OPTION = 1
		UPDATE ta1
		SET AttStartMi = CASE
				WHEN AttStartMi > WorkStartMi
					THEN CASE
							WHEN AttStartMi - WorkStartMi <= 30
								THEN WorkStartMi
							ELSE AttStartMi - @MATERNITY_MUNITE
							END
				ELSE AttStartMi
				END
		FROM #tblShiftDetector_NeedUpdate ta1
		WHERE EmployeeStatusID IN (10, 11) AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL
	ELSE IF @MATERNITY_LATE_EARLY_OPTION = 2
		UPDATE ta1
		SET AttEndMi = CASE
				WHEN AttEndMi < WorkEndMi
					THEN CASE
							WHEN WorkEndMi - AttStartMi <= 30
								THEN WorkEndMi
							ELSE AttEndMi + @MATERNITY_MUNITE
							END
				ELSE AttEndMi
				END
		FROM #tblShiftDetector_NeedUpdate ta1
		WHERE EmployeeStatusID IN (10, 11) AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL
	ELSE IF @MATERNITY_LATE_EARLY_OPTION = 3
		UPDATE ta1
		SET AttEndMi = CASE
				WHEN WorkEndMi - AttEndMi >= AttStartMi - WorkStartMi AND AttEndMi < WorkEndMi
					THEN CASE
							WHEN WorkEndMi - AttStartMi <= 30
								THEN WorkEndMi
							ELSE AttEndMi + @MATERNITY_MUNITE
							END
				ELSE AttEndMi
				END, AttStartMi = CASE
				WHEN WorkEndMi - AttEndMi < AttStartMi - WorkStartMi AND AttStartMi > WorkStartMi
					THEN CASE
							WHEN AttStartMi - WorkStartMi <= 30
								THEN WorkStartMi
							ELSE AttStartMi - @MATERNITY_MUNITE
							END
				ELSE AttStartMi
				END
		FROM #tblShiftDetector_NeedUpdate ta1
		WHERE EmployeeStatusID IN (10, 11) AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL

	-- UPDATE LATE_PERMIT AND EARLY_PERMIT
	UPDATE sd
	SET sd.Late_Permit = CASE
			WHEN p.LATE_PERMIT IS NOT NULL
				THEN p.LATE_PERMIT
			WHEN sc.LATE_PERMIT IS NOT NULL
				THEN sc.LATE_PERMIT
			WHEN dp.LATE_PERMIT IS NOT NULL
				THEN dp.LATE_PERMIT
			ELSE d.LATE_PERMIT
			END, sd.Early_Permit = CASE
			WHEN p.EARLY_PERMIT IS NOT NULL
				THEN p.EARLY_PERMIT
			WHEN sc.EARLY_PERMIT IS NOT NULL
				THEN sc.EARLY_PERMIT
			WHEN dp.EARLY_PERMIT IS NOT NULL
				THEN dp.EARLY_PERMIT
			ELSE d.EARLY_PERMIT
			END
	FROM #tblShiftDetector_NeedUpdate sd
	LEFT JOIN #tblEmployeeList s ON s.EmployeeID = sd.EmployeeId
	LEFT JOIN tblDivision d ON d.DivisionID = s.DivisionID
	LEFT JOIN tblDepartment dp ON dp.DepartmentID = s.DepartmentID
	LEFT JOIN tblSection sc ON sc.SectionID = s.SectionID
	LEFT JOIN tblPosition p ON p.PositionID = s.PositionID

	--update sd set AttStartMi = case when AttStartMi < WorkEndMi + Late_Permit then WorkEndMi else AttStartMi end from #tblShiftDetectorMatched sd
	/*
update sd
set AttStartMi = case when AttStartMi BETWEEN WorkStartMi and WorkStartMi + case when Late_Permit < 10 then Late_Permit else 10 end then WorkStartMi else AttStartMi end,
    AttEndMi = case when AttEndMi BETWEEN WorkEndMi - case when Early_Permit < 10 then Early_Permit else 10 end AND WorkEndMi then  WorkEndMi else AttEndMi end
from #tblShiftDetector_NeedUpdate sd
*/
	UPDATE #tblShiftDetector_NeedUpdate
	SET WorkingTimeMi = CASE
			WHEN AttEndMi >= WorkEndMi
				THEN WorkEndMi
			WHEN AttEndMi >= BreakEndMi
				THEN AttEndMi
			WHEN AttEndMi >= BreakStartMi
				THEN BreakStartMi
			WHEN AttEndMi >= WorkStartMi
				THEN AttEndMi
			ELSE WorkStartMi
			END - CASE
			WHEN AttStartMi <= WorkStartMi
				THEN WorkStartMi
			WHEN AttStartMi < BreakStartMi
				THEN AttStartMi
			WHEN AttStartMi <= BreakEndMi
				THEN BreakEndMi
			WHEN AttStartMi <= WorkEndMi
				THEN AttStartMi
			ELSE WorkEndMi
			END, StdWorkingTimeMi = WorkEndMi - WorkStartMi - (BreakEndMi - BreakStartMi)
	WHERE AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL

	UPDATE #tblShiftDetector_NeedUpdate
	SET StdWorkingTimeMi = WorkEndMi - WorkStartMi - (BreakEndMi - BreakStartMi)

	/*print 'x--------------------------------------------------------x18'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
	UPDATE m
	SET StdWorkingTimeMi = StdWorkingTimeMi - lv.LvAmount * 60.0
	FROM #tblShiftDetector_NeedUpdate m
	INNER JOIN (
		SELECT EmployeeID, LeaveDate, sum(LvAmount) LvAmount
		FROM #tblLvHistory
		WHERE LeaveCategory = 1
		GROUP BY EmployeeID, LeaveDate
		) lv ON lv.EmployeeID = m.EmployeeId AND m.ScheduleDate = lv.LeaveDate
	WHERE StdWorkingTimeMi IS NOT NULL AND m.IsLeaveStatus3 <> 1

	UPDATE #tblShiftDetector
	SET StdWorkingTimeMi = 480
	WHERE -- NeedUpdate =1 and
		StdWorkingTimeMi <= 0

	UPDATE #tblShiftDetector_NeedUpdate
	SET WorkingTimeMi = WorkingTimeMi - (BreakEndMi - BreakStartMi)
	WHERE BreakStartMi < BreakEndMi AND AttStartMi <= BreakStartMi AND AttEndMi >= BreakEndMi AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL

	/*print 'x--------------------------------------------------------x19'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
	IF @MATERNITY_LATE_EARLY_OPTION = 0
		UPDATE #tblShiftDetector_NeedUpdate
		SET WorkingTimeMi = CASE
				WHEN WorkingTimeMi + @MATERNITY_MUNITE >= StdWorkingTimeMi
					THEN StdWorkingTimeMi
				ELSE WorkingTimeMi + @MATERNITY_MUNITE
				END
		FROM #tblShiftDetector_NeedUpdate d
		WHERE d.EmployeeStatusID IN (10, 11) AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL

	UPDATE #tblShiftDetector_NeedUpdate
	SET WorkingTimeMi = StdWorkingTimeMi
	WHERE WorkingTimeMi >= StdWorkingTimeMi

	UPDATE ta1
	SET WorkingTimeMi = cast(WorkingTimeMi AS FLOAT) * (ta2.STDWorkingTime_SS - isnull(lv.LvAmount * 60.0, 0)) / ta1.StdWorkingTimeMi
	FROM #tblShiftDetector_NeedUpdate ta1
	INNER JOIN #tblShiftSetting ta2 ON ta1.ShiftCode = ta2.ShiftCode AND ta1.StdWorkingTimeMi <> ta2.STDWorkingTime_SS AND ta1.Workingtimemi > 0
	LEFT JOIN (
		SELECT EmployeeID, LeaveDate, sum(LvAmount) LvAmount
		FROM #tblLvHistory
		WHERE LeaveCategory = 1
		GROUP BY EmployeeID, LeaveDate
		) lv ON lv.EmployeeID = ta1.EmployeeId AND ta1.ScheduleDate = lv.LeaveDate
	WHERE StdWorkingTimeMi IS NOT NULL AND ta1.IsLeaveStatus3 <> 1

	/*print 'x--------------------------------------------------------x20'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
	UPDATE #tblShiftDetector_NeedUpdate
	SET AttEnd2 = tmp.AttTime
	FROM #tblShiftDetector_NeedUpdate m
	INNER JOIN (
		SELECT ROW_NUMBER() OVER (
				PARTITION BY m.EmployeeId, m.ShiftCode, m.ScheduleDate ORDER BY AttTime DESC
				) AS STT, m.EmployeeId, m.ScheduleDate, m.ShiftCode, AttTime, AttState
		FROM #tblShiftDetector_NeedUpdate m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NOT NULL AND (ForceState = 0 OR AttState = 2) AND (t.AttTime > m.AttEnd AND DATEDIFF(mi, m.AttEnd, t.AttTime) >= 20) AND t.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND abs(DATEDIFF(mi, m.WorkEnd, t.AttTime)) <= 320
			--group by m.EmployeeId, m.ScheduleDate,m.ShiftCode
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.ShiftCode = tmp.ShiftCode AND STT = 1

	UPDATE #tblShiftDetector_NeedUpdate
	SET AttEndMi2 = datepart(hour, AttEnd2) * 60 + DATEPART(minute, AttEnd2)

	UPDATE #tblShiftDetector_NeedUpdate
	SET AttEndMi2 = 1440 + AttEndMi2
	WHERE AttEndMi > 1440

	-- chấm điểm
	UPDATE #tblShiftDetector_NeedUpdate
	SET InInterval = CASE
			WHEN AttStart IS NULL
				THEN NULL
			ELSE DATEDIFF(mi, AttStart, WorkStart)
			END, OutInterval = CASE
			WHEN AttEnd IS NULL
				THEN NULL
			ELSE DATEDIFF(mi, WorkEnd, AttEnd)
			END

	-- che do lam 7h/ngay maternity
	UPDATE #tblShiftDetector_NeedUpdate
	SET InInterval = InInterval + @MATERNITY_MUNITE
	FROM #tblShiftDetector_NeedUpdate d
	WHERE d.EmployeeStatusID IN (10, 11) AND InInterval > 0 AND OutInterval > 0

	/*print 'x--------------------------------------------------------x21'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
	UPDATE #tblShiftDetector_NeedUpdate
	SET InInterval = 0
	FROM #tblShiftDetector_NeedUpdate d
	WHERE d.EmployeeStatusID IN (10, 11) AND InInterval < - 30 AND @MATERNITY_MUNITE + InInterval >= 0 AND OutInterval > 0

	UPDATE #tblShiftDetector_NeedUpdate
	SET OutInterval = 0
	FROM #tblShiftDetector_NeedUpdate d
	WHERE d.EmployeeStatusID IN (10, 11) AND OutInterval < - 30 AND @MATERNITY_MUNITE + OutInterval >= 0 AND InInterval > 0

	UPDATE #tblShiftDetector_NeedUpdate
	SET InInterval = InInterval + CASE
			WHEN InInterval BETWEEN - 35 AND 0
				THEN @MATERNITY_MUNITE / 2
			ELSE @MATERNITY_MUNITE
			END
	FROM #tblShiftDetector_NeedUpdate d
	WHERE d.EmployeeStatusID IN (10, 11) AND d.InInterval IS NOT NULL AND d.InInterval < - 20

	/*print 'x--------------------------------------------------------x22'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
	UPDATE #tblShiftDetector_NeedUpdate
	SET OutInterval = OutInterval + CASE
			WHEN OutInterval BETWEEN - 35 AND 0
				THEN @MATERNITY_MUNITE / 2
			ELSE @MATERNITY_MUNITE
			END
	FROM #tblShiftDetector_NeedUpdate d
	WHERE d.EmployeeStatusID IN (10, 11) AND d.OutInterval IS NOT NULL AND d.OutInterval < - 20

	UPDATE #tblShiftDetector_NeedUpdate
	SET InIntervalS = abs(CASE
				WHEN AttStart IS NULL OR WorkStartSMi <= 0
					THEN NULL
				ELSE AttStartMi - WorkStartSMi
				END), OutIntervalS = abs(CASE
				WHEN AttEnd IS NULL OR WorkEndSMi <= 0
					THEN NULL
				ELSE WorkEndSMi - AttEndMi
				END)
		--update #tblShiftDetector_NeedUpdate set
		, InIntervalE = abs(CASE
				WHEN AttStart IS NULL OR WorkStartEMi <= 0
					THEN NULL
				ELSE AttStartMi - WorkStartEMi
				END), OutIntervalE = abs(CASE
				WHEN AttEnd IS NULL OR WorkEndEMi <= 0
					THEN NULL
				ELSE WorkEndEMi - AttEndMi
				END)

	-- nếu có tang ca truoc
	UPDATE u
	SET InIntervalS = s.OTBeforeStartMi - u.AttStartMi
	FROM #tblShiftDetector_NeedUpdate u
	INNER JOIN #tblShiftSetting s ON u.ShiftCode = s.ShiftCode
	WHERE u.AttStartMi IS NOT NULL AND u.InIntervalS > (u.AttStartMi - s.OTBeforeStartMi) --and (u.AttStartMi - s.OTBeforeStartMi) > -1

	-- nếu có tang ca sau
	UPDATE u
	SET OutIntervalS = u.AttEndMi - s.OTAfterEndMi
	FROM #tblShiftDetector_NeedUpdate u
	INNER JOIN #tblShiftSetting s ON u.ShiftCode = s.ShiftCode
	WHERE u.AttEndMi IS NOT NULL AND u.OutIntervalS > (u.AttEndMi - s.OTAfterEndMi) AND (u.AttEndMi - s.OTAfterEndMi) > - 1 AND u.AttEnd2 IS NULL

	UPDATE u
	SET OutIntervalS = u.AttEndMi2 - s.OTAfterEndMi
	FROM #tblShiftDetector_NeedUpdate u
	INNER JOIN #tblShiftSetting s ON u.ShiftCode = s.ShiftCode
	WHERE u.AttEndMi2 IS NOT NULL AND u.AttEnd2 IS NOT NULL

	-- lấy Interval sát với mốc ca nhấtt, 2008 khong co lenh IIF() ::(
	--update #tblShiftDetector_NeedUpdate set InInterval = case when InIntervalS > InIntervalE then InIntervalE else InIntervalS end where abs(InInterval) - 30 > InIntervalS or abs(InInterval) -30 > InIntervalE
	UPDATE #tblShiftDetector_NeedUpdate
	SET InInterval = CASE
			WHEN InIntervalS > InIntervalE
				THEN InIntervalE
			ELSE InIntervalS
			END
	WHERE abs(InInterval) > InIntervalS OR abs(InInterval) > InIntervalE

	--update #tblShiftDetector_NeedUpdate set OutInterval = case when OutIntervalS > OutIntervalE then OutIntervalE else OutIntervalS end where abs(OutInterval)-30 > OutIntervalS or abs(OutInterval)-30 > OutIntervalE
	--update #tblShiftDetector_NeedUpdate set OutInterval = case when OutIntervalS > OutIntervalE then OutIntervalE else OutIntervalS end where (abs(OutInterval) > OutIntervalS or abs(OutInterval) > OutIntervalE) and @IgnoreTimeOut_ShiftDetector = 0
	--select * from #tblShiftDetector_NeedUpdate where InInterval = 1 and OutInterval = 1
	/*print 'x--------------------------------------------------------x24'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())

print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
	-- nghi nua buoi
	UPDATE m
	SET InInterval = InInterval + lv.LvAmount * 60.0 + CASE
			WHEN m.AttStart > m.BreakEnd
				THEN DATEDIFF(mi, m.BreakStart, m.BreakEnd)
			ELSE 0
			END
	FROM #tblShiftDetector_NeedUpdate m
	INNER JOIN #tblLvHistory lv ON lv.EmployeeID = m.EmployeeId AND m.ScheduleDate = lv.LeaveDate
	WHERE --NeedUpdate=1 and
		InInterval IS NOT NULL AND lv.LeaveStatus IN (1, 4)

	UPDATE m
	SET OutInterval = OutInterval + lv.LvAmount * 60.0 + CASE
			WHEN m.AttEnd < m.BreakEnd
				THEN DATEDIFF(mi, m.BreakStart, m.BreakEnd)
			ELSE 0
			END
	FROM #tblShiftDetector_NeedUpdate m
	INNER JOIN #tblLvHistory lv ON lv.EmployeeID = m.EmployeeId AND m.ScheduleDate = lv.LeaveDate
	WHERE --NeedUpdate=1 and
		OutInterval IS NOT NULL AND lv.LeaveStatus IN (2, 5) AND @IgnoreTimeOut_ShiftDetector = 0

	UPDATE m
	SET InInterval = OTBeforeStartMi - AttStartMi
	FROM #tblShiftDetector_NeedUpdate m
	INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
	WHERE abs(InInterval) > 100 AND OTBeforeStart IS NOT NULL

	UPDATE m
	SET OutInterval = AttEndMi - OTAfterStartMi
	FROM #tblShiftDetector_NeedUpdate m
	INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
	WHERE abs(OutInterval) > 100 AND OTAfterEnd IS NOT NULL

	-- Xu ly nhung cap chua co diem
	--update #tblShiftDetector_NeedUpdate set InInterval = case when StdWorkingTimeMi is null then 500 else StdWorkingTimeMi end where AttStart is null
	UPDATE #tblShiftDetector_NeedUpdate
	SET InInterval = - 480
	WHERE AttStart IS NULL

	--update #tblShiftDetector_NeedUpdate set OutInterval = case when StdWorkingTimeMi is null then 500 else StdWorkingTimeMi end where AttEnd is null and @IgnoreTimeOut_ShiftDetector = 0
	UPDATE #tblShiftDetector_NeedUpdate
	SET OutInterval = - 480
	WHERE AttEnd IS NULL AND @IgnoreTimeOut_ShiftDetector = 0

	/*print 'x--------------------------------------------------------x242'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
	UPDATE #tblShiftDetector_NeedUpdate
	SET OutInterval = isnull(StdWorkingTimeMi, 500), OutIntervalE = isnull(StdWorkingTimeMi, 500), OutIntervalS = isnull(StdWorkingTimeMi, 500), WorkingTimeMi = StdWorkingTimeMi
	WHERE @IgnoreTimeOut_ShiftDetector = 1

	UPDATE #tblShiftDetector_NeedUpdate
	SET InInterval = 0
	WHERE InInterval BETWEEN @SHIFTDETECTOR_LATE_PERMIT * - 1 AND @SHIFTDETECTOR_IN_EARLY_USUALLY

	UPDATE #tblShiftDetector_NeedUpdate
	SET OutInterval = 0
	WHERE OutInterval BETWEEN @SHIFTDETECTOR_EARLY_PERMIT * - 1 AND 0

	-- chang them nhan dang nhung ca thieu gio vao
	--delete from #tblShiftDetector_NeedUpdate where AttStart is null and @ProcessOrderByDate_ShiftDetector = 1
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = - 900000, AttEnd = NULL, InInterval = NULL, OutInterval = NULL
	FROM #tblShiftDetector_NeedUpdate a
	WHERE AttStart IS NULL AND @ProcessOrderByDate_ShiftDetector = 1 AND EXISTS (
			SELECT 1
			FROM #tblShiftDetector_NeedUpdate b
			WHERE a.EmployeeId = b.EmployeeId AND a.ScheduleDate = b.ScheduleDate AND b.WorkingTimeMi > 200 AND a.ShiftCode <> b.ShiftCode AND a.RatioMatch < b.RatioMatch
			)

	-- cham diem
	-- chấm điểm theo ct thức toán học, hàm logarit và hàm số mũ
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + (- 91.18357565 * log(InInterval) + 591.0074141)
	WHERE InInterval > 0

	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + 500.1747978 * POWER(1.05572192, InInterval)
	WHERE InInterval <= 0

	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + (- 70 * log(OutInterval) + 400)
	WHERE OutInterval > 0 AND @IgnoreTimeOut_ShiftDetector = 0

	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + 400 * POWER(1.05572192, OutInterval)
	WHERE OutInterval <= 0 AND @IgnoreTimeOut_ShiftDetector = 0

	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + (- 70 * log(OutIntervalS) + 400)
	WHERE OutIntervalS > 0 AND @IgnoreTimeOut_ShiftDetector = 0 AND AttEnd2 IS NOT NULL

	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + 400 * POWER(1.05572192, OutIntervalS)
	WHERE OutIntervalS <= 0 AND @IgnoreTimeOut_ShiftDetector = 0 AND AttEnd2 IS NOT NULL

	--select * from  #tblShiftDetector_NeedUpdate order by EmployeeId, ScheduleDate return
	IF (OBJECT_ID('sp_ShiftDetector_beginUpdateLongShiftDeduct') IS NULL)
		EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_beginUpdateLongShiftDeduct ( @StopUpdate bit output ,@LoginID int ,@FromDate datetime ,@ToDate datetime ) as begin SET NOCOUNT ON; end')

	SET @StopUpdate = 0

	-- Goi thu thu thuc customize import de ap dung cho tung khach hang rieng biet
	IF @StopUpdate = 0
	BEGIN
		UPDATE ta1
		SET RatioMatch -= abs(OutInterval) / 30 * 50
		FROM #tblShiftDetector_NeedUpdate ta1
		WHERE StdWorkingTimeMi > 600 AND AttEnd IS NOT NULL AND @IgnoreTimeOut_ShiftDetector = 0 --and OutInterval >= 30

		UPDATE ta1
		SET RatioMatch -= abs(InInterval) / 30 * 50
		FROM #tblShiftDetector_NeedUpdate ta1
		WHERE StdWorkingTimeMi > 600 AND Attstart IS NOT NULL AND @IgnoreTimeOut_ShiftDetector = 0 --and InInterval >= 30
	END

	-- hành chính hiếm khi tang ca truoc
	-- hanh chinh hiem khi tang ca truoc
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = CASE
			WHEN RatioMatch IS NULL
				THEN 550 - (ABS(InInterval) + ABS(OutInterval)) -- neu chua cho diem
			ELSE RatioMatch
				-- nếu là ca hành chính và vào som thì trừ điểm
				- CASE
					WHEN isOfficalShift = 1 AND InIntervalS IS NOT NULL AND InInterval > 30
						THEN 50 * InInterval / 30
					ELSE 0
					END + CASE
					WHEN OutInterval > (0 - @SHIFTDETECTOR_EARLY_PERMIT) AND AttEndMi - AttStartMi < 660
						THEN CASE
								WHEN InInterval BETWEEN (0 - @SHIFTDETECTOR_LATE_PERMIT) AND 11
									THEN 200
								WHEN InInterval BETWEEN 11 AND 20
									THEN 100
								ELSE 0
								END
					ELSE 0
					END -- Neu khop gio ra thi cong diem tuong ung, nếu khớp giờ ra thì cộng điểm tương ứng
				+ isnull(WorkingTimeMi, 0) -- uu tien ca dai(cang dai cang suong), uu tiên ca dài (ca càng dài điểm càng cao)
				--+ CASE WHEN (WorkingTimeMi + @SHIFTDETECTOR_LATE_PERMIT) >= StdWorkingTimeMi THEN 270 ELSE 0 END
			END --- (ABS(InInterval)+ABS(OutInterval))

	-- gặp ca dài (12h) mà đi làm không đủ thì phạt để quy về ca 8h
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch - StdWorkingTimeMi
	WHERE StdWorkingTimeMi >= 720 AND WorkingTimeMi < StdWorkingTimeMi - 15

	-- Ca dêm (ca 3) thường sẽ ra dúng giờ, nên uu tiên ca dêm ra dúng giờ (chỉ uu tiên khi có dủ giờ vào, giờ ra)
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + (- 91.18357565 * log(OutInterval) + 591.0074141)
	WHERE OutInterval BETWEEN 1 AND 10 AND AttStart IS NOT NULL AND AttEnd IS NOT NULL AND WorkEndMi > 1440 AND (InInterval < 60 OR (WorkEndMi - WorkStartMi < 500 AND WorkStartMi - AttStartMi < 270 AND InInterval < 270)) AND @IgnoreTimeOut_ShiftDetector = 0 AND ShiftCodeYesterday = ShiftCode

	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + RatioMatch / 2
	WHERE OutInterval = 0 AND InInterval BETWEEN - 5 AND 10 AND WorkEndMi > 1440 AND @IgnoreTimeOut_ShiftDetector = 0

	--ca dài mà di sớm, về muộn thì bị trừ điểm đim uu tiên cho ca ngắn
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch - isnull(WorkingTimeMi, 0)
	FROM #tblShiftDetector_NeedUpdate a --inner join #tblWSchedule ws on a.EmployeeId = ws.EmployeeID and a.ScheduleDate = ws.ScheduleDate
	WHERE a.WorkingTimeMi > 500 AND InIntervalS > 45 AND OutIntervalS > 45

	-- ca 3 mà thieu dau ra hoac dau vao thi coi nhu bo :)
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = CASE
			WHEN RatioMatch > 400
				THEN 400
			ELSE RatioMatch - 300
			END
	WHERE isNightShift = 1 AND (AttEnd IS NULL OR AttStart IS NULL) AND TIMEOUTAFTER < @getdate

	-- ca 3 ngay chu nhat thieu dau vao thi bo vi co the la ca 1 cua ngay hom sau
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = - 10000
	WHERE isNightShift = 1 AND HolidayStatus > 0 AND AttStart IS NULL AND TIMEOUTAFTER < @getdate

	-- thieu cong thi bi phat ty le
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch - 300
	WHERE (InInterval < 0 OR OutInterval < 0) AND StdWorkingTimeMi - WorkingTimeMi > 5 AND StdWorkingTimeMi > 420

	/*print 'x--------------------------------------------------------x27'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
	IF (OBJECT_ID('sp_ShiftDetector_WrongShiftProcess') IS NULL)
		EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_WrongShiftProcess ( @StopUpdate bit output ,@LoginID int ,@FromDate datetime ,@ToDate datetime ) as begin SET NOCOUNT ON; end')

	SET @StopUpdate = 0

	-- Goi thu thu thuc customize import de ap dung cho tung khach hang rieng biet
	EXEC sp_ShiftDetector_WrongShiftProcess @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

	IF @StopUpdate = 0 AND (@WrongShiftProcess_ShiftDetector = 1 OR @ProcessOrderByDate_ShiftDetector = 1)
	BEGIN
		-- phat nang loi lam mat du lieu
		UPDATE d
		SET RatioMatch = d.RatioMatch * 0.1 - 500, isWrongShift = 1
		FROM #tblShiftDetector_NeedUpdate d
		INNER JOIN #tblShiftDetectorMatched m ON d.employeeId = m.EmployeeID AND d.ScheduleDate = m.ScheduleDate - 1
		WHERE EXISTS (
				SELECT 1
				FROM #tblTmpAttend t
				WHERE m.EmployeeId = t.EmployeeID AND t.AttTime BETWEEN d.TimeOutAfter AND m.TIMEINBEFORE
				)

		UPDATE d
		SET RatioMatch -= 200, isWrongShift = 1
		FROM #tblShiftDetector_NeedUpdate d
		INNER JOIN (
			SELECT m.EmployeeId, ScheduleDate + 1 AS ScheduleDate, max(AttEnd) AttEnd
			FROM #tblShiftDetector_NeedUpdate m
			GROUP BY EmployeeId, ScheduleDate
			) ta1 ON d.EmployeeId = ta1.EmployeeId AND d.ScheduleDate = ta1.ScheduleDate
		WHERE EXISTS (
				SELECT 1
				FROM #tblTmpAttend t
				WHERE d.EmployeeId = t.EmployeeID AND t.AttTime > ta1.AttEnd AND t.AttTime < d.AttStart
				)

		UPDATE d
		SET RatioMatch = d.RatioMatch * 0.5 - 500, isWrongShift = 1
		FROM #tblShiftDetector_NeedUpdate d
		WHERE EXISTS (
				SELECT 1
				FROM #tblTmpAttend t
				WHERE d.EmployeeId = t.EmployeeID AND t.AttTime BETWEEN DATEADD(mi, 60, d.AttEndYesterday) AND dateadd(mi, - 60, d.AttStart)
				)

		UPDATE d
		SET RatioMatch = d.RatioMatch * 0.1 - 500, isWrongShift = 1
		FROM #tblShiftDetector_NeedUpdate d
		INNER JOIN #tblShiftDetectorMatched m ON d.employeeId = m.EmployeeID AND d.ScheduleDate = m.ScheduleDate + 1
		WHERE EXISTS (
				SELECT 1
				FROM #tblTmpAttend t
				WHERE m.EmployeeId = t.EmployeeID AND t.AttTime > m.AttEnd AND t.AttTime BETWEEN CASE
								WHEN d.ShiftCode = m.ShiftCode
									THEN dateadd(SECOND, 1, m.TIMEOUTAFTER)
								ELSE dateadd(MINUTE, 240, isnull(m.AttEnd, m.WorkEnd))
								END AND dateadd(mi, - 60, isnull(d.AttStart, d.WorkStart))
				)

		-- ngay hom truoc nghi ca ngay ma hom sau bi mat gio cham cong do nhan sai ca
		UPDATE d
		SET RatioMatch = d.RatioMatch * 0.1 - 500, isWrongShift = 1
		FROM #tblShiftDetector_NeedUpdate d
		WHERE (
				EXISTS (
					SELECT 1
					FROM #tblLvHistory lv
					WHERE lv.LeaveCategory = 1 AND d.EmployeeId = lv.EmployeeID AND lv.LeaveStatus = 3 AND lv.LeaveDate = d.ScheduleDate - 1
					) OR EXISTS (
					SELECT 1
					FROM (
						SELECT *
						FROM #tblShiftDetector_NeedUpdate
						
						UNION ALL
						
						SELECT *
						FROM #tblShiftDetectorMatched
						) l
					WHERE d.EmployeeId = l.EmployeeID AND l.HolidayStatus > 0 AND l.AttStart IS NULL AND l.AttEnd IS NULL AND l.ScheduleDate = d.ScheduleDate - 1
					)
				) AND NOT EXISTS (
				SELECT 1
				FROM #tblPrevMatch l
				WHERE d.EmployeeId = l.EmployeeID AND d.ScheduleDate = l.ScheduleDate AND l.HolidayStatus > 0 AND l.AttStart IS NOT NULL AND l.AttEnd IS NOT NULL
				) AND NOT EXISTS (
				SELECT 1
				FROM #tblLvHistory lv
				WHERE lv.LeaveCategory = 1 AND d.EmployeeId = lv.EmployeeID AND lv.LeaveStatus = 3 AND lv.LeaveDate = d.ScheduleDate
				) AND EXISTS (
				SELECT 1
				FROM #tblTmpAttend t
				WHERE d.EmployeeId = t.EmployeeID AND t.AttTime BETWEEN d.ScheduleDate AND dateadd(mi, - 60, d.AttStart)
				)
	END

	-- ngay hom truoc nghi cuoi tuan, nghi le ma hom sau bi mat gio cham cong do nhan sai ca
	UPDATE d
	SET RatioMatch = RatioMatch * 0.1 - 500, isWrongShift = 1
	FROM #tblShiftDetector_NeedUpdate d
	INNER JOIN #tblHasTA_Fixed f ON f.EmployeeID = d.EmployeeId AND d.ScheduleDate = f.Attdate + 1
	INNER JOIN #tblWSchedule ws ON f.EmployeeID = ws.EmployeeID AND f.Attdate = ws.ScheduleDate AND ws.HolidayStatus > 0 AND f.AttStart IS NULL AND f.AttEnd IS NULL AND EXISTS (
			SELECT 1
			FROM #tblTmpAttend t
			WHERE d.EmployeeId = t.EmployeeID AND t.AttTime BETWEEN d.ScheduleDate AND dateadd(mi, - 60, d.AttStart)
			)

	UPDATE d
	SET RatioMatch = RatioMatch * 0.1 - 500, isWrongShift = 1
	FROM #tblShiftDetector_NeedUpdate d
	INNER JOIN #tblHasTA m ON d.employeeId = m.EmployeeID AND d.ScheduleDate = m.Attdate + 1
	WHERE isWrongShift IS NULL AND EXISTS (
			SELECT 1
			FROM #tblTmpAttend t
			WHERE m.EmployeeId = t.EmployeeID AND t.AttTime BETWEEN dateadd(mi, 60, isnull(ISNULL(m.AttEnd, m.AttStart), d.ScheduleDate)) AND dateadd(mi, - 60, d.AttStart)
			)

	UPDATE d
	SET RatioMatch = RatioMatch * 0.1 - 500, isWrongShift = 1
	FROM #tblShiftDetector_NeedUpdate d
	INNER JOIN #tblHasTA_Fixed m ON d.employeeId = m.EmployeeID AND d.ScheduleDate = m.Attdate + 1
	WHERE EXISTS (
			SELECT 1
			FROM #tblTmpAttend t
			WHERE m.EmployeeId = t.EmployeeID AND t.AttTime BETWEEN dateadd(mi, 60, m.AttEnd) AND dateadd(mi, - 60, d.AttStart)
			)

	-- moi vao lam ma bi mat gio cong do nhan sai ca
	UPDATE d
	SET RatioMatch = RatioMatch * 0.1 - 500, isWrongShift = 1
	FROM #tblShiftDetector_NeedUpdate d
	INNER JOIN #tblEmployeeList m ON d.employeeId = m.EmployeeID AND d.ScheduleDate = m.hiredate
	WHERE EXISTS (
			SELECT 1
			FROM #tblTmpAttend t
			WHERE m.EmployeeId = t.EmployeeID AND t.AttTime BETWEEN m.HireDate AND dateadd(mi, - 60, d.AttStart)
			)

	-- phat hien co ca bi sai thi nang cac ca con lai len de cho len tau truoc
	UPDATE d
	SET RatioMatch = RatioMatch + 300
	FROM #tblShiftDetector_NeedUpdate d
	WHERE EXISTS (
			SELECT 1
			FROM (
				SELECT EmployeeId, ScheduleDate, ShiftCode
				FROM #tblShiftDetector_NeedUpdate
				WHERE isWrongShift = 1
				) t
			WHERE d.EmployeeId = t.EmployeeId AND d.ScheduleDate = t.ScheduleDate AND d.ShiftCode <> t.ShiftCode
			) AND d.RatioMatch > - 500

	--t.AttTime between dateadd(mi,60, D.AttEnd) and dateadd(mi,-60, m.AttStart))
	--if(@RepeatTime= 4)
	--select @RepeatTime,* from #tblShiftDetector_NeedUpdate order by ScheduleDate
	/*print 'x--------------------------------------------------------x32'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
	-- Ch?m di?m ph?
	-- Giong ca hôm qua, thêm 100 diem, (nhung ca dêm giong hôm truoc mà thieu gio vào hoac ra thì ko dc công diem, vì có the hôm dó xoay ca)
	EXEC sp_ShiftDetector_beginUpdateLongShiftDeduct @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

	EXEC sp_ShiftDetector_beginUpdateLongShiftDeduct @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + 100
	WHERE ShiftCodeYesterday IS NOT NULL AND ShiftCode = ShiftCodeYesterday AND (isNightShift = 0 OR (isNightShift = 1 AND AttStart IS NOT NULL AND AttEnd IS NOT NULL)) AND InInterval > - 5

	-- ca dem thieu gio vao hoac ra ma hom sau la ngay cuoi tuan thi van dc uu tien nhan
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + 100
	FROM #tblShiftDetector_NeedUpdate u
	WHERE u.ShiftCode = u.ShiftCodeYesterday AND ((u.AttStart IS NULL AND u.AttEnd IS NOT NULL) OR (u.AttEnd IS NULL AND u.AttStart IS NOT NULL)) AND u.isNightShift = 1 AND EXISTS (
			SELECT 1
			FROM #tblWSchedule m
			WHERE u.EmployeeId = m.EmployeeId AND u.ScheduleDate = m.ScheduleDate - 1 AND m.HolidayStatus = 1
			)

	-- neu khong co ca hom qua thi uu tien giong ca hom sau, chi nhung truong hop thieu gio vao hoac gio ra
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + 100
	FROM #tblShiftDetector_NeedUpdate u
	WHERE u.ShiftCodeYesterday IS NULL AND ((u.AttStart IS NULL AND u.AttEnd IS NOT NULL) OR (u.AttStart IS NOT NULL AND u.AttEnd IS NULL)) AND EXISTS (
			SELECT 1
			FROM #tblShiftDetectorMatched m
			WHERE u.EmployeeId = m.EmployeeId AND u.ShiftCode = m.ShiftCode AND u.ScheduleDate = m.ScheduleDate - 1
			)

	-- hom do la ngay nghi thi uu tien la ca giong ca ho qua
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + 100
	WHERE ShiftCodeYesterday IS NOT NULL AND ShiftCode = ShiftCodeYesterday AND IsLeaveStatus3 = 1

	-- neu tat ca cac ca diem dieu thap thi uu tien ca hom qua nhieu hon
	--update #tblShiftDetector_NeedUpdate set RatioMatch = RatioMatch + 100 where RatioMatch<=0 and ShiftCodeYesterday is not null and ShiftCode = ShiftCodeYesterday
	--hom truoc di ca 3 mà có giờ vào, ra để tránh nhận ngày tiếp theo là di ca 1 thì tang điểm ca giống ca hôm trước nhiều lên cho những record có di?m s? < 500 , isNightShiftYesterday chi =1 khi ngay hom truoc la ca dem va co du gio vao, ra
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch + 200
	WHERE RatioMatch < 500 AND isNightShiftYesterday = 1 AND ShiftCodeYesterday IS NOT NULL AND ShiftCode = ShiftCodeYesterday AND (AttStart IS NOT NULL AND AttEnd IS NOT NULL)

	-- Hoa thom toa huong xa
	UPDATE d
	SET RatioMatch += 100
	FROM #tblShiftDetector_NeedUpdate d
	WHERE EXISTS (
			SELECT 1
			FROM #tblBloomFlavour b
			WHERE d.EmployeeId = b.EmployeeId AND d.ShiftCode = b.ShiftCode AND d.ScheduleDate BETWEEN b.FromDate AND b.ToDate
			) AND @ProcessOrderByDate_ShiftDetector = 0

	-- đi trễ về sớm trừ 5% điểm
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch - abs(RatioMatch * 0.05)
	WHERE (InInterval < 0 OR OutInterval < 0)

	--đi trễ và về sớm trừ 50% điểm
	UPDATE #tblShiftDetector_NeedUpdate
	SET RatioMatch = RatioMatch - abs(RatioMatch * 0.5)
	WHERE (InInterval < 0 AND OutInterval < 0)

	-- Đối tượng nghỉ t7 thì ca HC được thêm 20 điểm
	UPDATE d
	SET RatioMatch = RatioMatch + 20
	FROM #tblShiftDetector_NeedUpdate d
	INNER JOIN #tblEmployeeList e ON d.EmployeeId = e.EmployeeID
	INNER JOIN tblEmployeeType t ON e.EmployeeTypeID = t.EmployeeTypeID AND t.SaturdayOff = 1
	WHERE d.isOfficalShift = 1

	-- trong tuan ty le ca di cao se dc công 330 diem -- @StatisticShiftPerweek_ShiftDetector
	IF @StatisticShiftPerweek_ShiftDetector > 0
	BEGIN
		/*
 select ta.EmployeeId, datepart(wk,ta.ScheduleDate) WeekNumber,ss.ShiftCode, count(1) as ShiftCount
 into #tblwschedule_ShiftCount from tblwschedule ta inner join tblHasTA ha on ta.EmployeeID = ha.EmployeeID and ta.ScheduleDate = ha.AttDate
 inner join tblShiftSetting ss on ta.shiftID = ss.ShiftID
 where exists (select 1 from #tblPendingImportAttend m where ta.EmployeeID = m.EmployeeId and datepart(wk,ta.scheduleDate) = datepart(wk,m.Date) and ta.ScheduleDate between @FromDate and @ToDate )
 and ha.AttStart is not null
 and ha.AttEnd is not null
 group by ta.EmployeeID,datepart(wk,ta.ScheduleDate),ss.ShiftCode having COUNT(1) > 2
 */
		SET DATEFIRST 1

		SELECT m.EmployeeId, datepart(wk, m.ScheduleDate) WeekNumber, m.ShiftCode, count(1) AS ShiftCount
		INTO #tblwschedule_ShiftCount
		FROM #tblShiftDetectorMatched m
		WHERE m.AttStart IS NOT NULL AND m.AttEnd IS NOT NULL
		GROUP BY m.EmployeeID, datepart(wk, m.ScheduleDate), m.ShiftCode
		HAVING COUNT(1) > 1

		DELETE s
		FROM #tblwschedule_ShiftCount s
		WHERE NOT EXISTS (
				SELECT 1
				FROM (
					SELECT t.EmployeeID, t.WeekNumber, max(t.ShiftCount) ShiftCount
					FROM #tblwschedule_ShiftCount t
					GROUP BY t.EmployeeID, t.WeekNumber
					) t
				WHERE s.EmployeeID = t.EmployeeID AND s.WeekNumber = t.WeekNumber AND s.ShiftCount = t.ShiftCount
				)

		UPDATE #tblShiftDetector_NeedUpdate
		SET RatioMatch = RatioMatch + @StatisticShiftPerweek_ShiftDetector
		FROM #tblShiftDetector_NeedUpdate m
		INNER JOIN #tblwschedule_ShiftCount sc ON m.EmployeeId = sc.EmployeeID AND datepart(wk, ScheduleDate) = sc.WeekNumber AND m.ShiftCode = sc.ShiftCode

		DROP TABLE #tblwschedule_ShiftCount

		SET DATEFIRST 7
	END

	-- Thống kê ca qua Lịch sử tỉ lệ làm ca lớn nhất dc 25 điểm
	-- chua làm
	--Nếu có phân biệt vào ra mà trạng thái vào ra, chính xác ca 2 được cộng 500d
	IF @IN_OUT_TA_SEPARATE = 1
	BEGIN
		UPDATE s
		SET RatioMatch = RatioMatch + (WorkEndMi - WorkStartMi)
		FROM #tblShiftDetector_NeedUpdate s
		WHERE StateIn = 1 AND StateOut = 2

		-- bam thieu 1 dau, nhung dung vao hoac ra
		UPDATE s
		SET RatioMatch = RatioMatch + 100
		FROM #tblShiftDetector_NeedUpdate s
		WHERE ((StateIn = 1 AND StateOut IS NULL) OR (StateIn IS NULL AND StateOut = 2))

		-- phan biet vao ra ma bam sai thi bi tru
		UPDATE s
		SET RatioMatch = RatioMatch - (WorkEndMi - WorkStartMi)
		FROM #tblShiftDetector_NeedUpdate s
		WHERE (StateIn <> 1 OR StateOut <> 2)

		-- exists (select 1 from #tblTmpAttend t where s.EmployeeId = t.EmployeeID and s.AttStart = t.AttTime and t.AttState = 1) -- khớp vào
		--and exists (select 1 from #tblTmpAttend t where s.EmployeeId = t.EmployeeID and s.AttEnd = t.AttTime and t.AttState = 2) -- khớp ra
		-- neu thieu vao ra ma lai lech in out thi bo
		UPDATE s
		SET RatioMatch = RatioMatch - 500
		FROM #tblShiftDetector_NeedUpdate s
		WHERE AttEnd IS NULL AND AttStart IS NOT NULL AND EXISTS (
				SELECT 1
				FROM #tblTmpAttend t
				WHERE s.EmployeeId = t.EmployeeID AND s.AttStart = t.AttTime AND t.AttState IN (0, 2)
				)

		UPDATE s
		SET RatioMatch = RatioMatch - 500
		FROM #tblShiftDetector_NeedUpdate s
		WHERE AttStart IS NULL AND AttEnd IS NOT NULL AND EXISTS (
				SELECT 1
				FROM #tblTmpAttend t
				WHERE s.EmployeeId = t.EmployeeID AND s.AttEnd = t.AttTime AND t.AttState IN (0, 1)
				)
	END

	UPDATE u
	SET RatioMatch = - 6000
	FROM #tblShiftDetector_NeedUpdate u
	WHERE isNightShift = 1 AND StdWorkingTimeMi > 569 AND abs(OutInterval) < 15 AND InInterval > 90

	-- ca dem bam vao sai, hoac khong bao vao, ma hom truoc khong di ca dem
	UPDATE u
	SET RatioMatch = - 6000
	FROM #tblShiftDetector_NeedUpdate u
	WHERE isNightShift = 1 AND abs(InInterval) > 300 AND ShiftCode <> ShiftCodeYesterday

	-- sai ca qua troi sai
	UPDATE u
	SET RatioMatch = - 6000
	FROM #tblShiftDetector_NeedUpdate u
	WHERE AttStart IS NOT NULL AND AttEnd IS NOT NULL AND ((abs(InInterval) > 90 AND (abs(OutInterval) > 420) AND @IgnoreTimeOut_ShiftDetector = 0) OR (abs(OutInterval) > 90 AND abs(InInterval) > 420))

	-- cùng điểm ưu tiên trường hợp có giờ vào ra hơn
	UPDATE d
	SET RatioMatch = d.RatioMatch + 10
	FROM #tblShiftDetector_NeedUpdate d
	INNER JOIN (
		SELECT EmployeeId, ScheduleDate, RatioMatch
		FROM #tblShiftDetector_NeedUpdate ta1
		GROUP BY EmployeeId, ScheduleDate, RatioMatch
		) ta1 ON d.EmployeeId = ta1.EmployeeId AND d.ScheduleDate = ta1.ScheduleDate
	WHERE d.RatioMatch > 499 AND d.AttStart IS NOT NULL AND d.AttEnd IS NOT NULL

	-- Nếu cùng điểm thì ưu tiên ca dài trước, nhung d? sau đợi các ca khác lên điểm rồi tính toán lại ca hôm trước,
	IF (@RepeatTime > 50)
		UPDATE d
		SET RatioMatch = RatioMatch + 10 * s.ShiftHours
		FROM #tblShiftDetector_NeedUpdate d
		INNER JOIN #tblShiftSetting s ON d.ShiftCode = s.ShiftCode
		WHERE EXISTS (
				SELECT 1
				FROM (
					SELECT d1.EmployeeId, d1.ScheduleDate
					FROM #tblShiftDetector_NeedUpdate d1
					INNER JOIN #tblShiftDetector_NeedUpdate d2 ON d1.EmployeeId = d2.EmployeeId AND d1.ScheduleDate = d2.ScheduleDate AND d1.RatioMatch = d2.RatioMatch AND d1.ShiftCode <> d2.ShiftCode
					) tmp
				WHERE tmp.EmployeeId = d.EmployeeId AND tmp.ScheduleDate = d.ScheduleDate
				)

	--xử lý t/h người dùng nhập 2 ca khác code mà giờ vào, giờ ra, giờ nghỉ giống hệt nhau
	UPDATE d
	SET RatioMatch = RatioMatch + s.STT
	FROM #tblShiftDetector_NeedUpdate d
	INNER JOIN #tblShiftSetting s ON d.ShiftCode = s.ShiftCode
	WHERE EXISTS (
			SELECT 1
			FROM (
				SELECT d1.EmployeeId, d1.ScheduleDate
				FROM #tblShiftDetector_NeedUpdate d1
				INNER JOIN #tblShiftDetector_NeedUpdate d2 ON d1.EmployeeId = d2.EmployeeId AND d1.ScheduleDate = d2.ScheduleDate AND d1.RatioMatch = d2.RatioMatch AND d1.ShiftCode <> d2.ShiftCode AND d1.WorkStart = d2.WorkStart AND d1.WorkEnd = d2.WorkEnd AND d1.AttStart = d2.AttStart AND d1.AttEnd = d2.AttEnd
				) tmp
			WHERE tmp.EmployeeId = d.EmployeeId AND tmp.ScheduleDate = d.ScheduleDate
			)

	UPDATE d
	SET RatioMatch = RatioMatch + s.STT
	FROM #tblShiftDetector_NeedUpdate d
	INNER JOIN #tblShiftSetting s ON d.ShiftCode = s.ShiftCode
	WHERE d.RatioMatch < 1000

	IF (OBJECT_ID('sp_ShiftDetector_BloomFlavour') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE dbo.sp_ShiftDetector_BloomFlavour
(
 @StopUpdate bit output
 ,@LoginID int
 ,@FromDate datetime
 ,@ToDate datetime
)
as
begin
SET NOCOUNT ON;
end'



				)
	END

	SET @StopUpdate = 0

	-- Goi thu thu thuc customize import de ap dung cho tung khach hang rieng biet
	EXEC sp_ShiftDetector_BloomFlavour @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

	IF @StopUpdate = 0
	BEGIN
		-- hoa toa huong lan nua
		TRUNCATE TABLE #tblBloomFlavour

		INSERT INTO #tblBloomFlavour (EmployeeId, ScheduleDate, RatioMatch, STT)
		SELECT d.EmployeeId, d.ScheduleDate, max(RatioMatch) RatioMatch, ROW_NUMBER() OVER (
				PARTITION BY EmployeeID ORDER BY EmployeeId, ScheduleDate
				) STT
		FROM (
			SELECT *
			FROM #tblShiftDetector
			WHERE AttEndMi - AttStartMi > 660 AND StdWorkingTimeMi > 500
			
			UNION ALL
			
			SELECT *
			FROM #tblShiftDetector_NeedUpdate
			WHERE AttEndMi - AttStartMi > 660 AND StdWorkingTimeMi > 500
			) d
		GROUP BY d.EmployeeId, d.ScheduleDate

		--LongKa: hôm qua ko có giờ công, hôm nay có đầy đủ thì cung dua vào luôn
		INSERT INTO #tblBloomFlavour (EmployeeId, ScheduleDate, RatioMatch, STT)
		SELECT n.EmployeeId, n.ScheduleDate, (max(n.RatioMatch) + 500) RatioMatch, 100
		FROM #tblShiftDetector_NeedUpdate n
		INNER JOIN #tblWSchedule ws ON n.EmployeeId = ws.EmployeeID AND n.ScheduleDate = ws.ScheduleDate
		WHERE NOT EXISTS (
				SELECT 1
				FROM #tblShiftDetector_NeedUpdate y
				WHERE ws.EmployeeID = y.EmployeeId AND y.ScheduleDate = ws.PrevDate AND y.AttStart IS NOT NULL AND y.AttEnd IS NOT NULL
				) AND NOT EXISTS (
				SELECT 1
				FROM #tblBloomFlavour b
				WHERE n.EmployeeId = b.EmployeeId AND n.ScheduleDate = b.ScheduleDate
				) AND AttEndMi - AttStartMi > 480
		GROUP BY n.EmployeeId, n.ScheduleDate

		UPDATE ta1
		SET ToDate = (
				SELECT min(ScheduleDate)
				FROM (
					SELECT EmployeeId, ScheduleDate
					FROM #tblBloomFlavour ta1
					WHERE NOT EXISTS (
							SELECT 1
							FROM #tblBloomFlavour ta2
							WHERE ta1.EmployeeId = ta2.EmployeeId AND ta1.ScheduleDate = ta2.ScheduleDate - 1
							)
					) ta2
				WHERE ta1.EmployeeId = ta2.EmployeeId AND ta1.ScheduleDate <= ta2.ScheduleDate
				), FromDate = (
				SELECT max(ScheduleDate)
				FROM (
					SELECT EmployeeId, ScheduleDate
					FROM #tblBloomFlavour ta1
					WHERE NOT EXISTS (
							SELECT 1
							FROM #tblBloomFlavour ta2
							WHERE ta1.EmployeeId = ta2.EmployeeId AND ta1.ScheduleDate = ta2.ScheduleDate + 1
							)
					) ta2
				WHERE ta1.EmployeeId = ta2.EmployeeId AND ta1.ScheduleDate >= ta2.ScheduleDate
				)
		FROM #tblBloomFlavour ta1

		UPDATE d
		SET RatioMatch = RatioMatch - 200
		FROM #tblShiftDetector_NeedUpdate d
		WHERE EXISTS (
				SELECT 1
				FROM #tblBloomFlavour b
				WHERE b.ScheduleDate > b.FromDate AND b.ScheduleDate <= b.ToDate AND b.EmployeeId = d.EmployeeId AND b.ScheduleDate = d.ScheduleDate
				)
	END

	IF @ProcessOrderByDate_ShiftDetector = 0
	BEGIN
		-- khong co gio vao , gio ra thi nhan ca do sau cung
		UPDATE u
		SET RatioMatch = tmp.RatioMatch
		FROM #tblShiftDetector_NeedUpdate u
		INNER JOIN (
			SELECT EmployeeId, ScheduleDate, MIN(RatioMatch) - 200 RatioMatch
			FROM #tblShiftDetector_NeedUpdate m
			WHERE m.AttStart IS NOT NULL OR m.AttEnd IS NOT NULL
			GROUP BY EmployeeId, ScheduleDate
			) tmp ON u.EmployeeId = tmp.EmployeeId AND u.ScheduleDate = tmp.ScheduleDate
		WHERE u.AttStart IS NULL AND u.AttEnd IS NULL AND u.HolidayStatus = 0 AND DATEDIFF(day, u.ScheduleDate, @getdate) > 1
	END

	----------------------- Hot hui thoi nao-------------------------------
	--Select * from #tblShiftDetector_NeedUpdate order by ScheduleDate
	--Select 123,AttStartTomorrow,AttEndYesterday,* from #tblShiftDetector_NeedUpdate order by ScheduleDate return
	--delete from #tblShiftDetector_NeedUpdate where AttEnd is null and AttStart is null and @ProcessOrderByDate_ShiftDetector = 1
	TRUNCATE TABLE #tblPrevMatch

	TRUNCATE TABLE #tblPrevRemove

	INSERT INTO #tblShiftDetector
	SELECT *
	FROM #tblShiftDetector_NeedUpdate

	IF @ProcessOrderByDate_ShiftDetector = 0
	BEGIN
		INSERT INTO #tblPrevMatch (EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3)
		SELECT EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3
		FROM (
			INSERT INTO #tblShiftDetectorMatched
			OUTPUT inserted.EmployeeId, inserted.ShiftCode, inserted.ScheduleDate, inserted.AttStart, inserted.AttEnd, inserted.isNightShift, inserted.HolidayStatus, inserted.IsLeaveStatus3
			SELECT m.*
			FROM #tblShiftDetector m
			INNER JOIN (
				SELECT sd.employeeID, sd.ScheduleDate, max(sd.RatioMatch) AS MaxRatioMatch
				FROM #tblShiftDetector sd
				INNER JOIN (
					SELECT EmployeeId, max(RatioMatch) MaxRatioMatch
					FROM #tblShiftDetector
					GROUP BY EmployeeId
					) ratMax ON sd.EmployeeId = ratmax.EmployeeId AND (sd.RatioMatch = ratMax.MaxRatioMatch)
				GROUP BY sd.EmployeeId, sd.ScheduleDate
				) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.RatioMatch = tmp.MaxRatioMatch
			) tmp
	END
	ELSE
	BEGIN
		INSERT INTO #tblPrevMatch (EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3)
		SELECT EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3
		FROM (
			INSERT INTO #tblShiftDetectorMatched
			OUTPUT inserted.EmployeeId, inserted.ShiftCode, inserted.ScheduleDate, inserted.AttStart, inserted.AttEnd, inserted.isNightShift, inserted.HolidayStatus, inserted.IsLeaveStatus3
			SELECT m.*
			FROM #tblShiftDetector m
			INNER JOIN (
				SELECT sd.employeeID, sd.ScheduleDate, max(sd.RatioMatch) AS MaxRatioMatch
				FROM #tblShiftDetector sd
				INNER JOIN (
					SELECT EmployeeId, min(ScheduleDate) ScheduleDate
					FROM #tblShiftDetector
					GROUP BY EmployeeId
					) ratMax ON sd.EmployeeId = ratmax.EmployeeId AND (sd.ScheduleDate = ratMax.ScheduleDate)
				GROUP BY sd.EmployeeId, sd.ScheduleDate
				) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.RatioMatch = tmp.MaxRatioMatch
			) tmp
	END

	-- Lặp nhìu lần
	IF ROWCOUNT_BIG() > 0
	BEGIN
		/*print 'x--------------------------------------------------------x38'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
		INSERT INTO #tblPrevRemove (EmployeeId, ScheduleDate, ShiftCode)
		SELECT *
		FROM (
			DELETE ta1
			OUTPUT deleted.EmployeeId, deleted.ScheduleDate, deleted.ShiftCode
			FROM #tblShiftDetectorMatched ta1
			WHERE ta1.RatioMatch = 0 AND EXISTS (
					SELECT 1
					FROM #tblShiftDetectorMatched ta2
					WHERE ta1.EmployeeId = ta2.EmployeeId AND ta1.ScheduleDate = ta2.ScheduleDate AND ta2.ShiftCode > ta1.ShiftCode
					)
			) tmp

		-- loại những nhân viên lấy giờ  ra hôm trước làm giờ vào hôm nay
		INSERT INTO #tblPrevRemove (EmployeeId, ScheduleDate)
		SELECT EmployeeId, ScheduleDate
		FROM (
			DELETE m2
			OUTPUT deleted.EmployeeId, deleted.ScheduleDate
			FROM #tblShiftDetectorMatched m1
			INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate - 1 AND m1.AttEnd = m2.AttStart AND isnull(m1.StateOut, 1) = 2
			) tmp

		/*print 'x--------------------------------------------------------x39'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
		DELETE ta1
		FROM #tblPrevMatch ta1
		INNER JOIN #tblPrevRemove ta2 ON ta1.EmployeeId = ta2.EmployeeId AND ta1.ScheduleDate = ta2.ScheduleDate AND ta1.ShiftCode = ta2.ShiftCode

		TRUNCATE TABLE #tblPrevRemove

		DELETE D
		FROM #tblShiftDetector D
		WHERE EXISTS (
				SELECT 1
				FROM #tblPrevMatch M
				WHERE M.EmployeeId = D.EmployeeId AND M.ScheduleDate = D.ScheduleDate
				)

		UPDATE #tblPrevMatch
		SET PrevDate = dateadd(day, - 1, ScheduleDate), NextDate = dateadd(day, 1, ScheduleDate)

		-- tính toán lại nhìu lần
		TRUNCATE TABLE #tblShiftDetector_NeedUpdate

		INSERT INTO #tblShiftDetector_NeedUpdate
		SELECT *
		FROM (
			DELETE ta1
			OUTPUT deleted.*
			FROM #tblShiftDetector ta1
			WHERE EXISTS (
					SELECT 1
					FROM #tblPrevMatch ta2
					WHERE ta1.EmployeeId = ta2.EmployeeId AND ta1.ScheduleDate IN (PrevDate, NextDate)
					)
			) tmp

		/*print 'x--------------------------------------------------------x40'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
		UPDATE #tblShiftDetectorMatched
		SET AttStart = NULL, AttEnd = NULL
		WHERE @LEAVEFULLDAYSTILLHASATTTIME = 0 AND IsLeaveStatus3 = 1 AND HolidayStatus = 0

		UPDATE ta1
		SET RatioMatch = 0, AttStart = CASE
				WHEN FixedAtt = 1
					THEN AttStart
				ELSE NULL
				END, AttEnd = CASE
				WHEN FixedAtt = 1
					THEN AttEnd
				ELSE NULL
				END, AttStartTomorrow = CASE
				WHEN AttStartTomorrowFixedTblHasta = 1
					THEN AttStartTomorrow
				ELSE NULL
				END, AttEndYesterday = CASE
				WHEN AttEndYesterdayFixedTblHasta = 1
					THEN AttEndYesterday
				ELSE NULL
				END, InInterval = NULL, OutInterval = NULL, WorkingTimeMi = NULL, AttStartMi = NULL, AttEndMi = NULL
		FROM #tblShiftDetector_NeedUpdate ta1

		INSERT INTO #tblPrevMatch (EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3, Prevdate, NextDate)
		SELECT EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3, dateadd(day, - 1, ScheduleDate), dateadd(day, 1, ScheduleDate)
		FROM #tblShiftDetectorMatched prev
		WHERE --not exists(select 1 from #tblShiftDetector ta2 where NeedUpdate = 1 and ta2.EmployeeId = prev.EmployeeId) and
			EmployeeId IN (
				SELECT EmployeeId
				FROM #tblShiftDetector
				
				EXCEPT
				
				SELECT EmployeeId
				FROM #tblShiftDetector_NeedUpdate ta2
				)

		INSERT INTO #tblShiftDetector_NeedUpdate
		SELECT *
		FROM (
			DELETE ta1
			OUTPUT deleted.*
			FROM #tblShiftDetector ta1
			WHERE EmployeeId IN (
					SELECT EmployeeId
					FROM #tblShiftDetector
					
					EXCEPT
					
					SELECT EmployeeId
					FROM #tblShiftDetector_NeedUpdate ta2
					)
			) tmp

		UPDATE ta1
		SET RatioMatch = 0, AttStart = CASE
				WHEN FixedAtt = 1
					THEN AttStart
				ELSE NULL
				END, AttEnd = CASE
				WHEN FixedAtt = 1
					THEN AttEnd
				ELSE NULL
				END, AttStartTomorrow = CASE
				WHEN AttStartTomorrowFixedTblHasta = 1
					THEN AttStartTomorrow
				ELSE NULL
				END, AttEndYesterday = CASE
				WHEN AttEndYesterdayFixedTblHasta = 1
					THEN AttEndYesterday
				ELSE NULL
				END, InInterval = NULL, OutInterval = NULL, isWrongShift = NULL --,NeedUpdate = 1
		FROM #tblShiftDetector_NeedUpdate ta1

		/*print 'x--------------------------------------------------------x41'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())

print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
		TRUNCATE TABLE #tblPrevMatch

		INSERT INTO #tblPrevMatch (EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3, Prevdate, NextDate)
		SELECT EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3, dateadd(day, - 1, ScheduleDate), dateadd(day, 1, ScheduleDate)
		FROM #tblShiftDetectorMatched ta1
		WHERE EXISTS (
				SELECT 1
				FROM #tblShiftDetector_NeedUpdate ta2
				WHERE ta1.EmployeeId = ta2.EmployeeId AND ta1.ScheduleDate IN (dateadd(day, 1, ta2.ScheduleDate), dateadd(day, - 1, ta2.ScheduleDate))
				)

		/*print 'x--------------------------------------------------------x42'
set @count =DATEdiff(MILLISECOND,@sysDatetime,SYSDATETIME())
print @count set @sysDatetime = SYSDATETIME()
print 'z--------------------------------------------------------z'*/
		SET @RepeatTime += 1

		GOTO StartRepeat
	END

	UPDATE m1
	SET AttEndYesterday = isnull(m2.AttEnd, dateadd(HOUR, - 10, m1.WorkStart))
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate + 1
	WHERE m2.AttEnd IS NOT NULL

	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, DATEADD(hour, 16, m1.WorkEnd))
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate - 1
	WHERE m2.AttStart IS NOT NULL AND m2.AttEnd IS NOT NULL

	UPDATE #tblShiftDetectorMatched
	SET FixedAtt = 0
	WHERE FixedAtt IS NULL

	UPDATE m1
	SET AttEndYesterday = dateadd(hour, - 16, m1.WorkStart)
	FROM #tblShiftDetectorMatched m1

	WHERE m1.AttEndYesterdayFixed = 1 AND m1.AttEndYesterday < dateadd(hour, - 16, m1.WorkStart)

	UPDATE m1
	SET AttStartTomorrow = dateadd(hour, 16, m1.WorkEnd)
	FROM #tblShiftDetectorMatched m1
	WHERE m1.AttStartTomorrowFixed = 1 AND m1.AttStartTomorrow > dateadd(hour, 16, m1.WorkEnd)

	-- chinh ly lai gio vao ra sau khi da nhan ca chinh xac
	UPDATE #tblShiftDetectorMatched
	SET AttStart = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, MIN(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE FixedAtt = 0 AND (ForceState = 0 OR AttState = 1)
			--and Approved is null tri:bo nay di vi duyet ca thi k lien quan gi ts viec sua vao - ra
			AND (t.AttTime < dateadd(mi, - 1 * m.INOUT_MINIMUM, m.AttEnd) OR m.AttEnd IS NULL) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.TimeinBefore AND m.TIMEOUTAFTER
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	UPDATE #tblShiftDetectorMatched
	SET AttEnd = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, max(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE FixedAtt = 0 AND (ForceState = 0 OR AttState = 2)
			--and Approved is null
			AND t.AttTime > isnull(m.AttEnd, m.AttStart) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.TimeinBefore AND m.TIMEOUTAFTER AND (datediff(mi, m.AttStart, t.AttTime) >= m.INOUT_MINIMUM OR m.AttStart IS NULL)
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	-- xử lý lại những ca nhận với độ chính xác cao nhung nếu nhận ca đó sẽ làm mất dữ liệu chấm công --> ca dó không dúng
	-- Re_Process
	UPDATE m1
	SET AttEndYesterday = isnull(m2.AttEnd, dateadd(HOUR, - 10, m1.WorkStart))
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate + 1
	WHERE m2.AttEnd IS NOT NULL

	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, DATEADD(hour, 16, m1.WorkEnd))
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate - 1
	WHERE m2.AttStart IS NOT NULL AND m1.AttEnd <> m2.AttStart

	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, DATEADD(hour, 16, m1.WorkEnd))
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblHasTA m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.Attdate - 1
	WHERE m1.AttStartTomorrow IS NULL

	UPDATE #tblShiftDetectorMatched
	SET FixedAtt = 0
	WHERE FixedAtt IS NULL

	UPDATE m1
	SET AttEndYesterday = dateadd(hour, - 16, m1.WorkStart)
	FROM #tblShiftDetectorMatched m1
	WHERE m1.AttEndYesterdayFixed = 1 AND m1.AttEndYesterday < dateadd(hour, - 16, m1.WorkStart)

	UPDATE m1
	SET AttStartTomorrow = dateadd(hour, 16, m1.WorkEnd)
	FROM #tblShiftDetectorMatched m1
	WHERE m1.AttStartTomorrowFixed = 1 AND m1.AttStartTomorrow > dateadd(hour, 16, m1.WorkEnd)

	IF @IN_OUT_TA_SEPARATE = 1
		SET @Re_Process = 4

	IF (OBJECT_ID('sp_ShiftDetector_Re_Process') IS NULL)
		EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_Re_Process ( @StopUpdate bit output ,@LoginID int ,@FromDate datetime ,@ToDate datetime ) as begin SET NOCOUNT ON; end')

	SET @StopUpdate = 0

	-- Goi thu thu thuc customize import de ap dung cho tung khach hang rieng biet
	EXEC sp_ShiftDetector_Re_Process @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

	SET @StopUpdate = 1

	IF @Re_Process < 2 AND @StopUpdate = 0
	BEGIN
		SET @Re_Process = @Re_Process + 1

		-- xu ly lai
		-- xac dinh nhung dong can xu ly lai ca
		-- xác d?nh nh?ng dòng c?n x? lý l?i ca
		-- EmployeeId,ScheduleDate,HolidayStatus,ShiftCode,ShiftCodeWrong
		TRUNCATE TABLE #tblShiftDetectorReprocess

		INSERT INTO #tblShiftDetectorReprocess (STT, EmployeeId, ScheduleDate, ShiftCode)
		SELECT ROW_NUMBER() OVER (
				PARTITION BY m1.EmployeeId ORDER BY m1.EmployeeId, m1.ScheduleDate
				) Ord, m1.EmployeeId, m1.ScheduleDate, m1.ShiftCode
		FROM #tblShiftDetectorMatched m1
		INNER JOIN #tblShiftDetectorMatched m2 ON m1.employeeId = m2.EmployeeID AND m1.ScheduleDate = m2.ScheduleDate - 1
		WHERE (
				EXISTS (
					SELECT 1
					FROM #tblTmpAttend t
					WHERE m2.EmployeeId = t.EmployeeID AND m1.EmployeeId = t.EmployeeID AND t.AttTime < dateadd(hour, 12, m1.WorkEnd) AND t.AttTime BETWEEN dateadd(mi, 60, isnull(m1.AttEnd, m1.WorkEnd)) AND dateadd(mi, - 60, isnull(m2.AttStart, m2.WorkEnd))
					) AND isnull(m1.Approved, 0) = 0 AND isnull(m2.Approved, 0) = 0
				) OR (
				EXISTS (
					SELECT 1
					FROM #tblShiftDetectorMatched n
					WHERE m1.EmployeeId = n.EmployeeId AND m1.ScheduleDate = n.ScheduleDate - 1 AND n.HolidayStatus > 0 AND n.AttStart IS NULL AND n.AttEnd IS NULL
					) AND EXISTS (
					SELECT 1
					FROM #tblTmpAttend t
					WHERE t.EmployeeID = m1.EmployeeId AND t.AttTime BETWEEN DATEADD(mi, 60, isnull(m1.AttEnd, m1.WorkEnd)) AND DATEADD(HH, 22, m1.AttEnd)
					)
				)

		INSERT INTO #tblShiftDetectorReprocess (STT, EmployeeId, ScheduleDate, ShiftCode)
		SELECT ROW_NUMBER() OVER (
				PARTITION BY m1.EmployeeId ORDER BY m1.EmployeeId, m1.ScheduleDate
				) Ord, m1.EmployeeId, m2.ScheduleDate, m2.ShiftCode
		FROM #tblShiftDetectorMatched m1
		INNER JOIN #tblShiftDetectorMatched m2 ON m1.employeeId = m2.EmployeeID AND m1.ScheduleDate = m2.ScheduleDate - 1
		WHERE (
				EXISTS (
					SELECT 1
					FROM #tblTmpAttend t
					WHERE m2.EmployeeId = t.EmployeeID AND m1.EmployeeId = t.EmployeeID AND t.AttTime >= dateadd(hour, 12, m1.WorkEnd) AND t.AttTime BETWEEN dateadd(mi, 60, isnull(m1.AttEnd, m1.WorkEnd)) AND dateadd(mi, - 60, isnull(m2.AttStart, m2.WorkEnd))
					) AND isnull(m1.Approved, 0) = 0 AND isnull(m2.Approved, 0) = 0
				)

		--update p2 set AttEndYesterday = p1.ScheduleDate from #tblShiftDetectorReprocess p1 inner join #tblShiftDetectorReprocess p2 on p1.employeeID = p2.EmployeeID and p1.Stt = p2.Stt-1
		--update #tblShiftDetectorReprocess set AttEndYesterday = dateadd(day,-20,Scheduledate) where AttEndYesterday is null
		UPDATE p
		SET WorkStart = tmp.WorkStart
		FROM #tblShiftDetectorReprocess p
		INNER JOIN (
			SELECT max(m.ScheduleDate) WorkStart, p.EmployeeId, p.ScheduleDate
			FROM #tblShiftDetectorReprocess p
			INNER JOIN #tblShiftDetectorMatched m ON p.EmployeeId = m.EmployeeId AND m.ScheduleDate < p.ScheduleDate AND m.ScheduleDate > DATEADD(day, - 7, p.ScheduleDate) AND (m.AttStart IS NULL AND AttEnd IS NOT NULL) -- and m.AttEnd is not null
			GROUP BY p.EmployeeId, p.ScheduleDate
			) tmp ON p.EmployeeId = tmp.EmployeeId AND p.ScheduleDate = tmp.ScheduleDate

		UPDATE p
		SET WorkStart = tmp.WorkStart
		FROM #tblShiftDetectorReprocess p
		INNER JOIN (
			SELECT max(m.ScheduleDate) WorkStart, p.EmployeeId, p.ScheduleDate
			FROM #tblShiftDetectorReprocess p
			INNER JOIN #tblShiftDetectorMatched m ON p.EmployeeId = m.EmployeeId AND m.ScheduleDate < p.ScheduleDate AND m.ScheduleDate > DATEADD(day, - 7, p.ScheduleDate) AND (m.AttEnd IS NULL) AND m.AttStart IS NOT NULL
			GROUP BY p.EmployeeId, p.ScheduleDate
			) tmp ON p.EmployeeId = tmp.EmployeeId AND p.ScheduleDate = tmp.ScheduleDate AND p.WorkStart IS NULL

		UPDATE p
		SET WorkEnd = tmp.WorkEnd
		FROM #tblShiftDetectorReprocess p
		INNER JOIN (
			SELECT min(m.ScheduleDate) WorkEnd, p.EmployeeId, p.ScheduleDate
			FROM #tblShiftDetectorReprocess p
			INNER JOIN #tblShiftDetectorMatched m ON p.EmployeeId = m.EmployeeId AND m.ScheduleDate > p.ScheduleDate AND m.ScheduleDate < DATEADD(day, 7, p.ScheduleDate) AND (m.AttEnd IS NULL) --m.AttStart is not null and
			GROUP BY p.EmployeeId, p.ScheduleDate
			) tmp ON p.EmployeeId = tmp.EmployeeId AND p.ScheduleDate = tmp.ScheduleDate

		UPDATE p
		SET WorkEnd = tmp.WorkEnd
		FROM #tblShiftDetectorReprocess p
		INNER JOIN (
			SELECT min(m.ScheduleDate) WorkEnd, p.EmployeeId, p.ScheduleDate
			FROM #tblShiftDetectorReprocess p
			INNER JOIN #tblShiftDetectorMatched m ON p.EmployeeId = m.EmployeeId AND m.ScheduleDate > p.ScheduleDate AND m.ScheduleDate < DATEADD(day, 7, p.ScheduleDate) AND (m.AttStart IS NULL) -- and m.AttEnd is not null
			GROUP BY p.EmployeeId, p.ScheduleDate
			) tmp ON p.EmployeeId = tmp.EmployeeId AND p.ScheduleDate = tmp.ScheduleDate AND p.WorkEnd IS NULL

		---- do?n này dang x? lý sai
		--update #tblShiftDetectorReprocess set WorkStart = tmp.ScheduleDateM from #tblShiftDetectorReprocess p inner join (
		--select m.EmployeeID,p.ScheduleDate, max(m.ScheduleDate) ScheduleDateM
		--from #tblShiftDetectorReprocess p inner join #tblShiftDetectorMatched m on p.EmployeeId = m.EmployeeId and m.ScheduleDate between p.AttEndYesterday and p.ScheduleDate
		--where (m.AttStart is null and m.AttEnd is not null) or (m.AttStart is not null and m.AttEnd is null)
		--group by m.EmployeeID,p.ScheduleDate
		--) tmp on p.EmployeeId = tmp.EmployeeId and p.ScheduleDate = tmp.ScheduleDate
		UPDATE #tblShiftDetectorReprocess
		SET WorkStart = DATEADD(day, 1, ScheduleDate)
		WHERE WorkStart IS NULL AND WorkEnd IS NOT NULL

		UPDATE #tblShiftDetectorReprocess
		SET WorkEnd = ScheduleDate
		WHERE WorkEnd IS NULL AND WorkStart IS NOT NULL

		UPDATE #tblShiftDetectorReprocess
		SET WorkStart = ScheduleDate, WorkEnd = ScheduleDate
		WHERE WorkEnd IS NULL AND WorkStart IS NULL

		IF EXISTS (
				SELECT 1
				FROM #tblShiftDetectorReprocess
				)
		BEGIN
			INSERT INTO #tblShiftDetector (EmployeeId, ScheduleDate, HolidayStatus, ShiftCode, RatioMatch, EmployeeStatusID)
			SELECT m1.EmployeeId, m1.ScheduleDate, m1.HolidayStatus, sg.ShiftCode, 0, m1.EmployeeStatusID
			FROM #tblShiftDetectorMatched m1
			INNER JOIN #tblShiftGroupCode c ON m1.EmployeeId = c.EmployeeID
			FULL OUTER JOIN #tblShiftGroup_Shift sg ON c.ShiftGroupCode = sg.ShiftGroupID
			WHERE EXISTS (
					SELECT 1
					FROM #tblShiftDetectorReprocess p
					WHERE p.EmployeeId = m1.EmployeeId AND m1.ScheduleDate BETWEEN p.WorkStart AND p.WorkEnd
					) AND sg.ShiftCode IS NOT NULL AND m1.EmployeeId IS NOT NULL AND m1.ScheduleDate BETWEEN c.FromDate AND c.ToDate

			INSERT INTO #tblShiftDetector (EmployeeId, ScheduleDate, HolidayStatus, ShiftCode, RatioMatch, EmployeeStatusID)
			SELECT m1.EmployeeId, m1.ScheduleDate, m1.HolidayStatus, sg.ShiftCode, 0, m1.EmployeeStatusID
			FROM #tblShiftDetectorMatched m1
			CROSS JOIN (
				SELECT ShiftCode
				FROM #tblShiftSetting
				GROUP BY ShiftCode
				) sg
			WHERE EXISTS (
					SELECT 1
					FROM #tblShiftDetectorReprocess p
					WHERE p.EmployeeId = m1.EmployeeId AND m1.ScheduleDate BETWEEN p.WorkStart AND p.WorkEnd
					) AND NOT EXISTS (
					SELECT 1
					FROM #tblShiftDetector t
					WHERE m1.EmployeeID = t.EmployeeID AND m1.ScheduleDate = t.ScheduleDate
					)

			-- bo het ca bi sai di
			DELETE m
			FROM #tblShiftDetector m
			WHERE EXISTS (
					SELECT 1
					FROM #tblShiftDetectorMatched d
					WHERE d.employeeID = m.employeeID AND m.ScheduleDate = d.ScheduleDate AND m.shiftCode = d.ShiftCode
					)

			DELETE m
			FROM #tblShiftDetectorMatched m
			WHERE EXISTS (
					SELECT 1
					FROM #tblShiftDetector d
					WHERE d.employeeID = m.employeeID AND d.ScheduleDate = m.ScheduleDate
					)

			-- select * from #tblShiftDetector order by ScheduleDate
			--select * from #tblShiftDetectorMatched order by ScheduleDate
			--select * from #tblShiftDetectorReprocess order by ScheduleDate
			SET @RepeatTime = 0

			TRUNCATE TABLE #tblPrevMatch

			INSERT INTO #tblPrevMatch (EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3, Prevdate, NextDate)
			SELECT EmployeeId, ShiftCode, ScheduleDate, AttStart, AttEnd, isNightShift, HolidayStatus, IsLeaveStatus3, DATEADD(day, - 1, ScheduleDate), DATEADD(day, 1, ScheduleDate)
			FROM #tblShiftDetectorMatched

			--set @MaxRatioMatch = null
			GOTO StartShiftDetector
		END
	END
END

-- ket thuc nhan dang ca
UPDATE d
SET ShiftID = s.ShiftID
--,s.WorkstartMi,s.WorkendMi,s.AttStartMi,s.AttEndMi,s.BreakEndMi,s.BreakStartMi
FROM #tblShiftDetectorMatched d
INNER JOIN tblShiftSetting s ON d.ShiftCode = s.ShiftCode AND DATEPART(dw, d.ScheduleDate) = s.WeekDays
WHERE DATEPART(hh, s.WorkStart) <> DATEPART(hh, s.WorkEnd)

-- xu ly tinh chinh nhung ca khac gio vao, gio ra (vi du T7 lam nua ngay)
--update d set ShiftID = s.ShiftID
--,s.WorkstartMi,s.WorkendMi,s.AttStartMi,s.AttEndMi,s.BreakEndMi,s.BreakStartMi
UPDATE d
SET d.WorkstartMi = DATEPART(hh, s.WorkStart) * 60 + DATEPART(mi, s.WorkStart), d.WorkendMi = CASE
		WHEN DATEPART(hh, s.WorkStart) > DATEPART(hh, s.WorkEnd)
			THEN 1440
		ELSE 0
		END + DATEPART(hh, s.WorkEnd) * 60 + DATEPART(mi, s.WorkEnd), d.BreakEndMi = CASE
		WHEN DATEPART(hh, s.WorkStart) > DATEPART(hh, s.BreakEnd)
			THEN 1440
		ELSE 0
		END + DATEPART(hh, s.BreakEnd) * 60 + DATEPART(mi, s.BreakEnd), d.BreakStartMi = CASE
		WHEN DATEPART(hh, s.WorkStart) > DATEPART(hh, s.BreakStart)
			THEN 1440
		ELSE 0
		END + DATEPART(hh, s.BreakStart) * 60 + DATEPART(mi, s.BreakStart)
FROM #tblShiftDetectorMatched d
INNER JOIN tblShiftSetting s ON d.ShiftID = s.ShiftID
WHERE (DATEPART(hh, s.WorkStart) <> DATEPART(hh, d.WorkStart) OR DATEPART(hh, s.WorkEnd) <> DATEPART(hh, d.WorkEnd))

UPDATE d
SET ShiftID = s.ShiftID
FROM #tblShiftDetectorMatched d
INNER JOIN #tblShiftSetting s ON d.ShiftCode = s.ShiftCode
WHERE d.ShiftID IS NULL -- and s.ShiftID is not null

-- process duplicate shift code
-- uu tien ca hom qua giong hom nay, sau roi den do dai cua ca, roi de thu tu cua ca
-- Set priority for the same ShiftCode as Yesterday code, then for the long of working shift, final is Shift order number
-- khong hieu doian nay dung de lam gi,khi ma viec nhan dang ca da xong roi
--select m.EmployeeID, m.ScheduleDate, max(Case when ShiftCode = ShiftCodeYesterday then 1000 else 0 end + isnull(StdWorkingTimeMi,0) + ISNULL(ShiftID,0)) as Max
UPDATE m
SET RatioMatch = 100001 + CASE
		WHEN ShiftCode = ShiftCodeYesterday
			THEN 1000
		ELSE 0
		END + isnull(StdWorkingTimeMi, 0) + ISNULL(ShiftID, 0)
FROM #tblShiftDetectorMatched m
WHERE EXISTS (
		SELECT 1
		FROM #tblShiftDetectorMatched d
		WHERE m.EmployeeId = d.EmployeeId AND m.ScheduleDate = d.ScheduleDate
		GROUP BY d.EmployeeId, d.ScheduleDate
		HAVING COUNT(1) > 1
		)

DELETE m
FROM #tblShiftDetectorMatched m
WHERE EXISTS (
		SELECT 1
		FROM #tblShiftDetectorMatched d
		WHERE d.RatioMatch > 100000 AND m.EmployeeId = d.EmployeeId AND m.ScheduleDate = d.ScheduleDate AND d.RatioMatch > m.RatioMatch
		)

UPDATE tblWSchedule
SET HolidayStatus = b.HolidayStatus
FROM tblWSchedule a
INNER JOIN #tblShiftDetectorMatched b ON a.EmployeeID = b.EmployeeID AND a.ScheduleDate = b.ScheduleDate
WHERE NOT EXISTS (
		SELECT 1
		FROM #tblWSchedule c
		WHERE a.EmployeeID = c.EmployeeID AND a.ScheduleDate = c.ScheduleDate AND c.ApprovedHolidayStatus = 1
		) AND a.HolidayStatus <> b.HolidayStatus

UPDATE #tblWSchedule
SET HolidayStatus = b.HolidayStatus
FROM #tblWSchedule a
INNER JOIN #tblShiftDetectorMatched b ON a.EmployeeID = b.EmployeeID AND a.ScheduleDate = b.ScheduleDate
WHERE a.HolidayStatus <> b.HolidayStatus AND ISNULL(a.ApprovedHolidayStatus, 0) = 0

INSERT INTO #tblWschedule (EmployeeID, ScheduleDate, ShiftID, HolidayStatus, DateStatus, Approved)
SELECT *
FROM (
	INSERT INTO tblWSchedule (EmployeeID, ScheduleDate, ShiftID, HolidayStatus, DateStatus, Approved)
	OUTPUT inserted.EmployeeID, inserted.ScheduleDate, inserted.ShiftID, inserted.HolidayStatus, inserted.DateStatus, inserted.Approved
	SELECT EmployeeID, ScheduleDate, ShiftID, HolidayStatus, 1, 0
	FROM #tblShiftDetectorMatched a
	WHERE a.ScheduleDate BETWEEN @FromDate AND @ToDate AND NOT EXISTS (
			SELECT 1
			FROM tblWSchedule b
			WHERE a.EmployeeID = b.EmployeeID AND a.ScheduleDate = b.ScheduleDate
			) AND NOT EXISTS (
			SELECT 1
			FROM #tblWSchedule b
			WHERE a.EmployeeID = b.EmployeeID AND a.ScheduleDate = b.ScheduleDate
			)
	GROUP BY EmployeeID, ScheduleDate, ShiftID, HolidayStatus
	) t

-- xoa nhung record lo vao roi ma ket ko ra dc
DELETE tblWschedule
FROM tblWschedule ws
WHERE ws.ScheduleDate BETWEEN @FromDate AND @ToDate AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE ws.EmployeeID = te.EmployeeID
		) AND NOT EXISTS (
		SELECT 1
		FROM #tblWschedule tmp
		WHERE ws.EmployeeID = tmp.EmployeeID AND ws.ScheduleDate = tmp.ScheduleDate
		) AND (ISNULL(ws.Approved, 0) = 0 AND ws.DateStatus <> 3)

UPDATE #tblShiftDetectorMatched
SET AttEnd = NULL, AttEndMi = NULL, WorkingTimeMi = 0
WHERE AttEndMi - AttStartMi < INOUT_MINIMUM AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL

IF (object_id('sp_ShiftDetector_BeforeUpdatetblWSchedule') IS NULL)
BEGIN
	EXEC (
			'CREATE PROCEDURE dbo.sp_ShiftDetector_BeforeUpdatetblWSchedule(@StopUpdate bit output, @LoginID int, @FromDate datetime, @ToDate datetime)
as begin
    SET NOCOUNT ON;
end'
			)
END

SET @StopUpdate = 0

-- Goi thu thu thuc customize import de ap dung cho tung khach hang rieng biet
EXEC sp_ShiftDetector_BeforeUpdatetblWSchedule @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

UPDATE tblWSchedule
SET ShiftID = isnull(m.ShiftID, 0), HolidayStatus = m.HolidayStatus
FROM tblWSchedule ws
INNER JOIN #tblShiftDetectorMatched m ON ws.EmployeeID = m.EmployeeId AND ws.ScheduleDate = m.ScheduleDate
WHERE (ws.Approved IS NULL OR ws.Approved = 0)



UPDATE ws
SET ShiftID2 = ss.ShiftID
FROM tblWSchedule ws
INNER JOIN #tblWorking2ShiftADay_Detect s ON ws.EmployeeID = s.EmployeeID AND ws.ScheduleDate = s.ScheduleDate AND s.AttEnd2 IS NOT NULL
INNER JOIN #tblShiftSetting ss ON s.ShiftCode2 = ss.ShiftCode

--TRIPOD: Xử lý chọn shift cho staff, swapp shift
EXEC sp_processShiftChange @LoginID = @LoginID, @FromDate = @FromDate, @ToDate = @ToDate

-- Nguoi dung da confirm
-- ngay hom do co nghi
-- thai san
IF COL_LENGTH('tempdb..#tblShiftDetectorMatched', 'NotTASaturday') IS NULL
	ALTER TABLE #tblShiftDetectorMatched ADD NotTASaturday INT

UPDATE #tblShiftDetectorMatched
SET NotTASaturday = 1
FROM #tblShiftDetectorMatched s
INNER JOIN #tblEmployeeList e ON s.EmployeeId = e.EmployeeID
WHERE e.TAOptionID = 4 AND DATENAME(dw, s.ScheduleDate) = 'Saturday'

UPDATE #tblShiftDetectorMatched
SET AttStart = NULL, AttEnd = NULL, FixedAtt = 0
FROM #tblShiftDetectorMatched m
INNER JOIN (
	SELECT EmployeeId, LeaveDate, Max(LeaveStatus) LeaveStatus, sum(lvAmount) lvAmount
	FROM #tblLvHistory
	WHERE LeaveCategory = 1
	GROUP BY EmployeeID, LeaveDate
	) lv ON m.EmployeeId = lv.EmployeeID AND m.ScheduleDate = lv.LeaveDate
WHERE ISNULL(m.NotTASaturday, 0) = 0 AND lv.LvAmount >= 8 AND m.HolidayStatus = 0 AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE te.NotCheckTA = 1 AND m.EmployeeID = te.EmployeeID
		) AND m.AttStartMi = m.WorkStartMi AND m.AttEndMi = m.WorkEndMi

UPDATE #tblShiftDetectorMatched
SET AttStart = CASE
		WHEN AttStart IS NULL OR AttStartMi > WorkStartMi
			THEN DATEADD(mi, CASE
						WHEN lv.lvAmount > 0 AND lv.LeaveStatus IN (1, 4)
							THEN WorkStartMi + (lv.lvAmount * 60)
						ELSE WorkStartMi
						END, ScheduleDate)
		ELSE AttStart
		END, AttEnd = CASE
		WHEN AttEnd IS NULL OR AttEndMi < WorkEndMi
			THEN DATEADD(mi, CASE
						WHEN lv.lvAmount > 0 AND lv.LeaveStatus IN (2, 5)
							THEN WorkEndMi - (lv.lvAmount * 60)
						ELSE WorkEndMi
						END, ScheduleDate)
		ELSE AttEnd
		END
--,StdWorkingTimeMi = BreakStartMi - WorkStartMi + (WorkEndMi-BreakEndMi)
FROM #tblShiftDetectorMatched m
LEFT JOIN (
	SELECT EmployeeId, LeaveDate, Max(LeaveStatus) LeaveStatus, sum(lvAmount) lvAmount
	FROM #tblLvHistory
	WHERE LeaveCategory = 1
	GROUP BY EmployeeID, LeaveDate
	) lv ON m.EmployeeId = lv.EmployeeID AND m.ScheduleDate = lv.LeaveDate
WHERE ISNULL(m.NotTASaturday, 0) = 0 AND HolidayStatus = 0 AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE te.NotCheckTA = 1 AND m.EmployeeID = te.EmployeeID
		) AND (lv.EmployeeID IS NULL OR lv.lvAmount < 8)

UPDATE m1
SET AttEnd = NULL
FROM #tblShiftDetectorMatched m1
INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate + 1 = m2.ScheduleDate
WHERE m1.AttStart IS NULL AND m1.AttEnd = m2.AttStart

-- hom sau thieu du lieu cong ma gio vao trung voi gio ra hom truoc
UPDATE m2
SET AttStart = NULL
FROM #tblShiftDetectorMatched m1
INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate - 1
WHERE m1.AttStart IS NOT NULL AND m2.AttEnd IS NULL AND m1.AttEnd = m2.AttStart

----------- dua vao bang tblhasTA-------------------------
SET @RepeatTime = 0

SELECT ta.*, s.AttEndYesterday AS MinTimeIn, s.AttEndYesterday AS MaxTimeIn, s.AttEndYesterday AS MinTimeOut, s.AttEndYesterday AS MaxTimeOut, s.AttEndYesterday, s.AttStartTomorrow, s.TIMEINBEFORE, s.TIMEOUTAFTER, s.INOUT_MINIMUM, s.StdWorkingTimeMi, s.StdWorkingTimeMi AS STDWorkingTime_SS, s.WorkstartMi, s.WorkendMi, s.AttStartMi, s.AttEndMi, s.BreakEndMi, s.BreakStartMi, s.Early_Permit, s.Late_Permit, s.ShiftID, cast(NULL AS INT) AS SwipeOptionID, cast(NULL AS FLOAT) CARE_LEAVEAMOUNT, cast(NULL AS FLOAT) ACCUMMULATE_CARE_LEAVEAMOUNT, cast(NULL AS FLOAT) COMPARE_WORKINGTIME, cast(NULL AS FLOAT) DEDUCT_WORKINGTIME
INTO #tblHasTA_insert
FROM #tblHasTA ta
INNER JOIN #tblShiftDetectorMatched s ON ta.EmployeeID = s.EmployeeId AND ta.AttDate = s.ScheduleDate
WHERE 1 = 0

CREATE CLUSTERED INDEX IX_tblHasTA_insert_Emp_Att ON #tblHasTA_insert (EmployeeID, AttDate)

-- Option 0: xóa giờ ra nếu có nghỉ cả ngày
-- Option 1: xóa nghỉ cả ngày nếu có giờ vào ra
-- Option 2: Xóa giờ vào ra nếu nghỉ cả ngày và workingtimeMi < 120
-- Option 3: Xóa nghỉ cả ngày nếu có vào ra và WorkingTimeMi > 240
UPDATE m
SET AttEnd = NULL, AttStart = NULL, WorkingTimeMi = 0
FROM #tblShiftDetectorMatched m
WHERE m.HolidayStatus = 0 AND @LEAVEFULLDAYSTILLHASATTTIME = 0 AND IsLeaveStatus3 = 1

UPDATE m
SET AttEnd = NULL, AttStart = NULL, WorkingTimeMi = 0
FROM #tblShiftDetectorMatched m
WHERE m.HolidayStatus = 0 AND @LEAVEFULLDAYSTILLHASATTTIME = 2 AND IsLeaveStatus3 = 1 AND WorkingTimeMi < 120

DELETE tblLvHistory
FROM tblLvHistory lv
INNER JOIN #tblShiftDetectorMatched m ON lv.EmployeeID = m.EmployeeId AND lv.LeaveDate = m.ScheduleDate AND lv.LeaveStatus = 3 AND m.IsLeaveStatus3 = 1
WHERE m.HolidayStatus = 0 AND @LEAVEFULLDAYSTILLHASATTTIME = 1 AND m.AttStart IS NOT NULL AND m.AttEnd IS NOT NULL

DELETE tblLvHistory
FROM tblLvHistory lv
INNER JOIN #tblShiftDetectorMatched m ON lv.EmployeeID = m.EmployeeId AND lv.LeaveDate = m.ScheduleDate AND lv.LeaveStatus = 3 AND m.IsLeaveStatus3 = 1
WHERE m.HolidayStatus = 0 AND @LEAVEFULLDAYSTILLHASATTTIME = 1 AND m.AttStart IS NOT NULL AND m.AttEnd IS NOT NULL AND m.WorkingTimeMi > 240

SELECT @TA_IO_SWIPE_OPTION = CAST(Value AS FLOAT)
FROM tblParameter
WHERE Code = 'TA_IO_SWIPE_OPTION'

/*
0 Bấm tự do
1 Vào làm bấm công, về bấm công
2 Bấm giờ công 2 lần đầu ca cuối ca, tang ca bấm riêng
3 Sáng bấm, trưa bấm , chiều bấm, tăng ca bấm công
*/
/*

update ta1 set TIMEOUTAFTER = DATEADD(hh,@Max_WorkingHour_PerDay,ta1.WorkStart)
from #tblShiftDetectorMatched ta1

inner join #tblShiftDetectorMatched ta2 on ta1.EmployeeId = ta2.EmployeeId and ta1.ScheduleDate= ta2.ScheduleDate -1
where ta2.AttStart is not null and ta2.AttEnd is not null
*/
UPDATE #tblShiftDetectorMatched
SET TIMEOUTAFTER = DATEADD(HOUR, @Max_WorkingHour_PerDay, WorkStart)
WHERE TIMEOUTAFTER <= WorkStart

DELETE m
FROM #tblShiftDetectorMatched m
WHERE EXISTS (
		SELECT 1
		FROM #tblWorking2ShiftADay_Detect s
		WHERE m.EmployeeId = s.EmployeeID AND m.ScheduleDate = s.ScheduleDate AND s.AttEnd2 IS NOT NULL
		)

--update rule option nếu null update về rule 4
UPDATE sdm
SET sdm.SwipeOptionID = isnull(ss.SwipeOptionID, 4)
FROM #tblShiftDetectorMatched sdm
LEFT JOIN #tblShiftSetting ss ON sdm.ShiftCode = ss.ShiftCode

----lichien: cap nhat option [vao bam cong - ve bam cong] if date < 2024-03-16
--if exists (select top 1 1 from #tblShiftDetectorMatched where ScheduleDate < '2024-03-16')
-- update #tblShiftDetectorMatched set SwipeOptionID = 1 where ScheduleDate < '2024-03-16'
SET @TA_IO_SWIPE_OPTION = ISNULL(@TA_IO_SWIPE_OPTION, 1)

IF @TA_IO_SWIPE_OPTION = 0
BEGIN
	UPDATE #tblShiftDetectorMatched
	SET AttEndYesterday = dateadd(mi, - 20, AttStart)
	WHERE AttEndYesterday IS NULL AND AttStart IS NOT NULL

	UPDATE #tblShiftDetectorMatched
	SET AttStartTomorrow = dateadd(mi, 20, AttEnd)
	WHERE AttStartTomorrow IS NULL AND AttEnd IS NOT NULL

	UPDATE #tblShiftDetectorMatched
	SET AttEndYesterday = dateadd(mi, 10, AttEndYesterday), AttStartTomorrow = dateadd(mi, - 10, AttStartTomorrow)
	WHERE @IN_OUT_TA_SEPARATE = 0

	RepeatInsertHasTAOption0:

	INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkingTime, StdWorkingTimeMi, BreakStartMi, BreakEndMi, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow)
	SELECT EmployeeID, ScheduleDate, @RepeatTime, 0, WorkingTimeMi / 60.0, StdWorkingTimeMi, BreakStartMi, BreakEndMi, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow
	FROM #tblShiftDetectorMatched
	WHERE ScheduleDate BETWEEN @FromDate AND @ToDate

	--
	UPDATE #tblHasTA_insert
	SET TAStatus = a.TAStatus, AttStart = a.AttStart, AttEnd = a.AttEnd
	FROM #tblHasTA_insert ta
	INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
	WHERE a.TAStatus = 3 AND a.AttDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET TAStatus = a.TAStatus, AttEnd = a.AttEnd
	FROM #tblHasTA_insert ta
	INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
	WHERE a.TAStatus = 2 AND a.AttDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET TAStatus = a.TAStatus, AttStart = a.AttStart
	FROM #tblHasTA_insert ta
	INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
	WHERE a.TAStatus = 1 AND a.AttDate BETWEEN @FromDate AND @ToDate

	-- AttStart
	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert ta
	INNER JOIN (
		SELECT ta.EmployeeID, ta.AttDate, min(att.AttTime) AttTime
		FROM #tblHasTA_insert ta
		INNER JOIN #tblShiftDetectorMatched m ON ta.EmployeeID = m.EmployeeId AND ta.AttDate = m.ScheduleDate
		INNER JOIN #tblTmpAttend att ON ta.EmployeeID = att.EmployeeID AND att.AttTime > m.AttEndYesterday AND att.AttTime < m.AttStartTomorrow AND (ta.Period > 0 OR (att.AttTime < m.AttEnd OR m.AttEnd IS NULL))
		WHERE ta.Period = @RepeatTime AND ta.TAStatus IN (2, 0) AND (m.AttStart IS NOT NULL OR m.AttEnd IS NOT NULL) AND att.AttTime >= CASE
				WHEN @RepeatTime = 0
					THEN ISNULL(m.AttStart, AttTime)
				ELSE m.AttStart
				END AND datediff(mi, m.WorkStart, att.AttTime) < 1320
		GROUP BY ta.EmployeeID, ta.AttDate
		) tmp ON ta.EmployeeID = tmp.EmployeeID AND ta.AttDate = tmp.AttDate AND ta.Period = @RepeatTime AND ta.TAStatus IN (2, 0)

	-- sửa lại cho những người giờ nằm trong giờ nghỉ trưa
	--update ta set AttStart = att.AttTime
	UPDATE #tblHasTA_insert
	SET AttStart = t.AttTime
	FROM #tblHasTA_insert ta
	INNER JOIN (
		SELECT ta.EmployeeID, ta.Attdate, ta.Period, max(att.AttTime) AttTime
		FROM #tblHasTA_insert ta
		INNER JOIN #tblTmpAttend att ON ta.EmployeeID = att.EmployeeID AND att.AttTime > ta.AttStart AND att.AttTime < DATEADD(mi, ta.BreakEndMi + 15, ta.Attdate)
		WHERE ta.Period = @RepeatTime AND DATEPART(hh, ta.AttStart) * 60 + DATEPART(mi, ta.Attstart) BETWEEN ta.BreakStartMi AND ta.BreakEndMi
		GROUP BY ta.EmployeeID, ta.Attdate, ta.Period
		) t ON ta.EmployeeID = t.EmployeeID AND ta.Attdate = t.Attdate AND ta.Period = t.Period

	-- sửa lại những người vào quá sớm nhưng k có tăng ca trước
	DELETE att
	FROM #tblTmpAttend att
	WHERE EXISTS (
			SELECT 1
			FROM #tblHasTA_insert ta
			WHERE ta.Period = @RepeatTime AND att.EmployeeID = ta.EmployeeID AND att.AttTime = ta.AttStart
			)

	-- AttEnd
	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert ta
	INNER JOIN (
		SELECT ta.EmployeeID, ta.AttDate, min(att.AttTime) AttTime
		FROM #tblHasTA_insert ta
		INNER JOIN #tblShiftDetectorMatched m ON ta.EmployeeID = m.EmployeeId AND ta.AttDate = m.ScheduleDate
		INNER JOIN #tblTmpAttend att ON ta.EmployeeID = att.EmployeeID AND ta.AttStart < att.AttTime AND (datediff(mi, ta.AttStart, att.AttTime) >= isnull(m.INOUT_MINIMUM, 1) OR (ta.AttStart IS NULL AND att.AttTime > m.AttEndYesterday)) AND att.AttTime < m.AttStartTomorrow AND NOT EXISTS (
				SELECT 1
				FROM #tblTmpAttend att1
				WHERE ta.EmployeeID = att1.EmployeeID AND att.AttState = att1.AttState AND att1.Atttime > dateadd(mi, 5, att.AttTime) AND att1.AttTime < att.AttTime
				)
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE ta.Period = @RepeatTime AND ta.TAStatus IN (1, 0) AND att.AttTime < isnull(m.TIMEOUTAFTER, m.AttEnd) AND att.AttTime > m.WorkStart AND datediff(mi, isnull(ta.AttStart, m.WorkStart), att.AttTime) >= isnull(m.INOUT_MINIMUM, 0)
		GROUP BY ta.EmployeeID, ta.AttDate
		) tmp ON ta.EmployeeID = tmp.EmployeeID AND ta.AttDate = tmp.AttDate AND ta.Period = @RepeatTime AND ta.TAStatus IN (1, 0)

	-- nếu k lấy được giờ ca thì lấy giờ ra cuối ngày
	UPDATE #tblHasTA_insert
	SET AttEnd = m.AttEnd
	FROM #tblHasTA_insert ta
	INNER JOIN #tblShiftDetectorMatched m ON ta.EmployeeId = m.EmployeeID AND ta.AttDate = m.ScheduleDate
	WHERE ta.Period = @RepeatTime AND ta.TAStatus IN (1, 0) AND ta.AttEnd IS NULL AND (ta.AttStart < m.AttEnd OR (ta.AttStart IS NULL AND ta.Period = 0))

	-- period 0 ko lay dc gio vao thi lay trong #tblShiftDetectorMatched
	UPDATE #tblHasTA_insert
	SET AttStart = m.AttStart
	FROM #tblHasTA_insert ta
	INNER JOIN #tblShiftDetectorMatched m ON ta.EmployeeId = m.EmployeeID AND ta.AttDate = m.ScheduleDate
	WHERE ta.Period = 0 AND ta.TAStatus IN (0, 2) AND ta.AttStart IS NULL AND (ta.AttEnd > m.AttStart OR ta.AttEnd IS NULL)

	/* -- nghỉ cả ngày mà bấm thiéu đàu thì bỏ
 update m set AttStart = null, AttEnd = null from #tblHasTA_insert m where ((m.AttStart is not null and m.AttEnd is null ) or (m.AttStart is null and m.AttEnd is not null))
 and exists (select 1 from #tblLvHistory lv where lv.LeaveCategory = 1 and lv.EmployeeID = m.EmployeeId and m.AttDate = lv.LeaveDate and lv.LeaveStatus = 3)
 */
	-- loại những records đã xử lý xong
	DELETE m
	FROM #tblShiftDetectorMatched m
	WHERE EXISTS (
			SELECT 1
			FROM #tblHasTA_insert ta
			WHERE ta.Period = @RepeatTime AND ta.EmployeeID = m.EmployeeId AND ta.AttDate = m.ScheduleDate AND (ta.AttEnd >= m.AttEnd OR (ta.AttStart = m.AttStart AND m.AttEnd IS NULL))
			) OR (m.AttStart IS NULL AND m.AttEnd IS NULL)

	DELETE m
	FROM #tblShiftDetectorMatched m
	WHERE EXISTS (
			SELECT 1
			FROM #tblHasTA_insert ta
			WHERE ta.Period = @RepeatTime AND ta.EmployeeID = m.EmployeeId AND ta.AttDate = m.ScheduleDate AND (ta.AttStart >= m.AttEnd)
			)

	IF EXISTS (
			SELECT 1
			FROM #tblShiftDetectorMatched
			) AND @RepeatTime < 7
	BEGIN
		UPDATE m
		SET AttEndYesterday = ta.AttEnd
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblHasTA_insert ta ON m.EmployeeId = ta.EmployeeID AND m.ScheduleDate = ta.AttDate
		WHERE ta.Period = @RepeatTime

		SET @RepeatTime += 1

		GOTO RepeatInsertHasTAOption0
	END
END

DELETE
FROM #tblHasTA_insert
WHERE AttStart IS NULL AND AttEnd IS NULL AND Period > 0

IF @TA_IO_SWIPE_OPTION = 1 -- Ngày bấm 2 lần vào bấm công về bấm công
BEGIN
	-- vao thì lấy sớm nhất, ra thì lấy trễ nhất
	UPDATE #tblShiftDetectorMatched
	SET AttEnd = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, max(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend_Org t ON m.EmployeeId = t.EmployeeID
		WHERE ((t.AttTime > m.AttEnd AND t.AttTime < m.TIMEOUTAFTER)) AND t.AttTime < m.AttStartTomorrow AND t.AttTime > m.AttEndYesterday AND (t.AttTime > m.AttStart OR m.AttStart IS NULL) AND t.AttTime < m.TIMEOUTAFTER AND (t.AttTime >= dateadd(mi, @TA_INOUT_MINIMUM, m.AttStart))
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	UPDATE m1
	SET AttEndYesterday = m2.AttEnd
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate = m2.ScheduleDate + 1
	WHERE m2.AttEnd IS NOT NULL

	UPDATE #tblShiftDetectorMatched
	SET AttStart = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, min(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend_Org t ON m.EmployeeId = t.EmployeeID
		WHERE ((t.AttTime < m.AttStart OR AttStart IS NULL) AND t.AttTime > m.TIMEINBEFORE) AND t.AttTime > dateadd(second, @RemoveDuplicateAttTime_Interval, m.AttEndYesterday) AND t.atttime < dateadd(mi, - 30, m.AttStartTomorrow) AND t.AttTime < dateadd(mi, - 1 * m.INOUT_MINIMUM, m.AttEnd)
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	DELETE ta
	FROM tblHasTA TA
	WHERE TA.Period > 0 AND EXISTS (
			SELECT 1
			FROM #tblShiftDetectorMatched M
			WHERE TA.EmployeeID = M.EmployeeId AND ta.AttDate = m.ScheduleDate AND M.ScheduleDate BETWEEN @FromDate AND @ToDate
			)

	INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkingTime, StdWorkingTimeMi)
	SELECT EmployeeID, ScheduleDate, @RepeatTime, 0, CASE
			WHEN HolidayStatus = 0
				THEN WorkingTimeMi / 60.0
			ELSE (AttEndMi - AttStartMi) / 60.0
			END, StdWorkingTimeMi
	FROM #tblShiftDetectorMatched
	WHERE ScheduleDate BETWEEN @FromDate AND @ToDate

	-- dữ liệu đã đc xử lý
	UPDATE #tblHasTA_insert
	SET TAStatus = a.TAStatus, AttStart = a.AttStart, AttEnd = a.AttEnd
	FROM #tblHasTA_insert ta
	INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
	WHERE a.TAStatus = 3 AND a.AttDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET AttStart = m.AttStart, AttEnd = m.AttEnd
	FROM #tblHasTA_insert ta
	INNER JOIN #tblShiftDetectorMatched m ON ta.EmployeeId = m.EmployeeID AND ta.AttDate = m.ScheduleDate
	WHERE ta.Period = @RepeatTime AND ta.TAStatus = 0
		/*
 -- nghỉ cả ngày mà bấm thiếu đàu thì bỏ
 update m set AttStart = null, AttEnd = null from #tblHasTA_insert m where ((m.AttStart is not null and m.AttEnd is null ) or (m.AttStart is null and m.AttEnd is not null))
 and exists (select 1 from #tblLvHistory lv where lv.LeaveCategory = 1 and lv.EmployeeID = m.EmployeeId and m.AttDate = lv.LeaveDate and lv.LeaveStatus = 3 and @LEAVEFULLDAYSTILLHASATTTIME = 2)
 */
END

IF @TA_IO_SWIPE_OPTION = 2 --Bấm giờ công 2 lần đầu ca cuối ca, tăng ca bấm riêng,
BEGIN
	-- cap nhat lai OTAfter neu chua co
	UPDATE m
	SET OTAfterStart = DATEADD(mi, ss.OTAfterStartMi, m.ScheduleDate)
	FROM #tblShiftDetectorMatched m
	INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
	WHERE OTAfterStart IS NULL

	UPDATE m
	SET OTAfterEnd = DATEADD(mi, ss.OTAfterEndMi, m.ScheduleDate)
	FROM #tblShiftDetectorMatched m
	INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
	WHERE OTAfterEnd IS NULL

	UPDATE m
	SET OTBeforeStart = DATEADD(mi, ss.OTBeforeStartMi, m.ScheduleDate)
	FROM #tblShiftDetectorMatched m
	INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
	WHERE OTBeforeStart IS NULL

	UPDATE m
	SET OTBeforeEnd = DATEADD(mi, ss.OTBeforeEndMi, m.ScheduleDate)
	FROM #tblShiftDetectorMatched m
	INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
	WHERE OTBeforeEnd IS NULL

	-- buoi sang
	INSERT INTO #tblHasTA_insert (EmployeeID, Attdate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MaxTimeOut, WorkingTime, StdWorkingTimeMi)
	SELECT EmployeeId, ScheduleDate, 0, 0, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, dateadd(MI, - @TA_TIMEINBEFORE / 2, WorkStart), dateadd(mi, - 120, WorkEnd), --,dateadd(MI,-@TA_TIMEINBEFORE,WorkStart),dateadd(mi,-120,WorkEnd)
		dateadd(hour, @TA_TIMEOUTAFTER, WorkStart), CASE
			WHEN HolidayStatus = 0
				THEN WorkingTimeMi / 60.0
			ELSE (AttEndMi - AttStartMi) / 60.0
			END, StdWorkingTimeMi
	FROM #tblShiftDetectorMatched
	WHERE ScheduleDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET MinTimeOut = dateadd(MI, @TA_INOUT_MINIMUM, WorkStart)

	--gio vao
	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND t.AttTime < m.WorkEnd AND t.AttTime > dateadd(mi, @TA_INOUT_MINIMUM, m.AttEndYesterday) AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > m.WorkStart AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.WorkEnd AND m.MaxTimeOut
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > m.WorkStart AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > m.AttStart AND t.AttTime < m.MaxTimeOut
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	-- gio ra
	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > m.WorkStart AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeOut AND m.WorkEnd
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime < m.AttEnd AND t.AttTime > m.MinTimeIn
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	-- tang ca sau
	INSERT INTO #tblHasTA_insert (EmployeeID, Attdate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MaxTimeOut)
	SELECT EmployeeId, ScheduleDate, 1, 0, OTAfterStart, OTAfterEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, dateadd(hour, - 1, OTAfterStart), dateadd(mi, - datediff(mi, OTAfterStart, OTAfterEnd) / 2, OTAfterEnd), --,dateadd(HOUR,@TA_TIMEOUTAFTER,WorkStart)
		TIMEOUTAFTER
	FROM #tblShiftDetectorMatched
	WHERE ScheduleDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET MinTimeOut = DATEADD(SECOND, 1, MaxTimeIn)
	WHERE MinTimeOut IS NULL

	UPDATE m1
	SET AttEndYesterday = m2.AttEnd
	FROM #tblHasTA_insert m1
	INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = m2.AttDate AND m1.Period = m2.Period + 1 --where (m2.AttEnd is not null )
		AND m1.Period = 1

	--update m1 set AttStartTomorrow = isnull(m2.AttStart,m2.workStart) from #tblHasTA_insert m1 inner join #tblHasTA_insert m2 on m1.EmployeeId = m2.EmployeeId and m1.AttDate = m2.AttDate and m1.Period = m2.Period-1
	-- where m1.Period = 1
	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, m2.workStart)
	FROM #tblHasTA_insert m1
	INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = DateADD(Day, - 1, m2.AttDate) AND m2.Period = 0
	WHERE m1.Period = 1

	--Giờ AttStartTomorow nên lấy của ngày hôm sau
	-- gio vao
	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND t.AttTime < m.WorkEnd AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND t.AttTime < m.WorkEnd AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND m.AttEndYesterday IS NULL AND T.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	-- gio ra
	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND t.AttTime > m.WorkStart AND (T.AttTime > m.AttEndYesterday OR m.AttEndYesterday IS NULL) AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeOut AND m.WorkEnd
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND t.AttTime > m.WorkStart AND (T.AttTime > m.AttEndYesterday OR m.AttEndYesterday IS NULL) AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.WorkEnd AND m.MaxTimeOut
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND t.AttTime > m.WorkStart AND (T.AttTime > m.AttEndYesterday OR m.AttEndYesterday IS NULL) AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > m.AttStart AND t.AttTime < m.MaxTimeOut
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND (T.AttTime > m.AttEndYesterday OR m.AttEndYesterday IS NULL) AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime < m.AttEnd AND t.AttTime > m.MinTimeIn
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	-- liet ke ra nhung record bao vao cua period sau lay nham sang bam ra cua period truoc
	UPDATE t
	SET AttEnd = s.AttStart
	FROM #tblHasTA_insert t
	INNER JOIN #tblHasTA_insert s ON t.EmployeeID = s.EmployeeID AND t.AttDate = s.AttDate AND t.Period = s.Period - 1
	WHERE t.AttEnd IS NULL AND t.AttStart IS NOT NULL AND t.Period <= 1 AND s.AttEnd IS NOT NULL AND s.AttStart IS NOT NULL AND EXISTS (
			SELECT 1
			FROM #tblTmpAttend_Org att
			WHERE att.EmployeeID = t.EmployeeID AND att.AttTime > s.AttStart AND att.AttTime < s.AttEnd
			)

	UPDATE t
	SET AttEnd = s.AttStart
	FROM #tblHasTA_insert t
	INNER JOIN #tblHasTA_insert s ON t.EmployeeID = s.EmployeeID AND t.AttDate = s.AttDate AND t.Period = s.Period - 1
	WHERE t.AttEnd IS NULL AND t.AttStart IS NOT NULL AND t.Period <= 1 AND s.AttEnd IS NOT NULL AND s.AttStart IS NOT NULL AND EXISTS (
			SELECT 1
			FROM #tblTmpAttend_Org att
			WHERE att.EmployeeID = t.EmployeeID AND att.AttTime > s.AttStart AND att.AttTime < s.AttEnd
			)

	UPDATE m1
	SET AttEndYesterday = m2.AttEnd
	FROM #tblHasTA_insert m1
	INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = m2.AttDate AND m1.Period = m2.Period + 1 --where (m2.AttEnd is not null)

	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_Org t ON m.EmployeeId = t.EmployeeID
		WHERE m.TAStatus = 0 AND m.Period > 0 AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime < m.AttEnd AND t.AttTime > m.MinTimeIn
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period
	WHERE m.AttEndYesterday = m.AttStart

	-- k đụng vào những ngày người dùng modified
	UPDATE #tblHasTA_insert
	SET TAStatus = a.TAStatus, AttStart = a.AttStart, AttEnd = a.AttEnd
	FROM #tblHasTA_insert ta
	INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
	WHERE a.TAStatus = 3 AND a.AttDate BETWEEN @FromDate AND @ToDate

	--- co gang la gio ra cho buoi chieu
	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert i
	INNER JOIN (
		SELECT i.EmployeeID, i.AttDate, i.Period, MIN(att.AttTime) AttTime
		FROM #tblHasTA_insert i
		INNER JOIN #tblHasTA_insert t ON i.employeeId = t.EmployeeId AND i.AttDate = t.AttDate AND t.Period = 1 AND i.Period = 0
		INNER JOIN #tblTmpAttend_Org att ON i.employeeId = att.EmployeeId AND att.AttTime < t.AttStart AND att.AttTime > i.MinTimeOut
		WHERE i.Period = 1 AND i.AttEnd IS NULL AND t.AttStart IS NOT NULL
		GROUP BY i.EmployeeID, i.AttDate, i.Period
		) tmp ON i.EmployeeId = tmp.EmployeeId AND i.AttDate = tmp.AttDate AND i.Period = tmp.Period

	-- lam dep lai du lieu
	UPDATE i1
	SET AttEnd = i2.AttStart
	FROM #tblHasTA_insert i1
	INNER JOIN #tblHasTA_insert i2 ON i1.employeeID = i2.EmployeeID AND i1.AttDate = i2.AttDate
	WHERE i1.Period = i2.Period - 1 AND i1.AttEnd IS NULL AND i2.AttStart IS NOT NULL AND i2.AttEnd IS NULL

	UPDATE i2
	SET AttStart = NULL
	FROM #tblHasTA_insert i1
	INNER JOIN #tblHasTA_insert i2 ON i1.employeeID = i2.EmployeeID AND i1.AttDate = i2.AttDate
	WHERE i1.Period = i2.Period - 1 AND i1.AttEnd = i2.AttStart AND i2.AttEnd IS NULL

	UPDATE j
	SET AttStart = i.AttEnd
	FROM #tblHasTA_insert i
	INNER JOIN #tblHasTA_insert j ON i.EmployeeId = j.EmployeeId AND i.AttDate = j.AttDate AND i.Period = j.Period - 1
	WHERE i.AttStart IS NULL AND i.AttEnd IS NOT NULL AND j.AttStart IS NULL AND j.AttEnd IS NOT NULL AND j.AttEnd > dateadd(hour, - 1, j.WorkEnd)

	UPDATE i
	SET AttEnd = NULL
	FROM #tblHasTA_insert i
	INNER JOIN #tblHasTA_insert j ON i.EmployeeId = j.EmployeeId AND i.AttDate = j.AttDate AND i.Period = j.Period - 1
	WHERE i.AttStart IS NULL AND i.AttEnd = j.AttStart AND j.AttEnd IS NOT NULL AND j.AttEnd > dateadd(hour, - 1, j.WorkEnd)

	--- co gang la gio vao cho buoi chieu
	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert i
	INNER JOIN (
		SELECT i.EmployeeID, i.AttDate, i.Period, min(att.AttTime) AttTime
		FROM #tblHasTA_insert i
		INNER JOIN #tblHasTA_insert t ON i.employeeId = t.EmployeeId AND i.AttDate = t.AttDate AND t.Period = 0 AND i.Period = 1
		INNER JOIN #tblTmpAttend_Org att ON i.employeeId = att.EmployeeId AND att.AttTime > isnull(t.AttStart, t.MinTimeOut) -- and att.AttTime < i.AttEnd
		WHERE i.Period = 0 AND i.AttStart IS NULL AND i.AttEnd IS NOT NULL
		GROUP BY i.EmployeeID, i.AttDate, i.Period
		) tmp ON i.EmployeeId = tmp.EmployeeId AND i.AttDate = tmp.AttDate AND i.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttStart = NULL
	WHERE period = 1 AND AttStart = AttEnd AND AttStart > MaxTimeIn

	-- khong co tang ca thi bo di
	DELETE #tblHasTA_insert
	WHERE Period = 1 AND AttStart IS NULL AND AttEnd IS NULL
END

IF @TA_IO_SWIPE_OPTION = 3 --Sáng bấm, trưa bấm, chiều bấm và tăng ca bấm công
BEGIN
	-- cap nhat lai OTAfter neu chua co
	UPDATE m
	SET OTAfterStart = DATEADD(mi, ss.OTAfterStartMi, m.ScheduleDate)
	FROM #tblShiftDetectorMatched m
	INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
	WHERE OTAfterStart IS NULL

	UPDATE m
	SET OTAfterEnd = DATEADD(mi, ss.OTAfterEndMi, m.ScheduleDate)
	FROM #tblShiftDetectorMatched m
	INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
	WHERE OTAfterEnd IS NULL

	UPDATE m
	SET OTBeforeStart = DATEADD(mi, ss.OTBeforeStartMi, m.ScheduleDate)
	FROM #tblShiftDetectorMatched m
	INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
	WHERE OTBeforeStart IS NULL

	UPDATE m
	SET OTBeforeEnd = DATEADD(mi, ss.OTBeforeEndMi, m.ScheduleDate)
	FROM #tblShiftDetectorMatched m
	INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
	WHERE OTBeforeEnd IS NULL

	-- buoi sang
	INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MaxTimeOut, WorkingTime, StdWorkingTimeMi)
	SELECT EmployeeID, ScheduleDate, 0, 0, WorkStart, BreakStart, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, dateadd(MI, - @TA_TIMEINBEFORE, WorkStart), dateadd(mi, - datediff(mi, WorkStart, BreakStart) / 2, BreakStart), dateadd(mi, datediff(mi, BreakStart, BreakEnd) / 2, BreakEnd) --maxtime out
		, CASE
			WHEN HolidayStatus = 0
				THEN WorkingTimeMi / 60.0
			ELSE (AttEndMi - AttStartMi) / 60.0
			END, StdWorkingTimeMi
	FROM #tblShiftDetectorMatched
	WHERE ScheduleDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET MinTimeOut = DATEADD(SECOND, 1, MaxTimeIn)

	-- gio vao
	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND t.AttTime < m.WorkEnd AND t.AttTime > dateadd(mi, @TA_INOUT_MINIMUM, m.AttEndYesterday) AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	-- doi di lam ăn xa
	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND t.AttTime BETWEEN m.MinTimeIn AND m.WorkEnd AND t.AttTime > dateadd(mi, @TA_INOUT_MINIMUM, m.AttEndYesterday)
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	-- gio ra
	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > m.WorkStart AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.WorkEnd AND m.MaxTimeOut
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > isnull(m.AttStart, m.WorkStart) AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeOut AND m.WorkEnd
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > m.WorkStart AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > m.AttStart AND t.AttTime < m.MaxTimeOut AND t.AttTime > m.MinTimeOut
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	-- buoi chieu
	INSERT INTO #tblHasTA_insert (EmployeeID, Attdate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MaxTimeOut, WorkingTime, StdWorkingTimeMi)
	SELECT EmployeeId, ScheduleDate, 1, 0, BreakEnd, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, dateadd(mi, - @TA_TIMEINBEFORE, BreakEnd), dateadd(mi, - datediff(mi, BreakEnd, WorkEnd) / 2, WorkEnd), --,dateadd(mi,case when datediff(mi,WorkEnd,OTAfterStart)/2 < 30 then 30 else datediff(mi,WorkEnd,OTAfterStart)/2 end,WorkEnd) -- tối thiểu 30 phút kể từ giờ ra
		dateadd(mi, CASE
				WHEN datediff(mi, WorkEnd, OTAfterStart) / 2 < 60
					THEN 60
				ELSE datediff(mi, WorkEnd, OTAfterStart) / 2
				END, WorkEnd), -- max time out tối thiểu 60 phút kể từ giờ ra
		CASE
			WHEN HolidayStatus = 0
				THEN WorkingTimeMi / 60.0
			ELSE (AttEndMi - AttStartMi) / 60.0
			END, StdWorkingTimeMi
	FROM #tblShiftDetectorMatched
	WHERE ScheduleDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET MinTimeOut = dateadd(second, 1, MaxTimeIn)
	WHERE MinTimeOut IS NULL

	UPDATE m1
	SET AttEndYesterday = DATEADD(MI, @TA_OUTIN_MINIMUM, DATEADD(S, 1, m2.AttEnd))
	FROM #tblHasTA_insert m1
	INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = m2.AttDate AND m1.Period = m2.Period + 1

	--where (m2.AttEnd is not null)
	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, m2.workStart)
	FROM #tblHasTA_insert m1
	INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = m2.AttDate AND m1.Period = m2.Period - 1

	UPDATE m1
	SET AttEndYesterday = DATEADD(S, 1, m2.MinTimeOut)
	FROM #tblHasTA_insert m1
	INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = m2.AttDate AND m1.Period = m2.Period + 1
	WHERE m1.AttEndYesterday IS NULL

	-- gio vao
	-- ga que an quan coi xay
	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT ROW_NUMBER() OVER (
				PARTITION BY m.EmployeeID, m.AttDate ORDER BY AttTime ASC
				) AS STT, m.EmployeeId, m.AttDate, m.Period, AttTime, AttState
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.AttStartTomorrow AND (ForceState = 0 OR AttState = 1)
		WHERE m.AttStart IS NULL AND abs(DATEDIFF(mi, m.WorkStart, t.AttTime)) <= 30
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND STT = 1

	-- doi thi ra khoi bat ca nho
	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND t.AttTime < m.WorkEnd AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	-- gio ra
	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		--SELECT m.EmployeeId, m.AttDate,m.Period, max(t.AttTime) AttTime
		SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > m.WorkStart AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.WorkEnd AND m.MaxTimeOut AND m.Period = 1
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > m.WorkStart AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeOut AND m.WorkEnd AND m.Period = 1
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > m.WorkStart AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > m.AttStart AND t.AttTime < m.MaxTimeOut AND t.AttTime > MinTimeOut AND m.Period = 1
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	-- tang ca sau
	INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MaxTimeOut)
	SELECT EmployeeID, ScheduleDate, 2, 0, OTAfterStart, OTAfterEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, dateadd(hour, - 1, OTAfterStart), dateadd(mi, - datediff(mi, OTAfterStart, OTAfterEnd) / 2, OTAfterEnd), TIMEOUTAFTER
	FROM #tblShiftDetectorMatched
	WHERE ScheduleDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET MinTimeOut = DATEADD(SECOND, 1, MaxTimeIn)
	WHERE MinTimeOut IS NULL AND Period = 2

	UPDATE m1
	SET AttEndYesterday = DATEADD(MI, @TA_OUTIN_MINIMUM, DATEADD(S, 1, m2.AttEnd))
	FROM #tblHasTA_insert m1
	INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = m2.AttDate AND m1.Period = m2.Period + 1 AND m1.Period = 2

	--where (m2.AttEnd is not null)
	UPDATE m1
	SET AttEndYesterday = DATEADD(S, 1, m2.MinTimeOut)
	FROM #tblHasTA_insert m1
	INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = m2.AttDate AND m1.Period = m2.Period + 1
	WHERE m1.AttEndYesterday IS NULL AND m1.Period = 2

	UPDATE m1
	SET AttStartTomorrow = isnull(m2.AttStart, m2.workStart)
	FROM #tblHasTA_insert m1
	INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = m2.AttDate AND m1.Period = m2.Period - 1
	WHERE m1.Period = 2

	--không tăng ca vẫn tính 6 mốc nới max time in ra
	UPDATE m1
	SET MaxTimeIn = DATEADD(mi, 60, s.OTAfterStart)
	FROM #tblHasTA_insert m1
	INNER JOIN #tblShiftDetectorMatched s ON m1.EmployeeID = s.EmployeeId AND m1.Attdate = s.ScheduleDate
	WHERE m1.Period = 2 AND DATEDIFF(M, m1.MaxTimeIn, m1.WorkStart) < 60

	-- gio vao
	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND m.Period = 2
			--and t.AttTime < m.WorkEnd
			AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttStart = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND m.Period = 2 AND t.AttTime < m.WorkEnd AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND m.AttEndYesterday IS NULL AND T.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	-- gio ra
	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND m.Period = 2 AND t.AttTime > m.WorkStart AND (T.AttTime > m.AttEndYesterday OR m.AttEndYesterday IS NULL) AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND (t.AttTime > m.AttStart OR m.AttStart IS NULL) AND t.AttTime BETWEEN m.WorkEnd AND m.MaxTimeOut
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	UPDATE #tblHasTA_insert
	SET AttEnd = tmp.AttTime
	FROM #tblHasTA_insert m
	INNER JOIN (
		SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
		FROM #tblHasTA_insert m
		INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
		WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND m.Period = 2 AND (T.AttTime > m.AttEndYesterday OR m.AttEndYesterday IS NULL) AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND (t.AttTime > m.AttStart OR m.AttStart IS NULL) AND t.AttTime BETWEEN WorkStart AND m.WorkEnd
		GROUP BY m.EmployeeId, m.AttDate, m.Period
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period

	--Xử lý nghỉ nữa buổi đầu do có thể giờ ra ca đầu lấy nhầm giờ vào ca sau
	UPDATE c
	SET c.AttStart = s.AttEnd
	FROM #tblHasTA_insert c
	INNER JOIN #tblHasTA_insert s ON c.EmployeeID = s.EmployeeID AND c.Attdate = s.Attdate AND c.Period - 1 = s.Period AND s.AttEnd IS NOT NULL AND s.AttEnd > c.MinTimeIn
	WHERE c.Period = 1 AND c.AttStart IS NULL AND EXISTS (
			SELECT TOP 1 1
			FROM tblLvHistory
			WHERE LeaveDate = c.Attdate AND LeaveStatus = 1 AND EmployeeID = c.EmployeeID
			)

	UPDATE s
	SET s.AttEnd = NULL
	FROM #tblHasTA_insert s
	INNER JOIN #tblHasTA_insert c ON c.EmployeeID = s.EmployeeID AND c.Attdate = s.Attdate AND c.Period - 1 = s.Period AND s.AttEnd IS NOT NULL AND s.AttEnd = c.AttStart
	WHERE s.Period = 0 AND s.AttEnd IS NOT NULL AND EXISTS (
			SELECT TOP 1 1
			FROM tblLvHistory
			WHERE LeaveDate = s.Attdate AND LeaveStatus = 1 AND EmployeeID = c.EmployeeID
			)

	-- dồn giờ công lên do ko ra chấm tăng ca, ngồi tại chỗ làm việc luôn
	UPDATE f
	SET AttEnd = c.AttEnd
	FROM #tblHasTA_insert f
	INNER JOIN #tblHasTA_insert c ON f.EmployeeID = c.EmployeeID AND f.Attdate = c.Attdate AND f.Period + 1 = c.Period
	WHERE f.Period = 1 AND c.Period = 2 AND f.AttEnd IS NULL AND c.AttStart IS NULL AND c.AttEnd IS NOT NULL

	UPDATE c
	SET AttEnd = NULL
	FROM #tblHasTA_insert f
	INNER JOIN #tblHasTA_insert c ON f.EmployeeID = c.EmployeeID AND f.Attdate = c.Attdate AND f.Period + 1 = c.Period
	WHERE f.Period = 1 AND c.Period = 2 AND f.AttEnd = c.AttEnd AND c.AttStart IS NULL

	UPDATE f
	SET AttEnd = c.AttStart
	FROM #tblHasTA_insert f
	INNER JOIN #tblHasTA_insert c ON f.EmployeeID = c.EmployeeID AND f.Attdate = c.Attdate AND f.Period + 1 = c.Period
	WHERE f.Period = 1 AND c.Period = 2 AND f.AttEnd IS NULL AND c.AttStart IS NOT NULL AND c.AttEnd IS NULL

	UPDATE c
	SET AttStart = NULL
	FROM #tblHasTA_insert f
	INNER JOIN #tblHasTA_insert c ON f.EmployeeID = c.EmployeeID AND f.Attdate = c.Attdate AND f.Period + 1 = c.Period
	WHERE f.Period = 1 AND c.Period = 2 AND f.AttEnd = c.AttStart AND c.AttEnd IS NULL

	-- k đụng vào những ngày người dùng modified
	UPDATE #tblHasTA_insert
	SET TAStatus = a.TAStatus, AttStart = a.AttStart, AttEnd = a.AttEnd
	FROM #tblHasTA_insert ta
	INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
	WHERE a.TAStatus = 3 AND a.AttDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET TAStatus = a.TAStatus, AttEnd = a.AttEnd
	FROM #tblHasTA_insert ta
	INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
	WHERE a.TAStatus = 2 AND a.AttDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET TAStatus = a.TAStatus, AttStart = a.AttStart
	FROM #tblHasTA_insert ta
	INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
	WHERE a.TAStatus = 1 AND a.AttDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET AttStart = NULL
	WHERE period = 1 AND AttStart = AttEnd AND AttStart > MaxTimeIn

	-- khong co tang ca thi bo di
	DELETE #tblHasTA_insert
	WHERE Period = 2 AND AttStart IS NULL AND AttEnd IS NULL

	-- xử lý giờ gần nhau tăng ca 45s và không có giờ ra định nghĩa không có tăng ca
	DELETE tc
	FROM #tblHasTA_insert tc
	INNER JOIN #tblHasTA_insert bc ON tc.EmployeeID = bc.EmployeeID AND tc.Attdate = bc.Attdate AND tc.Period = bc.Period + 1 AND tc.Period = 2 AND DATEDIFF(S, bc.AttEnd, tc.AttStart) <= 45 AND tc.AttEnd IS NULL
END

IF @TA_IO_SWIPE_OPTION = 4 -- Vao bam, nghi giua ca bam, ve bam
BEGIN
	UPDATE #tblShiftDetectorMatched
	SET AttEnd = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, max(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE ((t.AttTime > m.AttEnd AND t.AttTime < m.TIMEOUTAFTER) OR m.AttEnd IS NULL) AND t.AttTime < dateadd(mi, - 5, m.AttStartTomorrow) AND t.AttTime > m.AttEndYesterday AND t.AttTime < m.TIMEOUTAFTER AND (t.AttTime > m.AttStart OR m.AttStart IS NULL) AND (t.AttTime >= dateadd(mi, @TA_INOUT_MINIMUM, m.AttStart))
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	UPDATE #tblShiftDetectorMatched
	SET AttStart = tmp.AttTime
	FROM #tblShiftDetectorMatched m
	INNER JOIN (
		SELECT m.EmployeeId, m.ScheduleDate, min(t.AttTime) AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblTmpAttend t ON m.EmployeeId = t.EmployeeID
		WHERE ((t.AttTime < m.AttStart AND t.AttTime > m.TIMEINBEFORE) OR AttStart IS NULL)
			--and t.AttTime > m.AttEndYesterday and t.atttime < dateadd(mi,-30,m.AttStartTomorrow)
			AND t.AttTime > m.AttEndYesterday AND t.atttime < m.AttStartTomorrow --thanh123
			AND t.AttTime < m.AttEnd
		GROUP BY m.EmployeeId, m.ScheduleDate
		) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate

	--hôm trước thiếu dữ liệu công mà giờ về trùng giờ giờ vào hôm sau
	UPDATE m1
	SET AttEnd = NULL
	FROM #tblShiftDetectorMatched m1
	INNER JOIN #tblShiftDetectorMatched m2 ON m1.EmployeeId = m2.EmployeeId AND m1.ScheduleDate + 1 = m2.ScheduleDate
	WHERE m1.AttStart IS NULL AND m1.AttEnd = m2.AttStart

	DELETE tblHasTA
	FROM tblHasTA TA
	WHERE TA.Period > 0 AND EXISTS (
			SELECT 1
			FROM #tblShiftDetectorMatched M
			WHERE TA.EmployeeID = M.EmployeeId AND ta.AttDate = m.ScheduleDate AND M.ScheduleDate BETWEEN @FromDate AND @ToDate
			)

	INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkingTime, StdWorkingTimeMi, BreakStartMi, BreakEndMi)
	SELECT EmployeeID, ScheduleDate, @RepeatTime, 0, CASE
			WHEN HolidayStatus = 0
				THEN WorkingTimeMi / 60.0
			ELSE (AttEndMi - AttStartMi) / 60.0
			END, StdWorkingTimeMi, BreakStartMi, BreakEndMi
	FROM #tblShiftDetectorMatched
	WHERE ScheduleDate BETWEEN @FromDate AND @ToDate

	-- k đụng vào những dữ liệu người dùng modified
	UPDATE #tblHasTA_insert
	SET TAStatus = a.TAStatus, AttStart = a.AttStart, AttEnd = a.AttEnd
	FROM #tblHasTA_insert ta
	INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
	WHERE a.TAStatus = 3 AND a.AttDate BETWEEN @FromDate AND @ToDate

	UPDATE #tblHasTA_insert
	SET AttStart = m.AttStart, AttEnd = m.AttEnd
	FROM #tblHasTA_insert ta
	INNER JOIN #tblShiftDetectorMatched m ON ta.EmployeeId = m.EmployeeID AND ta.AttDate = m.ScheduleDate
	WHERE ta.Period = @RepeatTime AND ta.TAStatus = 0

	/*
 --nghỉ cả ngày mà thiếu đầu thì bỏ
 update m set AttStart = null, AttEnd = null from #tblHasTA_insert m where ((m.AttStart is not null and m.AttEnd is null ) or (m.AttStart is null and m.AttEnd is not null))

 and exists (select 1 from #tblLvHistory lv where lv.LeaveCategory = 1 and lv.EmployeeID = m.EmployeeId and m.AttDate = lv.LeaveDate and lv.LeaveStatus = 3)
 */
	UPDATE #tblHasTA_insert
	SET AttMiddle = tmp.AttTime
	FROM #tblHasTA_insert t
	INNER JOIN (
		SELECT min(att.AttTime) AttTime, ta.EmployeeID, ta.Attdate
		FROM #tblHasTA_insert ta
		INNER JOIN #tblTmpAttend att ON ta.EmployeeID = att.EmployeeID AND att.AttTime > ta.AttStart AND att.AttTime < ta.AttEnd AND DATEPART(HOUR, att.AttTime) * 60 + DATEPART(MINUTE, att.AttTime) BETWEEN ta.BreakStartMi AND ta.BreakEndMi
		GROUP BY ta.EmployeeID, ta.Attdate
		) tmp ON t.EmployeeID = tmp.EmployeeID AND t.Attdate = tmp.Attdate

	UPDATE #tblHasTA_insert
	SET AttMiddle = tmp.AttTime
	FROM #tblHasTA_insert t
	INNER JOIN (
		SELECT min(att.AttTime) AttTime, ta.EmployeeID, ta.Attdate
		FROM #tblHasTA_insert ta
		INNER JOIN #tblTmpAttend att ON ta.EmployeeID = att.EmployeeID AND att.AttTime > ta.AttStart AND att.AttTime < ta.AttEnd AND ta.AttMiddle IS NULL
		GROUP BY ta.EmployeeID, ta.Attdate
		) tmp ON t.EmployeeID = tmp.EmployeeID AND t.Attdate = tmp.Attdate

	-- nghi nua ngay
	UPDATE #tblHasTA_insert
	SET AttMiddle = tmp.AttTime
	FROM #tblHasTA_insert t
	INNER JOIN (
		SELECT min(att.AttTime) AttTime, ta.EmployeeID, ta.Attdate
		FROM #tblHasTA_insert ta
		INNER JOIN #tblTmpAttend att ON ta.EmployeeID = att.EmployeeID AND DATEPART(HOUR, att.AttTime) * 60 + DATEPART(MINUTE, att.AttTime) BETWEEN ta.BreakStartMi AND ta.BreakEndMi
		GROUP BY ta.EmployeeID, ta.Attdate
		) tmp ON t.EmployeeID = tmp.EmployeeID AND t.Attdate = tmp.Attdate
	WHERE AttMiddle IS NULL AND EXISTS (
			SELECT 1
			FROM #tblLvHistory lv
			WHERE t.EmployeeID = lv.EmployeeID AND t.Attdate = lv.LeaveDate AND lv.LeaveStatus <> 3
			)

	UPDATE #tblHasTA_insert
	SET AttMiddle = NULL
	FROM #tblHasTA_insert t
	WHERE (DATEDIFF(MI, Attstart, AttMiddle) < 60 OR DATEDIFF(MI, AttMiddle, AttEnd) < 60) AND NOT EXISTS (
			SELECT 1
			FROM #tblLvHistory lv
			WHERE t.EmployeeID = lv.EmployeeID AND t.Attdate = lv.LeaveDate AND lv.LeaveStatus <> 3
			)

	UPDATE #tblHasTA_insert
	SET AttMiddle = NULL
	FROM #tblHasTA_insert t
	WHERE (DATEDIFF(MI, AttDate, AttMiddle) - AttStartMi < 60 OR AttEndMi - DATEDIFF(MI, AttDate, AttMiddle) < 60) AND NOT EXISTS (
			SELECT 1
			FROM #tblLvHistory lv
			WHERE t.EmployeeID = lv.EmployeeID AND t.Attdate = lv.LeaveDate AND lv.LeaveStatus <> 3
			)
END

IF @TA_IO_SWIPE_OPTION = 5 -- theo tung ca cu the
BEGIN
	--VŨ Custom riêng cho LICHIEN
	ALTER TABLE #tblShiftDetectorMatched ADD ShiftMeal INT, IsOTAfter BIT

	--ShiftMeal = 1 ăn cơm bth
	--ShiftMeal = 2 là nghỉ buổi sáng
	--ShiftMeal = 3 là nghi buổi chiều
	IF EXISTS (
			SELECT TOP 1 1
			FROM #tblShiftDetectorMatched
			WHERE SwipeOptionID = 0
			) --Bấm tự do
	BEGIN
		UPDATE #tblShiftDetectorMatched
		SET AttEndYesterday = dateadd(mi, - 20, AttStart)
		WHERE AttEndYesterday IS NULL AND AttStart IS NOT NULL AND SwipeOptionID = 0

		UPDATE #tblShiftDetectorMatched
		SET AttStartTomorrow = dateadd(mi, 20, AttEnd)
		WHERE AttStartTomorrow IS NULL AND AttEnd IS NOT NULL AND SwipeOptionID = 0

		UPDATE #tblShiftDetectorMatched
		SET AttEndYesterday = dateadd(mi, 10, AttEndYesterday), AttStartTomorrow = dateadd(mi, - 10, AttStartTomorrow)
		WHERE @IN_OUT_TA_SEPARATE = 0 AND SwipeOptionID = 0

		RepeatInsertHasTAOption5:

		INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkingTime, StdWorkingTimeMi, BreakStartMi, BreakEndMi, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, SwipeOptionID)
		SELECT EmployeeID, ScheduleDate, @RepeatTime, 0, WorkingTimeMi / 60.0, StdWorkingTimeMi, BreakStartMi, BreakEndMi, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, SwipeOptionID
		FROM #tblShiftDetectorMatched
		WHERE ScheduleDate BETWEEN @FromDate AND @ToDate AND SwipeOptionID = 0

		UPDATE #tblHasTA_insert
		SET TAStatus = a.TAStatus, AttStart = a.AttStart, AttEnd = a.AttEnd
		FROM #tblHasTA_insert ta
		INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
		WHERE a.TAStatus = 3 AND a.AttDate BETWEEN @FromDate AND @ToDate AND ta.SwipeOptionID = 0

		UPDATE #tblHasTA_insert
		SET TAStatus = a.TAStatus, AttEnd = a.AttEnd
		FROM #tblHasTA_insert ta
		INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
		WHERE a.TAStatus = 2 AND a.AttDate BETWEEN @FromDate AND @ToDate AND ta.SwipeOptionID = 0

		UPDATE #tblHasTA_insert
		SET TAStatus = a.TAStatus, AttStart = a.AttStart
		FROM #tblHasTA_insert ta
		INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
		WHERE a.TAStatus = 1 AND a.AttDate BETWEEN @FromDate AND @ToDate AND ta.SwipeOptionID = 0

		-- AttStart
		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert ta
		INNER JOIN (
			SELECT ta.EmployeeID, ta.AttDate, min(att.AttTime) AttTime
			FROM #tblHasTA_insert ta
			INNER JOIN #tblShiftDetectorMatched m ON ta.EmployeeID = m.EmployeeId AND ta.AttDate = m.ScheduleDate AND m.SwipeOptionID = 0
			INNER JOIN #tblTmpAttend att ON ta.EmployeeID = att.EmployeeID AND att.AttTime > m.AttEndYesterday AND att.AttTime < m.AttStartTomorrow AND (ta.Period > 0 OR (att.AttTime < m.AttEnd OR m.AttEnd IS NULL))
			WHERE ta.Period = @RepeatTime AND ta.TAStatus IN (2, 0) AND (m.AttStart IS NOT NULL OR m.AttEnd IS NOT NULL) AND att.AttTime >= CASE
					WHEN @RepeatTime = 0
						THEN ISNULL(m.AttStart, AttTime)
					ELSE m.AttStart
					END AND datediff(mi, m.WorkStart, att.AttTime) < 1320
			GROUP BY ta.EmployeeID, ta.AttDate
			) tmp ON ta.EmployeeID = tmp.EmployeeID AND ta.AttDate = tmp.AttDate AND ta.Period = @RepeatTime AND ta.TAStatus IN (2, 0) AND ta.SwipeOptionID = 0

		-- sửa lại cho những người giờ nằm trong giờ nghỉ trưa
		--update ta set AttStart = att.AttTime
		UPDATE #tblHasTA_insert
		SET AttStart = t.AttTime
		FROM #tblHasTA_insert ta
		INNER JOIN (
			SELECT ta.EmployeeID, ta.Attdate, ta.Period, max(att.AttTime) AttTime
			FROM #tblHasTA_insert ta
			INNER JOIN #tblTmpAttend att ON ta.EmployeeID = att.EmployeeID AND att.AttTime > ta.AttStart AND att.AttTime < DATEADD(mi, ta.BreakEndMi + 15, ta.Attdate)
			WHERE ta.Period = @RepeatTime AND DATEPART(hh, ta.AttStart) * 60 + DATEPART(mi, ta.Attstart) BETWEEN ta.BreakStartMi AND ta.BreakEndMi
			GROUP BY ta.EmployeeID, ta.Attdate, ta.Period
			) t ON ta.EmployeeID = t.EmployeeID AND ta.Attdate = t.Attdate AND ta.Period = t.Period AND ta.SwipeOptionID = 0

		-- sửa lại những người vào quá sớm nhưng k có tăng ca trước
		DELETE att
		FROM #tblTmpAttend att
		WHERE EXISTS (
				SELECT 1
				FROM #tblHasTA_insert ta
				WHERE ta.Period = @RepeatTime AND att.EmployeeID = ta.EmployeeID AND att.AttTime = ta.AttStart AND ta.SwipeOptionID = 0
				)

		-- AttEnd
		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert ta
		INNER JOIN (
			SELECT ta.EmployeeID, ta.AttDate, min(att.AttTime) AttTime
			FROM #tblHasTA_insert ta
			INNER JOIN #tblShiftDetectorMatched m ON ta.EmployeeID = m.EmployeeId AND ta.AttDate = m.ScheduleDate AND m.SwipeOptionID = 0
			INNER JOIN #tblTmpAttend att ON ta.EmployeeID = att.EmployeeID AND ta.AttStart < att.AttTime AND (datediff(mi, ta.AttStart, att.AttTime) >= isnull(m.INOUT_MINIMUM, 1) OR (ta.AttStart IS NULL AND att.AttTime > m.AttEndYesterday)) AND att.AttTime < m.AttStartTomorrow AND NOT EXISTS (
					SELECT 1
					FROM #tblTmpAttend att1
					WHERE ta.EmployeeID = att1.EmployeeID AND att.AttState = att1.AttState AND att1.Atttime > dateadd(mi, 5, att.AttTime) AND att1.AttTime < att.AttTime
					)
			INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
			WHERE ta.Period = @RepeatTime AND ta.TAStatus IN (1, 0) AND att.AttTime < isnull(m.TIMEOUTAFTER, m.AttEnd) AND att.AttTime > m.WorkStart AND datediff(mi, isnull(ta.AttStart, m.WorkStart), att.AttTime) >= isnull(m.INOUT_MINIMUM, 0)
			GROUP BY ta.EmployeeID, ta.AttDate
			) tmp ON ta.EmployeeID = tmp.EmployeeID AND ta.AttDate = tmp.AttDate AND ta.Period = @RepeatTime AND ta.TAStatus IN (1, 0) AND ta.SwipeOptionID = 0

		-- nếu k lấy được giờ ca thì lấy giờ ra cuối ngày
		UPDATE #tblHasTA_insert
		SET AttEnd = m.AttEnd
		FROM #tblHasTA_insert ta
		INNER JOIN #tblShiftDetectorMatched m ON ta.EmployeeId = m.EmployeeID AND ta.AttDate = m.ScheduleDate AND m.SwipeOptionID = 0
		WHERE ta.Period = @RepeatTime AND ta.TAStatus IN (1, 0) AND ta.AttEnd IS NULL AND (ta.AttStart < m.AttEnd OR (ta.AttStart IS NULL AND ta.Period = 0)) AND ta.SwipeOptionID = 0

		-- period 0 ko lay dc gio vao thi lay trong #tblShiftDetectorMatched
		UPDATE #tblHasTA_insert
		SET AttStart = m.AttStart
		FROM #tblHasTA_insert ta
		INNER JOIN #tblShiftDetectorMatched m ON ta.EmployeeId = m.EmployeeID AND ta.AttDate = m.ScheduleDate AND m.SwipeOptionID = 0
		WHERE ta.Period = 0 AND ta.TAStatus IN (0, 2) AND ta.AttStart IS NULL AND (ta.AttEnd > m.AttStart OR ta.AttEnd IS NULL) AND ta.SwipeOptionID = 0

		/*
 -- nghỉ cả ngày mà bấm thiéu đàu thì bỏ
 update m set AttStart = null, AttEnd = null from #tblHasTA_insert m where ((m.AttStart is not null and m.AttEnd is null ) or (m.AttStart is null and m.AttEnd is not null))
 and exists (select 1 from #tblLvHistory lv where lv.LeaveCategory = 1 and lv.EmployeeID = m.EmployeeId and m.AttDate = lv.LeaveDate and lv.LeaveStatus = 3)  and m.SwipeOptionID=0
 */
		-- loại những records đã xử lý xong
		DELETE m
		FROM #tblShiftDetectorMatched m
		WHERE EXISTS (
				SELECT 1
				FROM #tblHasTA_insert ta
				WHERE ta.Period = @RepeatTime AND ta.EmployeeID = m.EmployeeId AND ta.AttDate = m.ScheduleDate AND (ta.AttEnd >= m.AttEnd OR (ta.AttStart = m.AttStart AND m.AttEnd IS NULL)) AND ta.SwipeOptionID = 0
				) OR (m.AttStart IS NULL AND m.AttEnd IS NULL) AND m.SwipeOptionID = 0

		DELETE m
		FROM #tblShiftDetectorMatched m
		WHERE EXISTS (
				SELECT 1
				FROM #tblHasTA_insert ta
				WHERE ta.Period = @RepeatTime AND ta.EmployeeID = m.EmployeeId AND ta.AttDate = m.ScheduleDate AND (ta.AttStart >= m.AttEnd) AND ta.SwipeOptionID = 0
				) AND m.SwipeOptionID = 0

		IF EXISTS (
				SELECT 1
				FROM #tblShiftDetectorMatched
				WHERE SwipeOptionID = 0
				) AND @RepeatTime < 5
		BEGIN
			UPDATE m
			SET AttEndYesterday = ta.AttEnd
			FROM #tblShiftDetectorMatched m
			INNER JOIN #tblHasTA_insert ta ON m.EmployeeId = ta.EmployeeID AND m.ScheduleDate = ta.AttDate
			WHERE ta.Period = @RepeatTime AND ta.SwipeOptionID = 0

			SET @RepeatTime += 1

			GOTO RepeatInsertHasTAOption5
		END
	END

	SET @RepeatTime = 0

	IF EXISTS (
			SELECT TOP 1 *
			FROM #tblShiftDetectorMatched
			WHERE SwipeOptionID = 1
			) --Ngày bấm 2 lần vào bấm công về bấm công
	BEGIN
		--HPSF
		-- vao thì lấy sớm nhất, ra thì lấy trễ nhất
		UPDATE #tblShiftDetectorMatched
		SET AttEnd = tmp.AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN (
			SELECT m.EmployeeId, m.ScheduleDate, max(t.AttTime) AttTime

			FROM #tblShiftDetectorMatched m
			INNER JOIN #tblTmpAttend_Org t ON m.EmployeeId = t.EmployeeID
			WHERE ((t.AttTime > m.AttEnd AND t.AttTime < m.TIMEOUTAFTER) OR m.AttEnd IS NULL) AND t.AttTime < m.AttStartTomorrow AND t.AttTime > m.AttEndYesterday AND (t.AttTime > m.AttStart OR m.AttStart IS NULL) AND t.AttTime < m.TIMEOUTAFTER AND (t.AttTime >= dateadd(mi, @TA_INOUT_MINIMUM, m.AttStart)) AND (t.AttState IN (0, 2))
			GROUP BY m.EmployeeId, m.ScheduleDate
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.SwipeOptionID = 1

		-- --Giao ca quá sát nhau nhận nhầm giờ ra của người hôm trước thành giờ vào của ngày hôm nay
		--  UPDATE m SET AttStart = NULL
		--  FROM #tblShiftDetectorMatched m
		--  INNER JOIN #tblShiftDetectorMatched n ON n.EmployeeId = m.EmployeeId AND DATEADD(DAY, -1, m.ScheduleDate) = n.ScheduleDate
		--  WHERE m.AttEnd IS NULL AND m.ShiftCode NOT LIKE '%Đ%' AND n.ShiftCode LIKE '%Đ%' AND m.AttStart = n.AttEnd
		UPDATE #tblShiftDetectorMatched
		SET AttStart = tmp.AttTime
		FROM #tblShiftDetectorMatched m
		INNER JOIN (
			SELECT m.EmployeeId, m.ScheduleDate, min(t.AttTime) AttTime
			FROM #tblShiftDetectorMatched m
			INNER JOIN #tblTmpAttend_Org t ON m.EmployeeId = t.EmployeeID
			WHERE ((t.AttTime < m.AttStart OR AttStart IS NULL) AND t.AttTime > m.TIMEINBEFORE) AND t.AttTime > m.AttEndYesterday AND t.atttime < dateadd(mi, - 30, m.AttStartTomorrow) AND t.AttTime < dateadd(mi, - 1 * m.INOUT_MINIMUM, m.AttEnd)
			GROUP BY m.EmployeeId, m.ScheduleDate
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.ScheduleDate = tmp.ScheduleDate AND m.SwipeOptionID = 1

		DELETE ta
		FROM tblHasTA TA
		WHERE TA.Period > 0 AND EXISTS (
				SELECT 1
				FROM #tblShiftDetectorMatched M
				WHERE TA.EmployeeID = M.EmployeeId AND ta.AttDate = m.ScheduleDate AND M.ScheduleDate BETWEEN @FromDate AND @ToDate AND m.SwipeOptionID = 1
				)

		INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkingTime, StdWorkingTimeMi, SwipeOptionID)
		SELECT EmployeeID, ScheduleDate, @RepeatTime, 0
			--,case when HolidayStatus = 0 then WorkingTimeMi/60.0 else (AttEndMi - AttStartMi)/60.0 end , StdWorkingTimeMi,SwipeOptionID from #tblShiftDetectorMatched m where ScheduleDate between @FromDate and @ToDate and m.SwipeOptionID = 1
			, CASE
				WHEN HolidayStatus = 0
					THEN WorkingTimeMi / 60.0
				ELSE NULL
				END, StdWorkingTimeMi, SwipeOptionID
		FROM #tblShiftDetectorMatched m
		WHERE ScheduleDate BETWEEN @FromDate AND @ToDate AND m.SwipeOptionID = 1

		UPDATE #tblHasTA_insert
		SET AttStart = m.AttStart, AttEnd = m.AttEnd
		FROM #tblHasTA_insert ta
		INNER JOIN #tblShiftDetectorMatched m ON ta.EmployeeId = m.EmployeeID AND ta.AttDate = m.ScheduleDate AND m.SwipeOptionID = 1
		WHERE ta.Period = @RepeatTime AND ta.TAStatus IN (0, 1, 2) AND ta.SwipeOptionID = 1

		-- dữ liệu đã đc xử lý
		UPDATE #tblHasTA_insert
		SET TAStatus = a.TAStatus, AttStart = CASE
				WHEN a.TAStatus IN (1, 3)
					THEN a.AttStart
				ELSE ta.AttStart
				END, AttEnd = CASE
				WHEN a.TAStatus IN (2, 3)
					THEN a.AttEnd
				ELSE ta.AttEnd
				END
		FROM #tblHasTA_insert ta
		INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
		WHERE a.TAStatus IN (1, 2, 3) AND a.AttDate BETWEEN @FromDate AND @ToDate AND ta.SwipeOptionID = 1

		/*
 -- nghỉ cả ngày mà bấm thiếu đàu thì bỏ
 update m set AttStart = null, AttEnd = null from #tblHasTA_insert m where ((m.AttStart is not null and m.AttEnd is null ) or (m.AttStart is null and m.AttEnd is not null))
 and exists (select 1 from #tblLvHistory lv where lv.LeaveCategory = 1 and lv.EmployeeID = m.EmployeeId and m.AttDate = lv.LeaveDate and lv.LeaveStatus = 3 and @LEAVEFULLDAYSTILLHASATTTIME = 2) and m.SwipeOptionID = 1
 */
		-- loại những records đã xử lý xong
		DELETE m
		FROM #tblShiftDetectorMatched m
		WHERE EXISTS (
				SELECT 1
				FROM #tblHasTA_insert ta
				WHERE ta.Period = @RepeatTime AND ta.EmployeeID = m.EmployeeId AND ta.AttDate = m.ScheduleDate AND (ta.AttEnd >= m.AttEnd OR (ta.AttStart = m.AttStart AND m.AttEnd IS NULL)) AND ta.SwipeOptionID = 1
				) OR (m.AttStart IS NULL AND m.AttEnd IS NULL) AND m.SwipeOptionID = 1

		DELETE m
		FROM #tblShiftDetectorMatched m
		WHERE EXISTS (
				SELECT 1
				FROM #tblHasTA_insert ta
				WHERE ta.Period = @RepeatTime AND ta.EmployeeID = m.EmployeeId AND ta.AttDate = m.ScheduleDate AND (ta.AttStart >= m.AttEnd) AND ta.SwipeOptionID = 1
				) AND m.SwipeOptionID = 1
	END

	SET @RepeatTime = 0

	IF EXISTS (
			SELECT TOP 1 *
			FROM #tblShiftDetectorMatched
			WHERE SwipeOptionID = 2
			) --Sang bam bam, chieu bam, tang ca bam rieng
	BEGIN
		-- cap nhat lai OTAfter neu chua co
		UPDATE m
		SET OTAfterStart = DATEADD(mi, ss.OTAfterStartMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE OTAfterStart IS NULL AND m.SwipeOptionID = 2

		UPDATE m
		SET OTAfterEnd = DATEADD(mi, ss.OTAfterEndMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE OTAfterEnd IS NULL AND m.SwipeOptionID = 2

		UPDATE m
		SET OTBeforeStart = DATEADD(mi, ss.OTBeforeStartMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE OTBeforeStart IS NULL AND m.SwipeOptionID = 2

		UPDATE m
		SET OTBeforeEnd = DATEADD(mi, ss.OTBeforeEndMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE OTBeforeEnd IS NULL AND m.SwipeOptionID = 2

		-- buoi sang
		INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MaxTimeOut, WorkingTime, StdWorkingTimeMi, SwipeOptionID)
		SELECT EmployeeID, ScheduleDate, 0, 0, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, dateadd(MI, - @TA_TIMEINBEFORE / 2, WorkStart), dateadd(mi, - 120, WorkEnd)
			--,dateadd(MI,-@TA_TIMEINBEFORE,WorkStart),dateadd(mi,-120,WorkEnd)
			--,dateadd(HOUR,@TA_TIMEOUTAFTER,WorkStart)
			, dateadd(mi, datediff(mi, BreakEnd, WorkEnd) / 2, WorkEnd), CASE
				WHEN HolidayStatus = 0
					THEN WorkingTimeMi / 60.0
				ELSE (AttEndMi - AttStartMi) / 60.0
				END, StdWorkingTimeMi, SwipeOptionID
		FROM #tblShiftDetectorMatched
		WHERE ScheduleDate BETWEEN @FromDate AND @ToDate AND SwipeOptionID = 2

		UPDATE #tblHasTA_insert
		SET MinTimeOut = DATEADD(MI, @TA_INOUT_MINIMUM, WorkStart)

		--gio vao
		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
			FROM #tblHasTA_insert m

			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND t.AttTime < m.WorkEnd AND t.AttTime > m.AttEndYesterday AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 2

		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > m.WorkStart AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.WorkEnd AND m.MaxTimeOut AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 2

		-- gio ra
		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > m.WorkStart AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeOut AND m.WorkEnd AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 2

		--select MinTimeIn,WorkEnd,MinTimeOut,MaxTimeIn,MaxTimeOut,* from #tblHasTA_insert where Attdate='20200912' return
		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime < m.AttEnd AND t.AttTime > m.MinTimeIn AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 2

		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND t.AttTime > m.WorkStart AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > m.AttStart AND t.AttTime < m.MaxTimeOut AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 2

		-- tang ca sau
		INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MaxTimeOut, SwipeOptionID)
		SELECT EmployeeID, ScheduleDate, 1, 0, OTAfterStart, OTAfterEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, dateadd(hour, - 1, OTAfterStart), dateadd(mi, - datediff(mi, OTAfterStart, OTAfterEnd) / 2, OTAfterEnd)
			--,dateadd(HOUR,@TA_TIMEOUTAFTER,WorkStart)
			, TIMEOUTAFTER, SwipeOptionID
		FROM #tblShiftDetectorMatched
		WHERE ScheduleDate BETWEEN @FromDate AND @ToDate AND SwipeOptionID = 2

		UPDATE #tblHasTA_insert
		SET MinTimeOut = DATEADD(SECOND, 1, MaxTimeIn)
		WHERE MinTimeOut IS NULL AND SwipeOptionID = 2

		--update #tblHasTA_insert set MinTimeOut = DATEADD(MI,@TA_INOUT_MINIMUM,WorkStart)  where SwipeOptionID = 2
		UPDATE m1
		SET AttEndYesterday = isnull(m2.AttEnd, m2.MinTimeOut)
		FROM #tblHasTA_insert m1
		INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = m2.AttDate AND m1.Period = m2.Period + 1 --where (m2.AttEnd is not null )
			AND m1.Period = 1 AND m1.SwipeOptionID = 2 AND m2.SwipeOptionID = 2

		--update m1 set AttStartTomorrow = isnull(m2.AttStart,m2.workStart) from #tblHasTA_insert m1 inner join #tblHasTA_insert m2 on m1.EmployeeId = m2.EmployeeId and m1.AttDate = m2.AttDate and m1.Period = m2.Period-1
		-- where m1.Period = 1
		UPDATE m1
		SET AttStartTomorrow = isnull(m2.AttStart, m2.workStart)
		FROM #tblHasTA_insert m1
		INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = DateADD(Day, - 1, m2.AttDate) AND m2.Period = 0
		WHERE m1.Period = 1 AND m1.SwipeOptionID = 2 AND m2.SwipeOptionID = 2

		--Giờ AttStartTomorow nên lấy của ngày hôm sau
		-- gio vao
		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND t.AttTime < m.WorkEnd AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 2

		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND t.AttTime < m.WorkEnd AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND m.AttEndYesterday IS NULL AND T.AttTime < m.AttStartTomorrow AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 2

		-- gio ra ưu tiên lấy giờ trước giờ ra về xong mới đến sau giờ ra về
		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND t.AttTime > m.WorkStart AND (T.AttTime > m.AttEndYesterday OR m.AttEndYesterday IS NULL) AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeOut AND m.WorkEnd AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 2

		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND t.AttTime > m.WorkStart AND (T.AttTime > m.AttEndYesterday OR m.AttEndYesterday IS NULL) AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.WorkEnd AND m.MaxTimeOut AND t.AttTime >= m.MinTimeOut --thanh123
				AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 2

		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttEnd IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND t.AttTime > m.WorkStart AND (T.AttTime > m.AttEndYesterday OR m.AttEndYesterday IS NULL) AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime > m.AttStart AND t.AttTime < m.MaxTimeOut AND t.AttTime >= m.AttStart AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 2

		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.AttStart IS NULL AND m.TAStatus = 0 AND m.Period = 1 AND (T.AttTime > m.AttEndYesterday OR m.AttEndYesterday IS NULL) AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime < m.AttEnd AND t.AttTime BETWEEN m.MinTimeIn AND m.MinTimeOut AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 2

		-- liet ke ra nhung record bao vao cua period sau lay nham sang bam ra cua period truoc
		UPDATE t
		SET AttEnd = s.AttStart
		FROM #tblHasTA_insert t
		INNER JOIN #tblHasTA_insert s ON t.EmployeeID = s.EmployeeID AND t.AttDate = s.AttDate AND s.SwipeOptionID = 2 AND t.Period = s.Period - 1
		WHERE t.AttEnd IS NULL AND t.AttStart IS NOT NULL AND t.Period <= 1 AND s.AttEnd IS NOT NULL AND s.AttStart IS NOT NULL AND EXISTS (
				SELECT 1
				FROM #tblTmpAttend_Org att
				WHERE att.EmployeeID = t.EmployeeID AND att.AttTime > s.AttStart AND att.AttTime < s.AttEnd
				) AND t.SwipeOptionID = 2

		UPDATE t
		SET AttEnd = s.AttStart
		FROM #tblHasTA_insert t
		INNER JOIN #tblHasTA_insert s ON t.EmployeeID = s.EmployeeID AND t.AttDate = s.AttDate AND s.SwipeOptionID = 2 AND t.Period = s.Period - 1
		WHERE t.AttEnd IS NULL AND t.AttStart IS NOT NULL AND t.Period <= 1 AND s.AttEnd IS NOT NULL AND s.AttStart IS NOT NULL AND EXISTS (
				SELECT 1
				FROM #tblTmpAttend_Org att
				WHERE att.EmployeeID = t.EmployeeID AND att.AttTime > s.AttStart AND att.AttTime < s.AttEnd
				) AND t.SwipeOptionID = 2

		UPDATE m1
		SET AttEndYesterday = m2.AttEnd
		FROM #tblHasTA_insert m1
		INNER JOIN #tblHasTA_insert m2 ON m1.EmployeeId = m2.EmployeeId AND m1.AttDate = m2.AttDate AND m1.Period = m2.Period + 1 --where (m2.AttEnd is not null)
			AND m1.SwipeOptionID = 2 AND m2.SwipeOptionID = 2

		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, min(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_Org t ON m.EmployeeId = t.EmployeeID
			WHERE m.TAStatus = 0 AND m.Period > 0 AND T.AttTime > m.AttEndYesterday AND T.AttTime < m.AttStartTomorrow AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime < m.AttEnd AND t.AttTime > m.MinTimeIn AND m.SwipeOptionID = 2
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period
		WHERE m.AttEndYesterday = m.AttStart AND m.SwipeOptionID = 2

		-- k đụng vào những ngày người dùng modified
		UPDATE #tblHasTA_insert
		SET TAStatus = a.TAStatus, AttStart = a.AttStart, AttEnd = a.AttEnd
		FROM #tblHasTA_insert ta
		INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
		WHERE a.TAStatus = 3 AND a.AttDate BETWEEN @FromDate AND @ToDate AND ta.SwipeOptionID = 2

		--- co gang la gio ra cho buoi chieu
		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert i
		INNER JOIN (
			SELECT i.EmployeeID, i.AttDate, i.Period, MIN(att.AttTime) AttTime
			FROM #tblHasTA_insert i
			INNER JOIN #tblHasTA_insert t ON i.employeeId = t.EmployeeId AND i.AttDate = t.AttDate AND t.Period = 1 AND i.Period = 0 AND t.SwipeOptionID = 2
			INNER JOIN #tblTmpAttend_Org att ON i.employeeId = att.EmployeeId AND att.AttTime < t.AttStart AND att.AttTime > i.MinTimeOut
			WHERE i.Period = 1 AND i.AttEnd IS NULL AND i.SwipeOptionID = 2 AND t.AttStart IS NOT NULL
			GROUP BY i.EmployeeID, i.AttDate, i.Period
			) tmp ON i.EmployeeId = tmp.EmployeeId AND i.AttDate = tmp.AttDate AND i.Period = tmp.Period

		-- lam dep lai du lieu
		UPDATE i1
		SET AttEnd = i2.AttStart
		FROM #tblHasTA_insert i1
		INNER JOIN #tblHasTA_insert i2 ON i1.employeeID = i2.EmployeeID AND i1.AttDate = i2.AttDate AND i2.SwipeOptionID = 2
		WHERE i1.Period = i2.Period - 1 AND i1.AttEnd IS NULL AND i2.AttStart IS NOT NULL AND i2.AttEnd IS NULL AND i1.SwipeOptionID = 2

		UPDATE i2
		SET AttStart = NULL
		FROM #tblHasTA_insert i1
		INNER JOIN #tblHasTA_insert i2 ON i1.employeeID = i2.EmployeeID AND i1.AttDate = i2.AttDate AND i2.SwipeOptionID = 2
		WHERE i1.Period = i2.Period - 1 AND i1.AttEnd = i2.AttStart AND i2.AttEnd IS NULL AND i1.SwipeOptionID = 2

		UPDATE j
		SET AttStart = i.AttEnd
		FROM #tblHasTA_insert i
		INNER JOIN #tblHasTA_insert j ON i.EmployeeId = j.EmployeeId AND i.AttDate = j.AttDate AND i.Period = j.Period - 1 AND j.SwipeOptionID = 2
		WHERE i.AttStart IS NULL AND i.AttEnd IS NOT NULL AND j.AttStart IS NULL AND j.AttEnd IS NOT NULL AND j.AttEnd > dateadd(hour, - 1, j.WorkEnd) AND i.SwipeOptionID = 2

		UPDATE i
		SET AttEnd = NULL
		FROM #tblHasTA_insert i
		INNER JOIN #tblHasTA_insert j ON i.EmployeeId = j.EmployeeId AND i.AttDate = j.AttDate AND i.Period = j.Period - 1 AND j.SwipeOptionID = 2
		WHERE i.AttStart IS NULL AND i.AttEnd = j.AttStart AND j.AttEnd IS NOT NULL AND j.AttEnd > dateadd(hour, - 1, j.WorkEnd) AND i.SwipeOptionID = 2

		--- co gang la gio vao cho buoi chieu
		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert i
		INNER JOIN (
			SELECT i.EmployeeID, i.AttDate, i.Period, min(att.AttTime) AttTime
			FROM #tblHasTA_insert i
			INNER JOIN #tblHasTA_insert t ON i.employeeId = t.EmployeeId AND i.AttDate = t.AttDate AND t.Period = 0 AND i.Period = 1 AND t.SwipeOptionID = 2
			INNER JOIN #tblTmpAttend_Org att ON i.employeeId = att.EmployeeId AND att.AttTime > isnull(t.AttStart, t.MinTimeOut) -- and att.AttTime < i.AttEnd
			WHERE i.Period = 0 AND i.AttStart IS NULL AND i.AttEnd IS NOT NULL AND i.SwipeOptionID = 2
			GROUP BY i.EmployeeID, i.AttDate, i.Period
			) tmp ON i.EmployeeId = tmp.EmployeeId AND i.AttDate = tmp.AttDate AND i.Period = tmp.Period

		UPDATE #tblHasTA_insert
		SET AttStart = NULL
		WHERE period = 1 AND AttStart = AttEnd AND AttStart > MaxTimeIn AND SwipeOptionID = 2

		-- khong co tang ca thi bo di
		DELETE #tblHasTA_insert
		WHERE Period = 1 AND AttStart IS NULL AND AttEnd IS NULL AND SwipeOptionID = 2
	END

	SET @RepeatTime = 0

	IF EXISTS (
			SELECT TOP 1 1
			FROM #tblShiftDetectorMatched
			WHERE SwipeOptionID = 3
			) --Sáng bấm, trưa bấm, chiều bấm và/hoặc tăng ca bấm công
	BEGIN
		-- cap nhat lai OTAfter neu chua co
		UPDATE m
		SET OTAfterStart = DATEADD(mi, ss.OTAfterStartMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode

		WHERE OTAfterStart IS NULL AND m.SwipeOptionID = 3

		UPDATE m
		SET OTAfterEnd = DATEADD(mi, ss.OTAfterEndMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE OTAfterEnd IS NULL AND m.SwipeOptionID = 3

		UPDATE m
		SET OTBeforeStart = DATEADD(mi, ss.OTBeforeStartMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE OTBeforeStart IS NULL AND m.SwipeOptionID = 3

		UPDATE m
		SET OTBeforeEnd = DATEADD(mi, ss.OTBeforeEndMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE OTBeforeEnd IS NULL AND m.SwipeOptionID = 3

		--ShiftMeal = 1 ăn cơm bth
		--ShiftMeal = 2 là nghỉ buổi sáng
		--ShiftMeal = 3 là nghi buổi chiều
		UPDATE d
		SET ShiftMeal = 1
		FROM #tblShiftDetectorMatched d
		WHERE d.AttStart <= dateadd(mi, 30, d.BreakStart) AND d.AttEnd >= dateadd(mi, - 15, d.BreakEnd)

		UPDATE d
		SET ShiftMeal = 2
		FROM #tblShiftDetectorMatched d
		WHERE ShiftMeal IS NULL AND ISNULL(d.AttStart, d.BreakEnd) > BreakStart AND ISNULL(d.AttEnd, d.BreakEnd) > BreakStart AND ISNULL(AttStart, AttEnd) IS NOT NULL

		UPDATE d
		SET ShiftMeal = 3
		FROM #tblShiftDetectorMatched d
		WHERE ShiftMeal IS NULL AND ISNULL(d.AttStart, d.BreakStart) < BreakEnd AND ISNULL(d.AttEnd, d.BreakStart) < BreakEnd AND ISNULL(AttStart, AttEnd) IS NOT NULL

		UPDATE #tblShiftDetectorMatched
		SET IsOTAfter = 1
		WHERE AttEnd >= dateadd(mi, 30, OTAfterStart)

		-- buoi sang
		INSERT INTO #tblHasTA_insert (EmployeeID, Attdate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MinTimeOut, MaxTimeOut, WorkingTime, StdWorkingTimeMi, SwipeOptionID)
		SELECT EmployeeId, ScheduleDate, 0, 0, WorkStart, BreakStart, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, dateadd(MI, - @TA_TIMEINBEFORE, WorkStart), CASE
				WHEN ShiftMeal = 3
					THEN dateadd(mi, - datediff(mi, WorkStart, BreakStart) / 2, BreakStart)
				ELSE dateadd(ss, - 1, dateadd(mi, BreakStartMi, ScheduleDate))
				END, CASE
				WHEN ShiftMeal = 3
					THEN dateadd(ss, 1, dateadd(mi, - datediff(mi, WorkStart, BreakStart) / 2, BreakStart))
				ELSE dateadd(mi, BreakStartMi, ScheduleDate)
				END, CASE
				WHEN ShiftMeal = 3
					THEN BreakEnd
				ELSE dateadd(mi, BreakStartMi + 30, ScheduleDate)
				END, CASE
				WHEN HolidayStatus = 0
					THEN WorkingTimeMi / 60.0
				ELSE (AttEndMi - AttStartMi) / 60.0
				END, StdWorkingTimeMi, SwipeOptionID
		FROM #tblShiftDetectorMatched
		WHERE ScheduleDate BETWEEN @FromDate AND @ToDate AND SwipeOptionID = 3 AND isnull(ShiftMeal, 0) <> 2

		-- gio vao 1
		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.TAStatus = 0 AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein AND m.SwipeOptionID = 3
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 3

		--gio ra 1
		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.TAStatus = 0 AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeOut AND m.MaxTimeOut AND m.SwipeOptionID = 3
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 3

		-- buoi chieu
		INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MinTimeOut, MaxTimeOut, WorkingTime, StdWorkingTimeMi, SwipeOptionID)
		SELECT EmployeeID, ScheduleDate, 1, 0, BreakEnd, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, CASE
				WHEN ShiftMeal = 2
					THEN BreakStart
				ELSE DATEADD(MI, - 15, BreakEnd)
				END, CASE
				WHEN ShiftMeal = 2
					THEN dateadd(mi, datediff(mi, BreakEnd, WorkEnd) / 2, BreakEnd)
				ELSE BreakEnd
				END, CASE
				WHEN ShiftMeal = 2
					THEN DATEADD(SS, 1, dateadd(mi, datediff(mi, BreakEnd, WorkEnd) / 2, BreakEnd))
				ELSE DATEADD(SS, 1, BreakEnd)
				END, CASE
				WHEN IsOTAfter = 1
					THEN dateadd(mi, datediff(mi, WorkEnd, OTAfterStart) / 2, WorkEnd)
				ELSE OTAfterStart
				END, CASE
				WHEN HolidayStatus = 0
					THEN WorkingTimeMi / 60.0
				ELSE (AttEndMi - AttStartMi) / 60.0
				END, StdWorkingTimeMi, SwipeOptionID
		FROM #tblShiftDetectorMatched
		WHERE ScheduleDate BETWEEN @FromDate AND @ToDate AND SwipeOptionID = 3 AND isnull(ShiftMeal, 0) <> 3

		-- gio vao 2
		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.Period = 1 AND m.TAStatus = 0 AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein AND m.SwipeOptionID = 3
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 3

		--gio ra 2
		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.Period = 1 AND m.TAStatus = 0 AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeOut AND m.MaxTimeOut AND m.SwipeOptionID = 3
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 3

		-- tang ca sau
		INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MaxTimeOut, SwipeOptionID)
		SELECT EmployeeID, ScheduleDate, 2, 0, OTAfterStart, OTAfterEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, dateadd(ss, 1, dateadd(mi, datediff(mi, WorkEnd, OTAfterStart) / 2, WorkEnd)), dateadd(hh, 1, dateadd(mi, datediff(mi, WorkEnd, OTAfterStart) / 2, WorkEnd)), TIMEOUTAFTER, SwipeOptionID
		FROM #tblShiftDetectorMatched
		WHERE ScheduleDate BETWEEN @FromDate AND @ToDate AND SwipeOptionID = 3 AND IsOTAfter = 1

		UPDATE #tblHasTA_insert
		SET MinTimeOut = DATEADD(SECOND, 1, MaxTimeIn)
		WHERE MinTimeOut IS NULL AND SwipeOptionID = 3 AND Period = 2

		-- gio vao 3
		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.Period = 2 AND m.TAStatus = 0 AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein AND m.SwipeOptionID = 3
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 3

		--gio ra 3
		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.Period = 2 AND m.TAStatus = 0 AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeOut AND m.MaxTimeOut AND m.SwipeOptionID = 3
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 3

		-- k đụng vào những ngày người dùng modified
		UPDATE #tblHasTA_insert
		SET TAStatus = a.TAStatus, AttStart = a.AttStart, AttEnd = a.AttEnd
		FROM #tblHasTA_insert ta
		INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
		WHERE a.TAStatus = 3 AND a.AttDate BETWEEN @FromDate AND @ToDate AND ta.SwipeOptionID = 3
	END

	SET @RepeatTime = 0

	IF EXISTS (
			SELECT TOP 1 1
			FROM #tblShiftDetectorMatched
			WHERE SwipeOptionID = 4
			) -- Vao bam, nghi giua ca bam, ve bam
	BEGIN
		-- cap nhat lai OTAfter neu chua co
		UPDATE m
		SET OTAfterStart = DATEADD(mi, ss.OTAfterStartMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE OTAfterStart IS NULL AND m.SwipeOptionID = 4

		UPDATE m
		SET OTAfterEnd = DATEADD(mi, ss.OTAfterEndMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE OTAfterEnd IS NULL AND m.SwipeOptionID = 4

		UPDATE m
		SET OTBeforeStart = DATEADD(mi, ss.OTBeforeStartMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE OTBeforeStart IS NULL AND m.SwipeOptionID = 4

		UPDATE m
		SET OTBeforeEnd = DATEADD(mi, ss.OTBeforeEndMi, m.ScheduleDate)
		FROM #tblShiftDetectorMatched m
		INNER JOIN #tblShiftSetting ss ON m.ShiftCode = ss.ShiftCode
		WHERE OTBeforeEnd IS NULL AND m.SwipeOptionID = 4

		--ShiftMeal = 1 ăn cơm bth
		--ShiftMeal = 2 là nghỉ buổi sáng
		--ShiftMeal = 3 là nghi buổi chiều
		UPDATE d
		SET ShiftMeal = 1
		FROM #tblShiftDetectorMatched d
		WHERE d.AttStart <= dateadd(mi, 30, d.BreakStart) AND d.AttEnd >= dateadd(mi, - 15, d.BreakEnd)

		UPDATE d
		SET ShiftMeal = 2
		FROM #tblShiftDetectorMatched d
		WHERE ShiftMeal IS NULL AND ISNULL(d.AttStart, d.BreakEnd) > BreakStart AND ISNULL(d.AttEnd, d.BreakEnd) > BreakStart AND ISNULL(AttStart, AttEnd) IS NOT NULL

		UPDATE d
		SET ShiftMeal = 3
		FROM #tblShiftDetectorMatched d
		WHERE ShiftMeal IS NULL AND ISNULL(d.AttStart, d.BreakStart) < BreakEnd AND ISNULL(d.AttEnd, d.BreakStart) < BreakEnd AND ISNULL(AttStart, AttEnd) IS NOT NULL

		--ALTER TABLE #tblHasTA_insert ADD ShiftMeal INT
		-- buoi sang
		--12:30 --- 13:30, ShiftMeal = 1 định nghĩa những người có ăn trưa và phải chấm công đúng quy định
		--Nếu ShiftMeal = 0 thì chấm công có thể giãn ra (nghỉ giữa buổi có thể chấm công vào buổi chiều sớm hơn giờ quy định)
		--VŨ: có ăn trưa check out trong khoảng 12h30 đến 13h00 (-30p thời gian checkout theo quy định)
		INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MinTimeOut, MaxTimeOut, WorkingTime, StdWorkingTimeMi, SwipeOptionID)
		SELECT EmployeeID, ScheduleDate, 0, 0, WorkStart, BreakStart, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, dateadd(MI, - @TA_TIMEINBEFORE, WorkStart), CASE
				WHEN ShiftMeal = 3
					THEN dateadd(mi, - datediff(mi, WorkStart, BreakStart) / 2, BreakStart)
				ELSE dateadd(ss, - 1, dateadd(mi, BreakStartMi, ScheduleDate))
				END, CASE
				WHEN ShiftMeal = 3
					THEN dateadd(ss, 1, dateadd(mi, - datediff(mi, WorkStart, BreakStart) / 2, BreakStart))
				ELSE dateadd(mi, BreakStartMi, ScheduleDate)
				END, CASE
				WHEN ShiftMeal = 3
					THEN BreakEnd
				ELSE dateadd(mi, BreakStartMi + 30, ScheduleDate)
				END, CASE
				WHEN HolidayStatus = 0
					THEN WorkingTimeMi / 60.0
				ELSE (AttEndMi - AttStartMi) / 60.0
				END, StdWorkingTimeMi, SwipeOptionID
		FROM #tblShiftDetectorMatched
		WHERE ScheduleDate BETWEEN @FromDate AND @ToDate AND SwipeOptionID = 4 AND ISNULL(ShiftMeal, 0) <> 2 --Nghỉ buổi sáng
			--update #tblHasTA_insert set MinTimeOut = DATEADD(SECOND,1,MaxTimeIn)

		-- gio vao 1
		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.TAStatus = 0 AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein AND m.SwipeOptionID = 4
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 4

		--gio ra 1
		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.TAStatus = 0 AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeOut AND m.MaxTimeOut AND m.SwipeOptionID = 4
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 4

		--thanh123
		-- buoi chieu hoac tang ca sau
		INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, Period, TAStatus, WorkStart, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM, MinTimeIn, MaxTimeIn, MinTimeOut, MaxTimeOut, WorkingTime, StdWorkingTimeMi, SwipeOptionID)
		SELECT EmployeeID, ScheduleDate, 1, 0, BreakEnd, WorkEnd, AttEndYesterday, AttStartTomorrow, TIMEINBEFORE, TIMEOUTAFTER, INOUT_MINIMUM
			--,dateadd(mi,-@TA_TIMEINBEFORE,BreakEnd)
			, CASE
				WHEN ShiftMeal = 2
					THEN BreakStart
				ELSE DATEADD(MI, - 15, BreakEnd)
				END, CASE
				WHEN ShiftMeal = 2
					THEN dateadd(mi, datediff(mi, BreakEnd, WorkEnd) / 2, BreakEnd)
				ELSE BreakEnd
				END, CASE
				WHEN ShiftMeal = 2
					THEN DATEADD(SS, 1, dateadd(mi, datediff(mi, BreakEnd, WorkEnd) / 2, BreakEnd))
				ELSE DATEADD(SS, 1, BreakEnd)
				END, TIMEOUTAFTER, CASE
				WHEN HolidayStatus = 0
					THEN WorkingTimeMi / 60.0
				ELSE (AttEndMi - AttStartMi) / 60.0
				END, StdWorkingTimeMi, SwipeOptionID
		FROM #tblShiftDetectorMatched
		WHERE ScheduleDate BETWEEN @FromDate AND @ToDate AND SwipeOptionID = 4 AND ISNULL(ShiftMeal, 0) <> 3 --3 là nghỉ buổi chiều đã xét ở trên

		-- gio vao 2
		UPDATE #tblHasTA_insert
		SET AttStart = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, MIN(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.Period = 1 AND m.TAStatus = 0 AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeIn AND m.maxtimein AND m.SwipeOptionID = 4
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 4

		--gio ra 2
		UPDATE #tblHasTA_insert
		SET AttEnd = tmp.AttTime
		FROM #tblHasTA_insert m
		INNER JOIN (
			SELECT m.EmployeeId, m.AttDate, m.Period, max(t.AttTime) AttTime
			FROM #tblHasTA_insert m
			INNER JOIN #tblTmpAttend_org t ON m.EmployeeId = t.EmployeeID
			WHERE m.Period = 1 AND m.TAStatus = 0 AND T.AttTime BETWEEN m.TIMEINBEFORE AND m.TIMEOUTAFTER AND t.AttTime BETWEEN m.MinTimeOut AND m.MaxTimeOut AND m.SwipeOptionID = 4
			GROUP BY m.EmployeeId, m.AttDate, m.Period
			) tmp ON m.EmployeeId = tmp.EmployeeId AND m.AttDate = tmp.AttDate AND m.Period = tmp.Period AND m.SwipeOptionID = 4

		-- k đụng vào những ngày người dùng modified
		UPDATE #tblHasTA_insert
		SET TAStatus = a.TAStatus, AttStart = a.AttStart, AttEnd = a.AttEnd
		FROM #tblHasTA_insert ta
		INNER JOIN #tblHasTA a ON ta.EmployeeID = a.EmployeeID AND ta.AttDate = a.AttDate AND ta.Period = a.Period
		WHERE a.TAStatus = 3 AND a.AttDate BETWEEN @FromDate AND @ToDate AND ta.SwipeOptionID = 4

		-- khong co tang ca thi bo di
		DELETE #tblHasTA_insert
		WHERE Period = 2 AND AttStart IS NULL AND AttEnd IS NULL AND SwipeOptionID = 4
	END
END

----VŨ: nếu là ngày vào làm thì hệ thống mặc định chấm công vào
--UPDATE #tblHasTA_insert SET AttStart = h.WorkStart
--FROM #tblHasTA_insert h
--INNER JOIN #tblEmployeeList e ON e.EmployeeID = h.EmployeeID
--LEFT JOIN #tblShiftDetectorMatched s ON s.EmployeeId = h.EmployeeID AND s.ScheduleDate = h.Attdate
--WHERE h.Attdate = e.HireDate AND h.TAStatus = 0 AND h.Period = 0 AND  s.HolidayStatus = 0 AND (h.AttStart IS NULL OR h.AttStart > h.WorkStart)
--  AND NOT EXISTS(SELECT 1 FROM tblLvHistory lv WHERE lv.EmployeeID = h.EmployeeID AND lv.LeaveDate = h.Attdate AND lv.LeaveStatus IN(1, 3))
-- nhung nguoi di lam 2 ca 1 ngay
INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, AttStart, AttEnd, Period, TAStatus, StdWorkingTimeMi)
SELECT EmployeeID, ScheduleDate, AttStart1, AttEnd1, 0, 0, WorkEndMi1 - WorkStartMi1
FROM #tblWorking2ShiftADay_Detect

INSERT INTO #tblHasTA_insert (EmployeeID, AttDate, AttStart, AttEnd, Period, TAStatus, StdWorkingTimeMi)
SELECT EmployeeID, ScheduleDate, AttStart2, AttEnd2, 1, 0, WorkEndMi2 - WorkStartMi2
FROM #tblWorking2ShiftADay_Detect

-- nhung nguoi ko can cham cong
IF COL_LENGTH('tempdb..#tblHasTA_insert', 'NotTASaturday') IS NULL
	ALTER TABLE #tblHasTA_insert ADD NotTASaturday INT

UPDATE #tblHasTA_insert
SET NotTASaturday = 1
FROM #tblHasTA_insert s
INNER JOIN #tblEmployeeList e ON s.EmployeeId = e.EmployeeID
WHERE e.TAOptionID = 4 AND DATENAME(dw, s.Attdate) = 'Saturday'

UPDATE ta
SET AttStart = WorkStart
FROM #tblHasTA_insert ta
WHERE isnull(ta.NotTASaturday, 0) = 0 AND (ta.AttStart IS NULL OR ta.AttStart > ta.WorkStart) AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE ta.EmployeeID = te.EmployeeID AND te.NotCheckTA = 1
		) AND NOT EXISTS (
		SELECT 1
		FROM #tblWSchedule m
		WHERE ta.EmployeeID = m.EmployeeId AND ta.Attdate = m.ScheduleDate AND m.HolidayStatus > 0
		) AND TAStatus NOT IN (1, 3)

UPDATE ta
SET AttEnd = WorkEnd
FROM #tblHasTA_insert ta
WHERE isnull(ta.NotTASaturday, 0) = 0 AND (ta.AttEnd IS NULL OR ta.AttEnd < ta.WorkEnd) AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList te
		WHERE ta.EmployeeID = te.EmployeeID AND te.NotCheckTA = 1
		) AND NOT EXISTS (
		SELECT 1
		FROM #tblWSchedule m
		WHERE ta.EmployeeID = m.EmployeeId AND ta.Attdate = m.ScheduleDate AND m.HolidayStatus > 0
		) AND TAStatus NOT IN (2, 3)

-- bo nhung du lieu ko hop le
DELETE I2
FROM #tblHasTA_insert i1
INNER JOIN #tblHasTA_insert i2 ON i1.employeeID = i2.EmployeeID AND i1.AttDate = i2.AttDate
WHERE i1.Period = i2.Period - 1 AND i1.AttEnd >= i2.AttStart

-- sua lai PeriodID cho nhung record đã fix
UPDATE ta
SET Period = f.Period
FROM #tblHasTA_insert ta
INNER JOIN #tblHasTA_Fixed f ON ta.EmployeeID = f.EmployeeID AND ta.Attdate = f.Attdate AND ta.AttStart = f.AttStart AND ta.Period <> f.Period

ALTER TABLE #tblHasta_insert ADD WorkingTimeMi INT, IsLeaveStatus3 INT

UPDATE #tblHasTA_insert
SET IsLeaveStatus3 = 0

UPDATE ta1
SET IsLeaveStatus3 = CASE
		WHEN lv.LeaveStatus = 3
			THEN 1
		ELSE 0
		END
FROM #tblHasTA_insert ta1
INNER JOIN tbllvhistory lv ON ta1.EmployeeID = lv.EmployeeID AND ta1.Attdate = lv.LeaveDate

IF (object_id('sp_ShiftDetector_UpdateHasTA_ChangeAttTime') IS NULL)
	EXEC ('CREATE PROCEDURE sp_ShiftDetector_UpdateHasTA_ChangeAttTime(@StopUpdate bit output, @LoginID int, @FromDate datetime, @ToDate datetime) as')

SET @StopUpdate = 0

EXEC sp_ShiftDetector_UpdateHasTA_ChangeAttTime @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

IF @StopUpdate = 0
BEGIN
	UPDATE ta1
	SET AttEndMi = datepart(hour, AttEnd) * 60 + datepart(mi, AttEnd), AttStartMi = datepart(hour, AttStart) * 60 + datepart(mi, AttStart), WorkStartMi = datepart(hour, isnull(ta1.WorkStart, ss.WorkStart)) * 60 + datepart(mi, isnull(ta1.WorkStart, ss.WorkStart)), WorkEndMi = datepart(hour, isnull(ta1.WorkEnd, ss.WorkEnd)) * 60 + datepart(mi, isnull(ta1.WorkEnd, ss.WorkEnd)), BreakStartMi = datepart(hour, ss.BreakStart) * 60 + datepart(mi, ss.BreakStart), BreakEndMi = datepart(hour, ss.BreakEnd) * 60 + datepart(mi, ss.BreakEnd), ShiftCode = ss.ShiftCode
	FROM #tblHasTA_insert ta1
	INNER JOIN tblWSchedule ws ON ta1.EmployeeID = ws.EmployeeID AND ta1.Attdate = ws.ScheduleDate
	INNER JOIN tblShiftSetting ss ON ws.ShiftID = ss.ShiftID

	UPDATE ta1
	SET AttEndMi = datepart(hour, AttEnd) * 60 + datepart(mi, AttEnd), AttStartMi = datepart(hour, AttStart) * 60 + datepart(mi, AttStart), WorkStartMi = datepart(hour, isnull(ta1.WorkStart, ss.WorkStart)) * 60 + datepart(mi, isnull(ta1.WorkStart, ss.WorkStart)), WorkEndMi = datepart(hour, isnull(ta1.WorkEnd, ss.WorkEnd)) * 60 + datepart(mi, isnull(ta1.WorkEnd, ss.WorkEnd)), BreakStartMi = datepart(hour, ss.BreakStart) * 60 + datepart(mi, ss.BreakStart), BreakEndMi = datepart(hour, ss.BreakEnd) * 60 + datepart(mi, ss.BreakEnd), ShiftCode = ss.ShiftCode
	FROM #tblHasTA_insert ta1
	INNER JOIN #tblWorking2ShiftADay_Detect ws ON ta1.EmployeeID = ws.EmployeeID AND ta1.Attdate = ws.ScheduleDate
	INNER JOIN #tblShiftSetting tss ON ws.ShiftCode2 = tss.ShiftCode
	INNER JOIN tblShiftSetting ss ON tss.ShiftID = ss.ShiftID
	WHERE ta1.Period = 1
END

UPDATE #tblHasTA_insert
SET BreakStartMi = 1440 + BreakStartMi
WHERE BreakStartMi < WorkStartMi AND WorkStartMi > WorkEndMi

UPDATE #tblHasTA_insert
SET BreakEndMi = 1440 + BreakEndMi
WHERE BreakEndMi < WorkStartMi AND WorkStartMi > WorkEndMi

UPDATE #tblHasTA_insert
SET WorkEndMi += 1440
WHERE WorkEndMi < WorkStartMi

UPDATE #tblHasTA_insert
SET BreakEndMi += 1440
WHERE BreakEndMi < BreakStartMi

UPDATE #tblHasTA_insert
SET AttStartMi += 1440
WHERE AttStartMi < WorkStartMi AND DATEDIFF(day, AttDate, AttStart) > 0

UPDATE #tblHasTA_insert
SET AttEndMi += 1440
WHERE AttEndMi < AttStartMi

UPDATE #tblHasTA_insert
SET BreakStartMi = WorkEndMi, BreakEndMi = WorkEndMi
FROM #tblHasTA_insert
WHERE abs(BreakStartMi - BreakEndMi) > 240

--làm viec  xuyên màn dêm
UPDATE #tblHasTA_insert
SET AttEndMi += 1440
WHERE AttEndMi - AttStartMi < 300 AND DATEDIFF(day, AttStart, AttEnd) > 0 AND AttEndMi < 1440

IF @MATERNITY_LATE_EARLY_OPTION = 1
	UPDATE ta1
	SET AttStartMi = CASE
			WHEN AttStartMi > WorkStartMi
				THEN CASE
						WHEN AttStartMi - WorkStartMi <= 30
							THEN WorkStartMi
						ELSE AttStartMi - @MATERNITY_MUNITE
						END
			ELSE AttStartMi
			END
	FROM #tblHasTA_insert ta1
	WHERE AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL AND ta1.Period = 0 AND EXISTS (
			SELECT 1
			FROM #tblPendingImportAttend p
			WHERE ta1.EmployeeID = p.EmployeeID AND ta1.AttDate = p.DATE AND p.EmployeeStatusID IN (10, 11)
			)
ELSE IF @MATERNITY_LATE_EARLY_OPTION = 2
	UPDATE ta1
	SET AttEndMi = CASE
			WHEN AttEndMi < WorkEndMi
				THEN CASE
						WHEN WorkEndMi - AttStartMi <= 30
							THEN WorkEndMi
						ELSE AttEndMi + @MATERNITY_MUNITE
						END
			ELSE AttEndMi
			END
	FROM #tblHasTA_insert ta1
	WHERE AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL AND ta1.Period = 0 AND EXISTS (
			SELECT 1
			FROM #tblPendingImportAttend p
			WHERE ta1.EmployeeID = p.EmployeeID AND ta1.AttDate = p.DATE AND p.EmployeeStatusID IN (10, 11)
			)
ELSE IF @MATERNITY_LATE_EARLY_OPTION = 3

	UPDATE ta1
	SET AttEndMi = CASE
			WHEN WorkEndMi - AttEndMi >= AttStartMi - WorkStartMi AND AttEndMi < WorkEndMi
				THEN CASE
						WHEN WorkEndMi - AttStartMi <= 30
							THEN WorkEndMi
						ELSE AttEndMi + @MATERNITY_MUNITE
						END
			ELSE AttEndMi
			END, AttStartMi = CASE
			WHEN WorkEndMi - AttEndMi < AttStartMi - WorkStartMi AND AttStartMi > WorkStartMi
				THEN CASE
						WHEN AttStartMi - WorkStartMi <= 30
							THEN WorkStartMi
						ELSE AttStartMi - @MATERNITY_MUNITE
						END
			ELSE AttStartMi
			END
	FROM #tblHasTA_insert ta1
	WHERE AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL AND ta1.Period = 0 AND EXISTS (
			SELECT 1
			FROM #tblPendingImportAttend p
			WHERE ta1.EmployeeID = p.EmployeeID AND ta1.AttDate = p.DATE AND p.EmployeeStatusID IN (10, 11)
			)

-- UPDATE LATE_PERMIT AND EARLY_PERMIT
-- update LATE_PERMIT,EARLY_PERMIT của bảng #tblHasTA_insert , Lần lượt trả về kết quả nếu tồn tại theo thứ tự Position,Section,Department,Division
UPDATE sd
SET sd.Late_Permit = COALESCE(p.LATE_PERMIT, sc.LATE_PERMIT, dp.LATE_PERMIT, d.LATE_PERMIT), sd.Early_Permit = COALESCE(p.Early_Permit, sc.Early_Permit, dp.Early_Permit, d.Early_Permit)
FROM #tblHasTA_insert sd
LEFT JOIN #tblEmployeeList s ON s.EmployeeID = sd.EmployeeId
LEFT JOIN tblDivision d ON d.DivisionID = s.DivisionID
LEFT JOIN tblDepartment dp ON dp.DepartmentID = s.DepartmentID
LEFT JOIN tblSection sc ON sc.SectionID = s.SectionID
LEFT JOIN tblPosition p ON p.PositionID = s.PositionID

-- Update #tblHasTA_insert
UPDATE hi
-- Dành tất cả cho AttStartMi .
SET AttStartMi =
	-- Nếu là ca 1
	CASE
		WHEN AttStartMi + Late_Permit <= BreakEndMi
			THEN
				-- DÙng WorkStartMi so sánh cho AttStartMi
				-- Nếu AttStartMi <= WorkStartMi + Late_Permit -> Trả về WorkStartMi ngược lại trả về AttStartMi
				CASE
					WHEN AttStartMi BETWEEN WorkStartMi AND WorkStartMi + Late_Permit
						THEN WorkStartMi
					ELSE AttStartMi
					END
		ELSE
			-- Dùng BreakEndMi so sánh cho AttStartMi
			-- Nếu AttStartMi <= WorkStartMi + Late_Permit -> Trả về WorkStartMi ngược lại trả về AttStartMi
			CASE
				WHEN AttStartMi BETWEEN BreakEndMi AND BreakEndMi + Late_Permit
					THEN BreakEndMi
				ELSE AttStartMi
				END
		END,
	-- Dành tất cả cho AttEndMi
	AttEndMi =
	-- Nếu là ca 1
	CASE
		WHEN AttEndMi + Early_Permit <= BreakEndMi
			THEN
				-- DÙng BreakStartMi so sánh cho AttEndMi ( Bởi hiện tại BreakStartMi đại diện cho giờ kết thúc ca 1 )
				-- Nếu AttEndtMi <= BreakStartMi - Early_Permit -> Trả về BreakStartMi ngược lại trả về AttEndMi
				CASE
					WHEN AttEndMi BETWEEN BreakStartMi - Early_Permit AND BreakStartMi
						THEN BreakStartMi
					ELSE AttEndMi
					END
		ELSE
			-- DÙng BreakStartMi so sánh cho AttEndMi ( Bởi hiện tại BreakStartMi đại diện cho giờ kết thúc ca 1 )
			-- Nếu AttEndtMi <= BreakStartMi - Early_Permit -> Trả về BreakStartMi ngược lại trả về AttEndMi
			CASE
				WHEN AttEndMi BETWEEN WorkEndMi - Early_Permit AND WorkEndMi
					THEN CASE
							WHEN AttEndMi < WorkEndMi
								THEN WorkEndMi
							ELSE AttEndMi
							END
				ELSE AttEndMi
				END
		END
FROM #tblHasTA_insert hi

--VŨ: LICHIEN làm tròn working time, sớm/trễ dưới 15 phút - bù công, tính đi trễ về sớm
--UPDATE #tblHasTA_insert SET AttStartMi = WorkStartMi
--WHERE AttStartMi BETWEEN WorkStartMi AND WorkStartMi + 14
--UPDATE #tblHasTA_insert SET AttEndMi = WorkEndMi
--WHERE AttEndMi BETWEEN WorkEndMi - 14 AND WorkEndMi
--Giờ RA: round AttStartMi to nearest 15 minutes when it's later than WorkStartMi + 15
-- Using integer arithmetic: ((AttStartMi + 7) / 15) * 15 rounds to nearest 15 minutes
UPDATE #tblHasTA_insert
SET AttStartMi = ((AttStartMi + 7) / 15) * 15
WHERE AttStartMi > WorkStartMi + 15

--Giờ RA: round AttEndMi to nearest 15 minutes when the employee leaves early (AttEndMi < WorkEndMi - 15)
-- Using integer arithmetic: ((AttEndMi + 7) / 15) * 15 rounds to nearest 15 minutes
UPDATE #tblHasTA_insert
SET AttEndMi = ((AttEndMi + 7) / 15) * 15
WHERE AttEndMi < WorkEndMi - 15


--TRIPOD:
UPDATE #tblHasTA_insert
SET WorkingTimeMi = CASE
		WHEN AttEndMi >= WorkEndMi
			THEN WorkEndMi
		WHEN AttEndMi >= BreakEndMi
			THEN AttEndMi
		WHEN AttEndMi >= BreakStartMi
			THEN BreakStartMi
		WHEN AttEndMi >= WorkStartMi
			THEN AttEndMi
		ELSE WorkStartMi
		END - CASE
		WHEN AttStartMi <= WorkStartMi
			THEN WorkStartMi
		WHEN AttStartMi <= BreakStartMi
			THEN AttStartMi
		WHEN AttStartMi <= BreakEndMi
			THEN BreakEndMi
		WHEN AttStartMi <= WorkEndMi
			THEN AttStartMi
		ELSE WorkEndMi
		END, StdWorkingTimeMi = WorkEndMi - WorkStartMi - (BreakEndMi - BreakStartMi)
WHERE AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL

UPDATE #tblHasTA_insert
SET StdWorkingTimeMi = 480
WHERE SwipeOptionID IN (3, 4) AND StdWorkingTimeMi < 480

UPDATE #tblHasTA_insert
SET StdWorkingTimeMi = 480
WHERE isnull(StdWorkingTimeMi, 0) <= 0

UPDATE #tblHasTA_insert
SET WorkingTimeMi = WorkingTimeMi - (BreakEndMi - BreakStartMi)
WHERE BreakStartMi < BreakEndMi AND AttStartMi <= BreakStartMi AND AttEndMi >= BreakEndMi AND AttStartMi IS NOT NULL AND AttEndMi IS NOT NULL


UPDATE #tblHasTA_insert
SET STDWorkingTime_SS = StdWorkingTimeMi

----lichien: period 2 mean overtime, not calculate working time
--if exists(select 1 from #tblHasTA_insert where Period = 2 and  WorkingTimeMi > 0)
-- update #tblHasTA_insert set WorkingTimeMi = 0 where Period = 2
-- cập nhật lại STDWorkingTime_SS
UPDATE #tblHasTA_insert
SET STDWorkingTime_SS = ss.Std_Hour_PerDays * 60
FROM #tblHasTA_insert ta
INNER JOIN tblShiftSetting ss ON ta.ShiftCode = ss.ShiftCode AND datepart(DW, ta.Attdate) = ss.WeekDays
WHERE ta.STDWorkingTime_SS <> ss.Std_Hour_PerDays * 60 AND ta.SwipeOptionID IN (1, 2)

IF @MATERNITY_LATE_EARLY_OPTION = 0
BEGIN
	UPDATE att
	SET WorkingTimeMi = att.WorkingTimeMi + t.MATERNITY_MUNITE
	FROM #tblHasTA_insert att
	INNER JOIN (
		SELECT t.EmployeeID, t.Attdate, tmp.MATERNITY_MUNITE, max(t.Period) Period
		FROM #tblHasTA_insert t
		INNER JOIN (
			SELECT d.EmployeeID, d.Attdate, min(WorkingTimeMi) WorkingTimeMi, CASE
					WHEN max(StdWorkingTimeMi) - sum(WorkingTimeMi) > @MATERNITY_MUNITE
						THEN @MATERNITY_MUNITE
					ELSE max(StdWorkingTimeMi) - sum(WorkingTimeMi)
					END MATERNITY_MUNITE
			FROM #tblHasTA_insert d
			WHERE
				--exists (select 1 from #tblHasTA_insert t where d.employeeID = t.EmployeeID and d.AttDate = t.AttDate group by t.EmployeeID, t.AttDate having sum (t.WorkingTimeMi) >= @MATERNITY_ADD_ATLEAST) and
				EXISTS (
					SELECT 1
					FROM #tblPendingImportAttend p
					WHERE d.EmployeeID = p.EmployeeID AND d.Attdate = p.DATE AND p.EmployeeStatusID IN (10, 11)
					)
			GROUP BY d.EmployeeID, d.Attdate
			HAVING sum(d.WorkingTimeMi) >= @MATERNITY_ADD_ATLEAST
			) tmp ON t.EmployeeID = tmp.EmployeeID AND t.Attdate = tmp.Attdate AND t.WorkingTimeMi = tmp.WorkingTimeMi
		GROUP BY t.EmployeeID, t.Attdate, tmp.MATERNITY_MUNITE
		) t ON att.EmployeeID = t.EmployeeID AND att.Attdate = t.Attdate AND att.Period = t.Period
END

-- chinh lai STD_WT khi nguoi dung nhap trong ban thiet lap ca -- ca tu do thi ko tinh ty le nay
UPDATE ta
SET WorkingTimeMi = ta.WorkingTimeMi * ta.STDWorkingTime_SS / ta.StdWorkingTimeMi, StdWorkingTimeMi = ta.STDWorkingTime_SS
FROM #tblHasTA_insert ta
WHERE (ta.STDWorkingTime_SS < 841 AND ta.StdWorkingTimeMi < 841) AND ta.STDWorkingTime_SS <> ta.StdWorkingTimeMi

-- truong hop di lam nua ngay ma vao som 5 hoăc 10 phut thi van tinh cong nua ngay
--UPDATE #tblHasTA_insert set WorkingTimeMi = 240 WHERE WorkingTimeMi BETWEEN 241 AND 249 --TN bỏ
IF (object_id('sp_ShiftDetector_ProcessWorkingTime') IS NULL)
	EXEC ('CREATE PROCEDURE sp_ShiftDetector_ProcessWorkingTime(@StopUpdate bit output, @LoginID int, @FromDate datetime, @ToDate datetime)as')

SET @StopUpdate = 0

-- Goi thu thu thuc customize import de ap dung cho tung khach hang rieng biet
EXEC sp_ShiftDetector_ProcessWorkingTime @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

/*
--System automatically insert leave
--select *
update lv
set LvAmount=LvAmount-case when tmp.WorkingTimeMi>tmp.StdWorkingTimeMi then tmp.StdWorkingTimeMi else tmp.WorkingTimeMi end / 60.0, LeaveStatus=2
from tblLvHistory lv
     inner join(select EmployeeID, Attdate, sum(WorkingTimeMi) WorkingTimeMi, max(StdWorkingTimeMi) StdWorkingTimeMi
                from #tblHasTA_insert ta
                where exists (select 1 from tblLvHistory lv where ta.EmployeeID=lv.EmployeeID and ta.Attdate=lv.LeaveDate and lv.Reason=N'System automatically insert leave')and ta.WorkingTimeMi>0
                group by EmployeeID, Attdate) tmp on lv.EmployeeID=tmp.EmployeeID and lv.LeaveDate=tmp.Attdate

where lv.Reason=N'System automatically insert leave'
*/
IF NOT EXISTS (
		SELECT 1
		FROM tblParameter
		WHERE Code = 'WORKINGTIME_DONOT_CARE_LEAVEAMOUNT' AND Value = '1'
		)
BEGIN
	UPDATE #tblHasTA_insert
	SET CARE_LEAVEAMOUNT = (isnull(t1.s_WorkingTimeMi, 0) + isnull(lv.SumLvAmount, 0)) - ta.StdWorkingTimeMi
	FROM #tblHasTA_insert ta
	INNER JOIN (
		SELECT EmployeeID, AttDate, sum(WorkingTimeMi) s_WorkingTimeMi
		FROM #tblHasTA_insert
		GROUP BY EmployeeID, AttDate
		) t1 ON ta.EmployeeID = t1.EmployeeID AND ta.Attdate = t1.Attdate
	INNER JOIN (
		SELECT EmployeeID, LeaveDate, sum(LvAmount) * 60 AS SumLvAmount
		FROM #tblLvHistory lv
		WHERE lv.LeaveCategory = 1 AND isnull(lv.Reason, '') <> N'System automatically insert leave'
		GROUP BY EmployeeID, LeaveDate
		) lv ON ta.EmployeeID = lv.EmployeeID AND lv.LeaveDate = ta.Attdate
	WHERE isnull(t1.s_WorkingTimeMi, 0) + isnull(lv.SumLvAmount, 0) > StdWorkingTimeMi

	UPDATE ta
	SET ACCUMMULATE_CARE_LEAVEAMOUNT = t1.s_WorkingTimeMi
	FROM #tblHasTA_insert ta
	CROSS APPLY (
		SELECT sum(t1.WorkingTimeMi) s_WorkingTimeMi
		FROM #tblHasTA_insert t1
		WHERE ta.EmployeeID = t1.EmployeeID AND ta.Attdate = t1.Attdate AND ta.Period >= t1.Period
		) t1
	WHERE ta.CARE_LEAVEAMOUNT > 0

	UPDATE #tblHasTA_insert
	SET COMPARE_WORKINGTIME = CARE_LEAVEAMOUNT - ACCUMMULATE_CARE_LEAVEAMOUNT
	WHERE CARE_LEAVEAMOUNT > 0

	UPDATE #tblHasTA_insert
	SET DEDUCT_WORKINGTIME = WorkingTimeMi
	WHERE COMPARE_WORKINGTIME >= 0 AND CARE_LEAVEAMOUNT > 0

	UPDATE #tblHasTA_insert
	SET DEDUCT_WORKINGTIME = ta.WorkingTimeMi + ta.COMPARE_WORKINGTIME
	FROM #tblHasTA_insert ta
	CROSS APPLY (
		SELECT min(t1.Period) m_Period
		FROM #tblHasTA_insert t1
		WHERE ta.EmployeeID = t1.EmployeeID AND ta.Attdate = t1.Attdate AND t1.COMPARE_WORKINGTIME < 0
		) t1
	WHERE ta.CARE_LEAVEAMOUNT > 0 AND t1.m_Period = ta.Period

	UPDATE #tblHasTA_insert
	SET WorkingTimeMi = WorkingTimeMi - DEDUCT_WORKINGTIME
	WHERE DEDUCT_WORKINGTIME IS NOT NULL
		/*

    update #tblHasTA_insert
    set WorkingTimeMi = StdWorkingTimeMi-isnull(SumLvAmount, 0)
    from #tblHasTA_insert d
         inner join #tblPendingImportAttend p on d.EmployeeID=p.EmployeeID and d.Attdate=p.Date
        inner join(select EmployeeID, LeaveDate, sum(LvAmount)* 60 as SumLvAmount
                    from #tblLvHistory lv
    where lv.LeaveCategory=1 and isnull(lv.Reason, '')<>N'System automatically insert leave'
                    group by EmployeeID, LeaveDate) lv on d.EmployeeID=lv.EmployeeID and d.Attdate=lv.LeaveDate
    where AttStartMi is not null and AttEndMi is not null and isnull(WorkingTimeMi, 0)+isnull(lv.SumLvAmount, 0)>StdWorkingTimeMi
 */
END

IF NOT EXISTS (
		SELECT 1
		FROM tblParameter
		WHERE Code = 'DONOT_USE_WORKINGTIME_RATE' AND Value = '1'
		)
	UPDATE ta1
	SET WorkingTimeMi = CASE
			WHEN (ta1.StdWorkingTimeMi - isnull(lv.LvAmount * 60, 0)) <= 0
				THEN 0
			WHEN cast(CASE
						WHEN ta1.WorkingTimeMi > (ta1.StdWorkingTimeMi - isnull(lv.LvAmount * 60, 0))
							THEN (ta1.StdWorkingTimeMi - isnull(lv.LvAmount * 60, 0))
						ELSE ta1.WorkingTimeMi
						END AS FLOAT) / (ta1.StdWorkingTimeMi - isnull(lv.LvAmount * 60, 0)) * (isnull(ta2.Std_Hour_PerDays, 8) * 60 - isnull(lv.LvAmount * 60, 0)) >= (isnull(ta2.Std_Hour_PerDays, 8) * 60 - isnull(lv.LvAmount * 60, 0))
				THEN (isnull(ta2.Std_Hour_PerDays, 8) * 60 - isnull(lv.LvAmount * 60, 0))
			ELSE cast(CASE
						WHEN WorkingTimeMi > (ta1.StdWorkingTimeMi - isnull(lv.LvAmount * 60, 0))
							THEN (ta1.StdWorkingTimeMi - isnull(lv.LvAmount * 60, 0))
						ELSE ta1.WorkingTimeMi
						END AS FLOAT) / (ta1.StdWorkingTimeMi - isnull(lv.LvAmount * 60, 0)) * (isnull(ta2.Std_Hour_PerDays, 8) * 60 - isnull(lv.LvAmount * 60, 0))
			END
	FROM #tblHasTA_insert ta1
	INNER JOIN tblShiftSetting ta2 ON ta1.ShiftID = ta2.ShiftID
	INNER JOIN tblLvHistory lv ON ta1.EmployeeID = lv.EmployeeID AND ta1.Attdate = lv.LeaveDate
	WHERE ta1.Workingtimemi > 0 AND EXISTS (
			SELECT 1
			FROM tblLeaveType lt
			WHERE lt.LeaveCategory = 1 AND lv.LeaveCode = lt.LeaveCode
			)  -- xử lý trường hợp ngày phía trước hoặc phía sau dã duyệt vào ra, thì ngày hiện tại không đc sát với giờ vao ra cua nhung ngay

-- truong hop khong co ca
UPDATE ta
SET AttStart = NULL, WorkingTime = NULL, WorkingTimeMi = NULL
FROM #tblHasTA_insert ta
INNER JOIN #tblHasTA_insert ta1 ON ta.EmployeeID = ta1.EmployeeID AND ta.Attdate = ta1.Attdate + 1
WHERE ta.TAStatus = 0 AND ta1.TAStatus IN (2, 3) AND datediff(mi, ta1.AttEnd, ta.AttStart) < 61 -- giờ vào phải lớn 60 phút so với giờ ra hôm trước


--TRIPOD: refresh
SELECT s.EmployeeID, ss.ShiftCode, isnull(ss.ShiftID, s.ShiftID) ShiftID, s.ScheduleDate, s.HolidayStatus, s.DateStatus, isnull(s.Approved, 0) AS Approved, dateadd(day, 1, ScheduleDate) AS NextDate, dateadd(day, - 1, ScheduleDate) AS PrevDate, ApprovedHolidayStatus
INTO #tblWSchedule2
FROM tblWSchedule s WITH (NOLOCK)
LEFT JOIN tblShiftSetting ss WITH (NOLOCK) ON s.ShiftID = ss.ShiftID
WHERE s.ScheduleDate BETWEEN @FromDate3 AND @ToDate3 AND EXISTS (
		SELECT EmployeeID
		FROM #tblEmployeeList te
		WHERE s.EmployeeID = te.EmployeeID
		)

--VŨ: với các ngày holidayStatus <> 0 thì ủi WorkingTime đi
UPDATE h
SET WorkingTimeMi = NULL
FROM #tblHasTA_insert h
INNER JOIN #tblWSchedule2 s ON s.EmployeeId = h.EmployeeID AND s.ScheduleDate = h.Attdate
WHERE s.HolidayStatus <> 0



UPDATE ta
SET AttEnd = NULL, WorkingTime = NULL, WorkingTimeMi = NULL
FROM #tblHasTA_insert ta
INNER JOIN #tblHasTA_insert ta1 ON ta.EmployeeID = ta1.EmployeeID AND ta.Attdate = ta1.Attdate - 1
WHERE ta.TAStatus = 0 AND ta1.TAStatus IN (1, 3) AND datediff(mi, ta.AttEnd, ta1.AttStart) < 61 -- giờ vào phải lớn 60 phút so với giờ ra hôm trước

ALTER TABLE #tblShiftSetting ADD isFreeShift BIT

IF (object_id('sp_ShiftDetector_UpdateHasTA') IS NULL)
	EXEC ('create proc sp_ShiftDetector_UpdateHasTA(@StopUpdate bit output, @LoginID int, @FromDate datetime, @ToDate datetime) as')

SET @StopUpdate = 0

-- Goi thu thu thuc customize import de ap dung cho tung khach hang rieng biet
EXEC sp_ShiftDetector_UpdateHasTA @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate

IF @StopUpdate = 0
BEGIN
	--xu ly goi lam viec cho ca tu do
	UPDATE #tblShiftSetting
	SET isFreeShift = 1
	WHERE WorkEndMi - WorkStartMi > 810

	UPDATE #tblShiftSetting
	SET STDWorkingTime_SS = (
			CASE
				WHEN isnumeric(ss.Std_Hour_PerDays) = 1
					THEN ss.Std_Hour_PerDays
				ELSE @WORK_HOURS
				END
			) * 60
	FROM #tblShiftSetting ts
	INNER JOIN tblShiftSetting ss ON ss.ShiftID = ts.ShiftID AND isnull(ts.isFreeShift, 0) = 1

	--lichien: period 2 mean overtime, not calculate working time
		--update #tblHasTA_insert set WorkingTimeMi = 0 where Period = 2
		--  update #tblHasTA_insert set WorkingTime = WorkingTimeMi / 60.0
		UPDATE #tblHasTA_insert
		SET IsNightShift = s.isNightShift
		FROM #tblHasTA_insert ta
		INNER JOIN #tblShiftSetting s ON ta.ShiftCode = s.ShiftCode
END

UPDATE #tblHasTA_insert
SET WorkingTime = (((WorkingTimeMi + 7) / 15) * 15) / 60.0
FROM #tblHasTA_insert


SELECT i1.*, CAST(0 AS BIT) AS isChange
INTO #tblHasTA_ForUpdate
FROM tblHasTA i1
INNER JOIN #tblPendingImportAttend te ON i1.AttDate = te.DATE AND i1.EmployeeID = te.EmployeeID

DELETE #tblHasTA_ForUpdate
FROM #tblHasTA_ForUpdate a
WHERE AttDate NOT BETWEEN @FromDate AND @ToDate

UPDATE #tblHasTA_ForUpdate
SET isChange = 1
FROM #tblHasTA_ForUpdate i1
LEFT JOIN #tblHasTA_insert t0 ON i1.EmployeeID = t0.EmployeeID AND i1.AttDate = t0.Attdate AND i1.Period = t0.Period
WHERE t0.Period IS NULL AND NOT EXISTS (
		SELECT 1
		FROM #tblWSchedule c
		WHERE i1.EmployeeID = c.EmployeeID AND i1.AttDate = c.ScheduleDate AND c.DateStatus = 3
		) AND i1.TAStatus <> 3

UPDATE #tblHasTA_ForUpdate
SET isChange = 1
FROM #tblHasTA_ForUpdate i1
LEFT JOIN #tblWSchedule ws ON i1.EmployeeID = ws.EmployeeID AND i1.AttDate = ws.ScheduleDate AND ws.DateStatus = 3
WHERE ws.EmployeeID IS NULL AND EXISTS (
		SELECT 1
		FROM tblHasTA i2 WITH (NOLOCK)
		WHERE i1.employeeID = i2.EmployeeID AND i1.AttDate = i2.AttDate - 1 AND isnull(i1.AttEnd, i1.AttStart) >= ISNULL(i2.AttStart, I2.AttEnd)
		)

UPDATE #tblHasTA_ForUpdate
SET isChange = 1
FROM tblHasTA i1 WITH (NOLOCK)
LEFT JOIN #tblWSchedule ws ON i1.EmployeeID = ws.EmployeeID AND i1.AttDate = ws.ScheduleDate AND ws.DateStatus = 3
INNER JOIN #tblHasTA_ForUpdate i2 ON i1.employeeID = i2.EmployeeID AND i1.AttDate = i2.AttDate
WHERE ws.EmployeeID IS NULL AND i1.Period = i2.Period - 1 AND isnull(i1.AttEnd, i1.AttStart) >= ISNULL(i2.AttStart, I2.AttEnd)

IF EXISTS (
		SELECT 1
		FROM #tblHasTA_ForUpdate
		WHERE isChange = 1
		)
	DELETE a
	FROM tblHasTA a WITH (NOLOCK)
	INNER JOIN #tblHasTA_ForUpdate b ON a.EmployeeID = b.EmployeeID AND a.AttDate = b.AttDate AND a.Period = b.Period
	WHERE b.isChange = 1

--refresh
UPDATE #tblHasTA_ForUpdate
SET isChange = 0

DECLARE @DateNUll DATE = '3000-12-31'

UPDATE #tblHasTA_ForUpdate
SET AttStart = b.AttStart, AttEnd = b.AttEnd, isChange = 1
FROM #tblHasTA_ForUpdate a
INNER JOIN #tblHasTA_insert b ON a.EmployeeID = b.EmployeeID AND a.AttDate = b.AttDate AND a.Period = b.Period
LEFT JOIN #tblWSchedule ws ON a.EmployeeID = ws.EmployeeID AND a.AttDate = ws.ScheduleDate AND ws.DateStatus = 3
WHERE ws.EmployeeID IS NULL AND a.TAStatus <> 3 AND (ISNULL(a.AttStart, @DateNUll) <> ISNULL(b.AttStart, @DateNUll) OR ISNULL(a.AttEnd, @DateNUll) <> ISNULL(b.AttEnd, @DateNUll))

UPDATE #tblHasTA_ForUpdate
SET AttStart = b.AttStart, isChange = 1
FROM #tblHasTA_ForUpdate a
INNER JOIN #tblHasTA b ON a.EmployeeID = b.EmployeeID AND a.AttDate = b.AttDate AND a.Period = b.Period
LEFT JOIN #tblAtt_Lock l ON a.EmployeeID = l.EmployeeID AND a.AttDate = l.DATE
WHERE l.EmployeeID IS NULL AND b.TAStatus = 1 AND b.AttStart IS NOT NULL

UPDATE #tblHasTA_ForUpdate
SET AttEnd = b.AttEnd, isChange = 1
FROM #tblHasTA_ForUpdate a
INNER JOIN #tblHasTA b ON a.EmployeeID = b.EmployeeID AND a.AttDate = b.AttDate AND a.Period = b.Period
LEFT JOIN #tblAtt_Lock l ON a.EmployeeID = l.EmployeeID AND a.AttDate = l.DATE
WHERE l.EmployeeID IS NULL AND b.TAStatus = 2 AND b.AttEnd IS NOT NULL

IF EXISTS (
		SELECT 1
		FROM #tblHasTA_ForUpdate
		WHERE isChange = 1
		)
	UPDATE tblHasTA
	SET AttStart = b.AttStart, AttEnd = b.AttEnd
	FROM tblHasTA a
	INNER JOIN #tblHasTA_ForUpdate b ON a.EmployeeID = b.EmployeeID AND a.AttDate = b.AttDate AND a.Period = b.Period
	WHERE b.isChange = 1

UPDATE #tblHasTA_ForUpdate
SET isChange = 0

IF EXISTS (
		SELECT 1
		FROM #tblHasTA_insert a
		WHERE NOT EXISTS (
				SELECT 1
				FROM tblHasTA b WITH (NOLOCK)
				WHERE a.EmployeeID = b.EmployeeID AND a.AttDate = b.AttDate AND a.Period = b.Period
				)
		)
	INSERT INTO #tblHasTA_ForUpdate (EmployeeID, AttDate, Period, AttStart, AttMiddle, AttEnd, Approve, WorkingTime, TAStatus, isChange)
	SELECT *
	FROM (
		INSERT INTO tblHasTA (EmployeeID, AttDate, Period, AttStart, AttMiddle, AttEnd, Approve, WorkingTime, TAStatus)
		OUTPUT inserted.EmployeeID, inserted.AttDate, inserted.Period, inserted.AttStart, inserted.AttMiddle, inserted.AttEnd, inserted.Approve, inserted.WorkingTime, inserted.TAStatus, 0 AS isChange
		SELECT a.EmployeeID, a.AttDate, a.Period, a.AttStart, a.AttMiddle, a.AttEnd, 0, a.WorkingTime, 0
		FROM #tblHasTA_insert a
		WHERE NOT EXISTS (
				SELECT 1
				FROM tblHasTA b WITH (NOLOCK)
				WHERE a.EmployeeID = b.EmployeeID AND a.AttDate = b.AttDate AND a.Period = b.Period
				)
		GROUP BY a.EmployeeID, a.AttDate, a.Period, a.AttStart, a.AttMiddle, a.AttEnd, a.WorkingTime
		) t

UPDATE #tblHasTA_ForUpdate
SET WorkingTime = round(b.WorkingTime, 2), isChange = 1
FROM #tblHasTA_ForUpdate a
INNER JOIN #tblHasTA_insert b ON a.EmployeeID = b.EmployeeID AND a.AttDate = b.AttDate AND a.Period = b.Period
WHERE isnull(a.WorkingTimeApproved, 0) = 0 AND ISNULL(a.WorkingTime, - 1) <> ISNULL(round(b.WorkingTime, 2), - 1)

UPDATE #tblHasTA_ForUpdate
SET WorkingTime = NULL, isChange = 1
WHERE round(WorkingTime, 2) <= 0

IF EXISTS (
		SELECT 1
		FROM #tblHasTA_ForUpdate
		WHERE isChange = 1
		)
	UPDATE a
	SET WorkingTime = b.WorkingTime
	FROM tblHasTA a
	INNER JOIN #tblHasTA_ForUpdate b ON a.EmployeeID = b.EmployeeID AND a.AttDate = b.AttDate AND a.Period = b.Period
	WHERE b.isChange = 1

--HPSF: đánh dấu ngày công các ngày thực hiện xác nhận công trên app mobile
--  UPDATE h SET TimeReason = N'Đã xác nhận công trên app mobile'
--  FROM tblHasTA h
--  WHERE EXISTS(SELECT 1 FROM #InsertListTime l WHERE l.EmployeeID = h.EmployeeID  AND l.AttDate = h.AttDate)

IF (object_id('sp_ShiftDetector_FinishUpdateHasTA') IS NULL)
	EXEC ('CREATE PROCEDURE dbo.sp_ShiftDetector_FinishUpdateHasTA ( @StopUpdate bit output ,@LoginID int ,@FromDate datetime ,@ToDate datetime ,@EmployeeID varchar(20) = ''-1'' ) as ')

SET @StopUpdate = 0

-- Goi thu thu thuc customize import de ap dung cho tung khach hang rieng biet
EXEC sp_ShiftDetector_FinishUpdateHasTA @StopUpdate OUTPUT, @LoginID, @FromDate, @ToDate, @EmployeeID = @EmployeeID

FinishedShiftDetector: /*
update ws
set ShiftID=0
from tblWSchedule ws
 left join #tblEmployeeList e on ws.EmployeeID=e.EmployeeID
     left join(select EmployeeID from dbo.tblShiftGroupByEmployee group by EmployeeID) i on i.EmployeeID=ws.EmployeeID
     left join(select EmployeeID from #tblShiftGroupCode sgc group by EmployeeID having count(1)=1) n on n.EmployeeID=ws.EmployeeID
     left join dbo.tblAtt_Lock al on ws.EmployeeID=al.EmployeeID and ws.ScheduleDate=al.Date
     left join dbo.tblHasTA ta on ws.EmployeeID=ta.EmployeeID and ws.ScheduleDate=ta.AttDate and(ta.AttStart is not null or ta.AttEnd is not null or isnull(ta.WorkingTime, 0)=8)
where isnull(ws.Approved, 0)=0 and ws.ScheduleDate between @FromDate and @ToDate and i.EmployeeID is not null and ws.HolidayStatus>0 and al.EmployeeID is null and ta.EmployeeID is null and e.EmployeeID is not null and n.EmployeeID is null
*/

ClearPendingRunning:

DELETE tblRunningImportAttend
WHERE LoginID = @LoginID

DELETE tblPendingImportAttend
FROM tblPendingImportAttend p
WHERE p.DATE BETWEEN @FromDate AND @ToDate AND EXISTS (
		SELECT 1
		FROM #tblEmployeeList e
		WHERE p.EmployeeID = e.EmployeeID
		)

--TRIPOD: Summary công

	--TRIPOD
	EXEC sp_processSummaryAttendance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @ViewType = 0, @Payroll = 0

PRINT 'eof'
	--delete d from tblPendingImportAttend d
	--where exists(select 1 from #tblPendingImportAttend att where d.employeeID = att.EmployeeID and d.Date = att.Date)
	--or exists(select 1 from #tblHasTA_insert att where d.employeeID = att.EmployeeID and d.Date = att.attdate)
	--update tblParameter set Value = '0' where Code = 'StopRuning_NoneStopProc'
	--EXEC sp_ReCalculate_TAData @LoginID=3, @Fromdate='2025-08-01', @ToDate='2025-08-31', @EmployeeID_Pram='-1', @RunShiftDetector=1, @RunTA_Precess_Main=0
GO



IF OBJECT_ID('tempdb..#Paradise') IS NOT NULL DROP TABLE #Paradise

  create table #Paradise (
   [name] NVarChar(MAX) NULL 
 , [IsEncrypted] Bit NULL 
 , [type_desc] NVarChar(MAX) NULL 
 , [ss_ViewDependencyOBject] NVarChar(MAX) NULL 
)


 INSERT INTO #Paradise([name],[IsEncrypted],[type_desc],[ss_ViewDependencyOBject])
Select  N'Insurance_Payment_Status_List' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'sp_CheckLockSalByMonthAndYear' as [name],N'False' as [IsEncrypted],N'SQL_STORED_PROCEDURE' as [type_desc],NULL as [ss_ViewDependencyOBject] UNION ALL

Select  N'tblSal_Insurance' as [name],NULL as [IsEncrypted],N'USER_TABLE' as [type_desc],NULL as [ss_ViewDependencyOBject]
select * from #Paradise
GO

--#region tblDataSetting
IF OBJECT_ID('tempdb..#tblDataSetting') IS NOT NULL DROP TABLE #tblDataSetting
  create table #tblDataSetting (
   [TableName] NVarChar(MAX) NULL 
 , [ViewName] NVarChar(MAX) NULL 
 , [AllowAdd] Bit NULL 
 , [ReadOnlyColumns] NVarChar(MAX) NULL 
 , [ComboboxColumns] NVarChar(MAX) NULL 
 , [ColumnOrderBy] NVarChar(MAX) NULL 
 , [ColumnHide] NVarChar(MAX) NULL 
 , [ReadOnly] Bit NULL 
 , [TableEditorName] NVarChar(MAX) NULL 
 , [IsProcedure] Bit NULL 
 , [PaintColumns] NVarChar(MAX) NULL 
 , [FormatFontColumns] NVarChar(MAX) NULL 
 , [PaintRows] NVarChar(MAX) NULL 
 , [IsProcessForm] Bit NULL 
 , [IsShowLayout] Bit NULL 
 , [IsBatch] Bit NULL 
 , [LoadDataAfterShow] Bit NULL 
 , [GroupColumns] NVarChar(MAX) NULL 
 , [FixedColumns] NVarChar(MAX) NULL 
 , [ExportName] NVarChar(MAX) NULL 
 , [CheckLockAttStore] NVarChar(MAX) NULL 
 , [RptTemplate] NVarChar(MAX) NULL 
 , [spAction] NVarChar(MAX) NULL 
 , [DefaultValue] NVarChar(MAX) NULL 
 , [FilterColumn] NVarChar(MAX) NULL 
 , [IsEditForm] Bit NULL 
 , [ColumnEditSpecial] NVarChar(MAX) NULL 
 , [ColumnsFormatExtend] NVarChar(MAX) NULL 
 , [AllowDelete] Bit NULL 
 , [PaintCells] NVarChar(MAX) NULL 
 , [LayoutDataConfig] VarBinary(MAX) NULL 
 , [ColumnDataType] NVarChar(MAX) NULL 
 , [ProcBeforeSave] NVarChar(MAX) NULL 
 , [ProcAfterSave] NVarChar(MAX) NULL 
 , [IsLayoutParam] Bit NULL 
 , [ColumnSearch] NVarChar(MAX) NULL 
 , [AlwaysReloadColumn] Bit NULL 
 , [NotReloadAfterSave] Bit NULL 
 , [ColumnChangeEventProc] NVarChar(MAX) NULL 
 , [RowFontStyle] NVarChar(MAX) NULL 
 , [isWrapHeader] Bit NULL 
 , [ContextMenuIDs] NVarChar(MAX) NULL 
 , [ColumnNotLock] NVarChar(MAX) NULL 
 , [Import] NVarChar(MAX) NULL 
 , [ProcBeforeDelete] NVarChar(MAX) NULL 
 , [ProcAfterDelete] NVarChar(MAX) NULL 
 , [ConditionFormatting] VarBinary(MAX) NULL 
 , [ViewGridInShowLayout] Bit NULL 
 , [ShortcutsControl] NVarChar(MAX) NULL 
 , [LblMessage] NVarChar(MAX) NULL 
 , [MinWidthColumn] NVarChar(MAX) NULL 
 , [IsLayoutCommandButton] Bit NULL 
 , [LayoutDataConfigCrazy] VarBinary(MAX) NULL 
 , [NavigatorProcedure] NVarChar(MAX) NULL 
 , [ValidateRowConditions] NVarChar(MAX) NULL 
 , [ExecuteProcBeforeLoadData] NVarChar(MAX) NULL 
 , [LayoutDataConfigWeb] VarBinary(MAX) NULL 
 , [LayoutDataConfigMobile] VarBinary(MAX) NULL 
 , [GridBandConfig] NVarChar(MAX) NULL 
 , [ControlStateProcedure] NVarChar(MAX) NULL 
 , [ValidationProcedures] NVarChar(MAX) NULL 
 , [ReadonlyCellCondition] NVarChar(MAX) NULL 
 , [ComboboxColumn_BackupForTransfer] NVarChar(MAX) NULL 
 , [IsOpenSubForm] Bit NULL 
 , [Validation] NVarChar(MAX) NULL 
 , [ControlHiddenInShowLayout] NVarChar(MAX) NULL 
 , [IgnoreColumnOrder] Bit NULL 
 , [IgnoreLock] Bit NULL 
 , [ReadonlyCellCondition_Backup] NVarChar(MAX) NULL 
 , [SubDataSettingNames] NVarChar(MAX) NULL 
 , [IsViewReportForm] Bit NULL 
 , [ExportSeparateButton] Bit NULL 
 , [HashLayoutConfig] NVarChar(MAX) NULL 
 , [LayoutDataConfigFillter] VarBinary(MAX) NULL 
 , [LayoutParamConfig] VarBinary(MAX) NULL 
 , [OpenFormLink] NVarChar(MAX) NULL 
 , [SaveTableByBulk] NVarChar(MAX) NULL 
 , [IsNotPaintSaturday] Bit NULL 
 , [IsNotPaintSunday] Bit NULL 
 , [IsViewWeekName] Bit NULL 
 , [IgnoreCheckEECode] Bit NULL 
 , [ParadiseCommand] Int NULL 
 , [Labels] NVarChar(MAX) NULL 
 , [ColumnHideExport] NVarChar(MAX) NULL 
 , [ColumnWidthCalcData] Bit NULL 
 , [HideHeaderFilterButton] Bit NULL 
 , [HideColumnGrid] Bit NULL 
 , [TypeGrid] Int NULL 
 , [ProcBeforeAdd] NVarChar(MAX) NULL 
 , [ProcAfterAdd] NVarChar(MAX) NULL 
 , [ExecuteProcAfterLoadData] NVarChar(MAX) NULL 
 , [LayoutDataConfigColumnView] VarBinary(MAX) NULL 
 , [LayoutDataConfigCardView] VarBinary(MAX) NULL 
 , [HideFooter] Int NULL 
 , [IsFilterBox] Bit NULL 
 , [GetDefaultParamFromDB] Bit NULL 
 , [TaskTimeLine] Int NULL 
 , [HtmlCell] Int NULL 
 , [MinPageSizeGrid] Int NULL 
 , [ClickHereToAddNew] Int NULL 
 , [IgnoreQuestion] Bit NULL 
 , [FormLayoutJS] Int NULL 
 , [CheckBoxText] Int NULL 
 , [ColumnHideMobile] NVarChar(MAX) NULL 
 , [LayoutMobileLocalConfig] VarBinary(MAX) NULL 
 , [ViewMode] Int NULL 
 , [Mode] Int NULL 
 , [Template] NVarChar(MAX) NULL 
 , [NotResizeImage] Int NULL 
 , [DeleteOneRowReloadData] Int NULL 
 , [AutoHeightGrid] Bit NULL 
 , [ProcFileName] NVarChar(MAX) NULL 
 , [HeightImagePercentHeightFont] Float NULL 
 , [ColumnMinWidthPercent] NVarChar(MAX) NULL 
 , [GridViewAutoAddRow] Int NULL 
 , [GridViewNewItemRowPosition] Int NULL 
 , [LastColumnRemainingWidth] Int NULL 
 , [IsAutoSave] Bit NULL 
 , [VirtualColumn] NVarChar(MAX) NULL 
 , [GridTypeview] Int NULL 
 , [selectionMode] Int NULL 
 , [deleteMode] Int NULL 
 , [ClearDataBeforeLoadData] Int NULL 
 , [LockSort] Bit NULL 
 , [HightLightControlProc] NVarChar(MAX) NULL 
 , [ScriptInit0] NVarChar(MAX) NULL 
 , [ScriptInit1] NVarChar(MAX) NULL 
 , [ScriptInit2] NVarChar(MAX) NULL 
 , [ScriptInit3] NVarChar(MAX) NULL 
 , [ScriptInit4] NVarChar(MAX) NULL 
 , [ScriptInit5] NVarChar(MAX) NULL 
 , [ScriptInit6] NVarChar(MAX) NULL 
 , [ScriptInit7] NVarChar(MAX) NULL 
 , [ScriptInit8] NVarChar(MAX) NULL 
 , [ScriptInit9] NVarChar(MAX) NULL 
 , [FontSizeZoom0] Float NULL 
 , [FontSizeZoom1] Float NULL 
 , [FontSizeZoom2] Float NULL 
 , [FontSizeZoom3] Float NULL 
 , [FontSizeZoom4] Float NULL 
 , [FontSizeZoom5] Float NULL 
 , [FontSizeZoom6] Float NULL 
 , [FontSizeZoom7] Float NULL 
 , [FontSizeZoom8] Float NULL 
 , [FontSizeZoom9] Float NULL 
 , [NotBuildForm] Bit NULL 
 , [NotUseCancelButton] Bit NULL 
 , [GridUICompact] Float NULL 
 , [DisableFilterColumns] NVarChar(MAX) NULL 
 , [DisableFilterAll] Int NULL 
)

 INSERT INTO #tblDataSetting([TableName],[ViewName],[AllowAdd],[ReadOnlyColumns],[ComboboxColumns],[ColumnOrderBy],[ColumnHide],[ReadOnly],[TableEditorName],[IsProcedure],[PaintColumns],[FormatFontColumns],[PaintRows],[IsProcessForm],[IsShowLayout],[IsBatch],[LoadDataAfterShow],[GroupColumns],[FixedColumns],[ExportName],[CheckLockAttStore],[RptTemplate],[spAction],[DefaultValue],[FilterColumn],[IsEditForm],[ColumnEditSpecial],[ColumnsFormatExtend],[AllowDelete],[PaintCells],[LayoutDataConfig],[ColumnDataType],[ProcBeforeSave],[ProcAfterSave],[IsLayoutParam],[ColumnSearch],[AlwaysReloadColumn],[NotReloadAfterSave],[ColumnChangeEventProc],[RowFontStyle],[isWrapHeader],[ContextMenuIDs],[ColumnNotLock],[Import],[ProcBeforeDelete],[ProcAfterDelete],[ConditionFormatting],[ViewGridInShowLayout],[ShortcutsControl],[LblMessage],[MinWidthColumn],[IsLayoutCommandButton],[LayoutDataConfigCrazy],[NavigatorProcedure],[ValidateRowConditions],[ExecuteProcBeforeLoadData],[LayoutDataConfigWeb],[LayoutDataConfigMobile],[GridBandConfig],[ControlStateProcedure],[ValidationProcedures],[ReadonlyCellCondition],[ComboboxColumn_BackupForTransfer],[IsOpenSubForm],[Validation],[ControlHiddenInShowLayout],[IgnoreColumnOrder],[IgnoreLock],[ReadonlyCellCondition_Backup],[SubDataSettingNames],[IsViewReportForm],[ExportSeparateButton],[HashLayoutConfig],[LayoutDataConfigFillter],[LayoutParamConfig],[OpenFormLink],[SaveTableByBulk],[IsNotPaintSaturday],[IsNotPaintSunday],[IsViewWeekName],[IgnoreCheckEECode],[ParadiseCommand],[Labels],[ColumnHideExport],[ColumnWidthCalcData],[HideHeaderFilterButton],[HideColumnGrid],[TypeGrid],[ProcBeforeAdd],[ProcAfterAdd],[ExecuteProcAfterLoadData],[LayoutDataConfigColumnView],[LayoutDataConfigCardView],[HideFooter],[IsFilterBox],[GetDefaultParamFromDB],[TaskTimeLine],[HtmlCell],[MinPageSizeGrid],[ClickHereToAddNew],[IgnoreQuestion],[FormLayoutJS],[CheckBoxText],[ColumnHideMobile],[LayoutMobileLocalConfig],[ViewMode],[Mode],[Template],[NotResizeImage],[DeleteOneRowReloadData],[AutoHeightGrid],[ProcFileName],[HeightImagePercentHeightFont],[ColumnMinWidthPercent],[GridViewAutoAddRow],[GridViewNewItemRowPosition],[LastColumnRemainingWidth],[IsAutoSave],[VirtualColumn],[GridTypeview],[selectionMode],[deleteMode],[ClearDataBeforeLoadData],[LockSort],[HightLightControlProc],[ScriptInit0],[ScriptInit1],[ScriptInit2],[ScriptInit3],[ScriptInit4],[ScriptInit5],[ScriptInit6],[ScriptInit7],[ScriptInit8],[ScriptInit9],[FontSizeZoom0],[FontSizeZoom1],[FontSizeZoom2],[FontSizeZoom3],[FontSizeZoom4],[FontSizeZoom5],[FontSizeZoom6],[FontSizeZoom7],[FontSizeZoom8],[FontSizeZoom9],[NotBuildForm],[NotUseCancelButton],[GridUICompact],[DisableFilterColumns],[DisableFilterAll])
Select  N'EmpInsuranceMonthly_List' as [TableName],N'EmpInsuranceMonthly_List' as [ViewName],N'False' as [AllowAdd],N'EmployeeTotal,CompanyTotal,Total' as [ReadOnlyColumns],N'' as [ComboboxColumns],N'EmployeeID&10,FullName&11,SIIncome&12,UIIncome&13,InsPaymentStatus&14,EmployeeStatus&15,CompanySI&16,CompanyHI&17,CompanyUI&18,CompanyTotal&19,EmployeeSI&20,EmployeeHI&21,EmployeeUI&22,EmployeeTotal&23,InsTotal&24,Approval&25,Notes&26,' as [ColumnOrderBy],N'Month,Year,ChangedDate,INS_Retro_Amount_EE,CompanySM,INS_Retro_Amount_ER,isReadOnlyRow,dtftxxENGColumns' as [ColumnHide],N'False' as [ReadOnly],N'tblSal_Insurance' as [TableEditorName],N'True' as [IsProcedure],N'' as [PaintColumns],N'' as [FormatFontColumns],N'' as [PaintRows],N'False' as [IsProcessForm],N'False' as [IsShowLayout],N'False' as [IsBatch],N'True' as [LoadDataAfterShow],N'' as [GroupColumns],N'EmployeeID,FullName' as [FixedColumns],N'' as [ExportName],N'sp_CheckLockSalByMonthAndYear' as [CheckLockAttStore],N'' as [RptTemplate],N'' as [spAction],N'' as [DefaultValue],N'' as [FilterColumn],N'False' as [IsEditForm],N'' as [ColumnEditSpecial],N'' as [ColumnsFormatExtend],N'False' as [AllowDelete],N'' as [PaintCells],as [LayoutDataConfig],N'' as [ColumnDataType],N'' as [ProcBeforeSave],N'' as [ProcAfterSave],N'True' as [IsLayoutParam],N'' as [ColumnSearch],N'False' as [AlwaysReloadColumn],N'False' as [NotReloadAfterSave],N'' as [ColumnChangeEventProc],N'' as [RowFontStyle],N'False' as [isWrapHeader],N'' as [ContextMenuIDs],N'InsPaymentStatus' as [ColumnNotLock],N'' as [Import],N'' as [ProcBeforeDelete],N'' as [ProcAfterDelete],0x1F8B08000000000004007D8FB10AC24010447BC17F38D6564CAECF052BB1B032106D97B898C34BEED8EC45E2AF59F849FE82C1602188DD30CC1B669EF7477614C682D8A2B33762D51377D6B706F42A058521385BA1BC9DD2D215F2F94CA92CB00FC432A8161B32B0D8E1E0A394130B2AF9972A2A74B4C14A3C43BED6CB833D496DF4A8B664CFB5189D251FF267CFC67383B28F8E3A50B6BBD060403812A81E5D1C03E9B4204BBEBFE52FA791B64FEF000000 as [ConditionFormatting],N'True' as [ViewGridInShowLayout],N'' as [ShortcutsControl],N'' as [LblMessage],N'' as [MinWidthColumn],N'True' as [IsLayoutCommandButton],NULL as [LayoutDataConfigCrazy],N'' as [NavigatorProcedure],N'' as [ValidateRowConditions],N'' as [ExecuteProcBeforeLoadData],NULL as [LayoutDataConfigWeb],0xas [LayoutDataConfigMobile],N'' as [GridBandConfig],N'' as [ControlStateProcedure],N'' as [ValidationProcedures],N'' as [ReadonlyCellCondition],N'EmployeeID&Select EmployeeID,EmployeeID,FullName from tblEmployee|InsPaymentStatus&Insurance_Payment_Status_List' as [ComboboxColumn_BackupForTransfer],N'False' as [IsOpenSubForm],N'' as [Validation],N'ckb@CalFromSalCal,ckbAllApproval,txt@EmployeeID,ckb@CalculateRetro,btnFWAdd,btnFWDelete' as [ControlHiddenInShowLayout],N'False' as [IgnoreColumnOrder],N'False' as [IgnoreLock],N'' as [ReadonlyCellCondition_Backup],N'' as [SubDataSettingNames],N'False' as [IsViewReportForm],N'False' as [ExportSeparateButton],N'' as [HashLayoutConfig],NULL as [LayoutDataConfigFillter],NULL as [LayoutParamConfig],N'' as [OpenFormLink],N'' as [SaveTableByBulk],N'False' as [IsNotPaintSaturday],N'False' as [IsNotPaintSunday],N'False' as [IsViewWeekName],N'False' as [IgnoreCheckEECode],N'0' as [ParadiseCommand],N'' as [Labels],N'' as [ColumnHideExport],N'False' as [ColumnWidthCalcData],N'False' as [HideHeaderFilterButton],N'False' as [HideColumnGrid],N'0' as [TypeGrid],N'' as [ProcBeforeAdd],N'' as [ProcAfterAdd],N'' as [ExecuteProcAfterLoadData],NULL as [LayoutDataConfigColumnView],NULL as [LayoutDataConfigCardView],N'0' as [HideFooter],N'False' as [IsFilterBox],N'False' as [GetDefaultParamFromDB],N'0' as [TaskTimeLine],N'0' as [HtmlCell],N'0' as [MinPageSizeGrid],N'0' as [ClickHereToAddNew],N'False' as [IgnoreQuestion],N'2' as [FormLayoutJS],N'0' as [CheckBoxText],N'' as [ColumnHideMobile],NULL as [LayoutMobileLocalConfig],N'0' as [ViewMode],N'0' as [Mode],N'' as [Template],N'0' as [NotResizeImage],N'0' as [DeleteOneRowReloadData],N'False' as [AutoHeightGrid],N'' as [ProcFileName],N'0' as [HeightImagePercentHeightFont],N'' as [ColumnMinWidthPercent],N'0' as [GridViewAutoAddRow],N'0' as [GridViewNewItemRowPosition],N'0' as [LastColumnRemainingWidth],N'False' as [IsAutoSave],N'' as [VirtualColumn],N'0' as [GridTypeview],N'0' as [selectionMode],N'0' as [deleteMode],N'0' as [ClearDataBeforeLoadData],N'False' as [LockSort],N'' as [HightLightControlProc],N'' as [ScriptInit0],N'' as [ScriptInit1],N'' as [ScriptInit2],N'' as [ScriptInit3],N'' as [ScriptInit4],N'' as [ScriptInit5],N'' as [ScriptInit6],N'' as [ScriptInit7],N'' as [ScriptInit8],N'' as [ScriptInit9],N'0' as [FontSizeZoom0],N'0' as [FontSizeZoom1],N'0' as [FontSizeZoom2],N'0' as [FontSizeZoom3],N'0' as [FontSizeZoom4],N'0' as [FontSizeZoom5],N'0' as [FontSizeZoom6],N'0' as [FontSizeZoom7],N'0' as [FontSizeZoom8],N'0' as [FontSizeZoom9],N'False' as [NotBuildForm],N'False' as [NotUseCancelButton],N'0' as [GridUICompact],N'' as [DisableFilterColumns],N'0' as [DisableFilterAll]

EXEC sp_SaveData  @TableNameTmp = '#tblDataSetting' , @TableName = 'tblDataSetting' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblDataSetting') IS NOT NULL DROP TABLE #tblDataSetting
--#endregion _
GO

--#region tblCommonColumnComboboxSigned
IF OBJECT_ID('tempdb..#tblCommonColumnComboboxSigned') IS NOT NULL DROP TABLE #tblCommonColumnComboboxSigned
  create table #tblCommonColumnComboboxSigned (
   [ColumnName] NVarChar(MAX) NULL 
 , [TableName] NVarChar(MAX) NULL 
 , [Remark] NVarChar(MAX) NULL 
 , [UseRadioGroup] NVarChar(MAX) NULL 
 , [UseOtherColumnDefine] NVarChar(MAX) NULL 
 , [IsMultiCheckSpecial] Bit NULL 
 , [CheckEditList] Int NULL 
)

 INSERT INTO #tblCommonColumnComboboxSigned([ColumnName],[TableName],[Remark],[UseRadioGroup],[UseOtherColumnDefine],[IsMultiCheckSpecial],[CheckEditList])
Select  N'InsPaymentStatus' as [ColumnName],N'EmpInsuranceMonthly_List' as [TableName],N'' as [Remark],N'0' as [UseRadioGroup],N'' as [UseOtherColumnDefine],N'False' as [IsMultiCheckSpecial],N'0' as [CheckEditList]

EXEC sp_SaveData  @TableNameTmp = '#tblCommonColumnComboboxSigned' , @TableName = 'tblCommonColumnComboboxSigned' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblCommonColumnComboboxSigned') IS NOT NULL DROP TABLE #tblCommonColumnComboboxSigned
--#endregion _
GO

--#region tblBandGridConfig
IF OBJECT_ID('tempdb..#tblBandGridConfig') IS NOT NULL DROP TABLE #tblBandGridConfig
  create table #tblBandGridConfig (
   [TableName] NVarChar(MAX) NULL 
 , [BandName] NVarChar(MAX) NULL 
 , [ColumnList] NVarChar(MAX) NULL 
 , [ForeColor_Hex] NVarChar(MAX) NULL 
 , [BackColor_Hex] NVarChar(MAX) NULL 
)

 INSERT INTO #tblBandGridConfig([TableName],[BandName],[ColumnList],[ForeColor_Hex],[BackColor_Hex])
Select  N'EmpInsuranceMonthly_List' as [TableName],N'band_Cty' as [BandName],N'CompanySI,CompanyHI,CompanyUI,CompanyTotal' as [ColumnList],NULL as [ForeColor_Hex],N'#3b3ecc' as [BackColor_Hex] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'band_Income' as [BandName],N'SIIncome,UIIncome,InsPaymentStatus,EmployeeStatus' as [ColumnList],NULL as [ForeColor_Hex],N'#7ee685' as [BackColor_Hex] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'band_NV' as [BandName],N'EmployeeSI,EmployeeHI,EmployeeUI,EmployeeTotal' as [ColumnList],NULL as [ForeColor_Hex],N'#449e4a' as [BackColor_Hex] UNION ALL

Select  N'empinsurancemonthly_list' as [TableName],N'bandInner' as [BandName],N'InsTotal,Approval,Notes' as [ColumnList],NULL as [ForeColor_Hex],NULL as [BackColor_Hex]

EXEC sp_SaveData  @TableNameTmp = '#tblBandGridConfig' , @TableName = 'tblBandGridConfig' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblBandGridConfig') IS NOT NULL DROP TABLE #tblBandGridConfig
--#endregion _
GO

--#region tblCommonColumnCombobox
IF OBJECT_ID('tempdb..#tblCommonColumnCombobox') IS NOT NULL DROP TABLE #tblCommonColumnCombobox
  create table #tblCommonColumnCombobox (
   [ColumnName] NVarChar(MAX) NULL 
 , [Query] NVarChar(MAX) NULL 
 , [TableEditorName] NVarChar(MAX) NULL 
 , [IsMultiCheck] Bit NULL 
 , [IsDetailCombobox] Bit NULL 
 , [ReloadDataSourceOnReloadForm] Bit NULL 
 , [useAutoGenerateQuery] Bit NULL 
 , [DataOption] Int NULL 
 , [DataOptionPermanent] Bit NULL 
)

 INSERT INTO #tblCommonColumnCombobox([ColumnName],[Query],[TableEditorName],[IsMultiCheck],[IsDetailCombobox],[ReloadDataSourceOnReloadForm],[useAutoGenerateQuery],[DataOption],[DataOptionPermanent])
Select  N'InsPaymentStatus' as [ColumnName],N'Insurance_Payment_Status_List' as [Query],N'' as [TableEditorName],N'False' as [IsMultiCheck],N'False' as [IsDetailCombobox],N'False' as [ReloadDataSourceOnReloadForm],N'False' as [useAutoGenerateQuery],N'1' as [DataOption],N'False' as [DataOptionPermanent]

EXEC sp_SaveData  @TableNameTmp = '#tblCommonColumnCombobox' , @TableName = 'tblCommonColumnCombobox' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblCommonColumnCombobox') IS NOT NULL DROP TABLE #tblCommonColumnCombobox
--#endregion _
GO

--#region tblDataSettingLayout
IF OBJECT_ID('tempdb..#tblDataSettingLayout') IS NOT NULL DROP TABLE #tblDataSettingLayout
  create table #tblDataSettingLayout (
   [TableName] NVarChar(MAX) NULL 
 , [Name] NVarChar(MAX) NULL 
 , [ControlName] NVarChar(MAX) NULL 
 , [NamePa] NVarChar(MAX) NULL 
 , [TabbedGroupParentName] NVarChar(MAX) NULL 
 , [Type] NVarChar(MAX) NULL 
 , [Lx] Int NULL 
 , [Ly] Int NULL 
 , [Sx] Int NULL 
 , [Sy] Int NULL 
 , [ShowCaption] Int NULL 
 , [Padding] Int NULL 
 , [TextLocation] NVarChar(MAX) NULL 
 , [GroupBordersVisible] Int NULL 
 , [TypeLayout] NVarChar(MAX) NULL 
 , [Spacing] Int NULL 
 , [BackColor] NVarChar(MAX) NULL 
 , [ControlType] NVarChar(MAX) NULL 
 , [ColumnSpan] Int NULL 
 , [RowSpan] Int NULL 
 , [CaptionHorizontalAlign] NVarChar(MAX) NULL 
 , [CaptionVerticalAlign] NVarChar(MAX) NULL 
 , [WidthPercentage] Int NULL 
 , [FixMinSize] Bit NULL 
 , [AlignContent] NVarChar(MAX) NULL 
 , [BorderBottomColor] NVarChar(MAX) NULL 
 , [BorderBottomSize] NVarChar(MAX) NULL 
 , [BorderColor] NVarChar(MAX) NULL 
 , [BorderLeftColor] NVarChar(MAX) NULL 
 , [BorderLeftSize] NVarChar(MAX) NULL 
 , [BorderRightColor] NVarChar(MAX) NULL 
 , [BorderRightSize] NVarChar(MAX) NULL 
 , [BorderSize] NVarChar(MAX) NULL 
 , [BorderTopColor] NVarChar(MAX) NULL 
 , [BorderTopSize] NVarChar(MAX) NULL 
 , [BorderVisible] Bit NULL 
 , [ControlBackColor] NVarChar(MAX) NULL 
 , [ControlBorderBottomColor] NVarChar(MAX) NULL 
 , [ControlBorderBottomSize] NVarChar(MAX) NULL 
 , [ControlBorderColor] NVarChar(MAX) NULL 
 , [ControlBorderLeftColor] NVarChar(MAX) NULL 
 , [ControlBorderLeftSize] NVarChar(MAX) NULL 
 , [ControlBorderRightColor] NVarChar(MAX) NULL 
 , [ControlBorderRightSize] NVarChar(MAX) NULL 
 , [ControlBorderSize] NVarChar(MAX) NULL 
 , [ControlBorderTopColor] NVarChar(MAX) NULL 
 , [ControlBorderTopSize] NVarChar(MAX) NULL 
 , [ControlForeColor] NVarChar(MAX) NULL 
 , [ControlHorizontalAlign] NVarChar(MAX) NULL 
 , [ControlPadding] Int NULL 
 , [ControlVerticalAlign] NVarChar(MAX) NULL 
 , [FontSize] NVarChar(MAX) NULL 
 , [IconName] NVarChar(MAX) NULL 
 , [ItemBackColor] NVarChar(MAX) NULL 
 , [ItemBorderBottomColor] NVarChar(MAX) NULL 
 , [ItemBorderBottomSize] NVarChar(MAX) NULL 
 , [ItemBorderColor] NVarChar(MAX) NULL 
 , [ItemBorderLeftColor] NVarChar(MAX) NULL 
 , [ItemBorderLeftSize] NVarChar(MAX) NULL 
 , [ItemBorderRightColor] NVarChar(MAX) NULL 
 , [ItemBorderRightSize] NVarChar(MAX) NULL 
 , [ItemBorderSize] NVarChar(MAX) NULL 
 , [ItemBorderTopColor] NVarChar(MAX) NULL 
 , [ItemBorderTopSize] NVarChar(MAX) NULL 
 , [ItemForeColor] NVarChar(MAX) NULL 
 , [ItemPadding] Int NULL 
 , [MinGridPageSize] Int NULL 
 , [NotClientVisible] Bit NULL 
 , [NullTextMessageID] NVarChar(MAX) NULL 
 , [FullPageEmpty] Bit NULL 
 , [PaddingTop] Int NULL 
 , [PaddingLeft] Int NULL 
 , [PaddingBottom] Int NULL 
 , [PaddingRight] Int NULL 
 , [ControlCellPadding] Int NULL 
 , [MaxWidth] Float NULL 
 , [MinWidth] Float NULL 
 , [TabPageOrder] Int NULL 
 , [SelectedTabPageIndex] Int NULL 
 , [FixWidthClient] Int NULL 
 , [ErrorMessage] NVarChar(MAX) NULL 
 , [borderRadius] NVarChar(MAX) NULL 
 , [boxShadow] NVarChar(MAX) NULL 
 , [IsValidation] Bit NULL 
 , [HorizontalAlign] NVarChar(MAX) NULL 
 , [maxHeight] Int NULL 
 , [TextAlignMode] Int NULL 
 , [minHeight] Int NULL 
 , [HeightPercentageClient] Float NULL 
 , [ControlBorderRadius] NVarChar(MAX) NULL 
 , [ControlBoxShadow] NVarChar(MAX) NULL 
 , [ControlPaddingBottom] Float NULL 
 , [ControlPaddingLeft] Float NULL 
 , [ControlPaddingRight] Float NULL 
 , [ControlPaddingTop] Float NULL 
 , [ForeColor] NVarChar(MAX) NULL 
 , [CaptionWrap] Int NULL 
 , [LocationID] Int NULL 
 , [ContainerType] Int NULL 
 , [ControlNoBorder] Bit NULL 
 , [BackgroundImage] VarBinary(MAX) NULL 
 , [labelMode] Int NULL 
 , [selectionMode] Int NULL 
 , [deleteMode] Int NULL 
)

 INSERT INTO #tblDataSettingLayout([TableName],[Name],[ControlName],[NamePa],[TabbedGroupParentName],[Type],[Lx],[Ly],[Sx],[Sy],[ShowCaption],[Padding],[TextLocation],[GroupBordersVisible],[TypeLayout],[Spacing],[BackColor],[ControlType],[ColumnSpan],[RowSpan],[CaptionHorizontalAlign],[CaptionVerticalAlign],[WidthPercentage],[FixMinSize],[AlignContent],[BorderBottomColor],[BorderBottomSize],[BorderColor],[BorderLeftColor],[BorderLeftSize],[BorderRightColor],[BorderRightSize],[BorderSize],[BorderTopColor],[BorderTopSize],[BorderVisible],[ControlBackColor],[ControlBorderBottomColor],[ControlBorderBottomSize],[ControlBorderColor],[ControlBorderLeftColor],[ControlBorderLeftSize],[ControlBorderRightColor],[ControlBorderRightSize],[ControlBorderSize],[ControlBorderTopColor],[ControlBorderTopSize],[ControlForeColor],[ControlHorizontalAlign],[ControlPadding],[ControlVerticalAlign],[FontSize],[IconName],[ItemBackColor],[ItemBorderBottomColor],[ItemBorderBottomSize],[ItemBorderColor],[ItemBorderLeftColor],[ItemBorderLeftSize],[ItemBorderRightColor],[ItemBorderRightSize],[ItemBorderSize],[ItemBorderTopColor],[ItemBorderTopSize],[ItemForeColor],[ItemPadding],[MinGridPageSize],[NotClientVisible],[NullTextMessageID],[FullPageEmpty],[PaddingTop],[PaddingLeft],[PaddingBottom],[PaddingRight],[ControlCellPadding],[MaxWidth],[MinWidth],[TabPageOrder],[SelectedTabPageIndex],[FixWidthClient],[ErrorMessage],[borderRadius],[boxShadow],[IsValidation],[HorizontalAlign],[maxHeight],[TextAlignMode],[minHeight],[HeightPercentageClient],[ControlBorderRadius],[ControlBoxShadow],[ControlPaddingBottom],[ControlPaddingLeft],[ControlPaddingRight],[ControlPaddingTop],[ForeColor],[CaptionWrap],[LocationID],[ContainerType],[ControlNoBorder],[BackgroundImage],[labelMode],[selectionMode],[deleteMode])
Select  N'EmpInsuranceMonthly_List' as [TableName],N'btnexport' as [Name],N'btnexport' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'886' as [Ly],N'1577' as [Sx],N'40' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#336633' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'Export' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'btnfwreset' as [Name],N'btnfwreset' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'788' as [Lx],N'846' as [Ly],N'789' as [Sx],N'40' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'51' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#FFC000' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'refresh' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'btnfwsave' as [Name],N'btnfwsave' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'846' as [Ly],N'788' as [Sx],N'40' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'49' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#25205E' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'Save' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'lbl@month' as [Name],N'cbx@month' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'0' as [Ly],N'788' as [Sx],N'26' as [Sy],N'1' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'49' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'lbl@year' as [Name],N'cbx@year' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'788' as [Lx],N'0' as [Ly],N'789' as [Sx],N'26' as [Sy],N'1' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'51' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'lblfilter' as [Name],N'txtfilter' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'788' as [Lx],N'26' as [Ly],N'789' as [Sx],N'27' as [Sy],N'1' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'PopupContainerEdit' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'51' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'lblreload' as [Name],N'btnreload' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'26' as [Ly],N'788' as [Sx],N'27' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleButton' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'49' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#339933' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'lbltableeditor' as [Name],N'grdtableeditor' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'53' as [Ly],N'1577' as [Sx],N'793' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'default' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'GridControl' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'root' as [Name],N'' as [ControlName],N'' as [NamePa],N'' as [TabbedGroupParentName],N'g' as [Type],N'0' as [Lx],N'0' as [Ly],N'1577' as [Sx],N'926' as [Sy],N'0' as [ShowCaption],N'0' as [Padding],N'top' as [TextLocation],N'0' as [GroupBordersVisible],N'1' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],N'0' as [ColumnSpan],N'0' as [RowSpan],N'default' as [CaptionHorizontalAlign],N'default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'0' as [PaddingTop],N'0' as [PaddingLeft],N'0' as [PaddingBottom],N'0' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'0' as [TabPageOrder],N'0' as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'btnexport' as [Name],N'btnexport' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'1431' as [Lx],N'0' as [Ly],N'189' as [Sx],N'35' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'13' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#336633' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'Export' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'btnfwreset' as [Name],N'btnfwreset' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'476' as [Lx],N'902' as [Ly],N'183' as [Sx],N'35' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'11' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#FFC000' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'refresh' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'btnfwsave' as [Name],N'btnfwsave' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'659' as [Lx],N'902' as [Ly],N'215' as [Sx],N'35' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SimpleFWButton' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'13' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#25205E' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'Save' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'0' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'empinsurancemonthly_list' as [TableName],N'item2' as [Name],N'' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'' as [Type],N'874' as [Lx],N'902' as [Ly],N'746' as [Sx],N'35' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'47' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],NULL as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],NULL as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],NULL as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],N'0' as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'empinsurancemonthly_list' as [TableName],N'item3' as [Name],N'' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'' as [Type],N'0' as [Lx],N'902' as [Ly],N'476' as [Sx],N'35' as [Sy],N'0' as [ShowCaption],N'2' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'29' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],NULL as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],NULL as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],NULL as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'2' as [PaddingTop],N'2' as [PaddingLeft],N'2' as [PaddingBottom],N'2' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],N'0' as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'lbl@month' as [Name],N'cbx@month' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'194' as [Lx],N'0' as [Ly],N'211' as [Sx],N'35' as [Sy],N'1' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'13' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'1' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'empinsurancemonthly_list' as [TableName],N'lbl@optionview' as [Name],N'cbx@optionview' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'586' as [Lx],N'0' as [Ly],N'277' as [Sx],N'35' as [Sy],N'1' as [ShowCaption],N'1' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'17' as [WidthPercentage],NULL as [FixMinSize],NULL as [AlignContent],NULL as [BorderBottomColor],NULL as [BorderBottomSize],NULL as [BorderColor],NULL as [BorderLeftColor],NULL as [BorderLeftSize],NULL as [BorderRightColor],NULL as [BorderRightSize],NULL as [BorderSize],NULL as [BorderTopColor],NULL as [BorderTopSize],NULL as [BorderVisible],NULL as [ControlBackColor],NULL as [ControlBorderBottomColor],NULL as [ControlBorderBottomSize],NULL as [ControlBorderColor],NULL as [ControlBorderLeftColor],NULL as [ControlBorderLeftSize],NULL as [ControlBorderRightColor],NULL as [ControlBorderRightSize],NULL as [ControlBorderSize],NULL as [ControlBorderTopColor],NULL as [ControlBorderTopSize],NULL as [ControlForeColor],NULL as [ControlHorizontalAlign],NULL as [ControlPadding],NULL as [ControlVerticalAlign],NULL as [FontSize],NULL as [IconName],NULL as [ItemBackColor],NULL as [ItemBorderBottomColor],NULL as [ItemBorderBottomSize],NULL as [ItemBorderColor],NULL as [ItemBorderLeftColor],NULL as [ItemBorderLeftSize],NULL as [ItemBorderRightColor],NULL as [ItemBorderRightSize],NULL as [ItemBorderSize],NULL as [ItemBorderTopColor],NULL as [ItemBorderTopSize],NULL as [ItemForeColor],NULL as [ItemPadding],NULL as [MinGridPageSize],N'False' as [NotClientVisible],NULL as [NullTextMessageID],NULL as [FullPageEmpty],N'1' as [PaddingTop],N'1' as [PaddingLeft],N'1' as [PaddingBottom],N'1' as [PaddingRight],NULL as [ControlCellPadding],NULL as [MaxWidth],NULL as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],NULL as [FixWidthClient],NULL as [ErrorMessage],NULL as [borderRadius],NULL as [boxShadow],NULL as [IsValidation],NULL as [HorizontalAlign],NULL as [maxHeight],N'0' as [TextAlignMode],NULL as [minHeight],NULL as [HeightPercentageClient],NULL as [ControlBorderRadius],NULL as [ControlBoxShadow],NULL as [ControlPaddingBottom],NULL as [ControlPaddingLeft],NULL as [ControlPaddingRight],NULL as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],NULL as [LocationID],NULL as [ContainerType],NULL as [ControlNoBorder],NULL as [BackgroundImage],NULL as [labelMode],NULL as [selectionMode],NULL as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'lbl@year' as [Name],N'cbx@year' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'0' as [Ly],N'194' as [Sx],N'35' as [Sy],N'1' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'SearchLookUpEdit_VTS' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'11' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'1' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'lblfilter' as [Name],N'txtfilter' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'863' as [Lx],N'0' as [Ly],N'568' as [Sx],N'35' as [Sy],N'1' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'PopupContainerEdit' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'35' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'1' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'lblreload' as [Name],N'btnreload' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'405' as [Lx],N'0' as [Ly],N'181' as [Sx],N'35' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'ParadiseSimpleButtonBase' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'11' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'#339933' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'#FFFFFF' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'1' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'lbltableeditor' as [Name],N'grdtableeditor' as [ControlName],N'root' as [NamePa],N'' as [TabbedGroupParentName],N'i' as [Type],N'0' as [Lx],N'35' as [Ly],N'1620' as [Sx],N'867' as [Sy],N'0' as [ShowCaption],N'3' as [Padding],N'Default' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'GridControl' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'3' as [PaddingTop],N'3' as [PaddingLeft],N'3' as [PaddingBottom],N'3' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],NULL as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],N'1' as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode] UNION ALL

Select  N'EmpInsuranceMonthly_List' as [TableName],N'root' as [Name],N'' as [ControlName],N'' as [NamePa],N'' as [TabbedGroupParentName],N'g' as [Type],N'0' as [Lx],N'0' as [Ly],N'1620' as [Sx],N'937' as [Sy],N'0' as [ShowCaption],N'0' as [Padding],N'Top' as [TextLocation],N'0' as [GroupBordersVisible],N'6' as [TypeLayout],N'0' as [Spacing],N'' as [BackColor],N'' as [ControlType],NULL as [ColumnSpan],NULL as [RowSpan],N'Default' as [CaptionHorizontalAlign],N'Default' as [CaptionVerticalAlign],N'100' as [WidthPercentage],N'False' as [FixMinSize],N'' as [AlignContent],N'' as [BorderBottomColor],N'' as [BorderBottomSize],N'' as [BorderColor],N'' as [BorderLeftColor],N'' as [BorderLeftSize],N'' as [BorderRightColor],N'' as [BorderRightSize],N'' as [BorderSize],N'' as [BorderTopColor],N'' as [BorderTopSize],N'False' as [BorderVisible],N'' as [ControlBackColor],N'' as [ControlBorderBottomColor],N'' as [ControlBorderBottomSize],N'' as [ControlBorderColor],N'' as [ControlBorderLeftColor],N'' as [ControlBorderLeftSize],N'' as [ControlBorderRightColor],N'' as [ControlBorderRightSize],N'' as [ControlBorderSize],N'' as [ControlBorderTopColor],N'' as [ControlBorderTopSize],N'' as [ControlForeColor],N'' as [ControlHorizontalAlign],N'0' as [ControlPadding],N'' as [ControlVerticalAlign],N'' as [FontSize],N'' as [IconName],N'' as [ItemBackColor],N'' as [ItemBorderBottomColor],N'' as [ItemBorderBottomSize],N'' as [ItemBorderColor],N'' as [ItemBorderLeftColor],N'' as [ItemBorderLeftSize],N'' as [ItemBorderRightColor],N'' as [ItemBorderRightSize],N'' as [ItemBorderSize],N'' as [ItemBorderTopColor],N'' as [ItemBorderTopSize],N'' as [ItemForeColor],N'0' as [ItemPadding],N'0' as [MinGridPageSize],N'False' as [NotClientVisible],N'' as [NullTextMessageID],N'False' as [FullPageEmpty],N'0' as [PaddingTop],N'0' as [PaddingLeft],N'0' as [PaddingBottom],N'0' as [PaddingRight],N'0' as [ControlCellPadding],N'0' as [MaxWidth],N'0' as [MinWidth],N'-1' as [TabPageOrder],NULL as [SelectedTabPageIndex],N'0' as [FixWidthClient],N'' as [ErrorMessage],N'' as [borderRadius],N'' as [boxShadow],N'False' as [IsValidation],N'' as [HorizontalAlign],N'0' as [maxHeight],NULL as [TextAlignMode],N'0' as [minHeight],N'0' as [HeightPercentageClient],N'' as [ControlBorderRadius],N'' as [ControlBoxShadow],N'0' as [ControlPaddingBottom],N'0' as [ControlPaddingLeft],N'0' as [ControlPaddingRight],N'0' as [ControlPaddingTop],N'' as [ForeColor],N'0' as [CaptionWrap],N'0' as [LocationID],N'0' as [ContainerType],N'False' as [ControlNoBorder],NULL as [BackgroundImage],N'0' as [labelMode],N'0' as [selectionMode],N'0' as [deleteMode]

DECLARE @sql VARCHAR(MAX) = 'TableName'+char(10)+'TypeLayout'
EXEC sp_SaveData  @TableNameTmp = '#tblDataSettingLayout' , @TableName = 'tblDataSettingLayout' , @Command = 'DeleteNot',@ColumnDeleteNot=@sql , @IsDropTableTmp =0,@IsPrint=0
EXEC sp_SaveData  @TableNameTmp = '#tblDataSettingLayout' , @TableName = 'tblDataSettingLayout' , @Command = 'insert,update', @IsDropTableTmp =0,@IsPrint=0
IF OBJECT_ID('tempdb..#tblDataSettingLayout') IS NOT NULL DROP TABLE #tblDataSettingLayout
--#endregion _
GO

--#region tblMD_Message
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message 
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
  create table #tblMD_Message (
   [MessageID] NVarChar(MAX) NULL 
 , [Language] NVarChar(MAX) NULL 
 , [Content] NVarChar(MAX) NULL 
 , [Frequency] BigInt NULL 
 , [IgnorePending] Bit NULL 
)

 INSERT INTO #tblMD_Message([MessageID],[Language],[Content],[Frequency],[IgnorePending])
Select  N'EmpInsuranceMonthly_List.Approval' as [MessageID],N'CN' as [Language],N'用戶更改的數據' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeTotal' as [MessageID],N'CN' as [Language],N'普通保险公司' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.InsPaymentStatus' as [MessageID],N'CN' as [Language],N'狀態' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SIIncome' as [MessageID],N'CN' as [Language],N'社会保险支付的工资' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Approval' as [MessageID],N'EN' as [Language],N'User changed data' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.CompanyHI' as [MessageID],N'EN' as [Language],N'Comp HI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.CompanySI' as [MessageID],N'EN' as [Language],N'Comp SI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.CompanyTotal' as [MessageID],N'EN' as [Language],N'Total company' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.CompanyUI' as [MessageID],N'EN' as [Language],N'Comp UI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeHI' as [MessageID],N'EN' as [Language],N'Emp HI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeSI' as [MessageID],N'EN' as [Language],N'Emp SI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeTotal' as [MessageID],N'EN' as [Language],N'Total Employee' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeUI' as [MessageID],N'EN' as [Language],N'Emp UI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.InsPaymentStatus' as [MessageID],N'EN' as [Language],N'Insurance payment Status' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.InsTotal' as [MessageID],N'EN' as [Language],N'Total cost' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Root' as [MessageID],N'EN' as [Language],N'Root' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SIIncome' as [MessageID],N'EN' as [Language],N'Salary paid for social insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.UIIncome' as [MessageID],N'EN' as [Language],N'UI Income' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Approval' as [MessageID],N'VN' as [Language],N'Có điều chỉnh' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.cbx@OptionView' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.CompanyHI' as [MessageID],N'VN' as [Language],N'Bảo hiểm y tế' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.CompanySI' as [MessageID],N'VN' as [Language],N'Bảo hiểm xã hội' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.CompanyTotal' as [MessageID],N'VN' as [Language],N'Tổng cộng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.CompanyUI' as [MessageID],N'VN' as [Language],N'Bảo hiểm thất nghiệp' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.EmployeeHI' as [MessageID],N'VN' as [Language],N'Bảo hiểm y tế' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.EmployeeSI' as [MessageID],N'VN' as [Language],N'Bảo hiểm xã hội' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeTotal' as [MessageID],N'VN' as [Language],N'Tổng cộng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.EmployeeUI' as [MessageID],N'VN' as [Language],N'Bảo hiểm thất nghiệp' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.InsPaymentStatus' as [MessageID],N'VN' as [Language],N'Trạng thái
tham gia bảo hiểm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.InsTotal' as [MessageID],N'VN' as [Language],N'Tổng toàn bộ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.item2' as [MessageID],N'VN' as [Language],N'item2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.item3' as [MessageID],N'VN' as [Language],N'item3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.lbl@optionview' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SIIncome' as [MessageID],N'VN' as [Language],N'Lương BHXH,BHYT' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.UIIncome' as [MessageID],N'VN' as [Language],N'Lương BHTN' as [Content],NULL as [Frequency],NULL as [IgnorePending]
EXEC sp_SaveData  @TableNameTmp = '#tblMD_Message' , @TableName = 'tblMD_Message' , @Command = 'insert,update' , @IsDropTableTmp =0,@IsPrint=0IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
--#endregion _
GO

--#region tblMD_Message
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message 
IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
  create table #tblMD_Message (
   [MessageID] NVarChar(MAX) NULL 
 , [Language] NVarChar(MAX) NULL 
 , [Content] NVarChar(MAX) NULL 
 , [Frequency] BigInt NULL 
 , [IgnorePending] Bit NULL 
)

 INSERT INTO #tblMD_Message([MessageID],[Language],[Content],[Frequency],[IgnorePending])
Select  N'10' as [MessageID],N'EN' as [Language],N'Regional(area) allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'10' as [MessageID],N'VN' as [Language],N'Regional (area) allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'10.vldt' as [MessageID],N'EN' as [Language],N'10' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'10.vldt' as [MessageID],N'KR' as [Language],N'10' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'10.vldt' as [MessageID],N'VN' as [Language],N'10' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'11' as [MessageID],N'EN' as [Language],N'Incentive allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'11' as [MessageID],N'VN' as [Language],N'Incentive allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'11.vldt' as [MessageID],N'EN' as [Language],N'11' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'11.vldt' as [MessageID],N'KR' as [Language],N'11' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'11.vldt' as [MessageID],N'VN' as [Language],N'11' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'12' as [MessageID],N'EN' as [Language],N'Key process allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'12' as [MessageID],N'VN' as [Language],N'Key process allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'12.vldt' as [MessageID],N'EN' as [Language],N'12' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'12.vldt' as [MessageID],N'KR' as [Language],N'12' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'12.vldt' as [MessageID],N'VN' as [Language],N'12' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'13' as [MessageID],N'EN' as [Language],N'Bonus 6 month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'13' as [MessageID],N'VN' as [Language],N'Bonus 6 month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'13.vldt' as [MessageID],N'EN' as [Language],N'13' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'13.vldt' as [MessageID],N'KR' as [Language],N'13' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'13.vldt' as [MessageID],N'VN' as [Language],N'13' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'14' as [MessageID],N'EN' as [Language],N'Performance & Responsibility' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'14' as [MessageID],N'VN' as [Language],N'Performance & Responsibility' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'14.vldt' as [MessageID],N'EN' as [Language],N'14' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'14.vldt' as [MessageID],N'KR' as [Language],N'14' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'14.vldt' as [MessageID],N'VN' as [Language],N'14' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'15' as [MessageID],N'EN' as [Language],N'Bonus 6 month full attendance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'15' as [MessageID],N'VN' as [Language],N'Bonus 6 month full attendance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'15.vldt' as [MessageID],N'EN' as [Language],N'15' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'15.vldt' as [MessageID],N'KR' as [Language],N'15' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'15.vldt' as [MessageID],N'VN' as [Language],N'15' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16' as [MessageID],N'EN' as [Language],N'[Foreign] Meal allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16' as [MessageID],N'VN' as [Language],N'[Foreign] Meal allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16.vldt' as [MessageID],N'EN' as [Language],N'16' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16.vldt' as [MessageID],N'KR' as [Language],N'16' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'16.vldt' as [MessageID],N'VN' as [Language],N'16' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17' as [MessageID],N'EN' as [Language],N'[Foreign] House allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17' as [MessageID],N'VN' as [Language],N'[Foreign] House allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17.vldt' as [MessageID],N'EN' as [Language],N'17' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17.vldt' as [MessageID],N'KR' as [Language],N'17' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'17.vldt' as [MessageID],N'VN' as [Language],N'17' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18' as [MessageID],N'CN' as [Language],N'十八' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18' as [MessageID],N'EN' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18' as [MessageID],N'KR' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18' as [MessageID],N'VN' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18.vldt' as [MessageID],N'EN' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18.vldt' as [MessageID],N'KR' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'18.vldt' as [MessageID],N'VN' as [Language],N'18' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19' as [MessageID],N'CN' as [Language],N'十九' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19' as [MessageID],N'EN' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19' as [MessageID],N'KR' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19' as [MessageID],N'VN' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19.vldt' as [MessageID],N'EN' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19.vldt' as [MessageID],N'KR' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'19.vldt' as [MessageID],N'VN' as [Language],N'19' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20' as [MessageID],N'CN' as [Language],N'二十' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20' as [MessageID],N'EN' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20' as [MessageID],N'KR' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20' as [MessageID],N'VN' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20.vldt' as [MessageID],N'EN' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20.vldt' as [MessageID],N'KR' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'20.vldt' as [MessageID],N'VN' as [Language],N'20' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21' as [MessageID],N'CN' as [Language],N'二十一' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21' as [MessageID],N'EN' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21' as [MessageID],N'KR' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21' as [MessageID],N'VN' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21.vldt' as [MessageID],N'EN' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21.vldt' as [MessageID],N'KR' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'21.vldt' as [MessageID],N'VN' as [Language],N'21' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22' as [MessageID],N'CN' as [Language],N'二十二' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22' as [MessageID],N'EN' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22' as [MessageID],N'KR' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22' as [MessageID],N'VN' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22.vldt' as [MessageID],N'EN' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22.vldt' as [MessageID],N'KR' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'22.vldt' as [MessageID],N'VN' as [Language],N'22' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23' as [MessageID],N'CN' as [Language],N'二十三' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23' as [MessageID],N'EN' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23' as [MessageID],N'KR' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23' as [MessageID],N'VN' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23.vldt' as [MessageID],N'EN' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23.vldt' as [MessageID],N'KR' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'23.vldt' as [MessageID],N'VN' as [Language],N'23' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24' as [MessageID],N'CN' as [Language],N'二十四' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24' as [MessageID],N'EN' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24' as [MessageID],N'KR' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24' as [MessageID],N'VN' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24.vldt' as [MessageID],N'EN' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24.vldt' as [MessageID],N'KR' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'24.vldt' as [MessageID],N'VN' as [Language],N'24' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25' as [MessageID],N'CN' as [Language],N'二十五' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25' as [MessageID],N'EN' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25' as [MessageID],N'KR' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25' as [MessageID],N'VN' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25.vldt' as [MessageID],N'EN' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25.vldt' as [MessageID],N'KR' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'25.vldt' as [MessageID],N'VN' as [Language],N'25' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26' as [MessageID],N'CN' as [Language],N'二十六' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26' as [MessageID],N'EN' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26' as [MessageID],N'KR' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26' as [MessageID],N'VN' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26.vldt' as [MessageID],N'EN' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26.vldt' as [MessageID],N'KR' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'26.vldt' as [MessageID],N'VN' as [Language],N'26' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Approval' as [MessageID],N'CN' as [Language],N'批准' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Approval' as [MessageID],N'EN' as [Language],N'Approved' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Approval' as [MessageID],N'VN' as [Language],N'Duyệt' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'CN' as [Language],N'导出到Excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'EN' as [Language],N'Export to excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'JP' as [Language],N'リセット' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'KO' as [Language],N'엑셀로 내보내기' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'KR' as [Language],N'Export to excel' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnExport' as [MessageID],N'VN' as [Language],N'Xuất excel' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'CN' as [Language],N'重做' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'EN' as [Language],N'Reset' as [Content],N'34' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'JP' as [Language],N'リセット' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'KO' as [Language],N'재실행' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'KR' as [Language],N'Reset' as [Content],N'34' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWReset' as [MessageID],N'VN' as [Language],N'Làm lại' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'CN' as [Language],N'保存数据' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'EN' as [Language],N'Save' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'JP' as [Language],N'保存' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'KO' as [Language],N'저장' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'BtnfwSave' as [MessageID],N'KR' as [Language],N'저장' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnFWSave' as [MessageID],N'VN' as [Language],N'Lưu' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'CN' as [Language],N'重新載入資料' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'EN' as [Language],N'Refresh' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'KO' as [Language],N'새로 고침' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'BtnReload' as [MessageID],N'KR' as [Language],N'새로 만들기' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'btnReload' as [MessageID],N'VN' as [Language],N'Làm Mới' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'CN' as [Language],N'月份' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'KO' as [Language],N'달' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@OptionView' as [MessageID],N'EN' as [Language],N'Option' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@OptionView' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'CN' as [Language],N'年' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'KO' as [Language],N'년' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'cbx@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanyHI' as [MessageID],N'CN' as [Language],N'公司醫保' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanyHI' as [MessageID],N'EN' as [Language],N'Company health insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanyHI' as [MessageID],N'VN' as [Language],N'BHYT Cty' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanySI' as [MessageID],N'CN' as [Language],N'公司社保' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanySI' as [MessageID],N'EN' as [Language],N'Company social insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanySI' as [MessageID],N'VN' as [Language],N'BHXH Cty' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanyTotal' as [MessageID],N'CN' as [Language],N'普通保险公司' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanyTotal' as [MessageID],N'EN' as [Language],N'Total Company Insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanyTotal' as [MessageID],N'VN' as [Language],N'Tổng BH Cty' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanyUI' as [MessageID],N'CN' as [Language],N'公司失業保' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanyUI' as [MessageID],N'EN' as [Language],N'Unemployment insurance company' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'CompanyUI' as [MessageID],N'VN' as [Language],N'BH thất nghiệp Cty' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Approval' as [MessageID],N'CN' as [Language],N'用戶更改的數據' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Approval' as [MessageID],N'EN' as [Language],N'User changed data' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Approval' as [MessageID],N'VN' as [Language],N'Có điều chỉnh' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.band_Income' as [MessageID],N'EN' as [Language],N'Income salary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.band_Income' as [MessageID],N'VN' as [Language],N'Mức đóng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.cbx@OptionView' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.ckbAllApproval' as [MessageID],N'CN' as [Language],N'选择浏览' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.ckbAllApproval' as [MessageID],N'EN' as [Language],N'Select browse' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.ckbAllApproval' as [MessageID],N'VN' as [Language],N'Chọn duyệt' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.CompanyHI' as [MessageID],N'EN' as [Language],N'Comp HI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.CompanyHI' as [MessageID],N'VN' as [Language],N'Bảo hiểm y tế' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.CompanyPaid' as [MessageID],N'CN' as [Language],N'公司关闭了所有' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.CompanyPaid' as [MessageID],N'EN' as [Language],N'Company closed all' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.CompanyPaid' as [MessageID],N'VN' as [Language],N'Cty đóng hết' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.CompanySI' as [MessageID],N'EN' as [Language],N'Comp SI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.CompanySI' as [MessageID],N'VN' as [Language],N'Bảo hiểm xã hội' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.CompanySM' as [MessageID],N'VN' as [Language],N'Ốm đau thai sản' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.CompanyTotal' as [MessageID],N'EN' as [Language],N'Total company' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.CompanyTotal' as [MessageID],N'VN' as [Language],N'Tổng cộng' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.CompanyUI' as [MessageID],N'EN' as [Language],N'Comp UI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.CompanyUI' as [MessageID],N'VN' as [Language],N'Bảo hiểm thất nghiệp' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.DepartmentName' as [MessageID],N'CN' as [Language],N'单位部门' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.DepartmentName' as [MessageID],N'EN' as [Language],N'單位 Parts' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.DepartmentName' as [MessageID],N'VN' as [Language],N'單位  Bộ phận' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.DoubleThisMonth' as [MessageID],N'EN' as [Language],N'Double this month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeHI' as [MessageID],N'EN' as [Language],N'Emp HI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.EmployeeHI' as [MessageID],N'VN' as [Language],N'Bảo hiểm y tế' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeSI' as [MessageID],N'EN' as [Language],N'Emp SI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.EmployeeSI' as [MessageID],N'VN' as [Language],N'Bảo hiểm xã hội' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeTotal' as [MessageID],N'CN' as [Language],N'普通保险公司' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeTotal' as [MessageID],N'EN' as [Language],N'Total Employee' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeTotal' as [MessageID],N'VN' as [Language],N'Tổng cộng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.EmployeeUI' as [MessageID],N'EN' as [Language],N'Emp UI' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.EmployeeUI' as [MessageID],N'VN' as [Language],N'Bảo hiểm thất nghiệp' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Gender' as [MessageID],N'EN' as [Language],N'Female' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Gender' as [MessageID],N'VN' as [Language],N'Nữ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.HIIncome' as [MessageID],N'EN' as [Language],N'HI Income' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.InsPaymentStatus' as [MessageID],N'CN' as [Language],N'狀態' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.InsPaymentStatus' as [MessageID],N'EN' as [Language],N'Insurance payment Status' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.InsPaymentStatus' as [MessageID],N'VN' as [Language],N'Trạng thái
tham gia bảo hiểm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.InsTotal' as [MessageID],N'EN' as [Language],N'Total cost' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.InsTotal' as [MessageID],N'VN' as [Language],N'Tổng toàn bộ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.item0' as [MessageID],N'CN' as [Language],N'用户指南，用户指南' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.item0' as [MessageID],N'EN' as [Language],N'Doi la la;m a nghen, English' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.item0' as [MessageID],N'VN' as [Language],N'item0' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.item1' as [MessageID],N'VN' as [Language],N'item1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.item2' as [MessageID],N'VN' as [Language],N'item2' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.item3' as [MessageID],N'VN' as [Language],N'item3' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.lbl@optionview' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.lblAllApproval' as [MessageID],N'CN' as [Language],N'选择浏览' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.lblAllApproval' as [MessageID],N'EN' as [Language],N'Select browse' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.lblAllApproval' as [MessageID],N'VN' as [Language],N'Chọn duyệt' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.lblAllCompanyPaid' as [MessageID],N'CN' as [Language],N'公司全额付款' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.lblAllCompanyPaid' as [MessageID],N'EN' as [Language],N'The company pays in full' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.lblAllCompanyPaid' as [MessageID],N'VN' as [Language],N'Công ty trả toàn bộ ' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.lblMonth' as [MessageID],N'EN' as [Language],N'Tháng (*)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.lblyear' as [MessageID],N'CN' as [Language],N'年份：（*）' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.lblyear' as [MessageID],N'EN' as [Language],N'Year: (*)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.lblyear' as [MessageID],N'VN' as [Language],N'Năm: (*)' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.OldDepartmentPay' as [MessageID],N'EN' as [Language],N'Old department pay' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.POS_AL' as [MessageID],N'CN' as [Language],N'位置' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.POS_AL' as [MessageID],N'EN' as [Language],N'Position Allowance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.POS_AL' as [MessageID],N'VN' as [Language],N'Chức danh' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Root' as [MessageID],N'EN' as [Language],N'Root' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Salary' as [MessageID],N'CN' as [Language],N'基本工资基本薪资' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Salary' as [MessageID],N'EN' as [Language],N'Basic salary 基本 薪資' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.Salary' as [MessageID],N'VN' as [Language],N'Lương cơ bản  基本薪資' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SIIncome' as [MessageID],N'CN' as [Language],N'社会保险支付的工资' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SIIncome' as [MessageID],N'EN' as [Language],N'Salary paid for social insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SIIncome' as [MessageID],N'VN' as [Language],N'Lương BHXH,BHYT' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SIIncome_Old' as [MessageID],N'CN' as [Language],N'本薪' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SIIncome_Old' as [MessageID],N'EN' as [Language],N'本薪 Old basic salary' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SIIncome_Old' as [MessageID],N'VN' as [Language],N'本薪  Lương căn bản cũ' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SocialNo' as [MessageID],N'CN' as [Language],N'社会保险书数' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SocialNo' as [MessageID],N'EN' as [Language],N'Social insurance book number' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SocialNo' as [MessageID],N'VN' as [Language],N'Số sổ BHXH' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SPEC_AL' as [MessageID],N'CN' as [Language],N'专用电脑' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SPEC_AL' as [MessageID],N'EN' as [Language],N'Special PC' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.SPEC_AL' as [MessageID],N'VN' as [Language],N'PC đặc biệt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.t' as [MessageID],N'EN' as [Language],N'Root' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.TableEditor' as [MessageID],N'EN' as [Language],N'TableEditor' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.TotalHI' as [MessageID],N'CN' as [Language],N'全面健康保险' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.TotalHI' as [MessageID],N'EN' as [Language],N'Total Health Insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.TotalHI' as [MessageID],N'VN' as [Language],N'Tổng BHYT' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.TotalSI' as [MessageID],N'CN' as [Language],N'一般社会保险' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.TotalSI' as [MessageID],N'EN' as [Language],N'Total social insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.TotalSI' as [MessageID],N'VN' as [Language],N'Tổng BHXH' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.TotalUI' as [MessageID],N'CN' as [Language],N'失业保险总额' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.TotalUI' as [MessageID],N'EN' as [Language],N'Total unemployment insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.TotalUI' as [MessageID],N'VN' as [Language],N'Tổng BHTN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.UIIncome' as [MessageID],N'EN' as [Language],N'UI Income' as [Content],N'8' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'empinsurancemonthly_list.UIIncome' as [MessageID],N'VN' as [Language],N'Lương BHTN' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.UnionFeeComp' as [MessageID],N'EN' as [Language],N'Company Trade Union' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.UnionFeeEmp' as [MessageID],N'EN' as [Language],N'Employee Trade Union' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.WORK_AL' as [MessageID],N'CN' as [Language],N'工作' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.WORK_AL' as [MessageID],N'EN' as [Language],N'Work 工作' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmpInsuranceMonthly_List.WORK_AL' as [MessageID],N'VN' as [Language],N'Công việc  工作' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeHI' as [MessageID],N'CN' as [Language],N'員工醫保' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeHI' as [MessageID],N'EN' as [Language],N'Health insurance for employees' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeHI' as [MessageID],N'VN' as [Language],N'BHYT NV' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'CN' as [Language],N'员工编号' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'EN' as [Language],N'Employee ID' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID' as [MessageID],N'JP' as [Language],N'従業員コード' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'KO' as [Language],N'직원 코드' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID' as [MessageID],N'KR' as [Language],N'사원 번호' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid' as [MessageID],N'VN' as [Language],N'Mã nhân viên' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid.vldt' as [MessageID],N'EN' as [Language],N'Employee code' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID.vldt' as [MessageID],N'JP' as [Language],N'従業員コード' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeID.vldt' as [MessageID],N'KR' as [Language],N'사원 번호' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'employeeid.vldt' as [MessageID],N'VN' as [Language],N'Mã nhân viên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeSI' as [MessageID],N'CN' as [Language],N'員工社保' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeSI' as [MessageID],N'EN' as [Language],N'Social insurance of NV' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeSI' as [MessageID],N'VN' as [Language],N'BHXH NV' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeStatus' as [MessageID],N'CN' as [Language],N'工作状态' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeStatus' as [MessageID],N'EN' as [Language],N'Working status' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeStatus' as [MessageID],N'VN' as [Language],N'Trạng thái làm việc' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeTotal' as [MessageID],N'VN' as [Language],N'Tổng BH' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeUI' as [MessageID],N'CN' as [Language],N'員工失業保' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeUI' as [MessageID],N'EN' as [Language],N'Unemployment insurance, NV' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'EmployeeUI' as [MessageID],N'VN' as [Language],N'BH thất nghiệp NV' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'CN' as [Language],N'姓名' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'EN' as [Language],N'Full name' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'JP' as [Language],N'フルネーム' as [Content],N'400' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'KO' as [Language],N'직원 이름' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'KR' as [Language],N'날짜' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName' as [MessageID],N'VN' as [Language],N'Tên nhân viên' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'EN' as [Language],N'Staff''s name' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'JP' as [Language],N'フルネーム' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'KR' as [Language],N'날짜' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'FullName.vldt' as [MessageID],N'VN' as [Language],N'Tên nhân viên' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'EN' as [Language],N'Training course list' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'KR' as [Language],N'Training course list' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'grdTableEditor' as [MessageID],N'VN' as [Language],N'Danh sách đơn chờ duyệt' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'InsPaymentStatus' as [MessageID],N'CN' as [Language],N'状态' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'InsPaymentStatus' as [MessageID],N'EN' as [Language],N'Status' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'InsPaymentStatus' as [MessageID],N'VN' as [Language],N'Trạng thái' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'InsTotal' as [MessageID],N'CN' as [Language],N'合计' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'InsTotal' as [MessageID],N'EN' as [Language],N'total' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'InsTotal' as [MessageID],N'VN' as [Language],N'Tổng cộng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item2' as [MessageID],N'CN' as [Language],N'影片播放清单' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item2' as [MessageID],N'EN' as [Language],N'Resident address' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item2' as [MessageID],N'VN' as [Language],N'Hình nền của chương trình' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item3' as [MessageID],N'CN' as [Language],N'工作表' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item3' as [MessageID],N'EN' as [Language],N'Calendar' as [Content],N'13' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'item3' as [MessageID],N'VN' as [Language],N'Ngôn ngữ' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'CN' as [Language],N'月份' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'EN' as [Language],N'Month' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'KO' as [Language],N'달' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@month' as [MessageID],N'VN' as [Language],N'Tháng' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@optionview' as [MessageID],N'CN' as [Language],N'选配' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@optionview' as [MessageID],N'EN' as [Language],N'Option' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@optionview' as [MessageID],N'VN' as [Language],N'Chế độ xem' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'CN' as [Language],N'年' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'EN' as [Language],N'Year' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'KO' as [Language],N'년' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lbl@Year' as [MessageID],N'VN' as [Language],N'Năm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'CN' as [Language],N'搜索' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'EN' as [Language],N'Search' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'KO' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'KR' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblFilter' as [MessageID],N'VN' as [Language],N'Tìm kiếm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'CN' as [Language],N'影片播放清单' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'EN' as [Language],N'Resident address' as [Content],N'2' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'KO' as [Language],N'코드' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'KR' as [Language],N'Resident address' as [Content],N'2' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblReload' as [MessageID],N'VN' as [Language],N'Làm Mới' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'CN' as [Language],N'<color = crimson>如果更改标题，请单击新行以添加。生效日期无法更正，因此，如果生效日期不正确，请删除错误的行，然后添加一个新行以进行更正。</ color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'EN' as [Language],N'<color = crimson> If you change the title, click on a new line to add it. The effective date cannot be edited, so if the effective date is wrong, delete the wrong line, then add a new line to correct. </color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'KO' as [Language],N'<color = crimson> 제목을 변경하는 경우 추가 할 새 줄을 클릭하십시오. 유효 날짜를 편집 할 수 없으므로 유효 날짜가 틀린 경우 잘못된 줄을 삭제 한 다음 올바른 새 줄을 추가하십시오. </ color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'KR' as [Language],N'<color = crimson> If you change the title, click on a new line to add it. The effective date cannot be edited, so if the effective date is wrong, delete the wrong line, then add a new line to correct. </color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'lblTableEditor' as [MessageID],N'VN' as [Language],N'<color=crimson>Nếu thay đổi chức danh thì bấm vào dòng mới để thêm.Ngày hiệu lực không sửa được nên nếu ngày hiệu lực sai thì xóa dòng sai đi, sau đó thêm 1 dòng mới cho đúng.</color>' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL999' as [MessageID],N'CN' as [Language],N'员工月度保险名单' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL999' as [MessageID],N'EN' as [Language],N'Employee insurance monthly list' as [Content],N'1' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'MnuPRL999' as [MessageID],N'VN' as [Language],N'Danh sách tham gia bảo hiểm' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Notes' as [MessageID],N'CN' as [Language],N'备注' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Notes' as [MessageID],N'EN' as [Language],N'Note' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Notes' as [MessageID],N'VN' as [Language],N'Ghi chú' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'CN' as [Language],N'根目錄' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'EN' as [Language],N'Root' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'KR' as [Language],N'Resident address' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'Root' as [MessageID],N'VN' as [Language],N'1' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SIIncome' as [MessageID],N'CN' as [Language],N'繳納社保金額' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SIIncome' as [MessageID],N'EN' as [Language],N'SI income' as [Content],N'22' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'SIIncome' as [MessageID],N'VN' as [Language],N'Mức nộp BHXH' as [Content],N'100000' as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'CN' as [Language],N'筛选条件' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'EN' as [Language],N'Filter' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'KR' as [Language],N'검색' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'txtFilter' as [MessageID],N'VN' as [Language],N'Tìm kiếm' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'UIIncome' as [MessageID],N'CN' as [Language],N'失业保险金' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'UIIncome' as [MessageID],N'EN' as [Language],N'Salary for paying unemployment insurance' as [Content],NULL as [Frequency],NULL as [IgnorePending] UNION ALL

Select  N'UIIncome' as [MessageID],N'VN' as [Language],N'Lương đóng BH thất nghiệp' as [Content],N'100000' as [Frequency],NULL as [IgnorePending]
EXEC sp_SaveData  @TableNameTmp = '#tblMD_Message' , @TableName = 'tblMD_Message' , @Command = 'insert' , @IsDropTableTmp =0,@IsPrint=0IF OBJECT_ID('tempdb..#tblMD_Message') IS NOT NULL DROP TABLE #tblMD_Message
--#endregion _



if object_id('[dbo].[EmpInsuranceMonthly_List]') is null
	EXEC ('CREATE PROCEDURE [dbo].[EmpInsuranceMonthly_List] as select 1')
GO

--exec EmpInsuranceMonthly_List 8,2022,3
ALTER PROCEDURE [dbo].[EmpInsuranceMonthly_List] @Month INT, @Year INT, @LoginID INT, @CalFromSalCal BIT = 0, @CalculateRetro BIT = 0, @languageId VARCHAR(2) = 'EN', @EmployeeID VARCHAR(20) = '-1', @OptionView INT = 0
AS
BEGIN
	--set mặc định cho thằng bit tính retro cho tháng trước
	SELECT @CalculateRetro = ISNULL(@CalculateRetro, 0) --, @CalFromSalCal = ISNULL(@CalFromSalCal,0)

	DECLARE @nextMonth INT = @month + 1, @nextYear INT = @Year

	IF (@nextMonth = 13)
	BEGIN
		SET @nextMonth = 1
		SET @nextYear += 1
	END -- lấy next month ra để tý còn update

	DECLARE @SalStart DATETIME, @SalStop DATETIME, @SIDate DATETIME

	SELECT @SalStart = FromDate, @SalStop = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	SELECT @SIDate = cast(cast(Year(@SalStop) AS NVARCHAR(20)) + '-' + cast(Month(@SalStop) AS NVARCHAR(20)) + '-15' AS DATE)

	SELECT te.EmployeeID, ISNULL(te.RenewHireDate, te.HireDate) HireDate, DepartmentID, PositionID, te.ProbationEndDate, te.EmployeeTypeID, EmployeeStatusID, TerminateDate, isnull(dateadd(dd, - 1, TerminateDate), '9999-12-31') LastWorkingDate, CAST(NULL AS DATE) AS StatusChangedDate, CAST(NULL AS DATE) AS StatusEndDate, isnull(te.EmpInsuranceStatusID, - 1) EmpInsuranceStatusID, CAST(NULL AS DATE) FormalDate
	INTO #tmpEmpInsList_WorkingOn
	FROM dbo.fn_vtblEmployeeList_Bydate(@SalStop, @EmployeeID, @LoginID) te
	WHERE ISNULL(@OptionView, 0) = 0 OR (ISNULL(@OptionView, 0) = 1 AND ISNULL(te.isForeign, 0) = 0) OR (ISNULL(@OptionView, 0) = 2 AND ISNULL(te.isForeign, 0) = 1)

	SELECT *
	INTO #tmpEmpInsList
	FROM #tmpEmpInsList_WorkingOn

	SELECT *
	INTO #fn_EmployeeStatus_ByDate
	FROM dbo.fn_EmployeeStatus_ByDate(@SalStop)

	UPDATE #tmpEmpInsList_WorkingOn
	SET FormalDate = CASE
			WHEN ProbationEndDate > HireDate
				THEN DATEADD(DD, 1, ProbationEndDate)
			ELSE HireDate
			END

	-- nếu tính insurance bình thường thì sẽ kiểm tra khóa thôi
	IF @CalculateRetro = 0
	BEGIN
		DELETE #tmpEmpInsList
		FROM #tmpEmpInsList te
		WHERE EXISTS (
				SELECT 1
				FROM tblSal_Lock sl
				WHERE Month = @Month AND Year = @Year AND sl.EmployeeID = te.EmployeeID
				)
	END
	ELSE IF @CalculateRetro = 1
	BEGIN -- nếu tính lương retro thì cần kiểm tra khóa tháng sau nhé
		DELETE #tmpEmpInsList
		FROM #tmpEmpInsList te
		WHERE EXISTS (
				SELECT 1
				FROM tblSal_Lock sl
				WHERE Month = @nextMonth AND Year = @nextYear AND sl.EmployeeID = te.EmployeeID
				)

		-- kiểm tra coi nó có nằm trong danh sách tính lương retro ko, bởi ko thay đổi công thì đâu có làm gì đâu mà :D
		DELETE #tmpEmpInsList
		WHERE EmployeeID NOT IN (
				SELECT EmployeeID
				FROM tblSal_AttendanceData_Retro re
				WHERE re.Month = @Month AND re.Year = @Year
				
				UNION
				
				SELECT EmployeeID
				FROM tblCustomAttendanceData
				WHERE Month = @Month AND Year = @Year AND IsRetro = 1 AND Approved = 1
				)
	END

	-- nếu ko có ai thì thôi khỏi làm gì
	IF (
			SELECT COUNT(1)
			FROM #tmpEmpInsList
			) = 0
		GOTO Finished

	CREATE TABLE #InsuranceTmp (EmployeeID VARCHAR(20), Month INT, Year INT, IsEmpSI BIT, IsEmpHI BIT, IsEmpUI BIT, IsComSI BIT, IsComHI BIT, IsComUI BIT, Salary MONEY, HIIncome MONEY, SIIncome MONEY, UIIncome MONEY, EmployeeStatusID INT, EmployeeSI MONEY, EmployeeHI MONEY, EmployeeUI MONEY, CompanySI MONEY, CompanySM MONEY, CompanyHI MONEY, CompanyUI MONEY, OtherCompanyIns BIT, ExpatIns BIT, Notes NVARCHAR(max), InsPaymentStatus INT DEFAULT 0, SalaryHistoryID BIGINT, EmployeeTotal MONEY, CompanyTotal MONEY, Total MONEY, CurrencyCode VARCHAR(20), ExchangeRate MONEY, InsStatusDefault BIT)

	DECLARE @StopUpdate BIT = 0

	-- nếu công ty không sử dụng module bảo hiểm
	IF NOT EXISTS (
			SELECT 1
			FROM tblSISummaryInfo_BHXH s
			WHERE s.Month = @Month AND Year = @Year AND EmployeeID IN (
					SELECT EmployeeID
					FROM #tmpEmpInsList
					)
			)
	BEGIN
		UPDATE #tmpEmpInsList
		SET EmployeeStatusID = stt.EmployeeStatusID, StatusChangedDate = stt.ChangedDate, StatusEndDate = stt.StatusEndDate, TerminateDate = CASE
				WHEN stt.EmployeeStatusID = 20
					THEN stt.ChangedDate
				ELSE NULL
				END
		FROM #tmpEmpInsList te
		INNER JOIN #fn_EmployeeStatus_ByDate stt ON te.EmployeeID = stt.EmployeeID

		UPDATE #tmpEmpInsList
		SET StatusChangedDate = DATEADD(day, - 1, StatusChangedDate)
		WHERE EmployeeStatusID = 20 --nghi viec thi phai tru 1 ngay de giong voi thai san

		DELETE #tmpEmpInsList
		FROM #tmpEmpInsList e
		WHERE TerminateDate <= @SalStart --nghi viec tu thang truoc roi

		--delete #tmpEmpInsList where HireDate > @SIDate --lam lam sau ngay 15
		--delete #tmpEmpInsList where TerminateDate > @SIDate --lam lam sau ngay 15					
		--delete from #tmpEmpInsList where EmployeeStatusID = 1 and StatusChangedDate < @SalStart and StatusEndDate > @SalStop --thang sau moi het thai san
		DECLARE @SI_NEED_INPUTSALARY BIT, @SI_USING_CONTRACT BIT

		SET @SI_NEED_INPUTSALARY = (
				SELECT Value
				FROM tblParameter
				WHERE Code = 'SI_NEED_INPUTSALARY'
				)
		SET @SI_NEED_INPUTSALARY = ISNULL(@SI_NEED_INPUTSALARY, 1)
		SET @SI_USING_CONTRACT = (
				SELECT Value
				FROM tblParameter
				WHERE Code = 'SI_USING_CONTRACT'
				)
		SET @SI_USING_CONTRACT = ISNULL(@SI_USING_CONTRACT, 1)

		INSERT INTO #InsuranceTmp (EmployeeID, EmployeeStatusID, Month, Year, Salary, HIIncome, SIIncome, UIIncome, IsEmpHI, IsEmpUI, IsEmpSI, IsComHI, IsComUI, IsComSI, InsPaymentStatus, SalaryHistoryID, CurrencyCode, ExchangeRate)
		SELECT te.EmployeeID, te.EmployeeStatusID, @Month, @Year, e.Salary, e.SI_Salary, e.SI_Salary, e.UI_Salary, 1, 1, 1, 1, 1, 1, 0, e.SalaryHistoryID, sh.CurrencyCode, sh.ExchangeRate_Contract
		FROM #tmpEmpInsList te
		LEFT JOIN dbo.fn_CurrentSISalary_byDate(@SIDate, @LoginID) e ON e.EmployeeID = te.EmployeeID
		LEFT JOIN tblSalaryHistory sh ON e.SalaryHistoryID = sh.SalaryHistoryID
		WHERE NOT EXISTS (
				SELECT 1
				FROM tblSal_Insurance si
				WHERE te.EmployeeID = si.EmployeeID AND si.Month = @Month AND si.Year = @Year AND si.Approval = 1
				)

		UPDATE ta1
		SET InsPaymentStatus = ISNULL(ta2.InsPaymentStatus, 0)
		FROM #InsuranceTmp ta1
		INNER JOIN tblSal_Insurance ta2 ON ta1.EmployeeID = ta2.EmployeeID AND ta2.Month = @Month AND ta2.Year = @Year

		--can cu vao hop dong truoc (neu co)	
		IF @SI_USING_CONTRACT = 1
		BEGIN
			UPDATE #InsuranceTmp
			SET IsEmpSI = ISNULL(c.EmpSI, 0), IsEmpHI = ISNULL(c.EmpHI, 0), IsEmpUI = ISNULL(c.EmpUI, 0), IsComSI = ISNULL(CompSI, 0), IsComHI = ISNULL(c.CompHI, 0), IsComUI = ISNULL(CompUI, 0), Notes = CASE
					WHEN c.EmployeeID IS NOT NULL
						THEN CASE
								WHEN @languageId = 'VN'
									THEN N'Dựa vào hợp đồng'
								ELSE 'Follow labour contract'
								END
					ELSE CASE
							WHEN @languageId = 'VN'
								THEN N'Chưa có hợp đồng'
							ELSE 'Has no contract!'
							END
					END
			FROM #InsuranceTmp tmp
			LEFT JOIN (
				SELECT c.EmployeeID, cis.*
				FROM dbo.fn_CurrentContractListByDate(@SIDate) c
				INNER JOIN tblLabourContract lb ON c.ContractID = lb.ContractID
				INNER JOIN ContractInsuranceStatus cis ON isnull(lb.InsuranceStatusID, - 1) = cis.InsuranceStatusID
				) c ON tmp.EmployeeID = c.EmployeeID
			WHERE InsPaymentStatus = 0
		END

		UPDATE #InsuranceTmp
		SET SIIncome = 0, HIIncome = 0, UIIncome = 0, IsComSI = 0, IsComHI = 0, IsComUI = 0, IsEmpSI = 0, IsEmpHI = 0, IsEmpUI = 0, Notes = CASE
				WHEN @languageId = 'VN'
					THEN N'Không có lương đóng BH'
				ELSE 'Empty Insurance salary!'
				END + ISNULL(' - ' + Notes, '')
		WHERE (SalaryHistoryID IS NULL OR ISNULL(SIIncome, 0) = 0)

		--Khách hàng không mua module bảo hiểm phải nhập lương đóng BH hay tự động tính theo công thức ? 1: bắt buộc nhập mới đóng, 0: tự động tính, nếu muốn bỏ thì tick không tham gia
		UPDATE #InsuranceTmp
		SET SIIncome = 0, HIIncome = 0, UIIncome = 0, Notes = CASE
				WHEN @languageId = 'VN'
					THEN N'Chưa nhập lương đóng BH'
				ELSE 'Insurance salary not inputted!'
				END + ISNULL(' - ' + Notes, '')
		FROM #InsuranceTmp t
		INNER JOIN tblSalaryHistory sh ON t.SalaryHistoryID = sh.SalaryHistoryID
		WHERE (@SI_NEED_INPUTSALARY = 1) AND ISNULL(sh.InsSalary, 0) = 0 AND SIIncome <> 0

		/*--nghi viec, thai san thi ko khai bao nua
		UPDATE #InsuranceTmp SET IsComSI = 0, IsComHI = 0, IsComUI = 0, IsEmpSI = 0, IsEmpHI = 0, IsEmpUI = 0
			, Notes =
			case when @languageId = 'VN'
			then   N'Trạng thái làm việc thay đổi' else 'Working Status changed' end
	
		from #InsuranceTmp t
		inner join #tmpEmpInsList te on t.EmployeeID = te.EmployeeID
		inner join tblEmployeeStatus stt on te.EmployeeStatusID = stt.EmployeeStatusID
			where /*StatusChangedDate <= @SIDate and*/ stt.CutSI = 1 and InsPaymentStatus = 0
		
		--van con thai san trong thang
		UPDATE #InsuranceTmp SET IsComSI = 0, IsComHI = 0, IsComUI = 0, IsEmpSI = 0, IsEmpHI = 0, IsEmpUI = 0
		, Notes =
		case when @languageId = 'VN'
			then N'Vẫn còn thai sản' else 'Still maternity period' end
		from #InsuranceTmp t inner join #tmpEmpInsList te on t.EmployeeID = te.EmployeeID
		where te.EmployeeStatusID = 1 and StatusEndDate <= @SalStop
		*/
		-- nếu nghỉ ko lương >=14 ngày thì ko đóng
		-- đoạn xxxx này chỉ khác ở chỗ tên bảng thôi nhé  :tblSal_AttendanceData
		UPDATE #InsuranceTmp
		SET IsComSI = 0, IsComHI = 0, IsComUI = 0, IsEmpSI = 0, IsEmpHI = 0, IsEmpUI = 0, Notes = 'probation'
		FROM #InsuranceTmp t
		WHERE EXISTS (
				SELECT 1
				FROM #tmpEmpInsList te
				WHERE t.EmployeeID = te.EmployeeID AND te.ProbationEndDate >= @SIDate
				)

		-- SELECT ws.EmployeeID, ws.ScheduleDate, ws.HolidayStatus, ta.s_WorkingTime AS WorkingTime
		-- INTO #PaidDayJoinINS
		-- FROM tblWSchedule ws
		-- INNER JOIN #tmpEmpInsList te ON ws.EmployeeID = te.EmployeeID
		-- LEFT JOIN (
		-- 	SELECT EmployeeID, AttDate, sum(WorkingTime) s_WorkingTime
		-- 	FROM tblHasTA
		-- 	GROUP BY EmployeeID, AttDate
		-- 	) ta ON ws.EmployeeID = ta.EmployeeID AND ws.ScheduleDate = ta.AttDate AND ws.HolidayStatus = 0
		-- WHERE ws.ScheduleDate BETWEEN @SalStart AND @SalStop AND ws.ScheduleDate BETWEEN te.FormalDate AND te.LastWorkingDate
		-- UPDATE #PaidDayJoinINS
		-- SET WorkingTime = isnull(p.WorkingTime, 0) + isnull(lv.s_LvAmount, 0)
		-- FROM #PaidDayJoinINS p
		-- INNER JOIN (
		-- 	SELECT lv.EmployeeID, lv.LeaveDate, sum(lv.LvAmount / 100.0 * lt.PaidRate) s_LvAmount
		-- 	FROM tblLvHistory lv
		-- 	INNER JOIN tblLeaveType lt ON lv.LeaveCode = lt.LeaveCode AND lt.PaidRate > 0
		-- 	GROUP BY lv.EmployeeID, lv.LeaveDate
		-- 	) lv ON p.EmployeeID = lv.EmployeeID AND p.ScheduleDate = lv.LeaveDate AND p.HolidayStatus IN (0, 2)
		--TRIPOD
		--TRIPOD
		EXEC sp_processSummaryAttendance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @ViewType = 0, @Payroll = 0

		SELECT Year, Month, a.EmployeeID, SUM(WorkingHrs_Total) WorkingHrs_Total, SUM(WorkingDays_Total) WorkingDays_Total, SUM(PaidLeaveHrs_Total) PaidLeaveHrs_Total, SUM(PaidLeaveDays_Total) PaidLeaveDays_Total, Std_Hour_PerDays
		INTO #AttendanceSummary
		FROM tblAttendanceSummary a
		INNER JOIN #tmpEmpInsList_WorkingOn te ON a.EmployeeID = te.EmployeeID
		WHERE Year = @Year AND Month = @Month
		GROUP BY Year, Month, a.EmployeeID, Std_Hour_PerDays

		UPDATE #InsuranceTmp
		SET InsStatusDefault = 1
		WHERE InsPaymentStatus = 0

		-- UPDATE #InsuranceTmp
		-- SET IsComSI = 0, IsComHI = 0, IsComUI = 0, IsEmpSI = 0, IsEmpHI = 0, IsEmpUI = 0, Notes = isnull(Notes, N'Nghỉ không lương >= 14 ngày'), InsPaymentStatus = CASE
		-- 		WHEN t.InsStatusDefault = 1 AND te.TerminateDate > te.FormalDate
		-- 			THEN 7
		-- 		ELSE t.InsPaymentStatus
		-- 		END
		-- FROM #InsuranceTmp t
		-- LEFT JOIN #tmpEmpInsList te ON t.EmployeeID = te.EmployeeID
		-- LEFT JOIN tblWorkingDaySetting w ON w.EmployeeTypeID = te.EmployeeTypeID AND w.Year = @Year AND w.Month = @Month
		-- LEFT JOIN (
		-- 	SELECT EmployeeID, sum(WorkingTime / 8.0) TotalPaidDays
		-- 	FROM #PaidDayJoinINS
		-- 	GROUP BY EmployeeID
		-- 	) sal ON t.EmployeeID = sal.EmployeeID
		-- WHERE w.WorkingDays_Std - isnull(sal.TotalPaidDays, 0) >= 14
		UPDATE #InsuranceTmp
		SET IsComSI = 0, IsComHI = 0, IsComUI = 0, IsEmpSI = 0, IsEmpHI = 0, IsEmpUI = 0, Notes = isnull(Notes, N'Nghỉ không lương >= 14 ngày'), InsPaymentStatus = CASE
				WHEN t.InsStatusDefault = 1 AND te.TerminateDate > te.FormalDate
					THEN 7
				ELSE t.InsPaymentStatus
				END
		FROM #InsuranceTmp t
		LEFT JOIN #tmpEmpInsList te ON t.EmployeeID = te.EmployeeID
		LEFT JOIN tblWorkingDaySetting w ON w.EmployeeTypeID = te.EmployeeTypeID AND w.Year = @Year AND w.Month = @Month
		LEFT JOIN (
			SELECT EmployeeID, ISNULL(WorkingHrs_Total / Std_Hour_PerDays, 0) + ISNULL(PaidLeaveHrs_Total / Std_Hour_PerDays, 0) TotalPaidDays
			FROM #AttendanceSummary
			) sal ON t.EmployeeID = sal.EmployeeID
		WHERE w.WorkingDays_Std - isnull(sal.TotalPaidDays, 0) >= 14
			-- hết đoạn xxxx này chỉ khác ở chỗ tên bảng thôi nhé  :tblSal_AttendanceData
	END
	ELSE -- su dung menu khai bao bao hiem hang thang
	BEGIN
		INSERT INTO #InsuranceTmp (EmployeeID, EmployeeStatusID, Month, Year, Salary, HIIncome, SIIncome, UIIncome, IsEmpSI, IsEmpHI, IsEmpUI, IsComSI, IsComHI, IsComUI)
		SELECT e.EmployeeID, stt.EmployeeStatusID, @Month, @Year, e.Salary, e.SI_Salary, e.SI_Salary, e.UI_Salary, 1, 1, 1, 1, 1, 1
		FROM tblSISummaryInfo_BHXH e
		INNER JOIN #tmpEmpInsList te ON e.EmployeeID = te.EmployeeID AND e.Month = @Month AND e.Year = @Year
		LEFT JOIN #fn_EmployeeStatus_ByDate stt ON te.EmployeeID = stt.EmployeeID
		WHERE e.EmployeeID NOT IN (
				SELECT EmployeeID
				FROM tblSal_Insurance
				WHERE Approval = 1 AND Month = @Month AND Year = @Year
				)
	END

	SELECT cs.*
	INTO #tblCurrencySetting
	FROM (
		SELECT CurrencyCode, max(DateEffect) AS DateEffect
		FROM tblCurrencySetting cs
		GROUP BY cs.CurrencyCode
		) m
	INNER JOIN tblCurrencySetting cs ON m.CurrencyCode = cs.CurrencyCode AND cs.DateEffect = m.DateEffect

	UPDATE #InsuranceTmp
	SET ExchangeRate = ISNULL(ins.ExchangeRate, cs.ExchangeRate), Salary = Salary * ISNULL(ins.ExchangeRate, cs.ExchangeRate), HIIncome = HIIncome * ISNULL(ins.ExchangeRate, cs.ExchangeRate), SIIncome = SIIncome * ISNULL(ins.ExchangeRate, cs.ExchangeRate), UIIncome = UIIncome * ISNULL(ins.ExchangeRate, cs.ExchangeRate)
	FROM #InsuranceTmp ins
	INNER JOIN #tblCurrencySetting cs ON ins.CurrencyCode = cs.CurrencyCode
	WHERE isnull(ins.CurrencyCode, 'VND') <> 'VND'

	INSERT INTO tblProcessErrorMessage (ErrorType, ErrorDetail, LoginID)
	SELECT N'Tỷ giá', N'Vui lòng nhập tỷ giá: ' + ins.CurrencyCode, @LoginID
	FROM #InsuranceTmp ins
	WHERE isnull(ins.CurrencyCode, 'VND') <> 'VND' AND ExchangeRate IS NULL

	--khai bao bao hiem dua vao setup ben thong tin nhan vien
	UPDATE #InsuranceTmp
	SET IsEmpSI = ISNULL(c.EmpSI, 0), IsEmpHI = ISNULL(c.EmpHI, 0), IsEmpUI = ISNULL(c.EmpUI, 0), IsComSI = ISNULL(CompSI, 0), IsComHI = ISNULL(c.CompHI, 0), IsComUI = ISNULL(CompUI, 0)
	FROM #InsuranceTmp tmp
	INNER JOIN #tmpEmpInsList te ON tmp.EmployeeID = te.EmployeeID
	INNER JOIN ContractInsuranceStatus c ON te.EmpInsuranceStatusID = c.InsuranceStatusID
	WHERE isnull(te.EmpInsuranceStatusID, - 1) <> - 1 --bat thuong moi xu ly, chu binh thuong thi "kemedi"

	INSERT #InsuranceTmp (EmployeeID, EmployeeStatusID, Month, Year, Salary, HIIncome, SIIncome, UIIncome, IsEmpHI, IsEmpUI, IsEmpSI, IsComHI, IsComUI, IsComSI, InsPaymentStatus, SalaryHistoryID)
	SELECT te.EmployeeID, te.EmployeeStatusID, @Month, @Year, e.Salary, ins.SIIncome, ins.SIIncome, ins.UIIncome, 1, 1, 1, 1, 1, 1, ins.InsPaymentStatus, e.SalaryHistoryID
	FROM tblSal_Insurance ins
	INNER JOIN #tmpEmpInsList te ON ins.EmployeeID = te.EmployeeID
	LEFT JOIN dbo.fn_CurrentSISalary_byDate(@SIDate, @LoginID) e ON e.EmployeeID = te.EmployeeID
	LEFT JOIN tblSalaryHistory sh ON e.SalaryHistoryID = sh.SalaryHistoryID
	WHERE ins.Month = @Month AND ins.Year = @Year AND ins.InsPaymentStatus = 5

	-- select * from Insurance_Payment_Status
	--xu ly Payment status
	UPDATE #InsuranceTmp
	SET IsComSI = 1, IsComHI = 1, IsComUI = 1, IsEmpSI = 1, IsEmpHI = 1, IsEmpUI = 1
	WHERE InsPaymentStatus IN (1, 5) --dong day du

	UPDATE #InsuranceTmp
	SET IsEmpSI = 0, IsEmpHI = 0, IsEmpUI = 0
	WHERE InsPaymentStatus = 2 --cty dong het thi setup nhan vien ve 0  ==> ko nen setup ca phan cua cty vi con can cu vao hop dong nua

	UPDATE #InsuranceTmp
	SET IsComSI = 0, IsComHI = 0, IsComUI = 0
	WHERE InsPaymentStatus = 3 --nhan vien dong het thi nguoc voi cty

	UPDATE #InsuranceTmp
	SET IsComSI = 0, IsComHI = 0, IsComUI = 0, IsEmpSI = 0, IsEmpHI = 0, IsEmpUI = 0
	WHERE InsPaymentStatus = 4 --khong dong bh

	UPDATE #InsuranceTmp
	SET IsEmpSI = 0, IsEmpUI = 0
	WHERE InsPaymentStatus = 6 -- Nhân viên chỉ đóng bảo hiểm ý tế

	UPDATE #InsuranceTmp
	SET IsComSI = 0, IsComHI = 1, IsComUI = 0, IsEmpSI = 0, IsEmpHI = 1, IsEmpUI = 0
	WHERE InsPaymentStatus = 7 --truy thu 4.5%

	IF (OBJECT_ID('EmpInsuranceMonthly_BeforeCalculate') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE EmpInsuranceMonthly_BeforeCalculate
(
	 @Month int
	,@Year int
	,@LoginID int
	,@CalFromSalCal bit = 0
	,@StopUpdate bit output
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUpdate = 0

	EXEC EmpInsuranceMonthly_BeforeCalculate @Month = @Month, @Year = @Year, @LoginID = @LoginID, @CalFromSalCal = @CalFromSalCal, @StopUpdate = @StopUpdate OUTPUT

	--xu ly muc luong tran dong bao hiem
	UPDATE #InsuranceTmp
	SET SIIncome = CASE
			WHEN SIIncome <= SI_Salary
				THEN SIIncome
			ELSE SI_Salary
			END, HIIncome = CASE
			WHEN HIIncome <= HI_Salary
				THEN HIIncome
			ELSE HI_Salary
			END
	--,UIIncome = CASE WHEN UIIncome <= UI_Salary THEN UIIncome ELSE UI_Salary END
	FROM #InsuranceTmp ins
	CROSS JOIN (
		SELECT SI_Salary, HI_Salary, UI_Salary
		FROM dbo.tblSI_CeilSalary AS tscs
		WHERE (
				EffectiveDate = (
					SELECT MAX(EffectiveDate) AS Expr1
					FROM dbo.tblSI_CeilSalary tmp
					WHERE tmp.EffectiveDate <= @SIDate
					)
				)
		) tmp

	--tringuyen
	UPDATE i
	SET UIIncome = c.Salary * 20
	FROM #InsuranceTmp i
	LEFT JOIN tblSalaryHistory sal ON i.SalaryHistoryID = sal.SalaryHistoryID
	LEFT JOIN dbo.fn_CurrentBaseSalRegionalByDate(@SIDate) c ON sal.BaseSalRegionalID = c.BaseSalRegionalID
	WHERE i.UIIncome > c.Salary * 20

	--Tinh luong Insurance
	UPDATE #InsuranceTmp
	SET EmployeeSI = ROUND(SIIncome * p.SI_EmpPercent / 100.0, 0), CompanySI = ROUND(SIIncome * p.SI_CompPercent / 100.0, 0), CompanySM = ROUND(SIIncome * p.SM_CompPercent / 100.0, 0), EmployeeHI = ROUND(HIIncome * p.HI_EmpPercent / 100.0, 0), CompanyHI = ROUND(HIIncome * p.HI_CompPercent / 100.0, 0), EmployeeUI = ROUND(UIIncome * p.UI_EmpPercent / 100.0, 0), CompanyUI = ROUND(UIIncome * p.UI_CompPercent / 100.0, 0)
	FROM #InsuranceTmp tmp
	CROSS JOIN dbo.fn_CurrentInsurancePercentage(@SIDate) p

	--cong tru neu chi dong 1 ben
	UPDATE #InsuranceTmp
	SET EmployeeSI = EmployeeSI * IsEmpSI + CompanySI * ~ IsComSI + CompanySM * ~ IsComSI, CompanySI = CompanySI * IsComSI + EmployeeSI * ~ IsEmpSI, EmployeeHI = EmployeeHI * IsEmpHI + CompanyHI * ~ IsComHI, CompanyHI = CompanyHI * IsComHI + EmployeeHI * ~ IsEmpHI, EmployeeUI = EmployeeUI * IsEmpUI + CompanyUI * ~ IsComUI, CompanyUI = CompanyUI * IsComUI + EmployeeUI * ~ IsEmpUI
	WHERE (IsEmpSI <> IsComSI OR IsEmpHI <> IsComHI OR IsEmpUI <> IsComUI)

	--truong hop 2 ben deu khong dong 1 loai bao hiem, vd nguoi nuoc ngoai chi dong BHYT
	UPDATE #InsuranceTmp
	SET EmployeeSI = 0, CompanySI = 0, CompanySM = 0
	WHERE IsEmpSI = 0 AND IsComSI = 0

	UPDATE #InsuranceTmp
	SET EmployeeHI = 0, CompanyHI = 0
	WHERE IsEmpHI = 0 AND IsComHI = 0

	UPDATE #InsuranceTmp
	SET EmployeeUI = 0, CompanyUI = 0
	WHERE IsEmpUI = 0 AND IsComUI = 0

	UPDATE #InsuranceTmp
	SET EmployeeHI = EmployeeHI + CompanyHI, CompanyHI = 0
	FROM #InsuranceTmp isn
	WHERE InsPaymentStatus = 7 AND EXISTS (
			SELECT 1
			FROM tblEmployee ee
			INNER JOIN tblNation na ON ISNULL(ee.NationID, 234) = na.NationID AND na.IsVietNam = 1
			WHERE isn.EmployeeID = ee.EmployeeID
			)

	UPDATE #InsuranceTmp
	SET CompanyHI = EmployeeHI + CompanyHI, EmployeeHI = 0
	FROM #InsuranceTmp isn
	WHERE InsPaymentStatus = 7 AND NOT EXISTS (
			SELECT 1
			FROM tblEmployee ee
			INNER JOIN tblNation na ON ISNULL(ee.NationID, 234) = na.NationID AND na.IsVietNam = 1
			WHERE isn.EmployeeID = ee.EmployeeID
			)

	UPDATE #InsuranceTmp
	SET Notes = CASE
			WHEN @languageId = 'VN'
				THEN N'Thay đổi lương'
			ELSE 'Salary changed'
			END
	FROM #InsuranceTmp t
	INNER JOIN tblSal_Insurance s ON t.EmployeeID = s.EmployeeID AND s.Year * 12 + s.Month = @Year * 12 + @Month - 1
	WHERE (t.SIIncome <> s.SIIncome OR t.UIIncome <> s.UIIncome) AND t.Notes IS NULL

	UPDATE #InsuranceTmp
	SET Notes = CASE
			WHEN @languageId = 'VN'
				THEN N'Tăng mới'
			ELSE 'Encrease'
			END
	FROM #InsuranceTmp t
	LEFT JOIN tblSal_Insurance s ON t.EmployeeID = s.EmployeeID AND s.Year * 12 + s.Month = @Year * 12 + @Month - 1
	WHERE (s.EmployeeID IS NULL OR ISNULL(s.Total, 0) = 0) AND (t.EmployeeSI <> 0 OR t.CompanySI <> 0 OR t.EmployeeHI <> 0 OR t.CompanyHI <> 0 OR t.EmployeeUI <> 0 OR t.CompanyUI <> 0) AND t.Notes IS NULL

	-- đóng ở cty khác thì chỉ đong 0.5% Bảo hiểm tai nạn
	UPDATE tmp
	SET OtherCompanyIns = 1
	FROM #InsuranceTmp tmp
	INNER JOIN #tmpEmpInsList te ON tmp.EmployeeID = te.EmployeeID
	WHERE te.EmpInsuranceStatusID = 3

	UPDATE #InsuranceTmp
	SET EmployeeSI = 0, CompanySI = ROUND(SIIncome * p.AI_CompPercent / 100.0, 0), EmployeeHI = 0, CompanyHI = 0, EmployeeUI = 0, CompanyUI = 0
	FROM #InsuranceTmp tmp
	CROSS JOIN dbo.fn_CurrentInsurancePercentage(@SIDate) p
	WHERE tmp.OtherCompanyIns = 1

	-- người nước ngoài mà có tham gia bảo hiểm thì đóng BHYT và BHXH, và đóng theo mức riêng (nếu có set) ExpatIns
	UPDATE tmp
	SET ExpatIns = 1
	FROM #InsuranceTmp tmp
	INNER JOIN tblEmployee te ON tmp.EmployeeID = te.EmployeeID
	WHERE isnull(te.EmpInsuranceStatusID, - 1) = - 1 AND (
			te.NationID IS NOT NULL AND te.NationID NOT IN (
				SELECT NationID
				FROM tblNation
				WHERE IsVietNam = 1
				)
			)

	UPDATE #InsuranceTmp
	SET EmployeeSI = ROUND(SIIncome * ISNULL(p.Ex_SI_EmpPercent, p.SI_EmpPercent) / 100.0, 0), CompanySI = ROUND(SIIncome * ISNULL(p.Ex_SI_CompPercent, p.SI_CompPercent) / 100.0, 0), EmployeeHI = ROUND(HIIncome * isnull(p.Ex_HI_EmpPercent, p.HI_EmpPercent) / 100.0, 0), CompanyHI = ROUND(HIIncome * isnull(p.Ex_HI_CompPercent, p.HI_CompPercent) / 100.0, 0), EmployeeUI = 0, CompanyUI = 0
	FROM #InsuranceTmp tmp
	CROSS JOIN dbo.fn_CurrentInsurancePercentage(@SIDate) p
	WHERE tmp.ExpatIns = 1 AND tmp.InsPaymentStatus = 0

	IF (OBJECT_ID('EmpInsuranceMonthly_AfterCalculate') IS NULL)
	BEGIN
		EXEC (
				'CREATE PROCEDURE EmpInsuranceMonthly_AfterCalculate
(
	 @Month int
	,@Year int
	,@LoginID int
	,@CalFromSalCal bit = 0
	,@StopUpdate bit output
)
as
begin
	SET NOCOUNT ON;
end'
				)
	END

	SET @StopUpdate = 0

	EXEC EmpInsuranceMonthly_AfterCalculate @Month = @Month, @Year = @Year, @LoginID = @LoginID, @CalFromSalCal = @CalFromSalCal, @StopUpdate = @StopUpdate OUTPUT

	IF @CalculateRetro = 0
	BEGIN -- nếu là tính lương thường thì cộng bthuong thôi
		--save to database
		DELETE tblSal_Insurance
		FROM tblSal_Insurance si
		WHERE Month = @Month AND Year = @Year AND ISNULL(Approval, 0) = 0 AND EXISTS (
				SELECT 1
				FROM tmpEmployeeTree tr
				WHERE si.EmployeeID = tr.EmployeeID AND tr.LoginID = @LoginID
				) AND si.EmployeeID NOT IN (
				SELECT EmployeeID
				FROM tblSal_Lock
				WHERE Month = @Month AND Year = @Year
				) --khoa luong roi thi ko xoa
			AND si.EmployeeID NOT IN (
				SELECT EmployeeID
				FROM #tmpEmpInsList
				)

		INSERT INTO tblSal_Insurance (EmployeeID, Year, Month, HIIncome, SIIncome, UIIncome, EmployeeHI, EmployeeSI, EmployeeUI, CompanyHI, CompanySI, CompanySM, CompanyUI, SalaryHistoryID, InsPaymentStatus, Notes, Approval)
		SELECT tmp.EmployeeID, @Year, @Month, HIIncome, SIIncome, UIIncome, EmployeeHI, EmployeeSI, EmployeeUI, CompanyHI, CompanySI, CompanySM, CompanyUI, SalaryHistoryID, InsPaymentStatus, Notes, 0
		FROM #InsuranceTmp tmp
		WHERE EmployeeID NOT IN (
				SELECT EmployeeID
				FROM tblSal_Insurance
				WHERE Month = @Month AND Year = @Year
				)

		INSERT INTO tblSal_Insurance (EmployeeID, Month, Year, Notes)
		SELECT EmployeeID, @Month, @Year, N'due to adjustment'
		FROM tblSal_Retro re
		WHERE re.Month = @Month AND re.Year = @Year AND re.EmployeeID IN (
				SELECT EmployeeID
				FROM tmpEmployeeTree
				WHERE LoginID = @LoginID
				) AND re.EmployeeID NOT IN (
				SELECT EmployeeID
				FROM #tmpEmpInsList
				) AND re.EmployeeID NOT IN (
				SELECT EmployeeID
				FROM tblSal_Insurance i
				WHERE i.Month = @Month AND i.Year = @Year AND i.EmployeeID = re.EmployeeID
				)

		UPDATE tblSal_Insurance
		SET HIIncome = tmp.HIIncome, SIIncome = tmp.SIIncome, UIIncome = tmp.UIIncome, EmployeeSI = tmp.EmployeeSI, EmployeeHI = tmp.EmployeeHI, EmployeeUI = tmp.EmployeeUI, CompanySI = tmp.CompanySI, CompanySM = tmp.CompanySM, CompanyHI = tmp.CompanyHI, CompanyUI = tmp.CompanyUI, SalaryHistoryID = tmp.SalaryHistoryID, Approval = ISNULL(Approval, 0), Notes = tmp.Notes, InsPaymentStatus = tmp.InsPaymentStatus
		FROM tblSal_Insurance si
		INNER JOIN #InsuranceTmp tmp ON si.EmployeeID = tmp.EmployeeID AND si.Month = @Month AND si.Year = @Year
		WHERE (ISNULL(si.Approval, 0) = 0 OR ISNULL(si.InsPaymentStatus, 1) = 5)
	END -- nếu là tính lương thường thì cứ insert thôi
	ELSE
	BEGIN -- nếu là tính retro thì phải chạy đoạn này để insert vào bảng retro
		-- delete bảng thực : xóa những cậu nào nằm trong worKingon  mà đã khóa nhé
		DELETE tblSal_Insurance_Retro
		FROM tblSal_Insurance_Retro re
		WHERE re.Month = @Month AND re.Year = @Year AND NOT EXISTS (
				SELECT 1
				FROM tblSal_Lock sl
				WHERE re.EmployeeID = sl.EmployeeID AND sl.Month = @nextMonth AND sl.Year = @nextYear
				) AND EmployeeID IN (
				SELECT EmployeeID
				FROM #tmpEmpInsList_WorkingOn
				) -- working on rồi nhé

		-- insert - update ko quan tâm khóa nữa
		-- update cho bảng tạm cái
		DELETE tmp
		FROM tblSal_Insurance si
		INNER JOIN #InsuranceTmp tmp ON si.EmployeeID = tmp.EmployeeID AND si.Month = @Month AND si.Year = @Year
		WHERE (ISNULL(si.Approval, 0) <> 0 AND ISNULL(si.InsPaymentStatus, 1) <> 5)

		INSERT INTO tblSal_Insurance_Retro (EmployeeID, Year, Month, HIIncome, SIIncome, UIIncome, EmployeeHI, EmployeeSI, EmployeeUI, CompanyHI, CompanySI, CompanySM, CompanyUI, SalaryHistoryID, InsPaymentStatus, Notes)
		SELECT tmp.EmployeeID, @Year, @Month, HIIncome, SIIncome, UIIncome, EmployeeHI, EmployeeSI, EmployeeUI, CompanyHI, CompanySI, CompanySM, CompanyUI, SalaryHistoryID, InsPaymentStatus, Notes
		FROM #InsuranceTmp tmp
		WHERE EmployeeID NOT IN (
				SELECT EmployeeID
				FROM tblSal_Insurance_Retro
				WHERE Month = @Month AND Year = @Year
				)

		UPDATE tblSal_Insurance_Retro
		SET EmployeeTotal = ISNULL(EmployeeHI, 0) + ISNULL(EmployeeSI, 0) + ISNULL(EmployeeUI, 0) + ISNULL(re.INS_Retro_Amount_EE, 0), CompanyTotal = ISNULL(CompanyHI, 0) + ISNULL(CompanySI, 0) + ISNULL(CompanySM, 0) + ISNULL(CompanyUI, 0) + ISNULL(re.INS_Retro_Amount_ER, 0), Total = ISNULL(EmployeeHI, 0) + ISNULL(EmployeeSI, 0) + ISNULL(EmployeeUI, 0) + ISNULL(CompanyHI, 0) + ISNULL(CompanySI, 0) + ISNULL(CompanySM, 0) + ISNULL(CompanyUI, 0) + ISNULL(re.INS_Retro_Amount_EE, 0) + ISNULL(re.INS_Retro_Amount_ER, 0)
		FROM tblSal_Insurance_Retro ins
		LEFT JOIN tblSal_Retro re ON ins.EmployeeID = re.EmployeeID AND re.Month = @Month AND re.Year = @Year
		WHERE ins.Month = @Month AND ins.Year = @Year

		-- diff nó với bảng chốt nào
		RETURN
	END

	Finished:

	UPDATE tblSal_Insurance
	SET EmployeeTotal = ISNULL(EmployeeHI, 0) + ISNULL(EmployeeSI, 0) + ISNULL(EmployeeUI, 0) + ISNULL(re.INS_Retro_Amount_EE, 0), CompanyTotal = ISNULL(CompanyHI, 0) + ISNULL(CompanySI, 0) + ISNULL(CompanySM, 0) + ISNULL(CompanyUI, 0) + ISNULL(re.INS_Retro_Amount_ER, 0), Total = ISNULL(EmployeeHI, 0) + ISNULL(EmployeeSI, 0) + ISNULL(EmployeeUI, 0) + ISNULL(CompanyHI, 0) + ISNULL(CompanySI, 0) + ISNULL(CompanySM, 0) + ISNULL(CompanyUI, 0) + ISNULL(re.INS_Retro_Amount_EE, 0) + ISNULL(re.INS_Retro_Amount_ER, 0)
	FROM tblSal_Insurance ins
	LEFT JOIN tblSal_Retro re ON ins.EmployeeID = re.EmployeeID AND re.Month = @Month AND re.Year = @Year
	WHERE ins.Month = @Month AND ins.Year = @Year

	IF (@CalFromSalCal = 0)
		SELECT ins.Month, ins.Year, ins.EmployeeID, te.FullName, CASE
				WHEN @languageId = 'VN'
					THEN stt.EmployeeStatus
				ELSE stt.EmployeeStatusEN
				END AS EmployeeStatus, stt.ChangedDate, ins.SIIncome, ins.UIIncome, ins.EmployeeSI, ins.EmployeeHI, ins.EmployeeUI, re.INS_Retro_Amount_EE, ins.EmployeeTotal, ins.CompanySI, ins.CompanySM, ins.CompanyHI, ins.CompanyUI, re.INS_Retro_Amount_ER, ins.CompanyTotal, ins.Total AS InsTotal, InsPaymentStatus, Approval, Notes
		FROM tblSal_Insurance ins
		INNER JOIN tblEmployee te ON ins.EmployeeID = te.EmployeeID
		LEFT JOIN #fn_EmployeeStatus_ByDate stt ON ins.EmployeeID = stt.EmployeeID
		LEFT JOIN tblSal_Retro re ON ins.EmployeeID = re.EmployeeID AND re.Month = @Month AND re.Year = @Year
		WHERE ins.Month = @Month AND ins.Year = @Year AND te.EmployeeID IN (
				SELECT EmployeeID
				FROM tmpEmployeeTree
				WHERE LoginID = @LoginID
				)
END
GO


if object_id('[dbo].[sp_processAllAllowance]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_processAllAllowance] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_processAllAllowance] (@LoginID INT = 3, @Year INT, @Month INT, @SalCal BIT = 0)
AS
BEGIN
	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	SELECT f.EmployeeID, FullName, HireDate, LastWorkingDate, CAST(0 AS INT) Prio, f.DepartmentID, f.DivisionID, f.PositionID, s.SectionID, s.SectionName, ROW_NUMBER() OVER (
			ORDER BY f.EmployeeID
			) STTView, d.DepartmentName, p.PositionNameEN PositionName, CASE
			WHEN f.ProbationEndDate > @FromDate
				THEN 1
			ELSE 0
			END AS Probationary, f.IsForeign
	INTO #tmpEmployeeList
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, '-1', @LoginId) f
	LEFT JOIN tblSection s ON s.SectionID = f.SectionID
	LEFT JOIN tblDepartment d ON d.DepartmentID = f.DepartmentID
	LEFT JOIN tblPosition p ON p.PositionID = f.PositionID

	SELECT a.*
	INTO #AttendanceSummary
	FROM tblAttendanceSummary a
	INNER JOIN #tmpEmployeeList e ON e.EmployeeID = a.EmployeeID
	WHERE Year = @Year AND Month = @Month

	IF EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE EmployeeID NOT IN (
					SELECT s.EmployeeID
					FROM tblCustomInputImportMonthly s
					INNER JOIN #tmpEmployeeList t ON t.EmployeeID = s.EmployeeID AND s.[Year] = @Year AND s.[Month] = @Month
					)
			)
	BEGIN
		INSERT INTO tblCustomInputImportMonthly (EmployeeID, [Year], [Month])
		SELECT EmployeeID, @Year, @Month
		FROM #AttendanceSummary a
		WHERE EmployeeID NOT IN (
				SELECT s.EmployeeID
				FROM tblCustomInputImportMonthly s
				INNER JOIN #tmpEmployeeList t ON t.EmployeeID = s.EmployeeID AND s.[Year] = @Year AND s.[Month] = @Month
				)
	END

	CREATE TABLE #tblAllowance (EmployeeID INT, AllowanceID INT, ReceiveAmount MONEY, TotalPaidDays FLOAT)

	--     1	Seniority allowance
	-- 2	Production bonus
	-- 3	Foreign language allowance
	-- 4	Environmental allowance
	-- 5	Shift allowance
	-- 6	Fuel allowance
	-- 7	Professional allowance
	-- 8	Attendance allowance
	-- 9	Meal allowance
	-- 10	Regional (area) allowance
	-- 11	Incentive allowance
	-- 12	Key process allowance
	-- 13	Bonus 6 month
	-- 14	Performance & Responsibility
	-- TRIPOD: Xử lý các allowance
	EXEC sp_ProcessSeniorityAllowance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @isView = 1

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 1, SeniorityAmount, WorkingDays
	FROM tblSeniorityAllowance
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND SeniorityAmount > 0

	SELECT EmployeeID, COUNT(1) CntLanguage, CAST(NULL AS FLOAT) AttDays, CAST(NULL AS MONEY) AmountAllowance, al.Parameter Min_AttDays, al.DefaultAmount
	INTO #tmpEmployeeForeignLanguage
	FROM tblEmployeeForeignLanguage
	LEFT JOIN tblAllowanceSetting AS al ON al.AllowanceID = 3
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND @FromDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31') AND @ToDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31')
	GROUP BY EmployeeID, al.Parameter, al.DefaultAmount

	DELETE
	FROM #tmpEmployeeForeignLanguage
	WHERE EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE a.EmployeeID = #tmpEmployeeForeignLanguage.EmployeeID AND a.WorkingDays_Total < #tmpEmployeeForeignLanguage.Min_AttDays
			)

	UPDATE #tmpEmployeeForeignLanguage
	SET AttDays = a.WorkingDays_Total
	FROM #tmpEmployeeForeignLanguage e
	INNER JOIN #AttendanceSummary a ON e.EmployeeID = a.EmployeeID

	UPDATE #tmpEmployeeForeignLanguage
	SET AmountAllowance = CntLanguage * DefaultAmount
	FROM #tmpEmployeeForeignLanguage

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 3, AmountAllowance, AttDays
	FROM #tmpEmployeeForeignLanguage

	--petro
	SELECT e.EmployeeID, a.WorkingDays_Total, DefaultAmount, al.AllowanceID
	INTO #PetroAllowance
	FROM #tmpEmployeeList e
	INNER JOIN #AttendanceSummary a ON a.EmployeeID = e.EmployeeID
	LEFT JOIN tblAllowanceSetting al ON al.AllowanceID = 6
	WHERE a.WorkingDays_Total > al.Parameter AND Probationary = 0 AND ISNULL(IsForeign, 0) = 0

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 6, DefaultAmount, WorkingDays_Total
	FROM #PetroAllowance

	SELECT e.EmployeeID, e.PositionID, p.PositionAllowance AmountAllowance, aL.WorkingDays_Total
	INTO #FullAttendance
	FROM #tmpEmployeeList e
	INNER JOIN tblPosition p ON p.PositionID = e.PositionID
	INNER JOIN #AttendanceSummary al ON al.EmployeeID = e.EmployeeID
	WHERE p.PositionAllowance > 0 AND Probationary = 0 AND (ISNULL(WorkingHrs_Total, 0) + ISNULL(PaidLeaveHrs_Total, 0)) = RegularWorkdays * ISNULL(Std_Hour_PerDays, 0) AND ISNULL(IsForeign, 0) = 0

	SELECT lv.*
	INTO #lvHistory
	FROM tblLvHistory lv
	INNER JOIN tblLeaveType lt ON lt.LeaveCode = lv.LeaveCode
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #FullAttendance
			) AND LeaveDate BETWEEN @FromDate AND @ToDate AND lt.CutDiligent = 1

	DELETE
	FROM #FullAttendance
	WHERE EXISTS (
			SELECT 1
			FROM #lvHistory l
			WHERE l.EmployeeID = #FullAttendance.EmployeeID
			) OR EXISTS (
			SELECT *
			FROM tblInLateOutEarly ie
			WHERE ie.EmployeeID = #FullAttendance.EmployeeID AND IODate BETWEEN @FromDate AND @ToDate AND ie.ApprovedDeduct = 1
			)

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 8, AmountAllowance, WorkingDays_Total
	FROM #FullAttendance

	-- Dynamic pivot + merge #tblAllowance -> tblCustomInputImportMonthly
	DECLARE @YearParam NVARCHAR(10) = CAST(@Year AS NVARCHAR(10));
	DECLARE @MonthParam NVARCHAR(10) = CAST(@Month AS NVARCHAR(10));
	DECLARE @cols NVARCHAR(MAX), @colsList NVARCHAR(MAX), @colsUpdate NVARCHAR(MAX), @colsInsert NVARCHAR(MAX), @colsValues NVARCHAR(MAX), @sql NVARCHAR(MAX);

	-- 1) Build quoted column list from AllowanceID values that actually exist as columns in target table
	SELECT @cols = STUFF((
				SELECT ',' + QUOTENAME(CAST(a.AllowanceID AS NVARCHAR(50)))
				FROM (
					SELECT DISTINCT AllowanceID
					FROM #tblAllowance
					) a
				INNER JOIN sys.columns c ON c.name = CAST(a.AllowanceID AS NVARCHAR(50)) AND c.object_id = OBJECT_ID(N'dbo.tblCustomInputImportMonthly')
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

	IF @cols IS NULL OR LEN(@cols) = 0
	BEGIN
		PRINT 'No matching AllowanceID columns found in tblCustomInputImportMonthly. Skipping pivot/merge.';
	END
	ELSE
	BEGIN
		-- 2) Build helper fragments (unquoted names for iteration)
		-- @cols contains something like: [1],[2],[5]
		-- Extract bare names into XML to iterate
		SELECT @colsList = REPLACE(REPLACE(REPLACE(@cols, '[', ''), ']', ''), ' ', '');

		-- Build update assignments: t.[1] = ISNULL(s.[1],0), ...
		SELECT @colsUpdate = STUFF((
					SELECT ', t.' + QUOTENAME(value) + ' = ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- Build insert columns and corresponding values list
		SELECT @colsInsert = STUFF((
					SELECT ',' + QUOTENAME(value)
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

		SELECT @colsValues = STUFF((
					SELECT ', ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- 3) Build and execute dynamic pivot + merge
		SET @sql = N'
    -- create aggregated source (sum per employee per allowance)
    SELECT CAST(AllowanceID AS NVARCHAR(50)) AS AllowanceIDStr, EmployeeID, SUM(ISNULL(ReceiveAmount,0)) AS ReceiveAmount
    INTO ##srcAllowance
    FROM #tblAllowance

    GROUP BY CAST(AllowanceID AS NVARCHAR(50)), EmployeeID;

    -- pivot into wide table
    SELECT EmployeeID, ' + @cols + N'
    INTO ##tmpAllowancePivot
    FROM (
        SELECT EmployeeID, AllowanceIDStr, ReceiveAmount FROM ##srcAllowance
    ) src
    PIVOT (
        SUM(ReceiveAmount) FOR AllowanceIDStr IN (' + @cols + N')
    ) pvt;

    -- MERGE into target
    MERGE dbo.tblCustomInputImportMonthly AS t
    USING ##tmpAllowancePivot AS s
    ON t.EmployeeID = s.EmployeeID AND t.[Year] = ' + @YearParam + N' AND t.[Month] = ' + @MonthParam + N'
    WHEN MATCHED THEN
        UPDATE SET ' + @colsUpdate + N'
    WHEN NOT MATCHED THEN
        INSERT (EmployeeID, [Year], [Month], ' + @colsInsert + N')
        VALUES (s.EmployeeID, ' + @YearParam + N', ' +
			@MonthParam + N', ' + @colsValues + N');

    DROP TABLE ##srcAllowance;
    DROP TABLE ##tmpAllowancePivot;';

		EXEC sp_executesql @sql;
	END

	UPDATE tsh
	SET SalaryHistoryID = att.SalaryHistoryID
	FROM tblCustomInputImportMonthly AS tsh
	INNER JOIN #AttendanceSummary AS att ON tsh.EmployeeID = att.EmployeeID AND tsh.[Year] = att.[Year] AND tsh.[Month] = att.[Month]
	WHERE tsh.[Year] = @Year AND tsh.[Month] = @Month AND tsh.EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			);

	EXEC sp_AllowanceMonthly @Year = @Year, @Month = @Month

	IF (@SalCal = 1)
	BEGIN
		RETURN
	END
END
GO


if object_id('[dbo].[sp_processAllAllowance]') is null
	EXEC ('CREATE PROCEDURE [dbo].[sp_processAllAllowance] as select 1')
GO

ALTER PROCEDURE [dbo].[sp_processAllAllowance] (@LoginID INT = 3, @Year INT, @Month INT, @SalCal BIT = 0)
AS
BEGIN
	DECLARE @FromDate DATE, @ToDate DATE

	SELECT @FromDate = FromDate, @ToDate = ToDate
	FROM dbo.fn_Get_SalaryPeriod(@Month, @Year)

	SELECT f.EmployeeID, FullName, HireDate, LastWorkingDate, CAST(0 AS INT) Prio, f.DepartmentID, f.DivisionID, f.PositionID, s.SectionID, s.SectionName, ROW_NUMBER() OVER (
			ORDER BY f.EmployeeID
			) STTView, d.DepartmentName, p.PositionNameEN PositionName, CASE
			WHEN f.ProbationEndDate > @FromDate
				THEN 1
			ELSE 0
			END AS Probationary, f.IsForeign
	INTO #tmpEmployeeList
	FROM dbo.fn_vtblEmployeeList_Simple_ByDate(@ToDate, '-1', @LoginId) f
	LEFT JOIN tblSection s ON s.SectionID = f.SectionID
	LEFT JOIN tblDepartment d ON d.DepartmentID = f.DepartmentID
	LEFT JOIN tblPosition p ON p.PositionID = f.PositionID

	SELECT a.*
	INTO #AttendanceSummary
	FROM tblAttendanceSummary a
	INNER JOIN #tmpEmployeeList e ON e.EmployeeID = a.EmployeeID
	WHERE Year = @Year AND Month = @Month

	IF EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE EmployeeID NOT IN (
					SELECT s.EmployeeID
					FROM tblCustomInputImportMonthly s
					INNER JOIN #tmpEmployeeList t ON t.EmployeeID = s.EmployeeID AND s.[Year] = @Year AND s.[Month] = @Month
					)
			)
	BEGIN
		INSERT INTO tblCustomInputImportMonthly (EmployeeID, [Year], [Month])
		SELECT EmployeeID, @Year, @Month
		FROM #AttendanceSummary a
		WHERE EmployeeID NOT IN (
				SELECT s.EmployeeID
				FROM tblCustomInputImportMonthly s
				INNER JOIN #tmpEmployeeList t ON t.EmployeeID = s.EmployeeID AND s.[Year] = @Year AND s.[Month] = @Month
				)
	END

	CREATE TABLE #tblAllowance (EmployeeID INT, AllowanceID INT, ReceiveAmount MONEY, TotalPaidDays FLOAT)

	--     1	Seniority allowance
	-- 2	Production bonus
	-- 3	Foreign language allowance
	-- 4	Environmental allowance
	-- 5	Shift allowance
	-- 6	Fuel allowance
	-- 7	Professional allowance
	-- 8	Attendance allowance
	-- 9	Meal allowance
	-- 10	Regional (area) allowance
	-- 11	Incentive allowance
	-- 12	Key process allowance
	-- 13	Bonus 6 month
	-- 14	Performance & Responsibility
	-- TRIPOD: Xử lý các allowance
	EXEC sp_ProcessSeniorityAllowance @LoginID = @LoginID, @Year = @Year, @Month = @Month, @isView = 1

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 1, SeniorityAmount, WorkingDays
	FROM tblSeniorityAllowance
	WHERE Month = @Month AND Year = @Year AND EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND SeniorityAmount > 0

	SELECT EmployeeID, COUNT(1) CntLanguage, CAST(NULL AS FLOAT) AttDays, CAST(NULL AS MONEY) AmountAllowance, al.Parameter Min_AttDays, al.DefaultAmount
	INTO #tmpEmployeeForeignLanguage
	FROM tblEmployeeForeignLanguage
	LEFT JOIN tblAllowanceSetting AS al ON al.AllowanceID = 3
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			WHERE ISNULL(IsForeign, 0) = 0
			) AND @FromDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31') AND @ToDate BETWEEN EffectiveDate AND ISNULL(ExpiryDate, '9999-12-31')
	GROUP BY EmployeeID, al.Parameter, al.DefaultAmount

	DELETE
	FROM #tmpEmployeeForeignLanguage
	WHERE EXISTS (
			SELECT *
			FROM #AttendanceSummary a
			WHERE a.EmployeeID = #tmpEmployeeForeignLanguage.EmployeeID AND a.WorkingDays_Total < #tmpEmployeeForeignLanguage.Min_AttDays
			)

	UPDATE #tmpEmployeeForeignLanguage
	SET AttDays = a.WorkingDays_Total
	FROM #tmpEmployeeForeignLanguage e
	INNER JOIN #AttendanceSummary a ON e.EmployeeID = a.EmployeeID

	UPDATE #tmpEmployeeForeignLanguage
	SET AmountAllowance = CntLanguage * DefaultAmount
	FROM #tmpEmployeeForeignLanguage

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 3, AmountAllowance, AttDays
	FROM #tmpEmployeeForeignLanguage

	--petro
	SELECT e.EmployeeID, a.WorkingDays_Total, DefaultAmount, al.AllowanceID
	INTO #PetroAllowance
	FROM #tmpEmployeeList e
	INNER JOIN #AttendanceSummary a ON a.EmployeeID = e.EmployeeID
	LEFT JOIN tblAllowanceSetting al ON al.AllowanceID = 6
	WHERE a.WorkingDays_Total > al.Parameter AND Probationary = 0 AND ISNULL(IsForeign, 0) = 0

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 6, DefaultAmount, WorkingDays_Total
	FROM #PetroAllowance

	SELECT e.EmployeeID, e.PositionID, p.PositionAllowance AmountAllowance, aL.WorkingDays_Total
	INTO #FullAttendance
	FROM #tmpEmployeeList e
	INNER JOIN tblPosition p ON p.PositionID = e.PositionID
	INNER JOIN #AttendanceSummary al ON al.EmployeeID = e.EmployeeID
	WHERE p.PositionAllowance > 0 AND Probationary = 0 AND (ISNULL(WorkingHrs_Total, 0) + ISNULL(PaidLeaveHrs_Total, 0)) = RegularWorkdays * ISNULL(Std_Hour_PerDays, 0) AND ISNULL(IsForeign, 0) = 0

	SELECT lv.*
	INTO #lvHistory
	FROM tblLvHistory lv
	INNER JOIN tblLeaveType lt ON lt.LeaveCode = lv.LeaveCode
	WHERE EmployeeID IN (
			SELECT EmployeeID
			FROM #FullAttendance
			) AND LeaveDate BETWEEN @FromDate AND @ToDate AND lt.CutDiligent = 1

	DELETE
	FROM #FullAttendance
	WHERE EXISTS (
			SELECT 1
			FROM #lvHistory l
			WHERE l.EmployeeID = #FullAttendance.EmployeeID
			) OR EXISTS (
			SELECT *
			FROM tblInLateOutEarly ie
			WHERE ie.EmployeeID = #FullAttendance.EmployeeID AND IODate BETWEEN @FromDate AND @ToDate AND ie.ApprovedDeduct = 1
			)

	INSERT INTO #tblAllowance (EmployeeID, AllowanceID, ReceiveAmount, TotalPaidDays)
	SELECT EmployeeID, 8, AmountAllowance, WorkingDays_Total
	FROM #FullAttendance

	-- Dynamic pivot + merge #tblAllowance -> tblCustomInputImportMonthly
	DECLARE @YearParam NVARCHAR(10) = CAST(@Year AS NVARCHAR(10));
	DECLARE @MonthParam NVARCHAR(10) = CAST(@Month AS NVARCHAR(10));
	DECLARE @cols NVARCHAR(MAX), @colsList NVARCHAR(MAX), @colsUpdate NVARCHAR(MAX), @colsInsert NVARCHAR(MAX), @colsValues NVARCHAR(MAX), @sql NVARCHAR(MAX);

	-- 1) Build quoted column list from AllowanceID values that actually exist as columns in target table
	SELECT @cols = STUFF((
				SELECT ',' + QUOTENAME(CAST(a.AllowanceID AS NVARCHAR(50)))
				FROM (
					SELECT DISTINCT AllowanceID
					FROM #tblAllowance
					) a
				INNER JOIN sys.columns c ON c.name = CAST(a.AllowanceID AS NVARCHAR(50)) AND c.object_id = OBJECT_ID(N'dbo.tblCustomInputImportMonthly')
				FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

	IF @cols IS NULL OR LEN(@cols) = 0
	BEGIN
		PRINT 'No matching AllowanceID columns found in tblCustomInputImportMonthly. Skipping pivot/merge.';
	END
	ELSE
	BEGIN
		-- 2) Build helper fragments (unquoted names for iteration)
		-- @cols contains something like: [1],[2],[5]
		-- Extract bare names into XML to iterate
		SELECT @colsList = REPLACE(REPLACE(REPLACE(@cols, '[', ''), ']', ''), ' ', '');

		-- Build update assignments: t.[1] = ISNULL(s.[1],0), ...
		SELECT @colsUpdate = STUFF((
					SELECT ', t.' + QUOTENAME(value) + ' = ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- Build insert columns and corresponding values list
		SELECT @colsInsert = STUFF((
					SELECT ',' + QUOTENAME(value)
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 1, '');

		SELECT @colsValues = STUFF((
					SELECT ', ISNULL(s.' + QUOTENAME(value) + ',0)'
					FROM (
						SELECT value = y.i.value('.', 'NVARCHAR(4000)')
						FROM (
							SELECT CONVERT(XML, '<r>' + REPLACE(@colsList, ',', '</r><r>') + '</r>') AS xmlcol
							) z
						CROSS APPLY xmlcol.nodes('/r') y(i)
						) t
					FOR XML PATH(''), TYPE
					).value('.', 'NVARCHAR(MAX)'), 1, 2, '');

		-- 3) Build and execute dynamic pivot + merge
		SET @sql = N'
    -- create aggregated source (sum per employee per allowance)
    SELECT CAST(AllowanceID AS NVARCHAR(50)) AS AllowanceIDStr, EmployeeID, SUM(ISNULL(ReceiveAmount,0)) AS ReceiveAmount
    INTO ##srcAllowance
    FROM #tblAllowance

    GROUP BY CAST(AllowanceID AS NVARCHAR(50)), EmployeeID;

    -- pivot into wide table
    SELECT EmployeeID, ' + @cols + N'
    INTO ##tmpAllowancePivot
    FROM (
        SELECT EmployeeID, AllowanceIDStr, ReceiveAmount FROM ##srcAllowance
    ) src
    PIVOT (
        SUM(ReceiveAmount) FOR AllowanceIDStr IN (' + @cols + N')
    ) pvt;

    -- MERGE into target
    MERGE dbo.tblCustomInputImportMonthly AS t
    USING ##tmpAllowancePivot AS s
    ON t.EmployeeID = s.EmployeeID AND t.[Year] = ' + @YearParam + N' AND t.[Month] = ' + @MonthParam + N'
    WHEN MATCHED THEN
        UPDATE SET ' + @colsUpdate + N'
    WHEN NOT MATCHED THEN
        INSERT (EmployeeID, [Year], [Month], ' + @colsInsert + N')
        VALUES (s.EmployeeID, ' + @YearParam + N', ' +
			@MonthParam + N', ' + @colsValues + N');

    DROP TABLE ##srcAllowance;
    DROP TABLE ##tmpAllowancePivot;';

		EXEC sp_executesql @sql;
	END

	UPDATE tsh
	SET SalaryHistoryID = att.SalaryHistoryID
	FROM tblCustomInputImportMonthly AS tsh
	INNER JOIN #AttendanceSummary AS att ON tsh.EmployeeID = att.EmployeeID AND tsh.[Year] = att.[Year] AND tsh.[Month] = att.[Month]
	WHERE tsh.[Year] = @Year AND tsh.[Month] = @Month AND tsh.EmployeeID IN (
			SELECT EmployeeID
			FROM #tmpEmployeeList
			);

    --Đảm bảo cho NNN k bị tính nhầm allowance
    SET @cols = ''
    SELECT @cols += QUOTENAME(AllowanceID) + ' = NULL,' 
    FROM tblAllowanceSetting WHERE ISNULL(IsGrossAllowance_InNetSal, 0) = 0

    SET @sql = 'UPDATE tblCustomInputImportMonthly SET ' + LEFT(@cols, LEN(@cols) -1) +
               ' WHERE [Year] = ' + CAST(@Year AS NVARCHAR(10)) + ' AND [Month] = ' + CAST(@Month AS NVARCHAR(10)) +
               ' AND EmployeeID IN (SELECT EmployeeID FROM #tmpEmployeeList WHERE ISNULL(IsForeign, 0) = 1)';

	EXEC sp_executesql @sql;

	EXEC sp_AllowanceMonthly @Year = @Year, @Month = @Month

	IF (@SalCal = 1)
	BEGIN
		RETURN
	END
END
GO

delete from tblAllowanceSetting 

SET IDENTITY_INSERT tblAllowanceSetting ON
insert into tblAllowanceSetting(AllowanceID,AllowanceCode,AllowanceName,ForSalary,Customize,DefaultAmount,AllowanceRuleID,Visible,TaxfreeMaxAmount,IsHouseAllowance,isUniformAllowance,IncludedIns,Ord,IncludedSalOT,BasedOnSalaryScale,AllowanceNameEN,IsTaxable,IsGrossAllowance_InNetSal,IsMutilCurrencyCode,IsNotLabourCost,AllowanceSettingName,GroupAllowanceName_PRVN,StillHasTaxExemptionWhenTempContract,MonthlyCustomAmountColumnName,ViewTaxedAmountAsReceiveAmount,IsBounus,UserDisplayCode,AllowanceNameCN,RuleDescription,Parameter,AllowanceGrossSalary)
select AllowanceID,AllowanceCode,AllowanceName,ForSalary,Customize,DefaultAmount,AllowanceRuleID,Visible,TaxfreeMaxAmount,IsHouseAllowance,isUniformAllowance,IncludedIns,Ord,IncludedSalOT,BasedOnSalaryScale,AllowanceNameEN,IsTaxable,IsGrossAllowance_InNetSal,IsMutilCurrencyCode,IsNotLabourCost,AllowanceSettingName,GroupAllowanceName_PRVN,StillHasTaxExemptionWhenTempContract,MonthlyCustomAmountColumnName,ViewTaxedAmountAsReceiveAmount,IsBounus,UserDisplayCode,AllowanceNameCN,RuleDescription,Parameter,AllowanceGrossSalary
from (	select CAST(1 as int) AllowanceID,CAST(N'1' as varchar(20)) AllowanceCode,CAST(N'Seniority allowance' as nvarchar(200)) AllowanceName,CAST(1 as bit) ForSalary,CAST(NULL as bit) Customize,CAST(NULL as money) DefaultAmount,CAST(999 as int) AllowanceRuleID,CAST(1 as bit) Visible,CAST(NULL as money) TaxfreeMaxAmount,CAST(NULL as bit) IsHouseAllowance,CAST(NULL as bit) isUniformAllowance,CAST(NULL as bit) IncludedIns,CAST(1 as int) Ord,CAST(0 as bit) IncludedSalOT,CAST(NULL as bit) BasedOnSalaryScale,CAST(N'Seniority allowance (long term)' as nvarchar(500)) AllowanceNameEN,CAST(1 as bit) IsTaxable,CAST(NULL as bit) IsGrossAllowance_InNetSal,CAST(NULL as bit) IsMutilCurrencyCode,CAST(NULL as bit) IsNotLabourCost,CAST(NULL as nvarchar(255)) AllowanceSettingName,CAST(NULL as nvarchar(50)) GroupAllowanceName_PRVN,CAST(NULL as bit) StillHasTaxExemptionWhenTempContract,CAST(NULL as varchar(100)) MonthlyCustomAmountColumnName,CAST(NULL as bit) ViewTaxedAmountAsReceiveAmount,CAST(NULL as bit) IsBounus,CAST(NULL as varchar(100)) UserDisplayCode,CAST(NULL as nvarchar(255)) AllowanceNameCN,CAST(N'Parameter Number of Working days must be >=  5 From 2nd year: 30k/month From 3rd ~ 5th year: 40 ~ 60k/month From 6th ~ 10th year: 90 ~ 130k/month From 11th ~ 14th year: 160 ~ 190k/month From 15th year and above: 200k/month' as nvarchar(max)) RuleDescription,CAST(5 as int) Parameter,CAST(NULL as bit) AllowanceGrossSalary	union all select 2,N'2',N'Production bonus',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,2,0,NULL,N'Production bonus',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,N'1. Number of Working days >= 152. Only applicable to department manager, supervisors, Group leaders, Leaders.3. There are 2 levels:- Level 1: gross salary * 10%- Level 2: gross salary * 20%',15,1	union all select 3,N'3',N'Foreign language allowance',1,NULL,2000000,999,1,NULL,NULL,NULL,NULL,3,0,NULL,N'Foreign language allowance',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,N'Number of Working days must be >=  15',15,1	union all select 4,N'4',N'Environmental allowance',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,4,0,NULL,N'Environmental allowance',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1	union all select 5,N'5',N'Shift allowance',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,5,0,NULL,N'Shift allowance',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1	union all select 6,N'6',N'Fuel allowance',1,NULL,500000,999,1,NULL,NULL,NULL,NULL,6,NULL,NULL,N'Fuel allowance',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,N'Number of Working days must be creater than 5, not applicable for probationary employees',5,NULL	union all select 7,N'7',N'Professional allowance',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,7,0,NULL,N'Professional allowance',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1	union all select 8,N'8',N'Attendance allowance',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,8,NULL,NULL,N'Attendance allowance',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,N'Master data in position list',NULL,NULL	union all select 9,N'9',N'Meal allowance',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,9,NULL,NULL,N'Meal allowance',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL	union all select 10,N'10',N'Regional (area) allowance',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,10,0,NULL,N'Regional(area) allowance',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1	union all select 11,N'11',N'Incentive allowance',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,11,NULL,NULL,N'Incentive allowance',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL	union all select 12,N'12',N'Key process allowance',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,12,NULL,NULL,N'Key process allowance',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL	union all select 13,N'13',N'Bonus 6 month',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,13,NULL,NULL,N'Bonus 6 month',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL	union all select 14,N'14',N'Performance & Responsibility',0,NULL,NULL,1,1,NULL,NULL,NULL,NULL,14,NULL,NULL,N'Performance & Responsibility',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1	union all select 15,N'15',N'Bonus 6 month full attendance',1,NULL,600000,1,1,NULL,NULL,NULL,NULL,15,NULL,NULL,N'Bonus 6 month full attendance',1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,N'Work for 6 months without being late or leaving early',NULL,NULL	union all select 16,N'16',N'[Foreign] Meal allowance',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,16,NULL,NULL,N'[Foreign] Meal allowance',1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,N'Meal allowance for foreign',NULL,NULL	union all select 17,N'17',N'[Foreign] House allowance',1,NULL,NULL,999,1,NULL,NULL,NULL,NULL,17,NULL,NULL,N'[Foreign] House allowance',1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,N'House rent allowance for foreign',NULL,NULL) tmpData
SET IDENTITY_INSERT tblAllowanceSetting OFF